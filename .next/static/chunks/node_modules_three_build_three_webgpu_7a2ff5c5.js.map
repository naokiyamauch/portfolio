{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/naokiyamauchi/github/portfolio/node_modules/three/build/three.webgpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nimport { Color, Vector2, Vector3, Vector4, Matrix2, Matrix3, Matrix4, EventDispatcher, MathUtils, WebGLCoordinateSystem, WebGPUCoordinateSystem, ColorManagement, SRGBTransfer, NoToneMapping, StaticDrawUsage, InterleavedBuffer, InterleavedBufferAttribute, DynamicDrawUsage, NoColorSpace, UnsignedIntType, IntType, NearestFilter, Sphere, BackSide, Euler, CubeReflectionMapping, CubeRefractionMapping, TangentSpaceNormalMap, ObjectSpaceNormalMap, InstancedInterleavedBuffer, InstancedBufferAttribute, DataArrayTexture, FloatType, FramebufferTexture, LinearMipmapLinearFilter, DepthTexture, Material, NormalBlending, LineBasicMaterial, LineDashedMaterial, NoBlending, MeshNormalMaterial, SRGBColorSpace, WebGLCubeRenderTarget, BoxGeometry, Mesh, Scene, LinearFilter, CubeCamera, CubeTexture, EquirectangularReflectionMapping, EquirectangularRefractionMapping, AddOperation, MixOperation, MultiplyOperation, MeshBasicMaterial, MeshLambertMaterial, MeshPhongMaterial, OrthographicCamera, PerspectiveCamera, RenderTarget, CubeUVReflectionMapping, BufferGeometry, BufferAttribute, LinearSRGBColorSpace, RGBAFormat, HalfFloatType, Texture, MeshStandardMaterial, MeshPhysicalMaterial, MeshToonMaterial, MeshMatcapMaterial, SpriteMaterial, PointsMaterial, ShadowMaterial, Uint32BufferAttribute, Uint16BufferAttribute, arrayNeedsUint32, DoubleSide, Camera, DepthArrayTexture, DepthStencilFormat, DepthFormat, UnsignedInt248Type, UnsignedByteType, Plane, Object3D, LinearMipMapLinearFilter, Float32BufferAttribute, UVMapping, VSMShadowMap, LessCompare, RGFormat, BasicShadowMap, SphereGeometry, RenderTargetArray, LinearMipmapNearestFilter, NearestMipmapLinearFilter, Float16BufferAttribute, REVISION, ArrayCamera, PlaneGeometry, FrontSide, CustomBlending, AddEquation, ZeroFactor, CylinderGeometry, Quaternion, WebXRController, RAD2DEG, PCFShadowMap, FrustumArray, Frustum, DataTexture, RedIntegerFormat, RedFormat, ShortType, ByteType, UnsignedShortType, RGIntegerFormat, RGBIntegerFormat, RGBFormat, RGBAIntegerFormat, warnOnce, createCanvasElement, ReverseSubtractEquation, SubtractEquation, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, DstAlphaFactor, DstColorFactor, SrcAlphaSaturateFactor, SrcAlphaFactor, SrcColorFactor, OneFactor, CullFaceNone, CullFaceBack, CullFaceFront, MultiplyBlending, SubtractiveBlending, AdditiveBlending, NotEqualDepth, GreaterDepth, GreaterEqualDepth, EqualDepth, LessEqualDepth, LessDepth, AlwaysDepth, NeverDepth, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedInt5999Type, AlphaFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_BPTC_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, NearestMipmapNearestFilter, NotEqualCompare, GreaterCompare, GreaterEqualCompare, EqualCompare, LessEqualCompare, AlwaysCompare, NeverCompare, NotEqualStencilFunc, GreaterStencilFunc, GreaterEqualStencilFunc, EqualStencilFunc, LessEqualStencilFunc, LessStencilFunc, AlwaysStencilFunc, NeverStencilFunc, DecrementWrapStencilOp, IncrementWrapStencilOp, DecrementStencilOp, IncrementStencilOp, InvertStencilOp, ReplaceStencilOp, ZeroStencilOp, KeepStencilOp, MaxEquation, MinEquation, SpotLight, PointLight, DirectionalLight, RectAreaLight, AmbientLight, HemisphereLight, LightProbe, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping, AgXToneMapping, NeutralToneMapping, Group, Loader, FileLoader, MaterialLoader, ObjectLoader } from './three.core.js';\nexport { AdditiveAnimationBlendMode, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BasicDepthPacking, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxHelper, BufferGeometryLoader, Cache, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CircleGeometry, Clock, ColorKeyframeTrack, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, ConstantAlphaFactor, ConstantColorFactor, Controls, CubeTextureLoader, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceFrontBack, Curve, CurvePath, CustomToneMapping, Cylindrical, Data3DTexture, DataTextureLoader, DataUtils, DefaultLoadingManager, DetachedBindMode, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DynamicCopyUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, ExtrudeGeometry, Fog, FogExp2, GLBufferAttribute, GLSL1, GLSL3, GridHelper, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, InstancedBufferGeometry, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InterpolationSamplingMode, InterpolationSamplingType, KeyframeTrack, LOD, LatheGeometry, Layers, Light, Line, Line3, LineCurve, LineCurve3, LineLoop, LineSegments, LinearInterpolant, LinearMipMapNearestFilter, LinearTransfer, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, MOUSE, MeshDepthMaterial, MeshDistanceMaterial, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NormalAnimationBlendMode, NumberKeyframeTrack, OctahedronGeometry, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, PCFSoftShadowMap, Path, PlaneHelper, PointLightHelper, Points, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RGBADepthPacking, RGBDepthPacking, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGDepthPacking, RawShaderMaterial, Ray, Raycaster, RenderTarget3D, RingGeometry, ShaderMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, Skeleton, SkeletonHelper, SkinnedMesh, Source, Spherical, SphericalHarmonics3, SplineCurve, SpotLightHelper, Sprite, StaticCopyUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, TOUCH, TetrahedronGeometry, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLRenderTarget, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroSlopeEnding } from './three.core.js';\n\nconst refreshUniforms = [\n\t'alphaMap',\n\t'alphaTest',\n\t'anisotropy',\n\t'anisotropyMap',\n\t'anisotropyRotation',\n\t'aoMap',\n\t'attenuationColor',\n\t'attenuationDistance',\n\t'bumpMap',\n\t'clearcoat',\n\t'clearcoatMap',\n\t'clearcoatNormalMap',\n\t'clearcoatNormalScale',\n\t'clearcoatRoughness',\n\t'color',\n\t'dispersion',\n\t'displacementMap',\n\t'emissive',\n\t'emissiveMap',\n\t'envMap',\n\t'gradientMap',\n\t'ior',\n\t'iridescence',\n\t'iridescenceIOR',\n\t'iridescenceMap',\n\t'iridescenceThicknessMap',\n\t'lightMap',\n\t'map',\n\t'matcap',\n\t'metalness',\n\t'metalnessMap',\n\t'normalMap',\n\t'normalScale',\n\t'opacity',\n\t'roughness',\n\t'roughnessMap',\n\t'sheen',\n\t'sheenColor',\n\t'sheenColorMap',\n\t'sheenRoughnessMap',\n\t'shininess',\n\t'specular',\n\t'specularColor',\n\t'specularColorMap',\n\t'specularIntensity',\n\t'specularIntensityMap',\n\t'specularMap',\n\t'thickness',\n\t'transmission',\n\t'transmissionMap'\n];\n\n/**\n * This class is used by {@link WebGPURenderer} as management component.\n * It's primary purpose is to determine whether render objects require a\n * refresh right before they are going to be rendered or not.\n */\nclass NodeMaterialObserver {\n\n\t/**\n\t * Constructs a new node material observer.\n\t *\n\t * @param {NodeBuilder} builder - The node builder.\n\t */\n\tconstructor( builder ) {\n\n\t\t/**\n\t\t * A node material can be used by more than one render object so the\n\t\t * monitor must maintain a list of render objects.\n\t\t *\n\t\t * @type {WeakMap<RenderObject,Object>}\n\t\t */\n\t\tthis.renderObjects = new WeakMap();\n\n\t\t/**\n\t\t * Whether the material uses node objects or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.hasNode = this.containsNode( builder );\n\n\t\t/**\n\t\t * Whether the node builder's 3D object is animated or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.hasAnimation = builder.object.isSkinnedMesh === true;\n\n\t\t/**\n\t\t * A list of all possible material uniforms\n\t\t *\n\t\t * @type {Array<string>}\n\t\t */\n\t\tthis.refreshUniforms = refreshUniforms;\n\n\t\t/**\n\t\t * Holds the current render ID from the node frame.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.renderId = 0;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given render object is verified for the first time of this observer.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether the given render object is verified for the first time of this observer.\n\t */\n\tfirstInitialization( renderObject ) {\n\n\t\tconst hasInitialized = this.renderObjects.has( renderObject );\n\n\t\tif ( hasInitialized === false ) {\n\n\t\t\tthis.getRenderObjectData( renderObject );\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns `true` if the current rendering produces motion vectors.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {boolean} Whether the current rendering produces motion vectors or not.\n\t */\n\tneedsVelocity( renderer ) {\n\n\t\tconst mrt = renderer.getMRT();\n\n\t\treturn ( mrt !== null && mrt.has( 'velocity' ) );\n\n\t}\n\n\t/**\n\t * Returns monitoring data for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {Object} The monitoring data.\n\t */\n\tgetRenderObjectData( renderObject ) {\n\n\t\tlet data = this.renderObjects.get( renderObject );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconst { geometry, material, object } = renderObject;\n\n\t\t\tdata = {\n\t\t\t\tmaterial: this.getMaterialData( material ),\n\t\t\t\tgeometry: {\n\t\t\t\t\tid: geometry.id,\n\t\t\t\t\tattributes: this.getAttributesData( geometry.attributes ),\n\t\t\t\t\tindexVersion: geometry.index ? geometry.index.version : null,\n\t\t\t\t\tdrawRange: { start: geometry.drawRange.start, count: geometry.drawRange.count }\n\t\t\t\t},\n\t\t\t\tworldMatrix: object.matrixWorld.clone()\n\t\t\t};\n\n\t\t\tif ( object.center ) {\n\n\t\t\t\tdata.center = object.center.clone();\n\n\t\t\t}\n\n\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\tdata.morphTargetInfluences = object.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( renderObject.bundle !== null ) {\n\n\t\t\t\tdata.version = renderObject.bundle.version;\n\n\t\t\t}\n\n\t\t\tif ( data.material.transmission > 0 ) {\n\n\t\t\t\tconst { width, height } = renderObject.context;\n\n\t\t\t\tdata.bufferWidth = width;\n\t\t\t\tdata.bufferHeight = height;\n\n\t\t\t}\n\n\t\t\tthis.renderObjects.set( renderObject, data );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns an attribute data structure holding the attributes versions for\n\t * monitoring.\n\t *\n\t * @param {Object} attributes - The geometry attributes.\n\t * @return {Object} An object for monitoring the versions of attributes.\n\t */\n\tgetAttributesData( attributes ) {\n\n\t\tconst attributesData = {};\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tattributesData[ name ] = {\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\treturn attributesData;\n\n\t}\n\n\t/**\n\t * Returns `true` if the node builder's material uses\n\t * node properties.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether the node builder's material uses node properties or not.\n\t */\n\tcontainsNode( builder ) {\n\n\t\tconst material = builder.material;\n\n\t\tfor ( const property in material ) {\n\n\t\t\tif ( material[ property ] && material[ property ].isNode )\n\t\t\t\treturn true;\n\n\t\t}\n\n\t\tif ( builder.renderer.overrideNodes.modelViewMatrix !== null || builder.renderer.overrideNodes.modelNormalViewMatrix !== null )\n\t\t\treturn true;\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns a material data structure holding the material property values for\n\t * monitoring.\n\t *\n\t * @param {Material} material - The material.\n\t * @return {Object} An object for monitoring material properties.\n\t */\n\tgetMaterialData( material ) {\n\n\t\tconst data = {};\n\n\t\tfor ( const property of this.refreshUniforms ) {\n\n\t\t\tconst value = material[ property ];\n\n\t\t\tif ( value === null || value === undefined ) continue;\n\n\t\t\tif ( typeof value === 'object' && value.clone !== undefined ) {\n\n\t\t\t\tif ( value.isTexture === true ) {\n\n\t\t\t\t\tdata[ property ] = { id: value.id, version: value.version };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdata[ property ] = value.clone();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdata[ property ] = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given render object has not changed its state.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether the given render object has changed its state or not.\n\t */\n\tequals( renderObject ) {\n\n\t\tconst { object, material, geometry } = renderObject;\n\n\t\tconst renderObjectData = this.getRenderObjectData( renderObject );\n\n\t\t// world matrix\n\n\t\tif ( renderObjectData.worldMatrix.equals( object.matrixWorld ) !== true ) {\n\n\t\t\trenderObjectData.worldMatrix.copy( object.matrixWorld );\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// material\n\n\t\tconst materialData = renderObjectData.material;\n\n\t\tfor ( const property in materialData ) {\n\n\t\t\tconst value = materialData[ property ];\n\t\t\tconst mtlValue = material[ property ];\n\n\t\t\tif ( value.equals !== undefined ) {\n\n\t\t\t\tif ( value.equals( mtlValue ) === false ) {\n\n\t\t\t\t\tvalue.copy( mtlValue );\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} else if ( mtlValue.isTexture === true ) {\n\n\t\t\t\tif ( value.id !== mtlValue.id || value.version !== mtlValue.version ) {\n\n\t\t\t\t\tvalue.id = mtlValue.id;\n\t\t\t\t\tvalue.version = mtlValue.version;\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} else if ( value !== mtlValue ) {\n\n\t\t\t\tmaterialData[ property ] = mtlValue;\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialData.transmission > 0 ) {\n\n\t\t\tconst { width, height } = renderObject.context;\n\n\t\t\tif ( renderObjectData.bufferWidth !== width || renderObjectData.bufferHeight !== height ) {\n\n\t\t\t\trenderObjectData.bufferWidth = width;\n\t\t\t\trenderObjectData.bufferHeight = height;\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// geometry\n\n\t\tconst storedGeometryData = renderObjectData.geometry;\n\t\tconst attributes = geometry.attributes;\n\t\tconst storedAttributes = storedGeometryData.attributes;\n\n\t\tconst storedAttributeNames = Object.keys( storedAttributes );\n\t\tconst currentAttributeNames = Object.keys( attributes );\n\n\t\tif ( storedGeometryData.id !== geometry.id ) {\n\n\t\t\tstoredGeometryData.id = geometry.id;\n\t\t\treturn false;\n\n\t\t}\n\n\t\tif ( storedAttributeNames.length !== currentAttributeNames.length ) {\n\n\t\t\trenderObjectData.geometry.attributes = this.getAttributesData( attributes );\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compare each attribute\n\n\t\tfor ( const name of storedAttributeNames ) {\n\n\t\t\tconst storedAttributeData = storedAttributes[ name ];\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tif ( attribute === undefined ) {\n\n\t\t\t\t// attribute was removed\n\t\t\t\tdelete storedAttributes[ name ];\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tif ( storedAttributeData.version !== attribute.version ) {\n\n\t\t\t\tstoredAttributeData.version = attribute.version;\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check index\n\n\t\tconst index = geometry.index;\n\t\tconst storedIndexVersion = storedGeometryData.indexVersion;\n\t\tconst currentIndexVersion = index ? index.version : null;\n\n\t\tif ( storedIndexVersion !== currentIndexVersion ) {\n\n\t\t\tstoredGeometryData.indexVersion = currentIndexVersion;\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// check drawRange\n\n\t\tif ( storedGeometryData.drawRange.start !== geometry.drawRange.start || storedGeometryData.drawRange.count !== geometry.drawRange.count ) {\n\n\t\t\tstoredGeometryData.drawRange.start = geometry.drawRange.start;\n\t\t\tstoredGeometryData.drawRange.count = geometry.drawRange.count;\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tif ( renderObjectData.morphTargetInfluences ) {\n\n\t\t\tlet morphChanged = false;\n\n\t\t\tfor ( let i = 0; i < renderObjectData.morphTargetInfluences.length; i ++ ) {\n\n\t\t\t\tif ( renderObjectData.morphTargetInfluences[ i ] !== object.morphTargetInfluences[ i ] ) {\n\n\t\t\t\t\tmorphChanged = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( morphChanged ) return true;\n\n\t\t}\n\n\t\t// center\n\n\t\tif ( renderObjectData.center ) {\n\n\t\t\tif ( renderObjectData.center.equals( object.center ) === false ) {\n\n\t\t\t\trenderObjectData.center.copy( object.center );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// bundle\n\n\t\tif ( renderObject.bundle !== null ) {\n\n\t\t\trenderObjectData.version = renderObject.bundle.version;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Checks if the given render object requires a refresh.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {NodeFrame} nodeFrame - The current node frame.\n\t * @return {boolean} Whether the given render object requires a refresh or not.\n\t */\n\tneedsRefresh( renderObject, nodeFrame ) {\n\n\t\tif ( this.hasNode || this.hasAnimation || this.firstInitialization( renderObject ) || this.needsVelocity( nodeFrame.renderer ) )\n\t\t\treturn true;\n\n\t\tconst { renderId } = nodeFrame;\n\n\t\tif ( this.renderId !== renderId ) {\n\n\t\t\tthis.renderId = renderId;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst isStatic = renderObject.object.static === true;\n\t\tconst isBundle = renderObject.bundle !== null && renderObject.bundle.static === true && this.getRenderObjectData( renderObject ).version === renderObject.bundle.version;\n\n\t\tif ( isStatic || isBundle )\n\t\t\treturn false;\n\n\t\tconst notEqual = this.equals( renderObject ) !== true;\n\n\t\treturn notEqual;\n\n\t}\n\n}\n\n// cyrb53 (c) 2018 bryc (github.com/bryc). License: Public domain. Attribution appreciated.\n// A fast and simple 64-bit (or 53-bit) string hash function with decent collision resistance.\n// Largely inspired by MurmurHash2/3, but with a focus on speed/simplicity.\n// See https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/52171480#52171480\n// https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js\nfunction cyrb53( value, seed = 0 ) {\n\n\tlet h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n\n\tif ( value instanceof Array ) {\n\n\t\tfor ( let i = 0, val; i < value.length; i ++ ) {\n\n\t\t\tval = value[ i ];\n\t\t\th1 = Math.imul( h1 ^ val, 2654435761 );\n\t\t\th2 = Math.imul( h2 ^ val, 1597334677 );\n\n\t\t}\n\n\t} else {\n\n\t\tfor ( let i = 0, ch; i < value.length; i ++ ) {\n\n\t\t\tch = value.charCodeAt( i );\n\t\t\th1 = Math.imul( h1 ^ ch, 2654435761 );\n\t\t\th2 = Math.imul( h2 ^ ch, 1597334677 );\n\n\t\t}\n\n\t}\n\n\th1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 );\n\th1 ^= Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );\n\th2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 );\n\th2 ^= Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );\n\n\treturn 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );\n\n}\n\n/**\n * Computes a hash for the given string.\n *\n * @method\n * @param {string} str - The string to be hashed.\n * @return {number} The hash.\n */\nconst hashString = ( str ) => cyrb53( str );\n\n/**\n * Computes a hash for the given array.\n *\n * @method\n * @param {Array<number>} array - The array to be hashed.\n * @return {number} The hash.\n */\nconst hashArray = ( array ) => cyrb53( array );\n\n/**\n * Computes a hash for the given list of parameters.\n *\n * @method\n * @param {...number} params - A list of parameters.\n * @return {number} The hash.\n */\nconst hash$1 = ( ...params ) => cyrb53( params );\n\n/**\n * Computes a cache key for the given node.\n *\n * @method\n * @param {Object|Node} object - The object to be hashed.\n * @param {boolean} [force=false] - Whether to force a cache key computation or not.\n * @return {number} The hash.\n */\nfunction getCacheKey$1( object, force = false ) {\n\n\tconst values = [];\n\n\tif ( object.isNode === true ) {\n\n\t\tvalues.push( object.id );\n\t\tobject = object.getSelf();\n\n\t}\n\n\tfor ( const { property, childNode } of getNodeChildren( object ) ) {\n\n\t\tvalues.push( cyrb53( property.slice( 0, -4 ) ), childNode.getCacheKey( force ) );\n\n\t}\n\n\treturn cyrb53( values );\n\n}\n\n/**\n * This generator function can be used to iterate over the node children\n * of the given object.\n *\n * @generator\n * @param {Object} node - The object to be hashed.\n * @param {boolean} [toJSON=false] - Whether to return JSON or not.\n * @yields {Object} A result node holding the property, index (if available) and the child node.\n */\nfunction* getNodeChildren( node, toJSON = false ) {\n\n\tfor ( const property in node ) {\n\n\t\t// Ignore private properties.\n\t\tif ( property.startsWith( '_' ) === true ) continue;\n\n\t\tconst object = node[ property ];\n\n\t\tif ( Array.isArray( object ) === true ) {\n\n\t\t\tfor ( let i = 0; i < object.length; i ++ ) {\n\n\t\t\t\tconst child = object[ i ];\n\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\n\n\t\t\t\t\tyield { property, index: i, childNode: child };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( object && object.isNode === true ) {\n\n\t\t\tyield { property, childNode: object };\n\n\t\t} else if ( typeof object === 'object' ) {\n\n\t\t\tfor ( const subProperty in object ) {\n\n\t\t\t\tconst child = object[ subProperty ];\n\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\n\n\t\t\t\t\tyield { property, index: subProperty, childNode: child };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nconst typeFromLength = /*@__PURE__*/ new Map( [\n\t[ 1, 'float' ],\n\t[ 2, 'vec2' ],\n\t[ 3, 'vec3' ],\n\t[ 4, 'vec4' ],\n\t[ 9, 'mat3' ],\n\t[ 16, 'mat4' ]\n] );\n\nconst dataFromObject = /*@__PURE__*/ new WeakMap();\n\n/**\n * Returns the data type for the given the length.\n *\n * @method\n * @param {number} length - The length.\n * @return {string} The data type.\n */\nfunction getTypeFromLength( length ) {\n\n\treturn typeFromLength.get( length );\n\n}\n\n/**\n * Returns the typed array for the given data type.\n *\n * @method\n * @param {string} type - The data type.\n * @return {TypedArray} The typed array.\n */\nfunction getTypedArrayFromType( type ) {\n\n\t// Handle component type for vectors and matrices\n\tif ( /[iu]?vec\\d/.test( type ) ) {\n\n\t\t// Handle int vectors\n\t\tif ( type.startsWith( 'ivec' ) ) return Int32Array;\n\t\t// Handle uint vectors\n\t\tif ( type.startsWith( 'uvec' ) ) return Uint32Array;\n\t\t// Default to float vectors\n\t\treturn Float32Array;\n\n\t}\n\n\t// Handle matrices (always float)\n\tif ( /mat\\d/.test( type ) ) return Float32Array;\n\n\t// Basic types\n\tif ( /float/.test( type ) ) return Float32Array;\n\tif ( /uint/.test( type ) ) return Uint32Array;\n\tif ( /int/.test( type ) ) return Int32Array;\n\n\tthrow new Error( `THREE.NodeUtils: Unsupported type: ${type}` );\n\n}\n\n/**\n * Returns the length for the given data type.\n *\n * @method\n * @param {string} type - The data type.\n * @return {number} The length.\n */\nfunction getLengthFromType( type ) {\n\n\tif ( /float|int|uint/.test( type ) ) return 1;\n\tif ( /vec2/.test( type ) ) return 2;\n\tif ( /vec3/.test( type ) ) return 3;\n\tif ( /vec4/.test( type ) ) return 4;\n\tif ( /mat2/.test( type ) ) return 4;\n\tif ( /mat3/.test( type ) ) return 9;\n\tif ( /mat4/.test( type ) ) return 16;\n\n\tconsole.error( 'THREE.TSL: Unsupported type:', type );\n\n}\n\n/**\n * Returns the data type for the given value.\n *\n * @method\n * @param {any} value - The value.\n * @return {?string} The data type.\n */\nfunction getValueType( value ) {\n\n\tif ( value === undefined || value === null ) return null;\n\n\tconst typeOf = typeof value;\n\n\tif ( value.isNode === true ) {\n\n\t\treturn 'node';\n\n\t} else if ( typeOf === 'number' ) {\n\n\t\treturn 'float';\n\n\t} else if ( typeOf === 'boolean' ) {\n\n\t\treturn 'bool';\n\n\t} else if ( typeOf === 'string' ) {\n\n\t\treturn 'string';\n\n\t} else if ( typeOf === 'function' ) {\n\n\t\treturn 'shader';\n\n\t} else if ( value.isVector2 === true ) {\n\n\t\treturn 'vec2';\n\n\t} else if ( value.isVector3 === true ) {\n\n\t\treturn 'vec3';\n\n\t} else if ( value.isVector4 === true ) {\n\n\t\treturn 'vec4';\n\n\t} else if ( value.isMatrix2 === true ) {\n\n\t\treturn 'mat2';\n\n\t} else if ( value.isMatrix3 === true ) {\n\n\t\treturn 'mat3';\n\n\t} else if ( value.isMatrix4 === true ) {\n\n\t\treturn 'mat4';\n\n\t} else if ( value.isColor === true ) {\n\n\t\treturn 'color';\n\n\t} else if ( value instanceof ArrayBuffer ) {\n\n\t\treturn 'ArrayBuffer';\n\n\t}\n\n\treturn null;\n\n}\n\n/**\n * Returns the value/object for the given data type and parameters.\n *\n * @method\n * @param {string} type - The given type.\n * @param {...any} params - A parameter list.\n * @return {any} The value/object.\n */\nfunction getValueFromType( type, ...params ) {\n\n\tconst last4 = type ? type.slice( -4 ) : undefined;\n\n\tif ( params.length === 1 ) { // ensure same behaviour as in NodeBuilder.format()\n\n\t\tif ( last4 === 'vec2' ) params = [ params[ 0 ], params[ 0 ] ];\n\t\telse if ( last4 === 'vec3' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ] ];\n\t\telse if ( last4 === 'vec4' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ], params[ 0 ] ];\n\n\t}\n\n\tif ( type === 'color' ) {\n\n\t\treturn new Color( ...params );\n\n\t} else if ( last4 === 'vec2' ) {\n\n\t\treturn new Vector2( ...params );\n\n\t} else if ( last4 === 'vec3' ) {\n\n\t\treturn new Vector3( ...params );\n\n\t} else if ( last4 === 'vec4' ) {\n\n\t\treturn new Vector4( ...params );\n\n\t} else if ( last4 === 'mat2' ) {\n\n\t\treturn new Matrix2( ...params );\n\n\t} else if ( last4 === 'mat3' ) {\n\n\t\treturn new Matrix3( ...params );\n\n\t} else if ( last4 === 'mat4' ) {\n\n\t\treturn new Matrix4( ...params );\n\n\t} else if ( type === 'bool' ) {\n\n\t\treturn params[ 0 ] || false;\n\n\t} else if ( ( type === 'float' ) || ( type === 'int' ) || ( type === 'uint' ) ) {\n\n\t\treturn params[ 0 ] || 0;\n\n\t} else if ( type === 'string' ) {\n\n\t\treturn params[ 0 ] || '';\n\n\t} else if ( type === 'ArrayBuffer' ) {\n\n\t\treturn base64ToArrayBuffer( params[ 0 ] );\n\n\t}\n\n\treturn null;\n\n}\n\n/**\n * Gets the object data that can be shared between different rendering steps.\n *\n * @param {Object} object - The object to get the data for.\n * @return {Object} The object data.\n */\nfunction getDataFromObject( object ) {\n\n\tlet data = dataFromObject.get( object );\n\n\tif ( data === undefined ) {\n\n\t\tdata = {};\n\t\tdataFromObject.set( object, data );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * Converts the given array buffer to a Base64 string.\n *\n * @method\n * @param {ArrayBuffer} arrayBuffer - The array buffer.\n * @return {string} The Base64 string.\n */\nfunction arrayBufferToBase64( arrayBuffer ) {\n\n\tlet chars = '';\n\n\tconst array = new Uint8Array( arrayBuffer );\n\n\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\tchars += String.fromCharCode( array[ i ] );\n\n\t}\n\n\treturn btoa( chars );\n\n}\n\n/**\n * Converts the given Base64 string to an array buffer.\n *\n * @method\n * @param {string} base64 - The Base64 string.\n * @return {ArrayBuffer} The array buffer.\n */\nfunction base64ToArrayBuffer( base64 ) {\n\n\treturn Uint8Array.from( atob( base64 ), c => c.charCodeAt( 0 ) ).buffer;\n\n}\n\nvar NodeUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tarrayBufferToBase64: arrayBufferToBase64,\n\tbase64ToArrayBuffer: base64ToArrayBuffer,\n\tgetCacheKey: getCacheKey$1,\n\tgetDataFromObject: getDataFromObject,\n\tgetLengthFromType: getLengthFromType,\n\tgetNodeChildren: getNodeChildren,\n\tgetTypeFromLength: getTypeFromLength,\n\tgetTypedArrayFromType: getTypedArrayFromType,\n\tgetValueFromType: getValueFromType,\n\tgetValueType: getValueType,\n\thash: hash$1,\n\thashArray: hashArray,\n\thashString: hashString\n});\n\n/**\n * Possible shader stages.\n *\n * @property {string} VERTEX The vertex shader stage.\n * @property {string} FRAGMENT The fragment shader stage.\n */\nconst NodeShaderStage = {\n\tVERTEX: 'vertex',\n\tFRAGMENT: 'fragment'\n};\n\n/**\n * Update types of a node.\n *\n * @property {string} NONE The update method is not executed.\n * @property {string} FRAME The update method is executed per frame.\n * @property {string} RENDER The update method is executed per render. A frame might be produced by multiple render calls so this value allows more detailed updates than FRAME.\n * @property {string} OBJECT The update method is executed per {@link Object3D} that uses the node for rendering.\n */\nconst NodeUpdateType = {\n\tNONE: 'none',\n\tFRAME: 'frame',\n\tRENDER: 'render',\n\tOBJECT: 'object'\n};\n\n/**\n * Data types of a node.\n *\n * @property {string} BOOLEAN Boolean type.\n * @property {string} INTEGER Integer type.\n * @property {string} FLOAT Float type.\n * @property {string} VECTOR2 Two-dimensional vector type.\n * @property {string} VECTOR3 Three-dimensional vector type.\n * @property {string} VECTOR4 Four-dimensional vector type.\n * @property {string} MATRIX2 2x2 matrix type.\n * @property {string} MATRIX3 3x3 matrix type.\n * @property {string} MATRIX4 4x4 matrix type.\n */\nconst NodeType = {\n\tBOOLEAN: 'bool',\n\tINTEGER: 'int',\n\tFLOAT: 'float',\n\tVECTOR2: 'vec2',\n\tVECTOR3: 'vec3',\n\tVECTOR4: 'vec4',\n\tMATRIX2: 'mat2',\n\tMATRIX3: 'mat3',\n\tMATRIX4: 'mat4'\n};\n\n/**\n * Access types of a node. These are relevant for compute and storage usage.\n *\n * @property {string} READ_ONLY Read-only access\n * @property {string} WRITE_ONLY Write-only access.\n * @property {string} READ_WRITE Read and write access.\n */\nconst NodeAccess = {\n\tREAD_ONLY: 'readOnly',\n\tWRITE_ONLY: 'writeOnly',\n\tREAD_WRITE: 'readWrite',\n};\n\nconst defaultShaderStages = [ 'fragment', 'vertex' ];\nconst defaultBuildStages = [ 'setup', 'analyze', 'generate' ];\nconst shaderStages = [ ...defaultShaderStages, 'compute' ];\nconst vectorComponents = [ 'x', 'y', 'z', 'w' ];\n\nlet _nodeId = 0;\n\n/**\n * Base class for all nodes.\n *\n * @augments EventDispatcher\n */\nclass Node extends EventDispatcher {\n\n\tstatic get type() {\n\n\t\treturn 'Node';\n\n\t}\n\n\t/**\n\t * Constructs a new node.\n\t *\n\t * @param {?string} nodeType - The node type.\n\t */\n\tconstructor( nodeType = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node type. This represents the result type of the node (e.g. `float` or `vec3`).\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.nodeType = nodeType;\n\n\t\t/**\n\t\t * The update type of the node's {@link Node#update} method. Possible values are listed in {@link NodeUpdateType}.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'none'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.NONE;\n\n\t\t/**\n\t\t * The update type of the node's {@link Node#updateBefore} method. Possible values are listed in {@link NodeUpdateType}.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'none'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\n\n\t\t/**\n\t\t * The update type of the node's {@link Node#updateAfter} method. Possible values are listed in {@link NodeUpdateType}.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'none'\n\t\t */\n\t\tthis.updateAfterType = NodeUpdateType.NONE;\n\n\t\t/**\n\t\t * The UUID of the node.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t/**\n\t\t * The version of the node. The version automatically is increased when {@link Node#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * Whether this node is global or not. This property is relevant for the internal\n\t\t * node caching system. All nodes which should be declared just once should\n\t\t * set this flag to `true` (a typical example is {@link AttributeNode}).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.global = false;\n\n\t\t/**\n\t\t * Create a list of parents for this node during the build process.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.parents = false;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNode = true;\n\n\t\t// private\n\n\t\t/**\n\t\t * The cache key of this node.\n\t\t *\n\t\t * @private\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._cacheKey = null;\n\n\t\t/**\n\t\t * The cache key 's version.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._cacheKeyVersion = 0;\n\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\n\n\t}\n\n\t/**\n\t * Set this property to `true` when the node should be regenerated.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * The type of the class. The value is usually the constructor name.\n\t *\n\t * @type {string}\n \t * @readonly\n\t */\n\tget type() {\n\n\t\treturn this.constructor.type;\n\n\t}\n\n\t/**\n\t * Convenient method for defining {@link Node#update}.\n\t *\n\t * @param {Function} callback - The update method.\n\t * @param {string} updateType - The update type.\n\t * @return {Node} A reference to this node.\n\t */\n\tonUpdate( callback, updateType ) {\n\n\t\tthis.updateType = updateType;\n\t\tthis.update = callback.bind( this.getSelf() );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\n\t * this method automatically sets the update type to `FRAME`.\n\t *\n\t * @param {Function} callback - The update method.\n\t * @return {Node} A reference to this node.\n\t */\n\tonFrameUpdate( callback ) {\n\n\t\treturn this.onUpdate( callback, NodeUpdateType.FRAME );\n\n\t}\n\n\t/**\n\t * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\n\t * this method automatically sets the update type to `RENDER`.\n\t *\n\t * @param {Function} callback - The update method.\n\t * @return {Node} A reference to this node.\n\t */\n\tonRenderUpdate( callback ) {\n\n\t\treturn this.onUpdate( callback, NodeUpdateType.RENDER );\n\n\t}\n\n\t/**\n\t * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\n\t * this method automatically sets the update type to `OBJECT`.\n\t *\n\t * @param {Function} callback - The update method.\n\t * @return {Node} A reference to this node.\n\t */\n\tonObjectUpdate( callback ) {\n\n\t\treturn this.onUpdate( callback, NodeUpdateType.OBJECT );\n\n\t}\n\n\t/**\n\t * Convenient method for defining {@link Node#updateReference}.\n\t *\n\t * @param {Function} callback - The update method.\n\t * @return {Node} A reference to this node.\n\t */\n\tonReference( callback ) {\n\n\t\tthis.updateReference = callback.bind( this.getSelf() );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The `this` reference might point to a Proxy so this method can be used\n\t * to get the reference to the actual node instance.\n\t *\n\t * @return {Node} A reference to the node.\n\t */\n\tgetSelf() {\n\n\t\t// Returns non-node object.\n\n\t\treturn this.self || this;\n\n\t}\n\n\t/**\n\t * Nodes might refer to other objects like materials. This method allows to dynamically update the reference\n\t * to such objects based on a given state (e.g. the current node frame or builder).\n\t *\n\t * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.\n\t * @return {any} The updated reference.\n\t */\n\tupdateReference( /*state*/ ) {\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * By default this method returns the value of the {@link Node#global} flag. This method\n\t * can be overwritten in derived classes if an analytical way is required to determine the\n\t * global status.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether this node is global or not.\n\t */\n\tisGlobal( /*builder*/ ) {\n\n\t\treturn this.global;\n\n\t}\n\n\t/**\n\t * Generator function that can be used to iterate over the child nodes.\n\t *\n\t * @generator\n\t * @yields {Node} A child node.\n\t */\n\t* getChildren() {\n\n\t\tfor ( const { childNode } of getNodeChildren( this ) ) {\n\n\t\t\tyield childNode;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calling this method dispatches the `dispose` event. This event can be used\n\t * to register event listeners for clean up tasks.\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Callback for {@link Node#traverse}.\n\t *\n\t * @callback traverseCallback\n\t * @param {Node} node - The current node.\n\t */\n\n\t/**\n\t * Can be used to traverse through the node's hierarchy.\n\t *\n\t * @param {traverseCallback} callback - A callback that is executed per node.\n\t */\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tfor ( const childNode of this.getChildren() ) {\n\n\t\t\tchildNode.traverse( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the cache key for this node.\n\t *\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of the cache key is forced.\n\t * @return {number} The cache key of the node.\n\t */\n\tgetCacheKey( force = false ) {\n\n\t\tforce = force || this.version !== this._cacheKeyVersion;\n\n\t\tif ( force === true || this._cacheKey === null ) {\n\n\t\t\tthis._cacheKey = hash$1( getCacheKey$1( this, force ), this.customCacheKey() );\n\t\t\tthis._cacheKeyVersion = this.version;\n\n\t\t}\n\n\t\treturn this._cacheKey;\n\n\t}\n\n\t/**\n\t * Generate a custom cache key for this node.\n\t *\n\t * @return {number} The cache key of the node.\n\t */\n\tcustomCacheKey() {\n\n\t\treturn 0;\n\n\t}\n\n\t/**\n\t * Returns the references to this node which is by default `this`.\n\t *\n\t * @return {Node} A reference to this node.\n\t */\n\tgetScope() {\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the hash of the node which is used to identify the node. By default it's\n\t * the {@link Node#uuid} however derived node classes might have to overwrite this method\n\t * depending on their implementation.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The hash.\n\t */\n\tgetHash( /*builder*/ ) {\n\n\t\treturn this.uuid;\n\n\t}\n\n\t/**\n\t * Returns the update type of {@link Node#update}.\n\t *\n\t * @return {NodeUpdateType} The update type.\n\t */\n\tgetUpdateType() {\n\n\t\treturn this.updateType;\n\n\t}\n\n\t/**\n\t * Returns the update type of {@link Node#updateBefore}.\n\t *\n\t * @return {NodeUpdateType} The update type.\n\t */\n\tgetUpdateBeforeType() {\n\n\t\treturn this.updateBeforeType;\n\n\t}\n\n\t/**\n\t * Returns the update type of {@link Node#updateAfter}.\n\t *\n\t * @return {NodeUpdateType} The update type.\n\t */\n\tgetUpdateAfterType() {\n\n\t\treturn this.updateAfterType;\n\n\t}\n\n\t/**\n\t * Certain types are composed of multiple elements. For example a `vec3`\n\t * is composed of three `float` values. This method returns the type of\n\t * these elements.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The type of the node.\n\t */\n\tgetElementType( builder ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst elementType = builder.getElementType( type );\n\n\t\treturn elementType;\n\n\t}\n\n\t/**\n\t * Returns the node member type for the given name.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} name - The name of the member.\n\t * @return {string} The type of the node.\n\t */\n\tgetMemberType( /*builder, name*/ ) {\n\n\t\treturn 'void';\n\n\t}\n\n\t/**\n\t * Returns the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The type of the node.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\tif ( nodeProperties.outputNode ) {\n\n\t\t\treturn nodeProperties.outputNode.getNodeType( builder );\n\n\t\t}\n\n\t\treturn this.nodeType;\n\n\t}\n\n\t/**\n\t * This method is used during the build process of a node and ensures\n\t * equal nodes are not built multiple times but just once. For example if\n\t * `attribute( 'uv' )` is used multiple times by the user, the build\n\t * process makes sure to process just the first node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The shared node if possible. Otherwise `this` is returned.\n\t */\n\tgetShared( builder ) {\n\n\t\tconst hash = this.getHash( builder );\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\n\n\t\treturn nodeFromHash || this;\n\n\t}\n\n\t/**\n\t * Represents the setup stage which is the first step of the build process, see {@link Node#build} method.\n\t * This method is often overwritten in derived modules to prepare the node which is used as the output/result.\n\t * The output node must be returned in the `return` statement.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?Node} The output node.\n\t */\n\tsetup( builder ) {\n\n\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\tlet index = 0;\n\n\t\tfor ( const childNode of this.getChildren() ) {\n\n\t\t\tnodeProperties[ 'node' + index ++ ] = childNode;\n\n\t\t}\n\n\t\t// return a outputNode if exists or null\n\n\t\treturn nodeProperties.outputNode || null;\n\n\t}\n\n\t/**\n\t * Represents the analyze stage which is the second step of the build process, see {@link Node#build} method.\n\t * This stage analyzes the node hierarchy and ensures descendent nodes are built.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tanalyze( builder ) {\n\n\t\tconst usageCount = builder.increaseUsage( this );\n\n\t\tif ( usageCount === 1 ) {\n\n\t\t\t// node flow children\n\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\n\n\t\t\t\tif ( childNode && childNode.isNode === true ) {\n\n\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Represents the generate stage which is the third step of the build process, see {@link Node#build} method.\n\t * This state builds the output node and returns the resulting shader string.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {?string} output - Can be used to define the output type.\n\t * @return {?string} The generated shader string.\n\t */\n\tgenerate( builder, output ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\tif ( outputNode && outputNode.isNode === true ) {\n\n\t\t\treturn outputNode.build( builder, output );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * The method can be implemented to update the node's internal state before it is used to render an object.\n\t * The {@link Node#updateBeforeType} property defines how often the update is executed.\n\t *\n\t * @abstract\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\n\t */\n\tupdateBefore( /*frame*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * The method can be implemented to update the node's internal state after it was used to render an object.\n\t * The {@link Node#updateAfterType} property defines how often the update is executed.\n\t *\n\t * @abstract\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\n\t */\n\tupdateAfter( /*frame*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * The method can be implemented to update the node's internal state when it is used to render an object.\n\t * The {@link Node#updateType} property defines how often the update is executed.\n\t *\n\t * @abstract\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\n\t */\n\tupdate( /*frame*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * This method performs the build of a node. The behavior and return value depend on the current build stage:\n\t * - **setup**: Prepares the node and its children for the build process. This process can also create new nodes. Returns the node itself or a variant.\n\t * - **analyze**: Analyzes the node hierarchy for optimizations in the code generation stage. Returns `null`.\n\t * - **generate**: Generates the shader code for the node. Returns the generated shader string.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {?string} [output=null] - Can be used to define the output type.\n\t * @return {Node|string|null} The result of the build process, depending on the build stage.\n\t */\n\tbuild( builder, output = null ) {\n\n\t\tconst refNode = this.getShared( builder );\n\n\t\tif ( this !== refNode ) {\n\n\t\t\treturn refNode.build( builder, output );\n\n\t\t}\n\n\t\tbuilder.addNode( this );\n\t\tbuilder.addChain( this );\n\n\t\t/* Build stages expected results:\n\t\t\t- \"setup\"\t\t-> Node\n\t\t\t- \"analyze\"\t\t-> null\n\t\t\t- \"generate\"\t-> String\n\t\t*/\n\t\tlet result = null;\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'setup' ) {\n\n\t\t\tthis.updateReference( builder );\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\n\t\t\tif ( properties.initialized !== true ) {\n\n\t\t\t\t//const stackNodesBeforeSetup = builder.stack.nodes.length;\n\n\t\t\t\tproperties.initialized = true;\n\n\t\t\t\tconst outputNode = this.setup( builder ); // return a node or null\n\t\t\t\tconst isNodeOutput = outputNode && outputNode.isNode === true;\n\n\t\t\t\t/*if ( isNodeOutput && builder.stack.nodes.length !== stackNodesBeforeSetup ) {\n\n\t\t\t\t\t// !! no outputNode !!\n\t\t\t\t\t//outputNode = builder.stack;\n\n\t\t\t\t}*/\n\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\n\n\t\t\t\t\tif ( childNode && childNode.isNode === true ) {\n\n\t\t\t\t\t\tif ( childNode.parents === true ) {\n\n\t\t\t\t\t\t\tconst childProperties = builder.getNodeProperties( childNode );\n\t\t\t\t\t\t\tchildProperties.parents = childProperties.parents || [];\n\t\t\t\t\t\t\tchildProperties.parents.push( this );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( isNodeOutput ) {\n\n\t\t\t\t\toutputNode.build( builder );\n\n\t\t\t\t}\n\n\t\t\t\tproperties.outputNode = outputNode;\n\n\t\t\t}\n\n\t\t\tresult = properties.outputNode || null;\n\n\t\t} else if ( buildStage === 'analyze' ) {\n\n\t\t\tthis.analyze( builder );\n\n\t\t} else if ( buildStage === 'generate' ) {\n\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\n\n\t\t\tif ( isGenerateOnce ) {\n\n\t\t\t\tconst type = this.getNodeType( builder );\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\t\tresult = nodeData.snippet;\n\n\t\t\t\tif ( result === undefined ) {\n\n\t\t\t\t\tif ( nodeData.generated === undefined ) {\n\n\t\t\t\t\t\tnodeData.generated = true;\n\n\t\t\t\t\t\tresult = this.generate( builder ) || '';\n\n\t\t\t\t\t\tnodeData.snippet = result;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.Node: Recursion detected.', this );\n\n\t\t\t\t\t\tresult = '';\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( nodeData.flowCodes !== undefined && builder.context.nodeBlock !== undefined ) {\n\n\t\t\t\t\tbuilder.addFlowCodeHierarchy( this, builder.context.nodeBlock );\n\n\t\t\t\t}\n\n\t\t\t\tresult = builder.format( result, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tresult = this.generate( builder, output ) || '';\n\n\t\t\t}\n\n\t\t}\n\n\t\tbuilder.removeChain( this );\n\t\tbuilder.addSequentialNode( this );\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Returns the child nodes as a JSON object.\n\t *\n\t * @return {Array<Object>} An iterable list of serialized child objects as JSON.\n\t */\n\tgetSerializeChildren() {\n\n\t\treturn getNodeChildren( this );\n\n\t}\n\n\t/**\n\t * Serializes the node to JSON.\n\t *\n\t * @param {Object} json - The output JSON object.\n\t */\n\tserialize( json ) {\n\n\t\tconst nodeChildren = this.getSerializeChildren();\n\n\t\tconst inputNodes = {};\n\n\t\tfor ( const { property, index, childNode } of nodeChildren ) {\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tif ( inputNodes[ property ] === undefined ) {\n\n\t\t\t\t\tinputNodes[ property ] = Number.isInteger( index ) ? [] : {};\n\n\t\t\t\t}\n\n\t\t\t\tinputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;\n\n\t\t\t} else {\n\n\t\t\t\tinputNodes[ property ] = childNode.toJSON( json.meta ).uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( inputNodes ).length > 0 ) {\n\n\t\t\tjson.inputNodes = inputNodes;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Deserializes the node from the given JSON.\n\t *\n\t * @param {Object} json - The JSON object.\n\t */\n\tdeserialize( json ) {\n\n\t\tif ( json.inputNodes !== undefined ) {\n\n\t\t\tconst nodes = json.meta.nodes;\n\n\t\t\tfor ( const property in json.inputNodes ) {\n\n\t\t\t\tif ( Array.isArray( json.inputNodes[ property ] ) ) {\n\n\t\t\t\t\tconst inputArray = [];\n\n\t\t\t\t\tfor ( const uuid of json.inputNodes[ property ] ) {\n\n\t\t\t\t\t\tinputArray.push( nodes[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[ property ] = inputArray;\n\n\t\t\t\t} else if ( typeof json.inputNodes[ property ] === 'object' ) {\n\n\t\t\t\t\tconst inputObject = {};\n\n\t\t\t\t\tfor ( const subProperty in json.inputNodes[ property ] ) {\n\n\t\t\t\t\t\tconst uuid = json.inputNodes[ property ][ subProperty ];\n\n\t\t\t\t\t\tinputObject[ subProperty ] = nodes[ uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[ property ] = inputObject;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst uuid = json.inputNodes[ property ];\n\n\t\t\t\t\tthis[ property ] = nodes[ uuid ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the node into the three.js JSON Object/Scene format.\n\t *\n\t * @param {?Object} meta - An optional JSON object that already holds serialized data from other scene objects.\n\t * @return {Object} The serialized node.\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst { uuid, type } = this;\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t}\n\n\t\t// serialize\n\n\t\tlet data = meta.nodes[ uuid ];\n\n\t\tif ( data === undefined ) {\n\n\t\t\tdata = {\n\t\t\t\tuuid,\n\t\t\t\ttype,\n\t\t\t\tmeta,\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.6,\n\t\t\t\t\ttype: 'Node',\n\t\t\t\t\tgenerator: 'Node.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif ( isRoot !== true ) meta.nodes[ data.uuid ] = data;\n\n\t\t\tthis.serialize( data );\n\n\t\t\tdelete data.meta;\n\n\t\t}\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Base class for representing element access on an array-like\n * node data structures.\n *\n * @augments Node\n */\nclass ArrayElementNode extends Node { // @TODO: If extending from TempNode it breaks webgpu_compute\n\n\tstatic get type() {\n\n\t\treturn 'ArrayElementNode';\n\n\t}\n\n\t/**\n\t * Constructs an array element node.\n\t *\n\t * @param {Node} node - The array-like node.\n\t * @param {Node} indexNode - The index node that defines the element access.\n\t */\n\tconstructor( node, indexNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The array-like node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The index node that defines the element access.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.indexNode = indexNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayElementNode = true;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from the array-like node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getElementType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst indexType = this.indexNode.getNodeType( builder );\n\n\t\tconst nodeSnippet = this.node.build( builder );\n\t\tconst indexSnippet = this.indexNode.build( builder, ! builder.isVector( indexType ) && builder.isInteger( indexType ) ? indexType : 'uint' );\n\n\t\treturn `${ nodeSnippet }[ ${ indexSnippet } ]`;\n\n\t}\n\n}\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * It represents a convert operation during the shader generation process\n * meaning it converts the data type of a node to a target data type.\n *\n * @augments Node\n */\nclass ConvertNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ConvertNode';\n\n\t}\n\n\t/**\n\t * Constructs a new convert node.\n\t *\n\t * @param {Node} node - The node which type should be converted.\n\t * @param {string} convertTo - The target node type. Multiple types can be defined by separating them with a `|` sign.\n\t */\n\tconstructor( node, convertTo ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node which type should be converted.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The target node type. Multiple types can be defined by separating them with a `|` sign.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.convertTo = convertTo;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the implementation tries to infer the best\n\t * matching type from the {@link ConvertNode#convertTo} property.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tconst requestType = this.node.getNodeType( builder );\n\n\t\tlet convertTo = null;\n\n\t\tfor ( const overloadingType of this.convertTo.split( '|' ) ) {\n\n\t\t\tif ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {\n\n\t\t\t\tconvertTo = overloadingType;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn convertTo;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.convertTo = this.convertTo;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.convertTo = data.convertTo;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst node = this.node;\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst snippet = node.build( builder, type );\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\n/**\n * This module uses cache management to create temporary variables\n * if the node is used more than once to prevent duplicate calculations.\n *\n * The class acts as a base class for many other nodes types.\n *\n * @augments Node\n */\nclass TempNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'TempNode';\n\n\t}\n\n\t/**\n\t * Constructs a temp node.\n\t *\n\t * @param {?string} nodeType - The node type.\n\t */\n\tconstructor( nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTempNode = true;\n\n\t}\n\n\t/**\n\t * Whether this node is used more than once in context of other nodes.\n\t *\n\t * @param {NodeBuilder} builder - The node builder.\n\t * @return {boolean} A flag that indicates if there is more than one dependency to other nodes.\n\t */\n\thasDependencies( builder ) {\n\n\t\treturn builder.getDataFromNode( this ).usageCount > 1;\n\n\t}\n\n\tbuild( builder, output ) {\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'generate' ) {\n\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tif ( nodeData.propertyName !== undefined ) {\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t} else if ( type !== 'void' && output !== 'void' && this.hasDependencies( builder ) ) {\n\n\t\t\t\tconst snippet = super.build( builder, type );\n\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, null, type );\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\t\t\tbuilder.addLineFlowCode( `${ propertyName } = ${ snippet }`, this );\n\n\t\t\t\tnodeData.snippet = snippet;\n\t\t\t\tnodeData.propertyName = propertyName;\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.build( builder, output );\n\n\t}\n\n}\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * It represents a join operation during the shader generation process.\n * For example in can compose/join two single floats into a `vec2` type.\n *\n * @augments TempNode\n */\nclass JoinNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'JoinNode';\n\n\t}\n\n\t/**\n\t * Constructs a new join node.\n\t *\n\t * @param {Array<Node>} nodes - An array of nodes that should be joined.\n\t * @param {?string} [nodeType=null] - The node type.\n\t */\n\tconstructor( nodes = [], nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * An array of nodes that should be joined.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type must be inferred from the\n\t * joined data length if not explicitly defined.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.nodeType !== null ) {\n\n\t\t\treturn builder.getVectorType( this.nodeType );\n\n\t\t}\n\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst maxLength = builder.getTypeLength( type );\n\n\t\tconst nodes = this.nodes;\n\n\t\tconst primitiveType = builder.getComponentType( type );\n\n\t\tconst snippetValues = [];\n\n\t\tlet length = 0;\n\n\t\tfor ( const input of nodes ) {\n\n\t\t\tif ( length >= maxLength ) {\n\n\t\t\t\tconsole.error( `THREE.TSL: Length of parameters exceeds maximum length of function '${ type }()' type.` );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlet inputType = input.getNodeType( builder );\n\t\t\tlet inputTypeLength = builder.getTypeLength( inputType );\n\t\t\tlet inputSnippet;\n\n\t\t\tif ( length + inputTypeLength > maxLength ) {\n\n\t\t\t\tconsole.error( `THREE.TSL: Length of '${ type }()' data exceeds maximum length of output type.` );\n\n\t\t\t\tinputTypeLength = maxLength - length;\n\t\t\t\tinputType = builder.getTypeFromLength( inputTypeLength );\n\n\t\t\t}\n\n\t\t\tlength += inputTypeLength;\n\t\t\tinputSnippet = input.build( builder, inputType );\n\n\t\t\tconst inputPrimitiveType = builder.getComponentType( inputType );\n\n\t\t\tif ( inputPrimitiveType !== primitiveType ) {\n\n\t\t\t\tinputSnippet = builder.format( inputSnippet, inputPrimitiveType, primitiveType );\n\n\t\t\t}\n\n\t\t\tsnippetValues.push( inputSnippet );\n\n\t\t}\n\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\nconst _stringVectorComponents = vectorComponents.join( '' );\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * `SplitNode` represents a property access operation which means it is\n * used to implement any `.xyzw`, `.rgba` and `stpq` usage on node objects.\n * For example:\n * ```js\n * const redValue = color.r;\n * ```\n *\n * @augments Node\n */\nclass SplitNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SplitNode';\n\n\t}\n\n\t/**\n\t * Constructs a new split node.\n\t *\n\t * @param {Node} node - The node that should be accessed.\n\t * @param {string} [components='x'] - The components that should be accessed.\n\t */\n\tconstructor( node, components = 'x' ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that should be accessed.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The components that should be accessed.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.components = components;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSplitNode = true;\n\n\t}\n\n\t/**\n\t * Returns the vector length which is computed based on the requested components.\n\t *\n\t * @return {number} The vector length.\n\t */\n\tgetVectorLength() {\n\n\t\tlet vectorLength = this.components.length;\n\n\t\tfor ( const c of this.components ) {\n\n\t\t\tvectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );\n\n\t\t}\n\n\t\treturn vectorLength;\n\n\t}\n\n\t/**\n\t * Returns the component type of the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The component type.\n\t */\n\tgetComponentType( builder ) {\n\n\t\treturn builder.getComponentType( this.node.getNodeType( builder ) );\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from requested components.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn builder.getTypeFromLength( this.components.length, this.getComponentType( builder ) );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst node = this.node;\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\n\n\t\tlet snippet = null;\n\n\t\tif ( nodeTypeLength > 1 ) {\n\n\t\t\tlet type = null;\n\n\t\t\tconst componentsLength = this.getVectorLength();\n\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\n\n\t\t\t\t// needed expand the input node\n\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength(), this.getComponentType( builder ) );\n\n\t\t\t}\n\n\t\t\tconst nodeSnippet = node.build( builder, type );\n\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === _stringVectorComponents.slice( 0, this.components.length ) ) {\n\n\t\t\t\t// unnecessary swizzle\n\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// ignore .components if .node returns float/integer\n\n\t\t\tsnippet = node.build( builder, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.components = this.components;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.components = data.components;\n\n\t}\n\n}\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * `SetNode` represents a set operation which means it is used to implement any\n * `setXYZW()`, `setRGBA()` and `setSTPQ()` method invocations on node objects.\n * For example:\n * ```js\n * materialLine.colorNode = color( 0, 0, 0 ).setR( float( 1 ) );\n * ```\n *\n * @augments TempNode\n */\nclass SetNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'SetNode';\n\n\t}\n\n\t/**\n\t * Constructs a new set node.\n\t *\n\t * @param {Node} sourceNode - The node that should be updated.\n\t * @param {string} components - The components that should be updated.\n\t * @param {Node} targetNode - The value node.\n\t */\n\tconstructor( sourceNode, components, targetNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that should be updated.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.sourceNode = sourceNode;\n\n\t\t/**\n\t\t * The components that should be updated.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.components = components;\n\n\t\t/**\n\t\t * The value node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.targetNode = targetNode;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from {@link SetNode#sourceNode}.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.sourceNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { sourceNode, components, targetNode } = this;\n\n\t\tconst sourceType = this.getNodeType( builder );\n\n\t\tconst componentType = builder.getComponentType( targetNode.getNodeType( builder ) );\n\t\tconst targetType = builder.getTypeFromLength( components.length, componentType );\n\n\t\tconst targetSnippet = targetNode.build( builder, targetType );\n\t\tconst sourceSnippet = sourceNode.build( builder, sourceType );\n\n\t\tconst length = builder.getTypeLength( sourceType );\n\t\tconst snippetValues = [];\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst component = vectorComponents[ i ];\n\n\t\t\tif ( component === components[ 0 ] ) {\n\n\t\t\t\tsnippetValues.push( targetSnippet );\n\n\t\t\t\ti += components.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tsnippetValues.push( sourceSnippet + '.' + component );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\n\n\t}\n\n}\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * It represents a flip operation during the shader generation process\n * meaning it flips normalized values with the following formula:\n * ```\n * x = 1 - x;\n * ```\n * `FlipNode` is internally used to implement any `flipXYZW()`, `flipRGBA()` and\n * `flipSTPQ()` method invocations on node objects. For example:\n * ```js\n * uvNode = uvNode.flipY();\n * ```\n *\n * @augments TempNode\n */\nclass FlipNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'FlipNode';\n\n\t}\n\n\t/**\n\t * Constructs a new flip node.\n\t *\n\t * @param {Node} sourceNode - The node which component(s) should be flipped.\n\t * @param {string} components - The components that should be flipped e.g. `'x'` or `'xy'`.\n\t */\n\tconstructor( sourceNode, components ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node which component(s) should be flipped.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.sourceNode = sourceNode;\n\n\t\t/**\n\t\t * The components that should be flipped e.g. `'x'` or `'xy'`.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.components = components;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from the source node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.sourceNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { components, sourceNode } = this;\n\n\t\tconst sourceType = this.getNodeType( builder );\n\t\tconst sourceSnippet = sourceNode.build( builder );\n\n\t\tconst sourceCache = builder.getVarFromNode( this );\n\t\tconst sourceProperty = builder.getPropertyName( sourceCache );\n\n\t\tbuilder.addLineFlowCode( sourceProperty + ' = ' + sourceSnippet, this );\n\n\t\tconst length = builder.getTypeLength( sourceType );\n\t\tconst snippetValues = [];\n\n\t\tlet componentIndex = 0;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst component = vectorComponents[ i ];\n\n\t\t\tif ( component === components[ componentIndex ] ) {\n\n\t\t\t\tsnippetValues.push( '1.0 - ' + ( sourceProperty + '.' + component ) );\n\n\t\t\t\tcomponentIndex ++;\n\n\t\t\t} else {\n\n\t\t\t\tsnippetValues.push( sourceProperty + '.' + component );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\n\n\t}\n\n}\n\n/**\n * Base class for representing data input nodes.\n *\n * @augments Node\n */\nclass InputNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'InputNode';\n\n\t}\n\n\t/**\n\t * Constructs a new input node.\n\t *\n\t * @param {any} value - The value of this node. This can be any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).\n\t * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n\t */\n\tconstructor( value, nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInputNode = true;\n\n\t\t/**\n\t\t * The value of this node. This can be any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).\n\t\t *\n\t\t * @type {any}\n\t\t */\n\t\tthis.value = value;\n\n\t\t/**\n\t\t * The precision of the value in the shader.\n\t\t *\n\t\t * @type {?('low'|'medium'|'high')}\n\t\t * @default null\n\t\t */\n\t\tthis.precision = null;\n\n\t}\n\n\tgetNodeType( /*builder*/ ) {\n\n\t\tif ( this.nodeType === null ) {\n\n\t\t\treturn getValueType( this.value );\n\n\t\t}\n\n\t\treturn this.nodeType;\n\n\t}\n\n\t/**\n\t * Returns the input type of the node which is by default the node type. Derived modules\n\t * might overwrite this method and use a fixed type or compute one analytically.\n\t *\n\t * A typical example for different input and node types are textures. The input type of a\n\t * normal RGBA texture is `texture` whereas its node type is `vec4`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( builder ) {\n\n\t\treturn this.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Sets the precision to the given value. The method can be\n\t * overwritten in derived classes if the final precision must be computed\n\t * analytically.\n\t *\n\t * @param {('low'|'medium'|'high')} precision - The precision of the input value in the shader.\n\t * @return {InputNode} A reference to this node.\n\t */\n\tsetPrecision( precision ) {\n\n\t\tthis.precision = precision;\n\n\t\treturn this;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.value = this.value;\n\n\t\tif ( this.value && this.value.toArray ) data.value = this.value.toArray();\n\n\t\tdata.valueType = getValueType( this.value );\n\t\tdata.nodeType = this.nodeType;\n\n\t\tif ( data.valueType === 'ArrayBuffer' ) data.value = arrayBufferToBase64( data.value );\n\n\t\tdata.precision = this.precision;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.nodeType = data.nodeType;\n\t\tthis.value = Array.isArray( data.value ) ? getValueFromType( data.valueType, ...data.value ) : data.value;\n\n\t\tthis.precision = data.precision || null;\n\n\t\tif ( this.value && this.value.fromArray ) this.value = this.value.fromArray( data.value );\n\n\t}\n\n\tgenerate( /*builder, output*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n}\n\nconst _regNum = /float|u?int/;\n\n/**\n * Class for representing a constant value in the shader.\n *\n * @augments InputNode\n */\nclass ConstNode extends InputNode {\n\n\tstatic get type() {\n\n\t\treturn 'ConstNode';\n\n\t}\n\n\t/**\n\t * Constructs a new input node.\n\t *\n\t * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color).\n\t * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n\t */\n\tconstructor( value, nodeType = null ) {\n\n\t\tsuper( value, nodeType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isConstNode = true;\n\n\t}\n\n\t/**\n\t * Generates the shader string of the value with the current node builder.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated value as a shader string.\n\t */\n\tgenerateConst( builder ) {\n\n\t\treturn builder.generateConst( this.getNodeType( builder ), this.value );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\tif ( _regNum.test( type ) && _regNum.test( output ) ) {\n\n\t\t\treturn builder.generateConst( output, this.value );\n\n\t\t}\n\n\t\treturn builder.format( this.generateConst( builder ), type, output );\n\n\t}\n\n}\n\n/**\n * Base class for representing member access on an object-like\n * node data structures.\n *\n * @augments Node\n */\nclass MemberNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'MemberNode';\n\n\t}\n\n\t/**\n\t * Constructs an array element node.\n\t *\n\t * @param {Node} node - The array-like node.\n\t * @param {string} property - The property name.\n\t */\n\tconstructor( node, property ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The array-like node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The property name.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.property = property;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMemberNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getMemberType( builder, this.property );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst propertyName = this.node.build( builder );\n\n\t\treturn propertyName + '.' + this.property;\n\n\t}\n\n}\n\nlet currentStack = null;\n\nconst NodeElements = new Map();\n\nfunction addMethodChaining( name, nodeElement ) {\n\n\tif ( NodeElements.has( name ) ) {\n\n\t\tconsole.warn( `THREE.TSL: Redefinition of method chaining '${ name }'.` );\n\t\treturn;\n\n\t}\n\n\tif ( typeof nodeElement !== 'function' ) throw new Error( `THREE.TSL: Node element ${ name } is not a function` );\n\n\tNodeElements.set( name, nodeElement );\n\n}\n\nconst parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );\nconst parseSwizzleAndSort = ( props ) => parseSwizzle( props ).split( '' ).sort().join( '' );\n\nconst shaderNodeHandler = {\n\n\tsetup( NodeClosure, params ) {\n\n\t\tconst inputs = params.shift();\n\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\n\n\t},\n\n\tget( node, prop, nodeObj ) {\n\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\n\n\t\t\tif ( node.isStackNode !== true && prop === 'assign' ) {\n\n\t\t\t\treturn ( ...params ) => {\n\n\t\t\t\t\tcurrentStack.assign( nodeObj, ...params );\n\n\t\t\t\t\treturn nodeObj;\n\n\t\t\t\t};\n\n\t\t\t} else if ( NodeElements.has( prop ) ) {\n\n\t\t\t\tconst nodeElement = NodeElements.get( prop );\n\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.add( nodeElement( ...params ) ) : ( ...params ) => nodeElement( nodeObj, ...params );\n\n\t\t\t} else if ( prop === 'self' ) {\n\n\t\t\t\treturn node;\n\n\t\t\t} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {\n\n\t\t\t\tconst nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );\n\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.assign( params[ 0 ], nodeElement( ...params ) ) : ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );\n\n\t\t\t} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing properties ( swizzle )\n\n\t\t\t\tprop = parseSwizzle( prop );\n\n\t\t\t\treturn nodeObject( new SplitNode( nodeObj, prop ) );\n\n\t\t\t} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// set properties ( swizzle ) and sort to xyzw sequence\n\n\t\t\t\tprop = parseSwizzleAndSort( prop.slice( 3 ).toLowerCase() );\n\n\t\t\t\treturn ( value ) => nodeObject( new SetNode( node, prop, value ) );\n\n\t\t\t} else if ( /^flip[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// set properties ( swizzle ) and sort to xyzw sequence\n\n\t\t\t\tprop = parseSwizzleAndSort( prop.slice( 4 ).toLowerCase() );\n\n\t\t\t\treturn () => nodeObject( new FlipNode( nodeObject( node ), prop ) );\n\n\t\t\t} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {\n\n\t\t\t\t// accessing property\n\n\t\t\t\tif ( prop === 'width' ) prop = 'x';\n\t\t\t\telse if ( prop === 'height' ) prop = 'y';\n\t\t\t\telse if ( prop === 'depth' ) prop = 'z';\n\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\n\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing array\n\n\t\t\t\treturn nodeObject( new ArrayElementNode( nodeObj, new ConstNode( Number( prop ), 'uint' ) ) );\n\n\t\t\t} else if ( /^get$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing properties\n\n\t\t\t\treturn ( value ) => nodeObject( new MemberNode( nodeObj, value ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Reflect.get( node, prop, nodeObj );\n\n\t},\n\n\tset( node, prop, value, nodeObj ) {\n\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\n\n\t\t\t// setting properties\n\n\t\t\tif ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test( prop ) === true ) {\n\n\t\t\t\tnodeObj[ prop ].assign( value );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Reflect.set( node, prop, value, nodeObj );\n\n\t}\n\n};\n\nconst nodeObjectsCacheMap = new WeakMap();\nconst nodeBuilderFunctionsCacheMap = new WeakMap();\n\nconst ShaderNodeObject = function ( obj, altType = null ) {\n\n\tconst type = getValueType( obj );\n\n\tif ( type === 'node' ) {\n\n\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\n\n\t\tif ( nodeObject === undefined ) {\n\n\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\n\n\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\n\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\n\n\t\t}\n\n\t\treturn nodeObject;\n\n\t} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {\n\n\t\treturn nodeObject( getConstNode( obj, altType ) );\n\n\t} else if ( type === 'shader' ) {\n\n\t\treturn Fn( obj );\n\n\t}\n\n\treturn obj;\n\n};\n\nconst ShaderNodeObjects = function ( objects, altType = null ) {\n\n\tfor ( const name in objects ) {\n\n\t\tobjects[ name ] = nodeObject( objects[ name ], altType );\n\n\t}\n\n\treturn objects;\n\n};\n\nconst ShaderNodeArray = function ( array, altType = null ) {\n\n\tconst len = array.length;\n\n\tfor ( let i = 0; i < len; i ++ ) {\n\n\t\tarray[ i ] = nodeObject( array[ i ], altType );\n\n\t}\n\n\treturn array;\n\n};\n\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {\n\n\tconst assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );\n\n\tlet fn, name = scope, minParams, maxParams;\n\n\tfunction verifyParamsLimit( params ) {\n\n\t\tlet tslName;\n\n\t\tif ( name ) tslName = /[a-z]/i.test( name ) ? name + '()' : name;\n\t\telse tslName = NodeClass.type;\n\n\t\tif ( minParams !== undefined && params.length < minParams ) {\n\n\t\t\tconsole.error( `THREE.TSL: \"${ tslName }\" parameter length is less than minimum required.` );\n\n\t\t\treturn params.concat( new Array( minParams - params.length ).fill( 0 ) );\n\n\t\t} else if ( maxParams !== undefined && params.length > maxParams ) {\n\n\t\t\tconsole.error( `THREE.TSL: \"${ tslName }\" parameter length exceeds limit.` );\n\n\t\t\treturn params.slice( 0, maxParams );\n\n\t\t}\n\n\t\treturn params;\n\n\t}\n\n\tif ( scope === null ) {\n\n\t\tfn = ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( ...nodeArray( verifyParamsLimit( params ) ) ) );\n\n\t\t};\n\n\t} else if ( factor !== null ) {\n\n\t\tfactor = nodeObject( factor );\n\n\t\tfn = ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( verifyParamsLimit( params ) ), factor ) );\n\n\t\t};\n\n\t} else {\n\n\t\tfn = ( ...params ) => {\n\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( verifyParamsLimit( params ) ) ) );\n\n\t\t};\n\n\t}\n\n\tfn.setParameterLength = ( ...params ) => {\n\n\t\tif ( params.length === 1 ) minParams = maxParams = params[ 0 ];\n\t\telse if ( params.length === 2 ) [ minParams, maxParams ] = params;\n\n\t\treturn fn;\n\n\t};\n\n\tfn.setName = ( value ) => {\n\n\t\tname = value;\n\n\t\treturn fn;\n\n\t};\n\n\treturn fn;\n\n};\n\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\n\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\n\n};\n\nclass ShaderCallNodeInternal extends Node {\n\n\tconstructor( shaderNode, inputNodes ) {\n\n\t\tsuper();\n\n\t\tthis.shaderNode = shaderNode;\n\t\tthis.inputNodes = inputNodes;\n\n\t\tthis.isShaderCallNodeInternal = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.shaderNode.nodeType || this.getOutputNode( builder ).getNodeType( builder );\n\n\t}\n\n\tgetMemberType( builder, name ) {\n\n\t\treturn this.getOutputNode( builder ).getMemberType( builder, name );\n\n\t}\n\n\tcall( builder ) {\n\n\t\tconst { shaderNode, inputNodes } = this;\n\n\t\tconst properties = builder.getNodeProperties( shaderNode );\n\t\tif ( properties.onceOutput ) return properties.onceOutput;\n\n\t\t//\n\n\t\tlet result = null;\n\n\t\tif ( shaderNode.layout ) {\n\n\t\t\tlet functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get( builder.constructor );\n\n\t\t\tif ( functionNodesCacheMap === undefined ) {\n\n\t\t\t\tfunctionNodesCacheMap = new WeakMap();\n\n\t\t\t\tnodeBuilderFunctionsCacheMap.set( builder.constructor, functionNodesCacheMap );\n\n\t\t\t}\n\n\t\t\tlet functionNode = functionNodesCacheMap.get( shaderNode );\n\n\t\t\tif ( functionNode === undefined ) {\n\n\t\t\t\tfunctionNode = nodeObject( builder.buildFunctionNode( shaderNode ) );\n\n\t\t\t\tfunctionNodesCacheMap.set( shaderNode, functionNode );\n\n\t\t\t}\n\n\t\t\tbuilder.addInclude( functionNode );\n\n\t\t\tresult = nodeObject( functionNode.call( inputNodes ) );\n\n\t\t} else {\n\n\t\t\tconst jsFunc = shaderNode.jsFunc;\n\t\t\tconst outputNode = inputNodes !== null || jsFunc.length > 1 ? jsFunc( inputNodes || [], builder ) : jsFunc( builder );\n\n\t\t\tresult = nodeObject( outputNode );\n\n\t\t}\n\n\t\tif ( shaderNode.once ) {\n\n\t\t\tproperties.onceOutput = result;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tgetOutputNode( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tif ( properties.outputNode === null ) {\n\n\t\t\tproperties.outputNode = this.setupOutput( builder );\n\n\t\t}\n\n\t\treturn properties.outputNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\treturn this.getOutputNode( builder );\n\n\t}\n\n\tsetupOutput( builder ) {\n\n\t\tbuilder.addStack();\n\n\t\tbuilder.stack.outputNode = this.call( builder );\n\n\t\treturn builder.removeStack();\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst outputNode = this.getOutputNode( builder );\n\n\t\treturn outputNode.build( builder, output );\n\n\t}\n\n}\n\nclass ShaderNodeInternal extends Node {\n\n\tconstructor( jsFunc, nodeType ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis.jsFunc = jsFunc;\n\t\tthis.layout = null;\n\n\t\tthis.global = true;\n\n\t\tthis.once = false;\n\n\t}\n\n\tsetLayout( layout ) {\n\n\t\tthis.layout = layout;\n\n\t\treturn this;\n\n\t}\n\n\tcall( inputs = null ) {\n\n\t\tnodeObjects( inputs );\n\n\t\treturn nodeObject( new ShaderCallNodeInternal( this, inputs ) );\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.call();\n\n\t}\n\n}\n\nconst bools = [ false, true ];\nconst uints = [ 0, 1, 2, 3 ];\nconst ints = [ -1, -2 ];\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\n\nconst boolsCacheMap = new Map();\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\n\nconst uintsCacheMap = new Map();\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\n\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\n\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\n\nconst cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\n\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\n\nconst getConstNode = ( value, type ) => {\n\n\tif ( constNodesCacheMap.has( value ) ) {\n\n\t\treturn constNodesCacheMap.get( value );\n\n\t} else if ( value.isNode === true ) {\n\n\t\treturn value;\n\n\t} else {\n\n\t\treturn new ConstNode( value, type );\n\n\t}\n\n};\n\nconst safeGetNodeType = ( node ) => {\n\n\ttry {\n\n\t\treturn node.getNodeType();\n\n\t} catch ( _ ) {\n\n\t\treturn undefined;\n\n\t}\n\n};\n\nconst ConvertType = function ( type, cacheMap = null ) {\n\n\treturn ( ...params ) => {\n\n\t\tif ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {\n\n\t\t\tparams = [ getValueFromType( type, ...params ) ];\n\n\t\t}\n\n\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\n\n\t\t\treturn nodeObject( cacheMap.get( params[ 0 ] ) );\n\n\t\t}\n\n\t\tif ( params.length === 1 ) {\n\n\t\t\tconst node = getConstNode( params[ 0 ], type );\n\t\t\tif ( safeGetNodeType( node ) === type ) return nodeObject( node );\n\t\t\treturn nodeObject( new ConvertNode( node, type ) );\n\n\t\t}\n\n\t\tconst nodes = params.map( param => getConstNode( param ) );\n\t\treturn nodeObject( new JoinNode( nodes, type ) );\n\n\t};\n\n};\n\n// exports\n\nconst defined = ( v ) => typeof v === 'object' && v !== null ? v.value : v; // TODO: remove boolean conversion and defined function\n\n// utils\n\nconst getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;\n\n// shader node base\n\nfunction ShaderNode( jsFunc, nodeType ) {\n\n\treturn new Proxy( new ShaderNodeInternal( jsFunc, nodeType ), shaderNodeHandler );\n\n}\n\nconst nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );\nconst nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );\nconst nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );\nconst nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );\nconst nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );\n\nlet fnId = 0;\n\nconst Fn = ( jsFunc, layout = null ) => {\n\n\tlet nodeType = null;\n\n\tif ( layout !== null ) {\n\n\t\tif ( typeof layout === 'object' ) {\n\n\t\t\tnodeType = layout.return;\n\n\t\t} else {\n\n\t\t\tif ( typeof layout === 'string' ) {\n\n\t\t\t\tnodeType = layout;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.TSL: Invalid layout type.' );\n\n\t\t\t}\n\n\t\t\tlayout = null;\n\n\t\t}\n\n\t}\n\n\tconst shaderNode = new ShaderNode( jsFunc, nodeType );\n\n\tconst fn = ( ...params ) => {\n\n\t\tlet inputs;\n\n\t\tnodeObjects( params );\n\n\t\tif ( params[ 0 ] && params[ 0 ].isNode ) {\n\n\t\t\tinputs = [ ...params ];\n\n\t\t} else {\n\n\t\t\tinputs = params[ 0 ];\n\n\t\t}\n\n\t\tconst fnCall = shaderNode.call( inputs );\n\n\t\tif ( nodeType === 'void' ) fnCall.toStack();\n\n\t\treturn fnCall;\n\n\t};\n\n\tfn.shaderNode = shaderNode;\n\n\tfn.setLayout = ( layout ) => {\n\n\t\tshaderNode.setLayout( layout );\n\n\t\treturn fn;\n\n\t};\n\n\tfn.once = () => {\n\n\t\tshaderNode.once = true;\n\n\t\treturn fn;\n\n\t};\n\n\tif ( layout !== null ) {\n\n\t\tif ( typeof layout.inputs !== 'object' ) {\n\n\t\t\tconst fullLayout = {\n\t\t\t\tname: 'fn' + fnId ++,\n\t\t\t\ttype: nodeType,\n\t\t\t\tinputs: []\n\t\t\t};\n\n\t\t\tfor ( const name in layout ) {\n\n\t\t\t\tif ( name === 'return' ) continue;\n\n\t\t\t\tfullLayout.inputs.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\ttype: layout[ name ]\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tlayout = fullLayout;\n\n\t\t}\n\n\t\tfn.setLayout( layout );\n\n\t}\n\n\treturn fn;\n\n};\n\n//\n\naddMethodChaining( 'toGlobal', ( node ) => {\n\n\tnode.global = true;\n\n\treturn node;\n\n} );\n\n//\n\nconst setCurrentStack = ( stack ) => {\n\n\tcurrentStack = stack;\n\n};\n\nconst getCurrentStack = () => currentStack;\n\n/**\n * Represent a conditional node using if/else statements.\n *\n * ```js\n * If( condition, function )\n * \t.ElseIf( condition, function )\n * \t.Else( function )\n * ```\n * @tsl\n * @function\n * @param {...any} params - The parameters for the conditional node.\n * @returns {StackNode} The conditional node.\n */\nconst If = ( ...params ) => currentStack.If( ...params );\n\n/**\n * Represent a conditional node using switch/case statements.\n *\n * ```js\n * Switch( value )\n * \t.Case( 1, function )\n * \t.Case( 2, 3, 4, function )\n * \t.Default( function )\n * ```\n * @tsl\n * @function\n * @param {...any} params - The parameters for the conditional node.\n * @returns {StackNode} The conditional node.\n */\nconst Switch = ( ...params ) => currentStack.Switch( ...params );\n\n/**\n * Add the given node to the current stack.\n *\n * @param {Node} node - The node to add.\n * @returns {Node} The node that was added to the stack.\n */\nfunction Stack( node ) {\n\n\tif ( currentStack ) currentStack.add( node );\n\n\treturn node;\n\n}\n\naddMethodChaining( 'toStack', Stack );\n\n// types\n\nconst color = new ConvertType( 'color' );\n\nconst float = new ConvertType( 'float', cacheMaps.float );\nconst int = new ConvertType( 'int', cacheMaps.ints );\nconst uint = new ConvertType( 'uint', cacheMaps.uint );\nconst bool = new ConvertType( 'bool', cacheMaps.bool );\n\nconst vec2 = new ConvertType( 'vec2' );\nconst ivec2 = new ConvertType( 'ivec2' );\nconst uvec2 = new ConvertType( 'uvec2' );\nconst bvec2 = new ConvertType( 'bvec2' );\n\nconst vec3 = new ConvertType( 'vec3' );\nconst ivec3 = new ConvertType( 'ivec3' );\nconst uvec3 = new ConvertType( 'uvec3' );\nconst bvec3 = new ConvertType( 'bvec3' );\n\nconst vec4 = new ConvertType( 'vec4' );\nconst ivec4 = new ConvertType( 'ivec4' );\nconst uvec4 = new ConvertType( 'uvec4' );\nconst bvec4 = new ConvertType( 'bvec4' );\n\nconst mat2 = new ConvertType( 'mat2' );\nconst mat3 = new ConvertType( 'mat3' );\nconst mat4 = new ConvertType( 'mat4' );\n\nconst string = ( value = '' ) => nodeObject( new ConstNode( value, 'string' ) );\nconst arrayBuffer = ( value ) => nodeObject( new ConstNode( value, 'ArrayBuffer' ) );\n\naddMethodChaining( 'toColor', color );\naddMethodChaining( 'toFloat', float );\naddMethodChaining( 'toInt', int );\naddMethodChaining( 'toUint', uint );\naddMethodChaining( 'toBool', bool );\naddMethodChaining( 'toVec2', vec2 );\naddMethodChaining( 'toIVec2', ivec2 );\naddMethodChaining( 'toUVec2', uvec2 );\naddMethodChaining( 'toBVec2', bvec2 );\naddMethodChaining( 'toVec3', vec3 );\naddMethodChaining( 'toIVec3', ivec3 );\naddMethodChaining( 'toUVec3', uvec3 );\naddMethodChaining( 'toBVec3', bvec3 );\naddMethodChaining( 'toVec4', vec4 );\naddMethodChaining( 'toIVec4', ivec4 );\naddMethodChaining( 'toUVec4', uvec4 );\naddMethodChaining( 'toBVec4', bvec4 );\naddMethodChaining( 'toMat2', mat2 );\naddMethodChaining( 'toMat3', mat3 );\naddMethodChaining( 'toMat4', mat4 );\n\n// basic nodes\n\nconst element = /*@__PURE__*/ nodeProxy( ArrayElementNode ).setParameterLength( 2 );\nconst convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\nconst split = ( node, channels ) => nodeObject( new SplitNode( nodeObject( node ), channels ) );\n\naddMethodChaining( 'element', element );\naddMethodChaining( 'convert', convert );\n\n// deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r176. Use {@link Stack} instead.\n *\n * @param {Node} node - The node to add.\n * @returns {Function}\n */\nconst append = ( node ) => { // @deprecated, r176\n\n\tconsole.warn( 'THREE.TSL: append() has been renamed to Stack().' );\n\treturn Stack( node );\n\n};\n\naddMethodChaining( 'append', ( node ) => { // @deprecated, r176\n\n\tconsole.warn( 'THREE.TSL: .append() has been renamed to .toStack().' );\n\treturn Stack( node );\n\n} );\n\n/**\n * @tsl\n * @function\n * @deprecated since r168. Use {@link Fn} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nconst tslFn = ( ...params ) => { // @deprecated, r168\n\n\tconsole.warn( 'THREE.TSL: tslFn() has been renamed to Fn().' );\n\treturn Fn( ...params );\n\n};\n\n/**\n * This class represents a shader property. It can be used\n * to explicitly define a property and assign a value to it.\n *\n * ```js\n * const threshold = property( 'float', 'threshold' ).assign( THRESHOLD );\n *```\n * `PropertyNode` is used by the engine to predefined common material properties\n * for TSL code.\n *\n * @augments Node\n */\nclass PropertyNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'PropertyNode';\n\n\t}\n\n\t/**\n\t * Constructs a new property node.\n\t *\n\t * @param {string} nodeType - The type of the node.\n\t * @param {?string} [name=null] - The name of the property in the shader.\n\t * @param {boolean} [varying=false] - Whether this property is a varying or not.\n\t */\n\tconstructor( nodeType, name = null, varying = false ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * The name of the property in the shader. If no name is defined,\n\t\t * the node system auto-generates one.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Whether this property is a varying or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.varying = varying;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPropertyNode = true;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\t/**\n\t * The method is overwritten so it always returns `true`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether this node is global or not.\n\t */\n\tisGlobal( /*builder*/ ) {\n\n\t\treturn true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tlet nodeVar;\n\n\t\tif ( this.varying === true ) {\n\n\t\t\tnodeVar = builder.getVaryingFromNode( this, this.name );\n\t\t\tnodeVar.needsInterpolation = true;\n\n\t\t} else {\n\n\t\t\tnodeVar = builder.getVarFromNode( this, this.name );\n\n\t\t}\n\n\t\treturn builder.getPropertyName( nodeVar );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a property node.\n *\n * @tsl\n * @function\n * @param {string} type - The type of the node.\n * @param {?string} [name=null] - The name of the property in the shader.\n * @returns {PropertyNode}\n */\nconst property = ( type, name ) => nodeObject( new PropertyNode( type, name ) );\n\n/**\n * TSL function for creating a varying property node.\n *\n * @tsl\n * @function\n * @param {string} type - The type of the node.\n * @param {?string} [name=null] - The name of the varying in the shader.\n * @returns {PropertyNode}\n */\nconst varyingProperty = ( type, name ) => nodeObject( new PropertyNode( type, name, true ) );\n\n/**\n * TSL object that represents the shader variable `DiffuseColor`.\n *\n * @tsl\n * @type {PropertyNode<vec4>}\n */\nconst diffuseColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'DiffuseColor' );\n\n/**\n * TSL object that represents the shader variable `EmissiveColor`.\n *\n * @tsl\n * @type {PropertyNode<vec3>}\n */\nconst emissive = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'EmissiveColor' );\n\n/**\n * TSL object that represents the shader variable `Roughness`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst roughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Roughness' );\n\n/**\n * TSL object that represents the shader variable `Metalness`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst metalness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Metalness' );\n\n/**\n * TSL object that represents the shader variable `Clearcoat`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst clearcoat = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Clearcoat' );\n\n/**\n * TSL object that represents the shader variable `ClearcoatRoughness`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst clearcoatRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'ClearcoatRoughness' );\n\n/**\n * TSL object that represents the shader variable `Sheen`.\n *\n * @tsl\n * @type {PropertyNode<vec3>}\n */\nconst sheen = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'Sheen' );\n\n/**\n * TSL object that represents the shader variable `SheenRoughness`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst sheenRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SheenRoughness' );\n\n/**\n * TSL object that represents the shader variable `Iridescence`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst iridescence = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Iridescence' );\n\n/**\n * TSL object that represents the shader variable `IridescenceIOR`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst iridescenceIOR = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceIOR' );\n\n/**\n * TSL object that represents the shader variable `IridescenceThickness`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst iridescenceThickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceThickness' );\n\n/**\n * TSL object that represents the shader variable `AlphaT`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst alphaT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AlphaT' );\n\n/**\n * TSL object that represents the shader variable `Anisotropy`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst anisotropy = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Anisotropy' );\n\n/**\n * TSL object that represents the shader variable `AnisotropyT`.\n *\n * @tsl\n * @type {PropertyNode<vec3>}\n */\nconst anisotropyT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyT' );\n\n/**\n * TSL object that represents the shader variable `AnisotropyB`.\n *\n * @tsl\n * @type {PropertyNode<vec3>}\n */\nconst anisotropyB = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyB' );\n\n/**\n * TSL object that represents the shader variable `SpecularColor`.\n *\n * @tsl\n * @type {PropertyNode<color>}\n */\nconst specularColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'SpecularColor' );\n\n/**\n * TSL object that represents the shader variable `SpecularF90`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst specularF90 = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SpecularF90' );\n\n/**\n * TSL object that represents the shader variable `Shininess`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst shininess = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Shininess' );\n\n/**\n * TSL object that represents the shader variable `Output`.\n *\n * @tsl\n * @type {PropertyNode<vec4>}\n */\nconst output = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'Output' );\n\n/**\n * TSL object that represents the shader variable `dashSize`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst dashSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'dashSize' );\n\n/**\n * TSL object that represents the shader variable `gapSize`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst gapSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'gapSize' );\n\n/**\n * TSL object that represents the shader variable `pointWidth`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst pointWidth = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'pointWidth' );\n\n/**\n * TSL object that represents the shader variable `IOR`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst ior = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IOR' );\n\n/**\n * TSL object that represents the shader variable `Transmission`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst transmission = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Transmission' );\n\n/**\n * TSL object that represents the shader variable `Thickness`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst thickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Thickness' );\n\n/**\n * TSL object that represents the shader variable `AttenuationDistance`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst attenuationDistance = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AttenuationDistance' );\n\n/**\n * TSL object that represents the shader variable `AttenuationColor`.\n *\n * @tsl\n * @type {PropertyNode<color>}\n */\nconst attenuationColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'AttenuationColor' );\n\n/**\n * TSL object that represents the shader variable `Dispersion`.\n *\n * @tsl\n * @type {PropertyNode<float>}\n */\nconst dispersion = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Dispersion' );\n\n/**\n * This node can be used to group single instances of {@link UniformNode}\n * and manage them as a uniform buffer.\n *\n * In most cases, the predefined nodes `objectGroup`, `renderGroup` and `frameGroup`\n * will be used when defining the {@link UniformNode#groupNode} property.\n *\n * - `objectGroup`: Uniform buffer per object.\n * - `renderGroup`: Shared uniform buffer, updated once per render call.\n * - `frameGroup`: Shared uniform buffer, updated once per frame.\n *\n * @augments Node\n */\nclass UniformGroupNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'UniformGroupNode';\n\n\t}\n\n\t/**\n\t * Constructs a new uniform group node.\n\t *\n\t * @param {string} name - The name of the uniform group node.\n\t * @param {boolean} [shared=false] - Whether this uniform group node is shared or not.\n\t * @param {number} [order=1] - Influences the internal sorting.\n\t */\n\tconstructor( name, shared = false, order = 1 ) {\n\n\t\tsuper( 'string' );\n\n\t\t/**\n\t\t * The name of the uniform group node.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Whether this uniform group node is shared or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.shared = shared;\n\n\t\t/**\n\t\t * Influences the internal sorting.\n\t\t * TODO: Add details when this property should be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.order = order;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isUniformGroup = true;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.name = this.name;\n\t\tdata.version = this.version;\n\t\tdata.shared = this.shared;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.name = data.name;\n\t\tthis.version = data.version;\n\t\tthis.shared = data.shared;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a uniform group node with the given name.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the uniform group node.\n * @returns {UniformGroupNode}\n */\nconst uniformGroup = ( name ) => new UniformGroupNode( name );\n\n/**\n * TSL function for creating a shared uniform group node with the given name and order.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the uniform group node.\n * @param {number} [order=0] - Influences the internal sorting.\n * @returns {UniformGroupNode}\n */\nconst sharedUniformGroup = ( name, order = 0 ) => new UniformGroupNode( name, true, order );\n\n/**\n * TSL object that represents a shared uniform group node which is updated once per frame.\n *\n * @tsl\n * @type {UniformGroupNode}\n */\nconst frameGroup = /*@__PURE__*/ sharedUniformGroup( 'frame' );\n\n/**\n * TSL object that represents a shared uniform group node which is updated once per render.\n *\n * @tsl\n * @type {UniformGroupNode}\n */\nconst renderGroup = /*@__PURE__*/ sharedUniformGroup( 'render' );\n\n/**\n * TSL object that represents a uniform group node which is updated once per object.\n *\n * @tsl\n * @type {UniformGroupNode}\n */\nconst objectGroup = /*@__PURE__*/ uniformGroup( 'object' );\n\n/**\n * Class for representing a uniform.\n *\n * @augments InputNode\n */\nclass UniformNode extends InputNode {\n\n\tstatic get type() {\n\n\t\treturn 'UniformNode';\n\n\t}\n\n\t/**\n\t * Constructs a new uniform node.\n\t *\n\t * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).\n\t * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n\t */\n\tconstructor( value, nodeType = null ) {\n\n\t\tsuper( value, nodeType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isUniformNode = true;\n\n\t\t/**\n\t\t * The name or label of the uniform.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The uniform group of this uniform. By default, uniforms are\n\t\t * managed per object but they might belong to a shared group\n\t\t * which is updated per frame or render call.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t */\n\t\tthis.groupNode = objectGroup;\n\n\t}\n\n\t/**\n\t * Sets the {@link UniformNode#name} property.\n\t *\n\t * @param {string} name - The name of the uniform.\n\t * @return {UniformNode} A reference to this node.\n\t */\n\tlabel( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the {@link UniformNode#groupNode} property.\n\t *\n\t * @param {UniformGroupNode} group - The uniform group.\n\t * @return {UniformNode} A reference to this node.\n\t */\n\tsetGroup( group ) {\n\n\t\tthis.groupNode = group;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the {@link UniformNode#groupNode}.\n\t *\n\t * @return {UniformGroupNode} The uniform group.\n\t */\n\tgetGroup() {\n\n\t\treturn this.groupNode;\n\n\t}\n\n\t/**\n\t * By default, this method returns the result of {@link Node#getHash} but derived\n\t * classes might overwrite this method with a different implementation.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The uniform hash.\n\t */\n\tgetUniformHash( builder ) {\n\n\t\treturn this.getHash( builder );\n\n\t}\n\n\tonUpdate( callback, updateType ) {\n\n\t\tconst self = this.getSelf();\n\n\t\tcallback = callback.bind( self );\n\n\t\treturn super.onUpdate( ( frame ) => {\n\n\t\t\tconst value = callback( frame, self );\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\tthis.value = value;\n\n\t\t\t}\n\n\t \t}, updateType );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst hash = this.getUniformHash( builder );\n\n\t\tlet sharedNode = builder.getNodeFromHash( hash );\n\n\t\tif ( sharedNode === undefined ) {\n\n\t\t\tbuilder.setHashNode( this, hash );\n\n\t\t\tsharedNode = this;\n\n\t\t}\n\n\t\tconst sharedNodeType = sharedNode.getInputType( builder );\n\n\t\tconst nodeUniform = builder.getUniformFromNode( sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label );\n\t\tconst propertyName = builder.getPropertyName( nodeUniform );\n\n\t\tif ( builder.context.label !== undefined ) delete builder.context.label;\n\n\t\treturn builder.format( propertyName, type, output );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a uniform node.\n *\n * @tsl\n * @function\n * @param {any} arg1 - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).\n * @param {string} [arg2] - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n * @returns {UniformNode}\n */\nconst uniform = ( arg1, arg2 ) => {\n\n\tconst nodeType = getConstNodeType( arg2 || arg1 );\n\n\t// @TODO: get ConstNode from .traverse() in the future\n\tconst value = ( arg1 && arg1.isNode === true ) ? ( arg1.node && arg1.node.value ) || arg1.value : arg1;\n\n\treturn nodeObject( new UniformNode( value, nodeType ) );\n\n};\n\n/**\n * ArrayNode represents a collection of nodes, typically created using the {@link array} function.\n * ```js\n * const colors = array( [\n * \tvec3( 1, 0, 0 ),\n * \tvec3( 0, 1, 0 ),\n * \tvec3( 0, 0, 1 )\n * ] );\n *\n * const redColor = tintColors.element( 0 );\n *\n * @augments TempNode\n */\nclass ArrayNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'ArrayNode';\n\n\t}\n\n\t/**\n\t * Constructs a new array node.\n\t *\n\t * @param {?string} nodeType - The data type of the elements.\n\t * @param {number} count - Size of the array.\n\t * @param {?Array<Node>} [values=null] - Array default values.\n\t */\n\tconstructor( nodeType, count, values = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * Array size.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * Array default values.\n\t\t *\n\t\t * @type {?Array<Node>}\n\t\t */\n\t\tthis.values = values;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayNode = true;\n\n\t}\n\n\t/**\n\t * Returns the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The type of the node.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.nodeType === null ) {\n\n\t\t\tthis.nodeType = this.values[ 0 ].getNodeType( builder );\n\n\t\t}\n\n\t\treturn this.nodeType;\n\n\t}\n\n\t/**\n\t * Returns the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The type of the node.\n\t */\n\tgetElementType( builder ) {\n\n\t\treturn this.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * This method builds the output node and returns the resulting array as a shader string.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated shader string.\n\t */\n\tgenerate( builder ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\treturn builder.generateArray( type, this.count, this.values );\n\n\t}\n\n}\n\n/**\n * TSL function for creating an array node.\n *\n * @tsl\n * @function\n * @param {string|Array<Node>} nodeTypeOrValues - A string representing the element type (e.g., 'vec3')\n * or an array containing the default values (e.g., [ vec3() ]).\n * @param {?number} [count] - Size of the array.\n * @returns {ArrayNode}\n */\nconst array = ( ...params ) => {\n\n\tlet node;\n\n\tif ( params.length === 1 ) {\n\n\t\tconst values = params[ 0 ];\n\n\t\tnode = new ArrayNode( null, values.length, values );\n\n\t} else {\n\n\t\tconst nodeType = params[ 0 ];\n\t\tconst count = params[ 1 ];\n\n\t\tnode = new ArrayNode( nodeType, count );\n\n\t}\n\n\treturn nodeObject( node );\n\n};\n\naddMethodChaining( 'toArray', ( node, count ) => array( Array( count ).fill( node ) ) );\n\n/**\n * These node represents an assign operation. Meaning a node is assigned\n * to another node.\n *\n * @augments TempNode\n */\nclass AssignNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'AssignNode';\n\n\t}\n\n\t/**\n\t * Constructs a new assign node.\n\t *\n\t * @param {Node} targetNode - The target node.\n\t * @param {Node} sourceNode - The source type.\n\t */\n\tconstructor( targetNode, sourceNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The target node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.targetNode = targetNode;\n\n\t\t/**\n\t\t * The source node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.sourceNode = sourceNode;\n\n\t}\n\n\t/**\n\t * Whether this node is used more than once in context of other nodes. This method\n\t * is overwritten since it always returns `false` (assigns are unique).\n\t *\n\t * @return {boolean} A flag that indicates if there is more than one dependency to other nodes. Always `false`.\n\t */\n\thasDependencies() {\n\n\t\treturn false;\n\n\t}\n\n\tgetNodeType( builder, output ) {\n\n\t\treturn output !== 'void' ? this.targetNode.getNodeType( builder ) : 'void';\n\n\t}\n\n\t/**\n\t * Whether a split is required when assigning source to target. This can happen when the component length of\n\t * target and source data type does not match.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether a split is required when assigning source to target.\n\t */\n\tneedsSplitAssign( builder ) {\n\n\t\tconst { targetNode } = this;\n\n\t\tif ( builder.isAvailable( 'swizzleAssign' ) === false && targetNode.isSplitNode && targetNode.components.length > 1 ) {\n\n\t\t\tconst targetLength = builder.getTypeLength( targetNode.node.getNodeType( builder ) );\n\t\t\tconst assignDifferentVector = vectorComponents.join( '' ).slice( 0, targetLength ) !== targetNode.components;\n\n\t\t\treturn assignDifferentVector;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { targetNode, sourceNode } = this;\n\n\t\tconst needsSplitAssign = this.needsSplitAssign( builder );\n\n\t\tconst targetType = targetNode.getNodeType( builder );\n\n\t\tconst target = targetNode.context( { assign: true } ).build( builder );\n\t\tconst source = sourceNode.build( builder, targetType );\n\n\t\tconst sourceType = sourceNode.getNodeType( builder );\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t//\n\n\t\tlet snippet;\n\n\t\tif ( nodeData.initialized === true ) {\n\n\t\t\tif ( output !== 'void' ) {\n\n\t\t\t\tsnippet = target;\n\n\t\t\t}\n\n\t\t} else if ( needsSplitAssign ) {\n\n\t\t\tconst sourceVar = builder.getVarFromNode( this, null, targetType );\n\t\t\tconst sourceProperty = builder.getPropertyName( sourceVar );\n\n\t\t\tbuilder.addLineFlowCode( `${ sourceProperty } = ${ source }`, this );\n\n\t\t\tconst targetRoot = targetNode.node.context( { assign: true } ).build( builder );\n\n\t\t\tfor ( let i = 0; i < targetNode.components.length; i ++ ) {\n\n\t\t\t\tconst component = targetNode.components[ i ];\n\n\t\t\t\tbuilder.addLineFlowCode( `${ targetRoot }.${ component } = ${ sourceProperty }[ ${ i } ]`, this );\n\n\t\t\t}\n\n\t\t\tif ( output !== 'void' ) {\n\n\t\t\t\tsnippet = target;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tsnippet = `${ target } = ${ source }`;\n\n\t\t\tif ( output === 'void' || sourceType === 'void' ) {\n\n\t\t\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t\t\t\tif ( output !== 'void' ) {\n\n\t\t\t\t\tsnippet = target;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tnodeData.initialized = true;\n\n\t\treturn builder.format( snippet, targetType, output );\n\n\t}\n\n}\n\n/**\n * TSL function for creating an assign node.\n *\n * @tsl\n * @function\n * @param {Node} targetNode - The target node.\n * @param {Node} sourceNode - The source type.\n * @returns {AssignNode}\n */\nconst assign = /*@__PURE__*/ nodeProxy( AssignNode ).setParameterLength( 2 );\n\naddMethodChaining( 'assign', assign );\n\n/**\n * This module represents the call of a {@link FunctionNode}. Developers are usually not confronted\n * with this module since they use the predefined TSL syntax `wgslFn` and `glslFn` which encapsulate\n * this logic.\n *\n * @augments TempNode\n */\nclass FunctionCallNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'FunctionCallNode';\n\n\t}\n\n\t/**\n\t * Constructs a new function call node.\n\t *\n\t * @param {?FunctionNode} functionNode - The function node.\n\t * @param {Object<string, Node>} [parameters={}] - The parameters for the function call.\n\t */\n\tconstructor( functionNode = null, parameters = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The function node.\n\t\t *\n\t\t * @type {?FunctionNode}\n\t\t * @default null\n\t\t */\n\t\tthis.functionNode = functionNode;\n\n\t\t/**\n\t\t * The parameters of the function call.\n\t\t *\n\t\t * @type {Object<string, Node>}\n\t\t * @default {}\n\t\t */\n\t\tthis.parameters = parameters;\n\n\t}\n\n\t/**\n\t * Sets the parameters of the function call node.\n\t *\n\t * @param {Object<string, Node>} parameters - The parameters to set.\n\t * @return {FunctionCallNode} A reference to this node.\n\t */\n\tsetParameters( parameters ) {\n\n\t\tthis.parameters = parameters;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the parameters of the function call node.\n\t *\n\t * @return {Object<string, Node>} The parameters of this node.\n\t */\n\tgetParameters() {\n\n\t\treturn this.parameters;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.functionNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst params = [];\n\n\t\tconst functionNode = this.functionNode;\n\n\t\tconst inputs = functionNode.getInputs( builder );\n\t\tconst parameters = this.parameters;\n\n\t\tconst generateInput = ( node, inputNode ) => {\n\n\t\t\tconst type = inputNode.type;\n\t\t\tconst pointer = type === 'pointer';\n\n\t\t\tlet output;\n\n\t\t\tif ( pointer ) output = '&' + node.build( builder );\n\t\t\telse output = node.build( builder, type );\n\n\t\t\treturn output;\n\n\t\t};\n\n\t\tif ( Array.isArray( parameters ) ) {\n\n\t\t\tif ( parameters.length > inputs.length ) {\n\n\t\t\t\tconsole.error( 'THREE.TSL: The number of provided parameters exceeds the expected number of inputs in \\'Fn()\\'.' );\n\n\t\t\t\tparameters.length = inputs.length;\n\n\t\t\t} else if ( parameters.length < inputs.length ) {\n\n\t\t\t\tconsole.error( 'THREE.TSL: The number of provided parameters is less than the expected number of inputs in \\'Fn()\\'.' );\n\n\t\t\t\twhile ( parameters.length < inputs.length ) {\n\n\t\t\t\t\tparameters.push( float( 0 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < parameters.length; i ++ ) {\n\n\t\t\t\tparams.push( generateInput( parameters[ i ], inputs[ i ] ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( const inputNode of inputs ) {\n\n\t\t\t\tconst node = parameters[ inputNode.name ];\n\n\t\t\t\tif ( node !== undefined ) {\n\n\t\t\t\t\tparams.push( generateInput( node, inputNode ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( `THREE.TSL: Input '${ inputNode.name }' not found in \\'Fn()\\'.` );\n\n\t\t\t\t\tparams.push( generateInput( float( 0 ), inputNode ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst functionName = functionNode.build( builder, 'property' );\n\n\t\treturn `${ functionName }( ${ params.join( ', ' ) } )`;\n\n\t}\n\n}\n\nconst call = ( func, ...params ) => {\n\n\tparams = params.length > 1 || ( params[ 0 ] && params[ 0 ].isNode === true ) ? nodeArray( params ) : nodeObjects( params[ 0 ] );\n\n\treturn nodeObject( new FunctionCallNode( nodeObject( func ), params ) );\n\n};\n\naddMethodChaining( 'call', call );\n\nconst _vectorOperators = {\n\t'==': 'equal',\n\t'!=': 'notEqual',\n\t'<': 'lessThan',\n\t'>': 'greaterThan',\n\t'<=': 'lessThanEqual',\n\t'>=': 'greaterThanEqual',\n\t'%': 'mod'\n};\n\n/**\n * This node represents basic mathematical and logical operations like addition,\n * subtraction or comparisons (e.g. `equal()`).\n *\n * @augments TempNode\n */\nclass OperatorNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'OperatorNode';\n\n\t}\n\n\t/**\n\t * Constructs a new operator node.\n\t *\n\t * @param {string} op - The operator.\n\t * @param {Node} aNode - The first input.\n\t * @param {Node} bNode - The second input.\n\t * @param {...Node} params - Additional input parameters.\n\t */\n\tconstructor( op, aNode, bNode, ...params ) {\n\n\t\tsuper();\n\n\t\tif ( params.length > 0 ) {\n\n\t\t\tlet finalOp = new OperatorNode( op, aNode, bNode );\n\n\t\t\tfor ( let i = 0; i < params.length - 1; i ++ ) {\n\n\t\t\t\tfinalOp = new OperatorNode( op, finalOp, params[ i ] );\n\n\t\t\t}\n\n\t\t\taNode = finalOp;\n\t\t\tbNode = params[ params.length - 1 ];\n\n\t\t}\n\n\t\t/**\n\t\t * The operator.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.op = op;\n\n\t\t/**\n\t\t * The first input.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.aNode = aNode;\n\n\t\t/**\n\t\t * The second input.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.bNode = bNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isOperatorNode = true;\n\n\t}\n\n\t/**\n\t * Returns the operator method name.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} output - The output type.\n\t * @returns {string} The operator method name.\n\t */\n\tgetOperatorMethod( builder, output ) {\n\n\t\treturn builder.getMethod( _vectorOperators[ this.op ], output );\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from the operator\n\t * and the input node types.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tconst op = this.op;\n\n\t\tconst aNode = this.aNode;\n\t\tconst bNode = this.bNode;\n\n\t\tconst typeA = aNode.getNodeType( builder );\n\t\tconst typeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\n\n\t\tif ( typeA === 'void' || typeB === 'void' ) {\n\n\t\t\treturn 'void';\n\n\t\t} else if ( op === '%' ) {\n\n\t\t\treturn typeA;\n\n\t\t} else if ( op === '~' || op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {\n\n\t\t\treturn builder.getIntegerType( typeA );\n\n\t\t} else if ( op === '!' || op === '&&' || op === '||' || op === '^^' ) {\n\n\t\t\treturn 'bool';\n\n\t\t} else if ( op === '==' || op === '!=' || op === '<' || op === '>' || op === '<=' || op === '>=' ) {\n\n\t\t\tconst typeLength = Math.max( builder.getTypeLength( typeA ), builder.getTypeLength( typeB ) );\n\n\t\t\treturn typeLength > 1 ? `bvec${ typeLength }` : 'bool';\n\n\t\t} else {\n\n\t\t\t// Handle matrix operations\n\n\t\t\tif ( builder.isMatrix( typeA ) ) {\n\n\t\t\t\tif ( typeB === 'float' ) {\n\n\t\t\t\t\treturn typeA; // matrix * scalar = matrix\n\n\t\t\t\t} else if ( builder.isVector( typeB ) ) {\n\n\t\t\t\t\treturn builder.getVectorFromMatrix( typeA ); // matrix * vector\n\n\t\t\t\t} else if ( builder.isMatrix( typeB ) ) {\n\n\t\t\t\t\treturn typeA; // matrix * matrix\n\n\t\t\t\t}\n\n\t\t\t} else if ( builder.isMatrix( typeB ) ) {\n\n\t\t\t\tif ( typeA === 'float' ) {\n\n\t\t\t\t\treturn typeB; // scalar * matrix = matrix\n\n\t\t\t\t} else if ( builder.isVector( typeA ) ) {\n\n\t\t\t\t\treturn builder.getVectorFromMatrix( typeB ); // vector * matrix\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Handle non-matrix cases\n\n\t\t\tif ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {\n\n\t\t\t\t// anytype x anytype: use the greater length vector\n\n\t\t\t\treturn typeB;\n\n\t\t\t}\n\n\t\t\treturn typeA;\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst op = this.op;\n\n\t\tconst aNode = this.aNode;\n\t\tconst bNode = this.bNode;\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\tlet typeA = null;\n\t\tlet typeB = null;\n\n\t\tif ( type !== 'void' ) {\n\n\t\t\ttypeA = aNode.getNodeType( builder );\n\t\t\ttypeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\n\n\t\t\tif ( op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==' || op === '!=' ) {\n\n\t\t\t\tif ( builder.isVector( typeA ) ) {\n\n\t\t\t\t\ttypeB = typeA;\n\n\t\t\t\t} else if ( builder.isVector( typeB ) ) {\n\n\t\t\t\t\ttypeA = typeB;\n\n\t\t\t\t} else if ( typeA !== typeB ) {\n\n\t\t\t\t\ttypeA = typeB = 'float';\n\n\t\t\t\t}\n\n\t\t\t} else if ( op === '>>' || op === '<<' ) {\n\n\t\t\t\ttypeA = type;\n\t\t\t\ttypeB = builder.changeComponentType( typeB, 'uint' );\n\n\t\t\t} else if ( op === '%' ) {\n\n\t\t\t\ttypeA = type;\n\t\t\t\ttypeB = builder.isInteger( typeA ) && builder.isInteger( typeB ) ? typeB : typeA;\n\n\t\t\t} else if ( builder.isMatrix( typeA ) ) {\n\n\t\t\t\tif ( typeB === 'float' ) {\n\n\t\t\t\t\t// Keep matrix type for typeA, but ensure typeB stays float\n\n\t\t\t\t\ttypeB = 'float';\n\n\t\t\t\t} else if ( builder.isVector( typeB ) ) {\n\n\t\t\t\t\t// matrix x vector\n\t\t\t\t\ttypeB = builder.getVectorFromMatrix( typeA );\n\n\t\t\t\t} else if ( builder.isMatrix( typeB ) ) ; else {\n\n\t\t\t\t\ttypeA = typeB = type;\n\n\t\t\t\t}\n\n\t\t\t} else if ( builder.isMatrix( typeB ) ) {\n\n\t\t\t\tif ( typeA === 'float' ) {\n\n\t\t\t\t\t// Keep matrix type for typeB, but ensure typeA stays float\n\n\t\t\t\t\ttypeA = 'float';\n\n\t\t\t\t} else if ( builder.isVector( typeA ) ) {\n\n\t\t\t\t\t// vector x matrix\n\n\t\t\t\t\ttypeA = builder.getVectorFromMatrix( typeB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttypeA = typeB = type;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// anytype x anytype\n\n\t\t\t\ttypeA = typeB = type;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\ttypeA = typeB = type;\n\n\t\t}\n\n\t\tconst a = aNode.build( builder, typeA );\n\t\tconst b = typeof bNode !== 'undefined' ? bNode.build( builder, typeB ) : null;\n\n\t\tconst fnOpSnippet = builder.getFunctionOperator( op );\n\n\t\tif ( output !== 'void' ) {\n\n\t\t\tconst isGLSL = builder.renderer.coordinateSystem === WebGLCoordinateSystem;\n\n\t\t\tif ( op === '==' || op === '!=' || op === '<' || op === '>' || op === '<=' || op === '>=' ) {\n\n\t\t\t\tif ( isGLSL ) {\n\n\t\t\t\t\tif ( builder.isVector( typeA ) ) {\n\n\t\t\t\t\t\treturn builder.format( `${ this.getOperatorMethod( builder, output ) }( ${ a }, ${ b } )`, type, output );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn builder.format( `( ${ a } ${ op } ${ b } )`, type, output );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// WGSL\n\n\t\t\t\t\treturn builder.format( `( ${ a } ${ op } ${ b } )`, type, output );\n\n\t\t\t\t}\n\n\t\t\t} else if ( op === '%' ) {\n\n\t\t\t\tif ( builder.isInteger( typeB ) ) {\n\n\t\t\t\t\treturn builder.format( `( ${ a } % ${ b } )`, type, output );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn builder.format( `${ this.getOperatorMethod( builder, type ) }( ${ a }, ${ b } )`, type, output );\n\n\t\t\t\t}\n\n\t\t\t} else if ( op === '!' || op === '~' ) {\n\n\t\t\t\treturn builder.format( `(${op}${a})`, typeA, output );\n\n\t\t\t} else if ( fnOpSnippet ) {\n\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\n\n\t\t\t} else {\n\n\t\t\t\t// Handle matrix operations\n\n\t\t\t\tif ( builder.isMatrix( typeA ) && typeB === 'float' ) {\n\n\t\t\t\t\treturn builder.format( `( ${ b } ${ op } ${ a } )`, type, output );\n\n\t\t\t\t} else if ( typeA === 'float' && builder.isMatrix( typeB ) ) {\n\n\t\t\t\t\treturn builder.format( `${ a } ${ op } ${ b }`, type, output );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet snippet = `( ${ a } ${ op } ${ b } )`;\n\n\t\t\t\t\tif ( ! isGLSL && type === 'bool' && builder.isVector( typeA ) && builder.isVector( typeB ) ) {\n\n\t\t\t\t\t\tsnippet = `all${ snippet }`;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn builder.format( snippet, type, output );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( typeA !== 'void' ) {\n\n\t\t\tif ( fnOpSnippet ) {\n\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tif ( builder.isMatrix( typeA ) && typeB === 'float' ) {\n\n\t\t\t\t\treturn builder.format( `${ b } ${ op } ${ a }`, type, output );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn builder.format( `${ a } ${ op } ${ b }`, type, output );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.op = this.op;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.op = data.op;\n\n\t}\n\n}\n\n/**\n * Returns the addition of two or more value.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @param {...Node} params - Additional input parameters.\n * @returns {OperatorNode}\n */\nconst add = /*@__PURE__*/ nodeProxy( OperatorNode, '+' ).setParameterLength( 2, Infinity ).setName( 'add' );\n\n/**\n * Returns the subtraction of two or more value.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @param {...Node} params - Additional input parameters.\n * @returns {OperatorNode}\n */\nconst sub = /*@__PURE__*/ nodeProxy( OperatorNode, '-' ).setParameterLength( 2, Infinity ).setName( 'sub' );\n\n/**\n * Returns the multiplication of two or more value.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @param {...Node} params - Additional input parameters.\n * @returns {OperatorNode}\n */\nconst mul = /*@__PURE__*/ nodeProxy( OperatorNode, '*' ).setParameterLength( 2, Infinity ).setName( 'mul' );\n\n/**\n * Returns the division of two or more value.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @param {...Node} params - Additional input parameters.\n * @returns {OperatorNode}\n */\nconst div = /*@__PURE__*/ nodeProxy( OperatorNode, '/' ).setParameterLength( 2, Infinity ).setName( 'div' );\n\n/**\n * Computes the remainder of dividing the first node by the second one.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst mod = /*@__PURE__*/ nodeProxy( OperatorNode, '%' ).setParameterLength( 2 ).setName( 'mod' );\n\n/**\n * Checks if two nodes are equal.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst equal = /*@__PURE__*/ nodeProxy( OperatorNode, '==' ).setParameterLength( 2 ).setName( 'equal' );\n\n/**\n * Checks if two nodes are not equal.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst notEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '!=' ).setParameterLength( 2 ).setName( 'notEqual' );\n\n/**\n * Checks if the first node is less than the second.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst lessThan = /*@__PURE__*/ nodeProxy( OperatorNode, '<' ).setParameterLength( 2 ).setName( 'lessThan' );\n\n/**\n * Checks if the first node is greater than the second.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst greaterThan = /*@__PURE__*/ nodeProxy( OperatorNode, '>' ).setParameterLength( 2 ).setName( 'greaterThan' );\n\n/**\n * Checks if the first node is less than or equal to the second.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst lessThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '<=' ).setParameterLength( 2 ).setName( 'lessThanEqual' );\n\n/**\n * Checks if the first node is greater than or equal to the second.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst greaterThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '>=' ).setParameterLength( 2 ).setName( 'greaterThanEqual' );\n\n/**\n * Performs a logical AND operation on multiple nodes.\n *\n * @tsl\n * @function\n * @param {...Node} nodes - The input nodes to be combined using AND.\n * @returns {OperatorNode}\n */\nconst and = /*@__PURE__*/ nodeProxy( OperatorNode, '&&' ).setParameterLength( 2, Infinity ).setName( 'and' );\n\n/**\n * Performs a logical OR operation on multiple nodes.\n *\n * @tsl\n * @function\n * @param {...Node} nodes - The input nodes to be combined using OR.\n * @returns {OperatorNode}\n */\nconst or = /*@__PURE__*/ nodeProxy( OperatorNode, '||' ).setParameterLength( 2, Infinity ).setName( 'or' );\n\n/**\n * Performs logical NOT on a node.\n *\n * @tsl\n * @function\n * @param {Node} value - The value.\n * @returns {OperatorNode}\n */\nconst not = /*@__PURE__*/ nodeProxy( OperatorNode, '!' ).setParameterLength( 1 ).setName( 'not' );\n\n/**\n * Performs logical XOR on two nodes.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst xor = /*@__PURE__*/ nodeProxy( OperatorNode, '^^' ).setParameterLength( 2 ).setName( 'xor' );\n\n/**\n * Performs bitwise AND on two nodes.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst bitAnd = /*@__PURE__*/ nodeProxy( OperatorNode, '&' ).setParameterLength( 2 ).setName( 'bitAnd' );\n\n/**\n * Performs bitwise NOT on a node.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst bitNot = /*@__PURE__*/ nodeProxy( OperatorNode, '~' ).setParameterLength( 2 ).setName( 'bitNot' );\n\n/**\n * Performs bitwise OR on two nodes.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst bitOr = /*@__PURE__*/ nodeProxy( OperatorNode, '|' ).setParameterLength( 2 ).setName( 'bitOr' );\n\n/**\n * Performs bitwise XOR on two nodes.\n *\n * @tsl\n * @function\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst bitXor = /*@__PURE__*/ nodeProxy( OperatorNode, '^' ).setParameterLength( 2 ).setName( 'bitXor' );\n\n/**\n * Shifts a node to the left.\n *\n * @tsl\n * @function\n * @param {Node} a - The node to shift.\n * @param {Node} b - The value to shift.\n * @returns {OperatorNode}\n */\nconst shiftLeft = /*@__PURE__*/ nodeProxy( OperatorNode, '<<' ).setParameterLength( 2 ).setName( 'shiftLeft' );\n\n/**\n * Shifts a node to the right.\n *\n * @tsl\n * @function\n * @param {Node} a - The node to shift.\n * @param {Node} b - The value to shift.\n * @returns {OperatorNode}\n */\nconst shiftRight = /*@__PURE__*/ nodeProxy( OperatorNode, '>>' ).setParameterLength( 2 ).setName( 'shiftRight' );\n\n/**\n * Increments a node by 1.\n *\n * @tsl\n * @function\n * @param {Node} a - The node to increment.\n * @returns {OperatorNode}\n */\nconst incrementBefore = Fn( ( [ a ] ) => {\n\n\ta.addAssign( 1 );\n\treturn a;\n\n} );\n\n/**\n * Decrements a node by 1.\n *\n * @tsl\n * @function\n * @param {Node} a - The node to decrement.\n * @returns {OperatorNode}\n */\nconst decrementBefore = Fn( ( [ a ] ) => {\n\n\ta.subAssign( 1 );\n\treturn a;\n\n} );\n\n/**\n * Increments a node by 1 and returns the previous value.\n *\n * @tsl\n * @function\n * @param {Node} a - The node to increment.\n * @returns {OperatorNode}\n */\nconst increment = /*@__PURE__*/ Fn( ( [ a ] ) => {\n\n\tconst temp = int( a ).toConst();\n\ta.addAssign( 1 );\n\treturn temp;\n\n} );\n\n/**\n * Decrements a node by 1 and returns the previous value.\n *\n * @tsl\n * @function\n * @param {Node} a - The node to decrement.\n * @returns {OperatorNode}\n */\nconst decrement = /*@__PURE__*/ Fn( ( [ a ] ) => {\n\n\tconst temp = int( a ).toConst();\n\ta.subAssign( 1 );\n\treturn temp;\n\n} );\n\naddMethodChaining( 'add', add );\naddMethodChaining( 'sub', sub );\naddMethodChaining( 'mul', mul );\naddMethodChaining( 'div', div );\naddMethodChaining( 'mod', mod );\naddMethodChaining( 'equal', equal );\naddMethodChaining( 'notEqual', notEqual );\naddMethodChaining( 'lessThan', lessThan );\naddMethodChaining( 'greaterThan', greaterThan );\naddMethodChaining( 'lessThanEqual', lessThanEqual );\naddMethodChaining( 'greaterThanEqual', greaterThanEqual );\naddMethodChaining( 'and', and );\naddMethodChaining( 'or', or );\naddMethodChaining( 'not', not );\naddMethodChaining( 'xor', xor );\naddMethodChaining( 'bitAnd', bitAnd );\naddMethodChaining( 'bitNot', bitNot );\naddMethodChaining( 'bitOr', bitOr );\naddMethodChaining( 'bitXor', bitXor );\naddMethodChaining( 'shiftLeft', shiftLeft );\naddMethodChaining( 'shiftRight', shiftRight );\n\naddMethodChaining( 'incrementBefore', incrementBefore );\naddMethodChaining( 'decrementBefore', decrementBefore );\naddMethodChaining( 'increment', increment );\naddMethodChaining( 'decrement', decrement );\n\n/**\n * @tsl\n * @function\n * @deprecated since r168. Use {@link mod} instead.\n *\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst remainder = ( a, b ) => { // @deprecated, r168\n\n\tconsole.warn( 'THREE.TSL: \"remainder()\" is deprecated. Use \"mod( int( ... ) )\" instead.' );\n\treturn mod( a, b );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r175. Use {@link mod} instead.\n *\n * @param {Node} a - The first input.\n * @param {Node} b - The second input.\n * @returns {OperatorNode}\n */\nconst modInt = ( a, b ) => { // @deprecated, r175\n\n\tconsole.warn( 'THREE.TSL: \"modInt()\" is deprecated. Use \"mod( int( ... ) )\" instead.' );\n\treturn mod( int( a ), int( b ) );\n\n};\n\naddMethodChaining( 'remainder', remainder );\naddMethodChaining( 'modInt', modInt );\n\n/**\n * This node represents a variety of mathematical methods available in shaders.\n * They are divided into three categories:\n *\n * - Methods with one input like `sin`, `cos` or `normalize`.\n * - Methods with two inputs like `dot`, `cross` or `pow`.\n * - Methods with three inputs like `mix`, `clamp` or `smoothstep`.\n *\n * @augments TempNode\n */\nclass MathNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'MathNode';\n\n\t}\n\n\t/**\n\t * Constructs a new math node.\n\t *\n\t * @param {string} method - The method name.\n\t * @param {Node} aNode - The first input.\n\t * @param {?Node} [bNode=null] - The second input.\n\t * @param {?Node} [cNode=null] - The third input.\n\t */\n\tconstructor( method, aNode, bNode = null, cNode = null ) {\n\n\t\tsuper();\n\n\t\t// Allow the max() and min() functions to take an arbitrary number of arguments.\n\n\t\tif ( ( method === MathNode.MAX || method === MathNode.MIN ) && arguments.length > 3 ) {\n\n\t\t\tlet finalOp = new MathNode( method, aNode, bNode );\n\n\t\t\tfor ( let i = 2; i < arguments.length - 1; i ++ ) {\n\n\t\t\t\tfinalOp = new MathNode( method, finalOp, arguments[ i ] );\n\n\t\t\t}\n\n\t\t\taNode = finalOp;\n\t\t\tbNode = arguments[ arguments.length - 1 ];\n\t\t\tcNode = null;\n\n\t\t}\n\n\t\t/**\n\t\t * The method name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.method = method;\n\n\t\t/**\n\t\t * The first input.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.aNode = aNode;\n\n\t\t/**\n\t\t * The second input.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.bNode = bNode;\n\n\t\t/**\n\t\t * The third input.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.cNode = cNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMathNode = true;\n\n\t}\n\n\t/**\n\t * The input type is inferred from the node types of the input nodes.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( builder ) {\n\n\t\tconst aType = this.aNode.getNodeType( builder );\n\t\tconst bType = this.bNode ? this.bNode.getNodeType( builder ) : null;\n\t\tconst cType = this.cNode ? this.cNode.getNodeType( builder ) : null;\n\n\t\tconst aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );\n\t\tconst bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );\n\t\tconst cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );\n\n\t\tif ( aLen > bLen && aLen > cLen ) {\n\n\t\t\treturn aType;\n\n\t\t} else if ( bLen > cLen ) {\n\n\t\t\treturn bType;\n\n\t\t} else if ( cLen > aLen ) {\n\n\t\t\treturn cType;\n\n\t\t}\n\n\t\treturn aType;\n\n\t}\n\n\t/**\n\t * The selected method as well as the input type determine the node type of this node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tconst method = this.method;\n\n\t\tif ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {\n\n\t\t\treturn 'float';\n\n\t\t} else if ( method === MathNode.CROSS ) {\n\n\t\t\treturn 'vec3';\n\n\t\t} else if ( method === MathNode.ALL || method === MathNode.ANY ) {\n\n\t\t\treturn 'bool';\n\n\t\t} else if ( method === MathNode.EQUALS ) {\n\n\t\t\treturn builder.changeComponentType( this.aNode.getNodeType( builder ), 'bool' );\n\n\t\t} else {\n\n\t\t\treturn this.getInputType( builder );\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet method = this.method;\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst inputType = this.getInputType( builder );\n\n\t\tconst a = this.aNode;\n\t\tconst b = this.bNode;\n\t\tconst c = this.cNode;\n\n\t\tconst coordinateSystem = builder.renderer.coordinateSystem;\n\n\t\tif ( method === MathNode.TRANSFORM_DIRECTION ) {\n\n\t\t\t// dir can be either a direction vector or a normal vector\n\t\t\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\t\t\tlet tA = a;\n\t\t\tlet tB = b;\n\n\t\t\tif ( builder.isMatrix( tA.getNodeType( builder ) ) ) {\n\n\t\t\t\ttB = vec4( vec3( tB ), 0.0 );\n\n\t\t\t} else {\n\n\t\t\t\ttA = vec4( vec3( tA ), 0.0 );\n\n\t\t\t}\n\n\t\t\tconst mulNode = mul( tA, tB ).xyz;\n\n\t\t\treturn normalize( mulNode ).build( builder, output );\n\n\t\t} else if ( method === MathNode.NEGATE ) {\n\n\t\t\treturn builder.format( '( - ' + a.build( builder, inputType ) + ' )', type, output );\n\n\t\t} else if ( method === MathNode.ONE_MINUS ) {\n\n\t\t\treturn sub( 1.0, a ).build( builder, output );\n\n\t\t} else if ( method === MathNode.RECIPROCAL ) {\n\n\t\t\treturn div( 1.0, a ).build( builder, output );\n\n\t\t} else if ( method === MathNode.DIFFERENCE ) {\n\n\t\t\treturn abs( sub( a, b ) ).build( builder, output );\n\n\t\t} else {\n\n\t\t\tconst params = [];\n\n\t\t\tif ( method === MathNode.CROSS ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, type ),\n\t\t\t\t\tb.build( builder, type )\n\t\t\t\t);\n\n\t\t\t} else if ( coordinateSystem === WebGLCoordinateSystem && method === MathNode.STEP ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),\n\t\t\t\t\tb.build( builder, inputType )\n\t\t\t\t);\n\n\t\t\t} else if ( coordinateSystem === WebGLCoordinateSystem && ( method === MathNode.MIN || method === MathNode.MAX ) ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.REFRACT ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, inputType ),\n\t\t\t\t\tc.build( builder, 'float' )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.MIX ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, inputType ),\n\t\t\t\t\tc.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tif ( coordinateSystem === WebGPUCoordinateSystem && method === MathNode.ATAN && b !== null ) {\n\n\t\t\t\t\tmethod = 'atan2';\n\n\t\t\t\t}\n\n\t\t\t\tif ( builder.shaderStage !== 'fragment' && ( method === MathNode.DFDX || method === MathNode.DFDY ) ) {\n\n\t\t\t\t\tconsole.warn( `THREE.TSL: '${ method }' is not supported in the ${ builder.shaderStage } stage.` );\n\n\t\t\t\t\tmethod = '/*' + method + '*/';\n\n\t\t\t\t}\n\n\t\t\t\tparams.push( a.build( builder, inputType ) );\n\t\t\t\tif ( b !== null ) params.push( b.build( builder, inputType ) );\n\t\t\t\tif ( c !== null ) params.push( c.build( builder, inputType ) );\n\n\t\t\t}\n\n\t\t\treturn builder.format( `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`, type, output );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.method = this.method;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.method = data.method;\n\n\t}\n\n}\n\n// 1 input\n\nMathNode.ALL = 'all';\nMathNode.ANY = 'any';\n\nMathNode.RADIANS = 'radians';\nMathNode.DEGREES = 'degrees';\nMathNode.EXP = 'exp';\nMathNode.EXP2 = 'exp2';\nMathNode.LOG = 'log';\nMathNode.LOG2 = 'log2';\nMathNode.SQRT = 'sqrt';\nMathNode.INVERSE_SQRT = 'inversesqrt';\nMathNode.FLOOR = 'floor';\nMathNode.CEIL = 'ceil';\nMathNode.NORMALIZE = 'normalize';\nMathNode.FRACT = 'fract';\nMathNode.SIN = 'sin';\nMathNode.COS = 'cos';\nMathNode.TAN = 'tan';\nMathNode.ASIN = 'asin';\nMathNode.ACOS = 'acos';\nMathNode.ATAN = 'atan';\nMathNode.ABS = 'abs';\nMathNode.SIGN = 'sign';\nMathNode.LENGTH = 'length';\nMathNode.NEGATE = 'negate';\nMathNode.ONE_MINUS = 'oneMinus';\nMathNode.DFDX = 'dFdx';\nMathNode.DFDY = 'dFdy';\nMathNode.ROUND = 'round';\nMathNode.RECIPROCAL = 'reciprocal';\nMathNode.TRUNC = 'trunc';\nMathNode.FWIDTH = 'fwidth';\nMathNode.TRANSPOSE = 'transpose';\n\n// 2 inputs\n\nMathNode.BITCAST = 'bitcast';\nMathNode.EQUALS = 'equals';\nMathNode.MIN = 'min';\nMathNode.MAX = 'max';\nMathNode.STEP = 'step';\nMathNode.REFLECT = 'reflect';\nMathNode.DISTANCE = 'distance';\nMathNode.DIFFERENCE = 'difference';\nMathNode.DOT = 'dot';\nMathNode.CROSS = 'cross';\nMathNode.POW = 'pow';\nMathNode.TRANSFORM_DIRECTION = 'transformDirection';\n\n// 3 inputs\n\nMathNode.MIX = 'mix';\nMathNode.CLAMP = 'clamp';\nMathNode.REFRACT = 'refract';\nMathNode.SMOOTHSTEP = 'smoothstep';\nMathNode.FACEFORWARD = 'faceforward';\n\n// 1 inputs\n\n/**\n * A small value used to handle floating-point precision errors.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst EPSILON = /*@__PURE__*/ float( 1e-6 );\n\n/**\n * Represents infinity.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst INFINITY = /*@__PURE__*/ float( 1e6 );\n\n/**\n * Represents PI.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst PI = /*@__PURE__*/ float( Math.PI );\n\n/**\n * Represents PI * 2.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst PI2 = /*@__PURE__*/ float( Math.PI * 2 );\n\n/**\n * Returns `true` if all components of `x` are `true`.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node<bool>}\n */\nconst all = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ALL ).setParameterLength( 1 );\n\n/**\n * Returns `true` if any components of `x` are `true`.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node<bool>}\n */\nconst any = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ANY ).setParameterLength( 1 );\n\n/**\n * Converts a quantity in degrees to radians.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The input in degrees.\n * @returns {Node}\n */\nconst radians = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RADIANS ).setParameterLength( 1 );\n\n/**\n * Convert a quantity in radians to degrees.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The input in radians.\n * @returns {Node}\n */\nconst degrees = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DEGREES ).setParameterLength( 1 );\n\n/**\n * Returns the natural exponentiation of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst exp = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP ).setParameterLength( 1 );\n\n/**\n * Returns 2 raised to the power of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst exp2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP2 ).setParameterLength( 1 );\n\n/**\n * Returns the natural logarithm of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst log = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG ).setParameterLength( 1 );\n\n/**\n * Returns the base 2 logarithm of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst log2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG2 ).setParameterLength( 1 );\n\n/**\n * Returns the square root of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst sqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SQRT ).setParameterLength( 1 );\n\n/**\n * Returns the inverse of the square root of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst inverseSqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.INVERSE_SQRT ).setParameterLength( 1 );\n\n/**\n * Finds the nearest integer less than or equal to the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst floor = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FLOOR ).setParameterLength( 1 );\n\n/**\n * Finds the nearest integer that is greater than or equal to the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst ceil = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CEIL ).setParameterLength( 1 );\n\n/**\n * Calculates the unit vector in the same direction as the original vector.\n *\n * @tsl\n * @function\n * @param {Node} x - The input vector.\n * @returns {Node}\n */\nconst normalize = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NORMALIZE ).setParameterLength( 1 );\n\n/**\n * Computes the fractional part of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst fract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FRACT ).setParameterLength( 1 );\n\n/**\n * Returns the sine of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst sin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIN ).setParameterLength( 1 );\n\n/**\n * Returns the cosine of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst cos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.COS ).setParameterLength( 1 );\n\n/**\n * Returns the tangent of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst tan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TAN ).setParameterLength( 1 );\n\n/**\n * Returns the arcsine of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst asin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ASIN ).setParameterLength( 1 );\n\n/**\n * Returns the arccosine of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst acos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ACOS ).setParameterLength( 1 );\n\n/**\n * Returns the arc-tangent of the parameter.\n * If two parameters are provided, the result is `atan2(y/x)`.\n *\n * @tsl\n * @function\n * @param {Node | number} y - The y parameter.\n * @param {?(Node | number)} x - The x parameter.\n * @returns {Node}\n */\nconst atan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ATAN ).setParameterLength( 1, 2 );\n\n/**\n * Returns the absolute value of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst abs = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ABS ).setParameterLength( 1 );\n\n/**\n * Extracts the sign of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst sign = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIGN ).setParameterLength( 1 );\n\n/**\n * Calculates the length of a vector.\n *\n * @tsl\n * @function\n * @param {Node} x - The parameter.\n * @returns {Node<float>}\n */\nconst length = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LENGTH ).setParameterLength( 1 );\n\n/**\n * Negates the value of the parameter (-x).\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst negate = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NEGATE ).setParameterLength( 1 );\n\n/**\n * Return `1` minus the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst oneMinus = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ONE_MINUS ).setParameterLength( 1 );\n\n/**\n * Returns the partial derivative of the parameter with respect to x.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst dFdx = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDX ).setParameterLength( 1 );\n\n/**\n * Returns the partial derivative of the parameter with respect to y.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst dFdy = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDY ).setParameterLength( 1 );\n\n/**\n * Rounds the parameter to the nearest integer.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst round = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ROUND ).setParameterLength( 1 );\n\n/**\n * Returns the reciprocal of the parameter `(1/x)`.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst reciprocal = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RECIPROCAL ).setParameterLength( 1 );\n\n/**\n * Truncates the parameter, removing the fractional part.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst trunc = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRUNC ).setParameterLength( 1 );\n\n/**\n * Returns the sum of the absolute derivatives in x and y.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @returns {Node}\n */\nconst fwidth = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FWIDTH ).setParameterLength( 1 );\n\n/**\n * Returns the transpose of a matrix.\n *\n * @tsl\n * @function\n * @param {Node<mat2|mat3|mat4>} x - The parameter.\n * @returns {Node}\n */\nconst transpose = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSPOSE ).setParameterLength( 1 );\n\n// 2 inputs\n\n/**\n * Reinterpret the bit representation of a value in one type as a value in another type.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The parameter.\n * @param {string} y - The new type.\n * @returns {Node}\n */\nconst bitcast = /*@__PURE__*/ nodeProxy( MathNode, MathNode.BITCAST ).setParameterLength( 2 );\n\n/**\n * Returns `true` if `x` equals `y`.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The first parameter.\n * @param {Node | number} y - The second parameter.\n * @deprecated since r175. Use {@link equal} instead.\n * @returns {Node<bool>}\n */\nconst equals = ( x, y ) => { // @deprecated, r172\n\n\tconsole.warn( 'THREE.TSL: \"equals\" is deprecated. Use \"equal\" inside a vector instead, like: \"bvec*( equal( ... ) )\"' );\n\treturn equal( x, y );\n\n};\n\n/**\n * Returns the least of the given values.\n *\n * @tsl\n * @function\n * @param {...(Node | number)} values - The values to compare.\n * @returns {Node}\n */\nconst min$1 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIN ).setParameterLength( 2, Infinity );\n\n/**\n * Returns the greatest of the given values.\n *\n * @tsl\n * @function\n * @param {...(Node | number)} values - The values to compare.\n * @returns {Node}\n */\nconst max$1 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MAX ).setParameterLength( 2, Infinity );\n\n/**\n * Generate a step function by comparing two values.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The y parameter.\n * @param {Node | number} y - The x parameter.\n * @returns {Node}\n */\nconst step = /*@__PURE__*/ nodeProxy( MathNode, MathNode.STEP ).setParameterLength( 2 );\n\n/**\n * Calculates the reflection direction for an incident vector.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} I - The incident vector.\n * @param {Node<vec2|vec3|vec4>} N - The normal vector.\n * @returns {Node<vec2|vec3|vec4>}\n */\nconst reflect = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFLECT ).setParameterLength( 2 );\n\n/**\n * Calculates the distance between two points.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} x - The first point.\n * @param {Node<vec2|vec3|vec4>} y - The second point.\n * @returns {Node<float>}\n */\nconst distance = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DISTANCE ).setParameterLength( 2 );\n\n/**\n * Calculates the absolute difference between two values.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The first parameter.\n * @param {Node | number} y - The second parameter.\n * @returns {Node}\n */\nconst difference = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DIFFERENCE ).setParameterLength( 2 );\n\n/**\n * Calculates the dot product of two vectors.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} x - The first vector.\n * @param {Node<vec2|vec3|vec4>} y - The second vector.\n * @returns {Node<float>}\n */\nconst dot = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DOT ).setParameterLength( 2 );\n\n/**\n * Calculates the cross product of two vectors.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} x - The first vector.\n * @param {Node<vec2|vec3|vec4>} y - The second vector.\n * @returns {Node<vec2|vec3|vec4>}\n */\nconst cross = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CROSS ).setParameterLength( 2 );\n\n/**\n * Return the value of the first parameter raised to the power of the second one.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The first parameter.\n * @param {Node | number} y - The second parameter.\n * @returns {Node}\n */\nconst pow = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW ).setParameterLength( 2 );\n\n/**\n * Returns the square of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The first parameter.\n * @returns {Node}\n */\nconst pow2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 2 ).setParameterLength( 1 );\n\n/**\n * Returns the cube of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The first parameter.\n * @returns {Node}\n */\nconst pow3 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 3 ).setParameterLength( 1 );\n\n/**\n * Returns the fourth power of the parameter.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The first parameter.\n * @returns {Node}\n */\nconst pow4 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 4 ).setParameterLength( 1 );\n\n/**\n * Transforms the direction of a vector by a matrix and then normalizes the result.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} direction - The direction vector.\n * @param {Node<mat2|mat3|mat4>} matrix - The transformation matrix.\n * @returns {Node}\n */\nconst transformDirection = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION ).setParameterLength( 2 );\n\n/**\n * Returns the cube root of a number.\n *\n * @tsl\n * @function\n * @param {Node | number} a - The first parameter.\n * @returns {Node}\n */\nconst cbrt = ( a ) => mul( sign( a ), pow( abs( a ), 1.0 / 3.0 ) );\n\n/**\n * Calculate the squared length of a vector.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} a - The vector.\n * @returns {Node<float>}\n */\nconst lengthSq = ( a ) => dot( a, a );\n\n/**\n * Linearly interpolates between two values.\n *\n * @tsl\n * @function\n * @param {Node | number} a - The first parameter.\n * @param {Node | number} b - The second parameter.\n * @param {Node | number} t - The interpolation value.\n * @returns {Node}\n */\nconst mix = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIX ).setParameterLength( 3 );\n\n/**\n * Constrains a value to lie between two further values.\n *\n * @tsl\n * @function\n * @param {Node | number} value - The value to constrain.\n * @param {Node | number} [low=0] - The lower bound.\n * @param {Node | number} [high=1] - The upper bound.\n * @returns {Node}\n */\nconst clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );\n\n/**\n * Constrains a value between `0` and `1`.\n *\n * @tsl\n * @function\n * @param {Node | number} value - The value to constrain.\n * @returns {Node}\n */\nconst saturate = ( value ) => clamp( value );\n\n/**\n * Calculates the refraction direction for an incident vector.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} I - The incident vector.\n * @param {Node<vec2|vec3|vec4>} N - The normal vector.\n * @param {Node<float>} eta - The ratio of indices of refraction.\n * @returns {Node<vec2|vec3|vec4>}\n */\nconst refract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFRACT ).setParameterLength( 3 );\n\n/**\n * Performs a Hermite interpolation between two values.\n *\n * @tsl\n * @function\n * @param {Node | number} low - The value of the lower edge of the Hermite function.\n * @param {Node | number} high - The value of the upper edge of the Hermite function.\n * @param {Node | number} x - The source value for interpolation.\n * @returns {Node}\n */\nconst smoothstep = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SMOOTHSTEP ).setParameterLength( 3 );\n\n/**\n * Returns a vector pointing in the same direction as another.\n *\n * @tsl\n * @function\n * @param {Node<vec2|vec3|vec4>} N - The vector to orient.\n * @param {Node<vec2|vec3|vec4>} I - The incident vector.\n * @param {Node<vec2|vec3|vec4>} Nref - The reference vector.\n * @returns {Node<vec2|vec3|vec4>}\n */\nconst faceForward = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FACEFORWARD ).setParameterLength( 3 );\n\n/**\n * Returns a random value for the given uv.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} uv - The uv node.\n * @returns {Node<float>}\n */\nconst rand = /*@__PURE__*/ Fn( ( [ uv ] ) => {\n\n\tconst a = 12.9898, b = 78.233, c = 43758.5453;\n\tconst dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\n\n\treturn fract( sin( sn ).mul( c ) );\n\n} );\n\n/**\n * Alias for `mix()` with a different parameter order.\n *\n * @tsl\n * @function\n * @param {Node | number} t - The interpolation value.\n * @param {Node | number} e1 - The first parameter.\n * @param {Node | number} e2 - The second parameter.\n * @returns {Node}\n */\nconst mixElement = ( t, e1, e2 ) => mix( e1, e2, t );\n\n/**\n * Alias for `smoothstep()` with a different parameter order.\n *\n * @tsl\n * @function\n * @param {Node | number} x - The source value for interpolation.\n * @param {Node | number} low - The value of the lower edge of the Hermite function.\n * @param {Node | number} high - The value of the upper edge of the Hermite function.\n * @returns {Node}\n */\nconst smoothstepElement = ( x, low, high ) => smoothstep( low, high, x );\n\n/**\n * Returns the arc-tangent of the quotient of its parameters.\n *\n * @tsl\n * @function\n * @deprecated since r172. Use {@link atan} instead.\n *\n * @param {Node | number} y - The y parameter.\n * @param {Node | number} x - The x parameter.\n * @returns {Node}\n */\nconst atan2 = ( y, x ) => { // @deprecated, r172\n\n\tconsole.warn( 'THREE.TSL: \"atan2\" is overloaded. Use \"atan\" instead.' );\n\treturn atan( y, x );\n\n};\n\n// GLSL alias function\n\nconst faceforward = faceForward;\nconst inversesqrt = inverseSqrt;\n\n// Method chaining\n\naddMethodChaining( 'all', all );\naddMethodChaining( 'any', any );\naddMethodChaining( 'equals', equals );\n\naddMethodChaining( 'radians', radians );\naddMethodChaining( 'degrees', degrees );\naddMethodChaining( 'exp', exp );\naddMethodChaining( 'exp2', exp2 );\naddMethodChaining( 'log', log );\naddMethodChaining( 'log2', log2 );\naddMethodChaining( 'sqrt', sqrt );\naddMethodChaining( 'inverseSqrt', inverseSqrt );\naddMethodChaining( 'floor', floor );\naddMethodChaining( 'ceil', ceil );\naddMethodChaining( 'normalize', normalize );\naddMethodChaining( 'fract', fract );\naddMethodChaining( 'sin', sin );\naddMethodChaining( 'cos', cos );\naddMethodChaining( 'tan', tan );\naddMethodChaining( 'asin', asin );\naddMethodChaining( 'acos', acos );\naddMethodChaining( 'atan', atan );\naddMethodChaining( 'abs', abs );\naddMethodChaining( 'sign', sign );\naddMethodChaining( 'length', length );\naddMethodChaining( 'lengthSq', lengthSq );\naddMethodChaining( 'negate', negate );\naddMethodChaining( 'oneMinus', oneMinus );\naddMethodChaining( 'dFdx', dFdx );\naddMethodChaining( 'dFdy', dFdy );\naddMethodChaining( 'round', round );\naddMethodChaining( 'reciprocal', reciprocal );\naddMethodChaining( 'trunc', trunc );\naddMethodChaining( 'fwidth', fwidth );\naddMethodChaining( 'atan2', atan2 );\naddMethodChaining( 'min', min$1 );\naddMethodChaining( 'max', max$1 );\naddMethodChaining( 'step', step );\naddMethodChaining( 'reflect', reflect );\naddMethodChaining( 'distance', distance );\naddMethodChaining( 'dot', dot );\naddMethodChaining( 'cross', cross );\naddMethodChaining( 'pow', pow );\naddMethodChaining( 'pow2', pow2 );\naddMethodChaining( 'pow3', pow3 );\naddMethodChaining( 'pow4', pow4 );\naddMethodChaining( 'transformDirection', transformDirection );\naddMethodChaining( 'mix', mixElement );\naddMethodChaining( 'clamp', clamp );\naddMethodChaining( 'refract', refract );\naddMethodChaining( 'smoothstep', smoothstepElement );\naddMethodChaining( 'faceForward', faceForward );\naddMethodChaining( 'difference', difference );\naddMethodChaining( 'saturate', saturate );\naddMethodChaining( 'cbrt', cbrt );\naddMethodChaining( 'transpose', transpose );\naddMethodChaining( 'rand', rand );\n\n/**\n * Represents a logical `if/else` statement. Can be used as an alternative\n * to the `If()`/`Else()` syntax.\n *\n * The corresponding TSL `select()` looks like so:\n * ```js\n * velocity = position.greaterThanEqual( limit ).select( velocity.negate(), velocity );\n * ```\n * The `select()` method is called in a chaining fashion on a condition. The parameter nodes of `select()`\n * determine the outcome of the entire statement.\n *\n * @augments Node\n */\nclass ConditionalNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ConditionalNode';\n\n\t}\n\n\t/**\n\t * Constructs a new conditional node.\n\t *\n\t * @param {Node} condNode - The node that defines the condition.\n\t * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.\n\t * @param {?Node} [elseNode=null] - The node that is evaluate when the condition ends up `false`.\n\t */\n\tconstructor( condNode, ifNode, elseNode = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that defines the condition.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.condNode = condNode;\n\n\t\t/**\n\t\t * The node that is evaluate when the condition ends up `true`.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.ifNode = ifNode;\n\n\t\t/**\n\t\t * The node that is evaluate when the condition ends up `false`.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.elseNode = elseNode;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from the if/else\n\t * nodes.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tconst { ifNode, elseNode } = builder.getNodeProperties( this );\n\n\t\tif ( ifNode === undefined ) {\n\n\t\t\t// fallback setup\n\n\t\t\tthis.setup( builder );\n\n\t\t\treturn this.getNodeType( builder );\n\n\t\t}\n\n\t\tconst ifType = ifNode.getNodeType( builder );\n\n\t\tif ( elseNode !== null ) {\n\n\t\t\tconst elseType = elseNode.getNodeType( builder );\n\n\t\t\tif ( builder.getTypeLength( elseType ) > builder.getTypeLength( ifType ) ) {\n\n\t\t\t\treturn elseType;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn ifType;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst condNode = this.condNode.cache();\n\t\tconst ifNode = this.ifNode.cache();\n\t\tconst elseNode = this.elseNode ? this.elseNode.cache() : null;\n\n\t\t//\n\n\t\tconst currentNodeBlock = builder.context.nodeBlock;\n\n\t\tbuilder.getDataFromNode( ifNode ).parentNodeBlock = currentNodeBlock;\n\t\tif ( elseNode !== null ) builder.getDataFromNode( elseNode ).parentNodeBlock = currentNodeBlock;\n\n\t\t//\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.condNode = condNode;\n\t\tproperties.ifNode = ifNode.context( { nodeBlock: ifNode } );\n\t\tproperties.elseNode = elseNode ? elseNode.context( { nodeBlock: elseNode } ) : null;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\tif ( nodeData.nodeProperty !== undefined ) {\n\n\t\t\treturn nodeData.nodeProperty;\n\n\t\t}\n\n\t\tconst { condNode, ifNode, elseNode } = builder.getNodeProperties( this );\n\n\t\tconst functionNode = builder.currentFunctionNode;\n\t\tconst needsOutput = output !== 'void';\n\t\tconst nodeProperty = needsOutput ? property( type ).build( builder ) : '';\n\n\t\tnodeData.nodeProperty = nodeProperty;\n\n\t\tconst nodeSnippet = condNode.build( builder, 'bool' );\n\n\t\tbuilder.addFlowCode( `\\n${ builder.tab }if ( ${ nodeSnippet } ) {\\n\\n` ).addFlowTab();\n\n\t\tlet ifSnippet = ifNode.build( builder, type );\n\n\t\tif ( ifSnippet ) {\n\n\t\t\tif ( needsOutput ) {\n\n\t\t\t\tifSnippet = nodeProperty + ' = ' + ifSnippet + ';';\n\n\t\t\t} else {\n\n\t\t\t\tifSnippet = 'return ' + ifSnippet + ';';\n\n\t\t\t\tif ( functionNode === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.TSL: Return statement used in an inline \\'Fn()\\'. Define a layout struct to allow return values.' );\n\n\t\t\t\t\tifSnippet = '// ' + ifSnippet;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + ifSnippet + '\\n\\n' + builder.tab + '}' );\n\n\t\tif ( elseNode !== null ) {\n\n\t\t\tbuilder.addFlowCode( ' else {\\n\\n' ).addFlowTab();\n\n\t\t\tlet elseSnippet = elseNode.build( builder, type );\n\n\t\t\tif ( elseSnippet ) {\n\n\t\t\t\tif ( needsOutput ) {\n\n\t\t\t\t\telseSnippet = nodeProperty + ' = ' + elseSnippet + ';';\n\n\t\t\t\t} else {\n\n\t\t\t\t\telseSnippet = 'return ' + elseSnippet + ';';\n\n\t\t\t\t\tif ( functionNode === null ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.TSL: Return statement used in an inline \\'Fn()\\'. Define a layout struct to allow return values.' );\n\n\t\t\t\t\t\telseSnippet = '// ' + elseSnippet;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + elseSnippet + '\\n\\n' + builder.tab + '}\\n\\n' );\n\n\t\t} else {\n\n\t\t\tbuilder.addFlowCode( '\\n\\n' );\n\n\t\t}\n\n\t\treturn builder.format( nodeProperty, type, output );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a conditional node.\n *\n * @tsl\n * @function\n * @param {Node} condNode - The node that defines the condition.\n * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.\n * @param {?Node} [elseNode=null] - The node that is evaluate when the condition ends up `false`.\n * @returns {ConditionalNode}\n */\nconst select = /*@__PURE__*/ nodeProxy( ConditionalNode ).setParameterLength( 2, 3 );\n\naddMethodChaining( 'select', select );\n\n// Deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r168. Use {@link select} instead.\n *\n * @param {...any} params\n * @returns {ConditionalNode}\n */\nconst cond = ( ...params ) => { // @deprecated, r168\n\n\tconsole.warn( 'THREE.TSL: cond() has been renamed to select().' );\n\treturn select( ...params );\n\n};\n\naddMethodChaining( 'cond', cond );\n\n/**\n * This node can be used as a context management component for another node.\n * {@link NodeBuilder} performs its node building process in a specific context and\n * this node allows the modify the context. A typical use case is to overwrite `getUV()` e.g.:\n *\n * ```js\n *node.context( { getUV: () => customCoord } );\n *```\n * @augments Node\n */\nclass ContextNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ContextNode';\n\n\t}\n\n\t/**\n\t * Constructs a new context node.\n\t *\n\t * @param {Node} node - The node whose context should be modified.\n\t * @param {Object} [value={}] - The modified context data.\n\t */\n\tconstructor( node, value = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isContextNode = true;\n\n\t\t/**\n\t\t * The node whose context should be modified.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The modified context data.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {}\n\t\t */\n\t\tthis.value = value;\n\n\t}\n\n\t/**\n\t * This method is overwritten to ensure it returns the reference to {@link ContextNode#node}.\n\t *\n\t * @return {Node} A reference to {@link ContextNode#node}.\n\t */\n\tgetScope() {\n\n\t\treturn this.node.getScope();\n\n\t}\n\n\t/**\n\t * This method is overwritten to ensure it returns the type of {@link ContextNode#node}.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tthis.node.build( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst previousContext = builder.getContext();\n\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\n\n\t\tconst node = this.node.build( builder );\n\n\t\tbuilder.setContext( previousContext );\n\n\t\treturn node;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst previousContext = builder.getContext();\n\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\n\n\t\tconst snippet = this.node.build( builder, output );\n\n\t\tbuilder.setContext( previousContext );\n\n\t\treturn snippet;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a context node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node whose context should be modified.\n * @param {Object} [value={}] - The modified context data.\n * @returns {ContextNode}\n */\nconst context = /*@__PURE__*/ nodeProxy( ContextNode ).setParameterLength( 1, 2 );\n\n/**\n * TSL function for defining a label context value for a given node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node whose context should be modified.\n * @param {string} name - The name/label to set.\n * @returns {ContextNode}\n */\nconst label = ( node, name ) => context( node, { label: name } );\n\naddMethodChaining( 'context', context );\naddMethodChaining( 'label', label );\n\n/**\n * Class for representing shader variables as nodes. Variables are created from\n * existing nodes like the following:\n *\n * ```js\n * const depth = sampleDepth( uvNode ).toVar( 'depth' );\n * ```\n *\n * @augments Node\n */\nclass VarNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'VarNode';\n\n\t}\n\n\t/**\n\t * Constructs a new variable node.\n\t *\n\t * @param {Node} node - The node for which a variable should be created.\n\t * @param {?string} [name=null] - The name of the variable in the shader.\n\t * @param {boolean} [readOnly=false] - The read-only flag.\n\t */\n\tconstructor( node, name = null, readOnly = false ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node for which a variable should be created.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The name of the variable in the shader. If no name is defined,\n\t\t * the node system auto-generates one.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * `VarNode` sets this property to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.global = true;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVarNode = true;\n\n\t\t/**\n\t\t *\n\t\t * The read-only flag.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.readOnly = readOnly;\n\n\t}\n\n\tgetMemberType( builder, name ) {\n\n\t\treturn this.node.getMemberType( builder, name );\n\n\t}\n\n\tgetElementType( builder ) {\n\n\t\treturn this.node.getElementType( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { node, name, readOnly } = this;\n\t\tconst { renderer } = builder;\n\n\t\tconst isWebGPUBackend = renderer.backend.isWebGPUBackend === true;\n\n\t\tlet isDeterministic = false;\n\t\tlet shouldTreatAsReadOnly = false;\n\n\t\tif ( readOnly ) {\n\n\t\t\tisDeterministic = builder.isDeterministic( node );\n\n\t\t\tshouldTreatAsReadOnly = isWebGPUBackend ? readOnly : isDeterministic;\n\n\t\t}\n\n\t\tconst vectorType = builder.getVectorType( this.getNodeType( builder ) );\n\t\tconst snippet = node.build( builder, vectorType );\n\n\t\tconst nodeVar = builder.getVarFromNode( this, name, vectorType, undefined, shouldTreatAsReadOnly );\n\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\tlet declarationPrefix = propertyName;\n\n\t\tif ( shouldTreatAsReadOnly ) {\n\n\t\t\tif ( isWebGPUBackend ) {\n\n\t\t\t\tdeclarationPrefix = isDeterministic\n\t\t\t\t\t? `const ${ propertyName }`\n\t\t\t\t\t: `let ${ propertyName }`;\n\n\t\t\t} else {\n\n\t\t\t\tconst count = builder.getArrayCount( node );\n\n\t\t\t\tdeclarationPrefix = `const ${ builder.getVar( nodeVar.type, propertyName, count ) }`;\n\n\t\t\t}\n\n\t\t}\n\n\t\tbuilder.addLineFlowCode( `${ declarationPrefix } = ${ snippet }`, this );\n\n\t\treturn propertyName;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a var node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node for which a variable should be created.\n * @param {?string} name - The name of the variable in the shader.\n * @returns {VarNode}\n */\nconst createVar = /*@__PURE__*/ nodeProxy( VarNode );\n\n/**\n * TSL function for creating a var node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node for which a variable should be created.\n * @param {?string} name - The name of the variable in the shader.\n * @returns {VarNode}\n */\nconst Var = ( node, name = null ) => createVar( node, name ).toStack();\n\n/**\n * TSL function for creating a const node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node for which a constant should be created.\n * @param {?string} name - The name of the constant in the shader.\n * @returns {VarNode}\n */\nconst Const = ( node, name = null ) => createVar( node, name, true ).toStack();\n\n// Method chaining\n\naddMethodChaining( 'toVar', Var );\naddMethodChaining( 'toConst', Const );\n\n// Deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r170. Use `Var( node )` or `node.toVar()` instead.\n *\n * @param {any} node\n * @returns {VarNode}\n */\nconst temp = ( node ) => { // @deprecated, r170\n\n\tconsole.warn( 'TSL: \"temp( node )\" is deprecated. Use \"Var( node )\" or \"node.toVar()\" instead.' );\n\n\treturn createVar( node );\n\n};\n\naddMethodChaining( 'temp', temp );\n\n/**\n * Class for representing shader varyings as nodes. Varyings are create from\n * existing nodes like the following:\n *\n * ```js\n * const positionLocal = positionGeometry.toVarying( 'vPositionLocal' );\n * ```\n *\n * @augments Node\n */\nclass VaryingNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'VaryingNode';\n\n\t}\n\n\t/**\n\t * Constructs a new varying node.\n\t *\n\t * @param {Node} node - The node for which a varying should be created.\n\t * @param {?string} name - The name of the varying in the shader.\n\t */\n\tconstructor( node, name = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node for which a varying should be created.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The name of the varying in the shader. If no name is defined,\n\t\t * the node system auto-generates one.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVaryingNode = true;\n\n\t\t/**\n\t\t * The interpolation type of the varying data.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.interpolationType = null;\n\n\t\t/**\n\t\t * The interpolation sampling type of varying data.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.interpolationSampling = null;\n\n\t}\n\n\t/**\n\t * The method is overwritten so it always returns `true`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether this node is global or not.\n\t */\n\tisGlobal( /*builder*/ ) {\n\n\t\treturn true;\n\n\t}\n\n\n\t/**\n\t * Defines the interpolation type of the varying.\n\t *\n\t * @param {string} type - The interpolation type.\n\t * @param {?string} sampling - The interpolation sampling type\n\t * @return {VaryingNode} A reference to this node.\n\t */\n\tsetInterpolation( type, sampling = null ) {\n\n\t\tthis.interpolationType = type;\n\t\tthis.interpolationSampling = sampling;\n\t\treturn this;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\t// VaryingNode is auto type\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * This method performs the setup of a varying node with the current node builder.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {NodeVarying} The node varying from the node builder.\n\t */\n\tsetupVarying( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tlet varying = properties.varying;\n\n\t\tif ( varying === undefined ) {\n\n\t\t\tconst name = this.name;\n\t\t\tconst type = this.getNodeType( builder );\n\t\t\tconst interpolationType = this.interpolationType;\n\t\t\tconst interpolationSampling = this.interpolationSampling;\n\n\t\t\tproperties.varying = varying = builder.getVaryingFromNode( this, name, type, interpolationType, interpolationSampling );\n\t\t\tproperties.node = this.node;\n\n\t\t}\n\n\t\t// this property can be used to check if the varying can be optimized for a variable\n\t\tvarying.needsInterpolation || ( varying.needsInterpolation = ( builder.shaderStage === 'fragment' ) );\n\n\t\treturn varying;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.setupVarying( builder );\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tthis.setupVarying( builder );\n\n\t\treturn this.node.analyze( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tconst varying = this.setupVarying( builder );\n\n\t\tconst needsReassign = builder.shaderStage === 'fragment' && properties.reassignPosition === true && builder.context.needsPositionReassign;\n\n\t\tif ( properties.propertyName === undefined || needsReassign ) {\n\n\t\t\tconst type = this.getNodeType( builder );\n\t\t\tconst propertyName = builder.getPropertyName( varying, NodeShaderStage.VERTEX );\n\n\t\t\t// force node run in vertex stage\n\t\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, this.node, type, propertyName );\n\n\t\t\tproperties.propertyName = propertyName;\n\n\t\t\tif ( needsReassign ) {\n\n\t\t\t\t// once reassign varying in fragment stage\n\t\t\t\tproperties.reassignPosition = false;\n\n\t\t\t} else if ( properties.reassignPosition === undefined && builder.context.isPositionNodeInput ) {\n\n\t\t\t\tproperties.reassignPosition = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn builder.getPropertyName( varying );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a varying node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node for which a varying should be created.\n * @param {?string} name - The name of the varying in the shader.\n * @returns {VaryingNode}\n */\nconst varying = /*@__PURE__*/ nodeProxy( VaryingNode ).setParameterLength( 1, 2 );\n\n/**\n * Computes a node in the vertex stage.\n *\n * @tsl\n * @function\n * @param {Node} node - The node which should be executed in the vertex stage.\n * @returns {VaryingNode}\n */\nconst vertexStage = ( node ) => varying( node );\n\naddMethodChaining( 'toVarying', varying );\naddMethodChaining( 'toVertexStage', vertexStage );\n\n// Deprecated\n\naddMethodChaining( 'varying', ( ...params ) => { // @deprecated, r173\n\n\tconsole.warn( 'THREE.TSL: .varying() has been renamed to .toVarying().' );\n\treturn varying( ...params );\n\n} );\n\naddMethodChaining( 'vertexStage', ( ...params ) => { // @deprecated, r173\n\n\tconsole.warn( 'THREE.TSL: .vertexStage() has been renamed to .toVertexStage().' );\n\treturn varying( ...params );\n\n} );\n\n/**\n * Converts the given color value from sRGB to linear-sRGB color space.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The sRGB color.\n * @return {Node<vec3>} The linear-sRGB color.\n */\nconst sRGBTransferEOTF = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst a = color.mul( 0.9478672986 ).add( 0.0521327014 ).pow( 2.4 );\n\tconst b = color.mul( 0.0773993808 );\n\tconst factor = color.lessThanEqual( 0.04045 );\n\n\tconst rgbResult = mix( a, b, factor );\n\n\treturn rgbResult;\n\n} ).setLayout( {\n\tname: 'sRGBTransferEOTF',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' }\n\t]\n} );\n\n/**\n * Converts the given color value from linear-sRGB to sRGB color space.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The linear-sRGB color.\n * @return {Node<vec3>} The sRGB color.\n */\nconst sRGBTransferOETF = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst a = color.pow( 0.41666 ).mul( 1.055 ).sub( 0.055 );\n\tconst b = color.mul( 12.92 );\n\tconst factor = color.lessThanEqual( 0.0031308 );\n\n\tconst rgbResult = mix( a, b, factor );\n\n\treturn rgbResult;\n\n} ).setLayout( {\n\tname: 'sRGBTransferOETF',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' }\n\t]\n} );\n\nconst WORKING_COLOR_SPACE = 'WorkingColorSpace';\nconst OUTPUT_COLOR_SPACE = 'OutputColorSpace';\n\n/**\n * This node represents a color space conversion. Meaning it converts\n * a color value from a source to a target color space.\n *\n * @augments TempNode\n */\nclass ColorSpaceNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'ColorSpaceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new color space node.\n\t *\n\t * @param {Node} colorNode - Represents the color to convert.\n\t * @param {string} source - The source color space.\n\t * @param {string} target - The target color space.\n\t */\n\tconstructor( colorNode, source, target ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * Represents the color to convert.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.colorNode = colorNode;\n\n\t\t/**\n\t\t * The source color space.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The target color space.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.target = target;\n\n\t}\n\n\t/**\n\t * This method resolves the constants `WORKING_COLOR_SPACE` and\n\t * `OUTPUT_COLOR_SPACE` based on the current configuration of the\n\t * color management and renderer.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} colorSpace - The color space to resolve.\n\t * @return {string} The resolved color space.\n\t */\n\tresolveColorSpace( builder, colorSpace ) {\n\n\t\tif ( colorSpace === WORKING_COLOR_SPACE ) {\n\n\t\t\treturn ColorManagement.workingColorSpace;\n\n\t\t} else if ( colorSpace === OUTPUT_COLOR_SPACE ) {\n\n\t\t\treturn builder.context.outputColorSpace || builder.renderer.outputColorSpace;\n\n\t\t}\n\n\t\treturn colorSpace;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { colorNode } = this;\n\n\t\tconst source = this.resolveColorSpace( builder, this.source );\n\t\tconst target = this.resolveColorSpace( builder, this.target );\n\n\t\tlet outputNode = colorNode;\n\n\t\tif ( ColorManagement.enabled === false || source === target || ! source || ! target ) {\n\n\t\t\treturn outputNode;\n\n\t\t}\n\n\t\tif ( ColorManagement.getTransfer( source ) === SRGBTransfer ) {\n\n\t\t\toutputNode = vec4( sRGBTransferEOTF( outputNode.rgb ), outputNode.a );\n\n\t\t}\n\n\t\tif ( ColorManagement.getPrimaries( source ) !== ColorManagement.getPrimaries( target ) ) {\n\n\t\t\toutputNode = vec4(\n\t\t\t\tmat3( ColorManagement._getMatrix( new Matrix3(), source, target ) ).mul( outputNode.rgb ),\n\t\t\t\toutputNode.a\n\t\t\t);\n\n\t\t}\n\n\t\tif ( ColorManagement.getTransfer( target ) === SRGBTransfer ) {\n\n\t\t\toutputNode = vec4( sRGBTransferOETF( outputNode.rgb ), outputNode.a );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\n/**\n * TSL function for converting a given color node to the current output color space.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @returns {ColorSpaceNode}\n */\nconst toOutputColorSpace = ( node ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, OUTPUT_COLOR_SPACE ) );\n\n/**\n * TSL function for converting a given color node to the current working color space.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @returns {ColorSpaceNode}\n */\nconst toWorkingColorSpace = ( node ) => nodeObject( new ColorSpaceNode( nodeObject( node ), OUTPUT_COLOR_SPACE, WORKING_COLOR_SPACE ) );\n\n/**\n * TSL function for converting a given color node from the current working color space to the given color space.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @param {string} colorSpace - The target color space.\n * @returns {ColorSpaceNode}\n */\nconst workingToColorSpace = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, colorSpace ) );\n\n/**\n * TSL function for converting a given color node from the given color space to the current working color space.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @param {string} colorSpace - The source color space.\n * @returns {ColorSpaceNode}\n */\nconst colorSpaceToWorking = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), colorSpace, WORKING_COLOR_SPACE ) );\n\n/**\n * TSL function for converting a given color node from one color space to another one.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @param {string} sourceColorSpace - The source color space.\n * @param {string} targetColorSpace - The target color space.\n * @returns {ColorSpaceNode}\n */\nconst convertColorSpace = ( node, sourceColorSpace, targetColorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), sourceColorSpace, targetColorSpace ) );\n\naddMethodChaining( 'toOutputColorSpace', toOutputColorSpace );\naddMethodChaining( 'toWorkingColorSpace', toWorkingColorSpace );\n\naddMethodChaining( 'workingToColorSpace', workingToColorSpace );\naddMethodChaining( 'colorSpaceToWorking', colorSpaceToWorking );\n\n// TODO: Avoid duplicated code and ues only ReferenceBaseNode or ReferenceNode\n\n/**\n * This class is only relevant if the referenced property is array-like.\n * In this case, `ReferenceElementNode` allows to refer to a specific\n * element inside the data structure via an index.\n *\n * @augments ArrayElementNode\n */\nlet ReferenceElementNode$1 = class ReferenceElementNode extends ArrayElementNode {\n\n\tstatic get type() {\n\n\t\treturn 'ReferenceElementNode';\n\n\t}\n\n\t/**\n\t * Constructs a new reference element node.\n\t *\n\t * @param {ReferenceBaseNode} referenceNode - The reference node.\n\t * @param {Node} indexNode - The index node that defines the element access.\n\t */\n\tconstructor( referenceNode, indexNode ) {\n\n\t\tsuper( referenceNode, indexNode );\n\n\t\t/**\n\t\t * Similar to {@link ReferenceBaseNode#reference}, an additional\n\t\t * property references to the current node.\n\t\t *\n\t\t * @type {?ReferenceBaseNode}\n\t\t * @default null\n\t\t */\n\t\tthis.referenceNode = referenceNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isReferenceElementNode = true;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from\n\t * the uniform type of the reference node.\n\t *\n\t * @return {string} The node type.\n\t */\n\tgetNodeType() {\n\n\t\treturn this.referenceNode.uniformType;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst snippet = super.generate( builder );\n\t\tconst arrayType = this.referenceNode.getNodeType();\n\t\tconst elementType = this.getNodeType();\n\n\t\treturn builder.format( snippet, arrayType, elementType );\n\n\t}\n\n};\n\n/**\n * Base class for nodes which establishes a reference to a property of another object.\n * In this way, the value of the node is automatically linked to the value of\n * referenced object. Reference nodes internally represent the linked value\n * as a uniform.\n *\n * @augments Node\n */\nclass ReferenceBaseNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ReferenceBaseNode';\n\n\t}\n\n\t/**\n\t * Constructs a new reference base node.\n\t *\n\t * @param {string} property - The name of the property the node refers to.\n\t * @param {string} uniformType - The uniform type that should be used to represent the property value.\n\t * @param {?Object} [object=null] - The object the property belongs to.\n\t * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.\n\t */\n\tconstructor( property, uniformType, object = null, count = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The name of the property the node refers to.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.property = property;\n\n\t\t/**\n\t\t * The uniform type that should be used to represent the property value.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.uniformType = uniformType;\n\n\t\t/**\n\t\t * The object the property belongs to.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * When the linked property is an array, this parameter defines its length.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * The property name might have dots so nested properties can be referred.\n\t\t * The hierarchy of the names is stored inside this array.\n\t\t *\n\t\t * @type {Array<string>}\n\t\t */\n\t\tthis.properties = property.split( '.' );\n\n\t\t/**\n\t\t * Points to the current referred object. This property exists next to {@link ReferenceNode#object}\n\t\t * since the final reference might be updated from calling code.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.reference = object;\n\n\t\t/**\n\t\t * The uniform node that holds the value of the reference node.\n\t\t *\n\t\t * @type {UniformNode}\n\t\t * @default null\n\t\t */\n\t\tthis.node = null;\n\n\t\t/**\n\t\t * The uniform group of the internal uniform.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t * @default null\n\t\t */\n\t\tthis.group = null;\n\n\t\t/**\n\t\t * Overwritten since reference nodes are updated per object.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t}\n\n\t/**\n\t * Sets the uniform group for this reference node.\n\t *\n\t * @param {UniformGroupNode} group - The uniform group to set.\n\t * @return {ReferenceBaseNode} A reference to this node.\n\t */\n\tsetGroup( group ) {\n\n\t\tthis.group = group;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * When the referred property is array-like, this method can be used\n\t * to access elements via an index node.\n\t *\n\t * @param {IndexNode} indexNode - indexNode.\n\t * @return {ReferenceElementNode} A reference to an element.\n\t */\n\telement( indexNode ) {\n\n\t\treturn nodeObject( new ReferenceElementNode$1( this, nodeObject( indexNode ) ) );\n\n\t}\n\n\t/**\n\t * Sets the node type which automatically defines the internal\n\t * uniform type.\n\t *\n\t * @param {string} uniformType - The type to set.\n\t */\n\tsetNodeType( uniformType ) {\n\n\t\tconst node = uniform( null, uniformType ).getSelf();\n\n\t\tif ( this.group !== null ) {\n\n\t\t\tnode.setGroup( this.group );\n\n\t\t}\n\n\t\tthis.node = node;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from\n\t * the type of the reference node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.node === null ) {\n\n\t\t\tthis.updateReference( builder );\n\t\t\tthis.updateValue();\n\n\t\t}\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Returns the property value from the given referred object.\n\t *\n\t * @param {Object} [object=this.reference] - The object to retrieve the property value from.\n\t * @return {any} The value.\n\t */\n\tgetValueFromReference( object = this.reference ) {\n\n\t\tconst { properties } = this;\n\n\t\tlet value = object[ properties[ 0 ] ];\n\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\n\n\t\t\tvalue = value[ properties[ i ] ];\n\n\t\t}\n\n\t\treturn value;\n\n\t}\n\n\t/**\n\t * Allows to update the reference based on the given state. The state is only\n\t * evaluated {@link ReferenceBaseNode#object} is not set.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\n\t * @return {Object} The updated reference.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.object !== null ? this.object : state.object;\n\n\t\treturn this.reference;\n\n\t}\n\n\t/**\n\t * The output of the reference node is the internal uniform node.\n\t *\n\t * @return {UniformNode} The output node.\n\t */\n\tsetup() {\n\n\t\tthis.updateValue();\n\n\t\treturn this.node;\n\n\t}\n\n\t/**\n\t * Overwritten to update the internal uniform value.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( /*frame*/ ) {\n\n\t\tthis.updateValue();\n\n\t}\n\n\t/**\n\t * Retrieves the value from the referred object property and uses it\n\t * to updated the internal uniform.\n\t */\n\tupdateValue() {\n\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\n\n\t\tconst value = this.getValueFromReference();\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tthis.node.array = value;\n\n\t\t} else {\n\n\t\t\tthis.node.value = value;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a reference base node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the property the node refers to.\n * @param {string} type - The uniform type that should be used to represent the property value.\n * @param {Object} object - The object the property belongs to.\n * @returns {ReferenceBaseNode}\n */\nconst reference$1 = ( name, type, object ) => nodeObject( new ReferenceBaseNode( name, type, object ) );\n\n/**\n * This node is a special type of reference node which is intended\n * for linking renderer properties with node values.\n * ```js\n * const exposureNode = rendererReference( 'toneMappingExposure', 'float', renderer );\n * ```\n * When changing `renderer.toneMappingExposure`, the node value of `exposureNode` will\n * automatically be updated.\n *\n * @augments ReferenceBaseNode\n */\nclass RendererReferenceNode extends ReferenceBaseNode {\n\n\tstatic get type() {\n\n\t\treturn 'RendererReferenceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new renderer reference node.\n\t *\n\t * @param {string} property - The name of the property the node refers to.\n\t * @param {string} inputType - The uniform type that should be used to represent the property value.\n\t * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,\n\t * the node refers to the renderer of the current state.\n\t */\n\tconstructor( property, inputType, renderer = null ) {\n\n\t\tsuper( property, inputType, renderer );\n\n\t\t/**\n\t\t * The renderer the property belongs to. When no renderer is set,\n\t\t * the node refers to the renderer of the current state.\n\t\t *\n\t\t * @type {?Renderer}\n\t\t * @default null\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\tthis.setGroup( renderGroup );\n\n\t}\n\n\t/**\n\t * Updates the reference based on the given state. The state is only evaluated\n\t * {@link RendererReferenceNode#renderer} is not set.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\n\t * @return {Object} The updated reference.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.renderer !== null ? this.renderer : state.renderer;\n\n\t\treturn this.reference;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a renderer reference node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the property the node refers to.\n * @param {string} type - The uniform type that should be used to represent the property value.\n * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,\n * the node refers to the renderer of the current state.\n * @returns {RendererReferenceNode}\n */\nconst rendererReference = ( name, type, renderer = null ) => nodeObject( new RendererReferenceNode( name, type, renderer ) );\n\n/**\n * This node represents a tone mapping operation.\n *\n * @augments TempNode\n */\nclass ToneMappingNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'ToneMappingNode';\n\n\t}\n\n\t/**\n\t * Constructs a new tone mapping node.\n\t *\n\t * @param {number} toneMapping - The tone mapping type.\n\t * @param {Node} exposureNode - The tone mapping exposure.\n\t * @param {Node} [colorNode=null] - The color node to process.\n\t */\n\tconstructor( toneMapping, exposureNode = toneMappingExposure, colorNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * The tone mapping type.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.toneMapping = toneMapping;\n\n\t\t/**\n\t\t * The tone mapping exposure.\n\t\t *\n\t\t * @type {Node}\n\t\t * @default null\n\t\t */\n\t\tthis.exposureNode = exposureNode;\n\n\t\t/**\n\t\t * Represents the color to process.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.colorNode = colorNode;\n\n\t}\n\n\t/**\n\t * Overwrites the default `customCacheKey()` implementation by including the tone\n\t * mapping type into the cache key.\n\t *\n\t * @return {number} The hash.\n\t */\n\tcustomCacheKey() {\n\n\t\treturn hash$1( this.toneMapping );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst colorNode = this.colorNode || builder.context.color;\n\t\tconst toneMapping = this.toneMapping;\n\n\t\tif ( toneMapping === NoToneMapping ) return colorNode;\n\n\t\tlet outputNode = null;\n\n\t\tconst toneMappingFn = builder.renderer.library.getToneMappingFunction( toneMapping );\n\n\t\tif ( toneMappingFn !== null ) {\n\n\t\t\toutputNode = vec4( toneMappingFn( colorNode.rgb, this.exposureNode ), colorNode.a );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping );\n\n\t\t\toutputNode = colorNode;\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a tone mapping node.\n *\n * @tsl\n * @function\n * @param {number} mapping - The tone mapping type.\n * @param {Node<float> | number} exposure - The tone mapping exposure.\n * @param {Node<vec3> | Color} color - The color node to process.\n * @returns {ToneMappingNode<vec3>}\n */\nconst toneMapping = ( mapping, exposure, color ) => nodeObject( new ToneMappingNode( mapping, nodeObject( exposure ), nodeObject( color ) ) );\n\n/**\n * TSL object that represents the global tone mapping exposure of the renderer.\n *\n * @tsl\n * @type {RendererReferenceNode<vec3>}\n */\nconst toneMappingExposure = /*@__PURE__*/ rendererReference( 'toneMappingExposure', 'float' );\n\naddMethodChaining( 'toneMapping', ( color, mapping, exposure ) => toneMapping( mapping, exposure, color ) );\n\n/**\n * In earlier `three.js` versions it was only possible to define attribute data\n * on geometry level. With `BufferAttributeNode`, it is also possible to do this\n * on the node level.\n * ```js\n * const geometry = new THREE.PlaneGeometry();\n * const positionAttribute = geometry.getAttribute( 'position' );\n *\n * const colors = [];\n * for ( let i = 0; i < position.count; i ++ ) {\n * \tcolors.push( 1, 0, 0 );\n * }\n *\n * material.colorNode = bufferAttribute( new THREE.Float32BufferAttribute( colors, 3 ) );\n * ```\n * This new approach is especially interesting when geometry data are generated via\n * compute shaders. The below line converts a storage buffer into an attribute node.\n * ```js\n * material.positionNode = positionBuffer.toAttribute();\n * ```\n * @augments InputNode\n */\nclass BufferAttributeNode extends InputNode {\n\n\tstatic get type() {\n\n\t\treturn 'BufferAttributeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new buffer attribute node.\n\t *\n\t * @param {BufferAttribute|InterleavedBuffer|TypedArray} value - The attribute data.\n\t * @param {?string} [bufferType=null] - The buffer type (e.g. `'vec3'`).\n\t * @param {number} [bufferStride=0] - The buffer stride.\n\t * @param {number} [bufferOffset=0] - The buffer offset.\n\t */\n\tconstructor( value, bufferType = null, bufferStride = 0, bufferOffset = 0 ) {\n\n\t\tsuper( value, bufferType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferNode = true;\n\n\t\t/**\n\t\t * The buffer type (e.g. `'vec3'`).\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.bufferType = bufferType;\n\n\t\t/**\n\t\t * The buffer stride.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bufferStride = bufferStride;\n\n\t\t/**\n\t\t * The buffer offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bufferOffset = bufferOffset;\n\n\t\t/**\n\t\t * The usage property. Set this to `THREE.DynamicDrawUsage` via `.setUsage()`,\n\t\t * if you are planning to update the attribute data per frame.\n\t\t *\n\t\t * @type {number}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * Whether the attribute is instanced or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.instanced = false;\n\n\t\t/**\n\t\t * A reference to the buffer attribute.\n\t\t *\n\t\t * @type {?BufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.attribute = null;\n\n\t\t/**\n\t\t * `BufferAttributeNode` sets this property to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.global = true;\n\n\t\tif ( value && value.isBufferAttribute === true ) {\n\n\t\t\tthis.attribute = value;\n\t\t\tthis.usage = value.usage;\n\t\t\tthis.instanced = value.isInstancedBufferAttribute;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is overwritten since the attribute data might be shared\n\t * and thus the hash should be shared as well.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The hash.\n\t */\n\tgetHash( builder ) {\n\n\t\tif ( this.bufferStride === 0 && this.bufferOffset === 0 ) {\n\n\t\t\tlet bufferData = builder.globalCache.getData( this.value );\n\n\t\t\tif ( bufferData === undefined ) {\n\n\t\t\t\tbufferData = {\n\t\t\t\t\tnode: this\n\t\t\t\t};\n\n\t\t\t\tbuilder.globalCache.setData( this.value, bufferData );\n\n\t\t\t}\n\n\t\t\treturn bufferData.node.uuid;\n\n\t\t}\n\n\t\treturn this.uuid;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from\n\t * the buffer attribute.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.bufferType === null ) {\n\n\t\t\tthis.bufferType = builder.getTypeFromAttribute( this.attribute );\n\n\t\t}\n\n\t\treturn this.bufferType;\n\n\t}\n\n\t/**\n\t * Depending on which value was passed to the node, `setup()` behaves\n\t * differently. If no instance of `BufferAttribute` was passed, the method\n\t * creates an internal attribute and configures it respectively.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tif ( this.attribute !== null ) return;\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst array = this.value;\n\t\tconst itemSize = builder.getTypeLength( type );\n\t\tconst stride = this.bufferStride || itemSize;\n\t\tconst offset = this.bufferOffset;\n\n\t\tconst buffer = array.isInterleavedBuffer === true ? array : new InterleavedBuffer( array, stride );\n\t\tconst bufferAttribute = new InterleavedBufferAttribute( buffer, itemSize, offset );\n\n\t\tbuffer.setUsage( this.usage );\n\n\t\tthis.attribute = bufferAttribute;\n\t\tthis.attribute.isInstancedBufferAttribute = this.instanced; // @TODO: Add a possible: InstancedInterleavedBufferAttribute\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the buffer attribute node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( builder ) {\n\n\t\tconst nodeType = this.getNodeType( builder );\n\n\t\tconst nodeAttribute = builder.getBufferAttributeFromNode( this, nodeType );\n\t\tconst propertyName = builder.getPropertyName( nodeAttribute );\n\n\t\tlet output = null;\n\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\n\n\t\t\tthis.name = propertyName;\n\n\t\t\toutput = propertyName;\n\n\t\t} else {\n\n\t\t\tconst nodeVarying = varying( this );\n\n\t\t\toutput = nodeVarying.build( builder, nodeType );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'bufferAttribute'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'bufferAttribute';\n\n\t}\n\n\t/**\n\t * Sets the `usage` property to the given value.\n\t *\n\t * @param {number} value - The usage to set.\n\t * @return {BufferAttributeNode} A reference to this node.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\tif ( this.attribute && this.attribute.isBufferAttribute === true ) {\n\n\t\t\tthis.attribute.usage = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the `instanced` property to the given value.\n\t *\n\t * @param {boolean} value - The value to set.\n\t * @return {BufferAttributeNode} A reference to this node.\n\t */\n\tsetInstanced( value ) {\n\n\t\tthis.instanced = value;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a buffer attribute node.\n *\n * @tsl\n * @function\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\n * @param {number} [stride=0] - The buffer stride.\n * @param {number} [offset=0] - The buffer offset.\n * @returns {BufferAttributeNode}\n */\nconst bufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => nodeObject( new BufferAttributeNode( array, type, stride, offset ) );\n\n/**\n * TSL function for creating a buffer attribute node but with dynamic draw usage.\n * Use this function if attribute data are updated per frame.\n *\n * @tsl\n * @function\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\n * @param {number} [stride=0] - The buffer stride.\n * @param {number} [offset=0] - The buffer offset.\n * @returns {BufferAttributeNode}\n */\nconst dynamicBufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => bufferAttribute( array, type, stride, offset ).setUsage( DynamicDrawUsage );\n\n/**\n * TSL function for creating a buffer attribute node but with enabled instancing\n *\n * @tsl\n * @function\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\n * @param {number} [stride=0] - The buffer stride.\n * @param {number} [offset=0] - The buffer offset.\n * @returns {BufferAttributeNode}\n */\nconst instancedBufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => bufferAttribute( array, type, stride, offset ).setInstanced( true );\n\n/**\n * TSL function for creating a buffer attribute node but with dynamic draw usage and enabled instancing\n *\n * @tsl\n * @function\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\n * @param {number} [stride=0] - The buffer stride.\n * @param {number} [offset=0] - The buffer offset.\n * @returns {BufferAttributeNode}\n */\nconst instancedDynamicBufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => dynamicBufferAttribute( array, type, stride, offset ).setInstanced( true );\n\naddMethodChaining( 'toAttribute', ( bufferNode ) => bufferAttribute( bufferNode.value ) );\n\n/**\n * TODO\n *\n * @augments Node\n */\nclass ComputeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ComputeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new compute node.\n\t *\n\t * @param {Node} computeNode - TODO\n\t * @param {number} count - TODO.\n\t * @param {Array<number>} [workgroupSize=[64]] - TODO.\n\t */\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\n\n\t\tsuper( 'void' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isComputeNode = true;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.computeNode = computeNode;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {Array<number>}\n\t\t * @default [64]\n\t\t */\n\t\tthis.workgroupSize = workgroupSize;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.dispatchCount = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 1;\n\n\t\t/**\n\t\t * The name or label of the uniform.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.OBJECT` since {@link ComputeNode#updateBefore}\n\t\t * is executed once per object by default.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.OBJECT;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {?Function}\n\t\t */\n\t\tthis.onInitFunction = null;\n\n\t\tthis.updateDispatchCount();\n\n\t}\n\n\t/**\n\t * Executes the `dispose` event for this node.\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Sets the {@link ComputeNode#name} property.\n\t *\n\t * @param {string} name - The name of the uniform.\n\t * @return {ComputeNode} A reference to this node.\n\t */\n\tlabel( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * TODO\n\t */\n\tupdateDispatchCount() {\n\n\t\tconst { count, workgroupSize } = this;\n\n\t\tlet size = workgroupSize[ 0 ];\n\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\n\t\t\tsize *= workgroupSize[ i ];\n\n\t\tthis.dispatchCount = Math.ceil( count / size );\n\n\t}\n\n\t/**\n\t * TODO\n\t *\n\t * @param {Function} callback - TODO.\n\t * @return {ComputeNode} A reference to this node.\n\t */\n\tonInit( callback ) {\n\n\t\tthis.onInitFunction = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The method execute the compute for this node.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdateBefore( { renderer } ) {\n\n\t\trenderer.compute( this );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst result = this.computeNode.build( builder );\n\n\t\tif ( result ) {\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\t\t\tproperties.outputComputeNode = result.outputNode;\n\n\t\t\tresult.outputNode = null;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { shaderStage } = builder;\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\n\n\t\t\tif ( snippet !== '' ) {\n\n\t\t\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\t\t\tconst outputComputeNode = properties.outputComputeNode;\n\n\t\t\tif ( outputComputeNode ) {\n\n\t\t\t\treturn outputComputeNode.build( builder, output );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a compute node.\n *\n * @tsl\n * @function\n * @param {Node} node - TODO\n * @param {number} count - TODO.\n * @param {Array<number>} [workgroupSize=[64]] - TODO.\n * @returns {AtomicFunctionNode}\n */\nconst compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\n\naddMethodChaining( 'compute', compute );\n\n/**\n * This node can be used as a cache management component for another node.\n * Caching is in general used by default in {@link NodeBuilder} but this node\n * allows the usage of a shared parent cache during the build process.\n *\n * @augments Node\n */\nclass CacheNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'CacheNode';\n\n\t}\n\n\t/**\n\t * Constructs a new cache node.\n\t *\n\t * @param {Node} node - The node that should be cached.\n\t * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.\n\t */\n\tconstructor( node, parent = true ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that should be cached.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * Whether this node refers to a shared parent cache or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCacheNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst previousCache = builder.getCache();\n\t\tconst cache = builder.getCacheFromNode( this, this.parent );\n\n\t\tbuilder.setCache( cache );\n\n\t\tconst nodeType = this.node.getNodeType( builder );\n\n\t\tbuilder.setCache( previousCache );\n\n\t\treturn nodeType;\n\n\t}\n\n\tbuild( builder, ...params ) {\n\n\t\tconst previousCache = builder.getCache();\n\t\tconst cache = builder.getCacheFromNode( this, this.parent );\n\n\t\tbuilder.setCache( cache );\n\n\t\tconst data = this.node.build( builder, ...params );\n\n\t\tbuilder.setCache( previousCache );\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a cache node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node that should be cached.\n * @param {boolean} [parent] - Whether this node refers to a shared parent cache or not.\n * @returns {CacheNode}\n */\nconst cache = ( node, parent ) => nodeObject( new CacheNode( nodeObject( node ), parent ) );\n\naddMethodChaining( 'cache', cache );\n\n/**\n * The class generates the code of a given node but returns another node in the output.\n * This can be used to call a method or node that does not return a value, i.e.\n * type `void` on an input where returning a value is required. Example:\n *\n * ```js\n * material.colorNode = myColor.bypass( runVoidFn() )\n *```\n *\n * @augments Node\n */\nclass BypassNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'BypassNode';\n\n\t}\n\n\t/**\n\t * Constructs a new bypass node.\n\t *\n\t * @param {Node} outputNode - The output node.\n\t * @param {Node} callNode - The call node.\n\t */\n\tconstructor( outputNode, callNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBypassNode = true;\n\n\t\t/**\n\t\t * The output node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.outputNode = outputNode;\n\n\t\t/**\n\t\t * The call node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.callNode = callNode;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.outputNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst snippet = this.callNode.build( builder, 'void' );\n\n\t\tif ( snippet !== '' ) {\n\n\t\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t\t}\n\n\t\treturn this.outputNode.build( builder );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a bypass node.\n *\n * @tsl\n * @function\n * @param {Node} outputNode - The output node.\n * @param {Node} callNode - The call node.\n * @returns {BypassNode}\n */\nconst bypass = /*@__PURE__*/ nodeProxy( BypassNode ).setParameterLength( 2 );\n\naddMethodChaining( 'bypass', bypass );\n\n/**\n * This node allows to remap a node value from one range into another. E.g a value of\n * `0.4` in the range `[ 0.3, 0.5 ]` should be remapped into the normalized range `[ 0, 1 ]`.\n * `RemapNode` takes care of that and converts the original value of `0.4` to `0.5`.\n *\n * @augments Node\n */\nclass RemapNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'RemapNode';\n\n\t}\n\n\t/**\n\t * Constructs a new remap node.\n\t *\n\t * @param {Node} node - The node that should be remapped.\n\t * @param {Node} inLowNode - The source or current lower bound of the range.\n\t * @param {Node} inHighNode - The source or current upper bound of the range.\n\t * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.\n\t * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.\n\t */\n\tconstructor( node, inLowNode, inHighNode, outLowNode = float( 0 ), outHighNode = float( 1 ) ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that should be remapped.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The source or current lower bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.inLowNode = inLowNode;\n\n\t\t/**\n\t\t * The source or current upper bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.inHighNode = inHighNode;\n\n\t\t/**\n\t\t * The target lower bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t * @default float(0)\n\t\t */\n\t\tthis.outLowNode = outLowNode;\n\n\t\t/**\n\t\t * The target upper bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t * @default float(1)\n\t\t */\n\t\tthis.outHighNode = outHighNode;\n\n\t\t/**\n\t\t * Whether the node value should be clamped before\n\t\t * remapping it to the target range.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.doClamp = true;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;\n\n\t\tlet t = node.sub( inLowNode ).div( inHighNode.sub( inLowNode ) );\n\n\t\tif ( doClamp === true ) t = t.clamp();\n\n\t\treturn t.mul( outHighNode.sub( outLowNode ) ).add( outLowNode );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a remap node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node that should be remapped.\n * @param {Node} inLowNode - The source or current lower bound of the range.\n * @param {Node} inHighNode - The source or current upper bound of the range.\n * @param {?Node} [outLowNode=float(0)] - The target lower bound of the range.\n * @param {?Node} [outHighNode=float(1)] - The target upper bound of the range.\n * @returns {RemapNode}\n */\nconst remap = /*@__PURE__*/ nodeProxy( RemapNode, null, null, { doClamp: false } ).setParameterLength( 3, 5 );\n\n/**\n * TSL function for creating a remap node, but with enabled clamping.\n *\n * @tsl\n * @function\n * @param {Node} node - The node that should be remapped.\n * @param {Node} inLowNode - The source or current lower bound of the range.\n * @param {Node} inHighNode - The source or current upper bound of the range.\n * @param {?Node} [outLowNode=float(0)] - The target lower bound of the range.\n * @param {?Node} [outHighNode=float(1)] - The target upper bound of the range.\n * @returns {RemapNode}\n */\nconst remapClamp = /*@__PURE__*/ nodeProxy( RemapNode ).setParameterLength( 3, 5 );\n\naddMethodChaining( 'remap', remap );\naddMethodChaining( 'remapClamp', remapClamp );\n\n/**\n * This class can be used to implement basic expressions in shader code.\n * Basic examples for that are `return`, `continue` or `discard` statements.\n *\n * @augments Node\n */\nclass ExpressionNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ExpressionNode';\n\n\t}\n\n\t/**\n\t * Constructs a new expression node.\n\t *\n\t * @param {string} [snippet=''] - The native code snippet.\n\t * @param {string} [nodeType='void'] - The node type.\n\t */\n\tconstructor( snippet = '', nodeType = 'void' ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * The native code snippet.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.snippet = snippet;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst snippet = this.snippet;\n\n\t\tif ( type === 'void' ) {\n\n\t\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t\t} else {\n\n\t\t\treturn builder.format( snippet, type, output );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating an expression node.\n *\n * @tsl\n * @function\n * @param {string} [snippet] - The native code snippet.\n * @param {?string} [nodeType='void'] - The node type.\n * @returns {ExpressionNode}\n */\nconst expression = /*@__PURE__*/ nodeProxy( ExpressionNode ).setParameterLength( 1, 2 );\n\n/**\n * Represents a `discard` shader operation in TSL.\n *\n * @tsl\n * @function\n * @param {?ConditionalNode} conditional - An optional conditional node. It allows to decide whether the discard should be executed or not.\n * @return {Node} The `discard` expression.\n */\nconst Discard = ( conditional ) => ( conditional ? select( conditional, expression( 'discard' ) ) : expression( 'discard' ) ).toStack();\n\n/**\n * Represents a `return` shader operation in TSL.\n *\n * @tsl\n * @function\n * @return {ExpressionNode} The `return` expression.\n */\nconst Return = () => expression( 'return' ).toStack();\n\naddMethodChaining( 'discard', Discard );\n\n/**\n * Normally, tone mapping and color conversion happens automatically\n * before outputting pixel too the default (screen) framebuffer. In certain\n * post processing setups this happens to late because certain effects\n * require e.g. sRGB input. For such scenarios, `RenderOutputNode` can be used\n * to apply tone mapping and color space conversion at an arbitrary point\n * in the effect chain.\n *\n * When applying tone mapping and color space conversion manually with this node,\n * you have to set {@link PostProcessing#outputColorTransform} to `false`.\n *\n * ```js\n * const postProcessing = new PostProcessing( renderer );\n * postProcessing.outputColorTransform = false;\n *\n * const scenePass = pass( scene, camera );\n * const outputPass = renderOutput( scenePass );\n *\n * postProcessing.outputNode = outputPass;\n * ```\n *\n * @augments TempNode\n */\nclass RenderOutputNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'RenderOutputNode';\n\n\t}\n\n\t/**\n\t * Constructs a new render output node.\n\t *\n\t * @param {Node} colorNode - The color node to process.\n\t * @param {?number} toneMapping - The tone mapping type.\n\t * @param {?string} outputColorSpace - The output color space.\n\t */\n\tconstructor( colorNode, toneMapping, outputColorSpace ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * The color node to process.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.colorNode = colorNode;\n\n\t\t/**\n\t\t * The tone mapping type.\n\t\t *\n\t\t * @type {?number}\n\t\t */\n\t\tthis.toneMapping = toneMapping;\n\n\t\t/**\n\t\t * The output color space.\n\t\t *\n\t\t * @type {?string}\n\t\t */\n\t\tthis.outputColorSpace = outputColorSpace;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderOutputNode = true;\n\n\t}\n\n\tsetup( { context } ) {\n\n\t\tlet outputNode = this.colorNode || context.color;\n\n\t\t// tone mapping\n\n\t\tconst toneMapping = ( this.toneMapping !== null ? this.toneMapping : context.toneMapping ) || NoToneMapping;\n\t\tconst outputColorSpace = ( this.outputColorSpace !== null ? this.outputColorSpace : context.outputColorSpace ) || NoColorSpace;\n\n\t\tif ( toneMapping !== NoToneMapping ) {\n\n\t\t\toutputNode = outputNode.toneMapping( toneMapping );\n\n\t\t}\n\n\t\t// working to output color space\n\n\t\tif ( outputColorSpace !== NoColorSpace && outputColorSpace !== ColorManagement.workingColorSpace ) {\n\n\t\t\toutputNode = outputNode.workingToColorSpace( outputColorSpace );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a posterize node.\n *\n * @tsl\n * @function\n * @param {Node} color - The color node to process.\n * @param {?number} [toneMapping=null] - The tone mapping type.\n * @param {?string} [outputColorSpace=null] - The output color space.\n * @returns {RenderOutputNode}\n */\nconst renderOutput = ( color, toneMapping = null, outputColorSpace = null ) => nodeObject( new RenderOutputNode( nodeObject( color ), toneMapping, outputColorSpace ) );\n\naddMethodChaining( 'renderOutput', renderOutput );\n\nclass DebugNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'DebugNode';\n\n\t}\n\n\tconstructor( node, callback = null ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.callback = callback;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\treturn this.node.build( builder );\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\treturn this.node.build( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst callback = this.callback;\n\t\tconst snippet = this.node.build( builder );\n\n\t\tconst title = '--- TSL debug - ' + builder.shaderStage + ' shader ---';\n\t\tconst border = '-'.repeat( title.length );\n\n\t\tlet code = '';\n\t\tcode += '// #' + title + '#\\n';\n\t\tcode += builder.flow.code.replace( /^\\t/mg, '' ) + '\\n';\n\t\tcode += '/* ... */ ' + snippet + ' /* ... */\\n';\n\t\tcode += '// #' + border + '#\\n';\n\n\t\tif ( callback !== null ) {\n\n\t\t\tcallback( builder, code );\n\n\t\t} else {\n\n\t\t\tconsole.log( code );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a debug node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node to debug.\n * @param {?Function} [callback=null] - Optional callback function to handle the debug output.\n * @returns {DebugNode}\n */\nconst debug = ( node, callback = null ) => nodeObject( new DebugNode( nodeObject( node ), callback ) );\n\naddMethodChaining( 'debug', debug );\n\n// Non-PURE exports list, side-effects are required here.\n// TSL Base Syntax\n\n\nfunction addNodeElement( name/*, nodeElement*/ ) {\n\n\tconsole.warn( 'THREE.TSL: AddNodeElement has been removed in favor of tree-shaking. Trying add', name );\n\n}\n\n/**\n * Base class for representing shader attributes as nodes.\n *\n * @augments Node\n */\nclass AttributeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'AttributeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new attribute node.\n\t *\n\t * @param {string} attributeName - The name of the attribute.\n\t * @param {?string} nodeType - The node type.\n\t */\n\tconstructor( attributeName, nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * `AttributeNode` sets this property to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.global = true;\n\n\t\tthis._attributeName = attributeName;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.getAttributeName( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tlet nodeType = this.nodeType;\n\n\t\tif ( nodeType === null ) {\n\n\t\t\tconst attributeName = this.getAttributeName( builder );\n\n\t\t\tif ( builder.hasGeometryAttribute( attributeName ) ) {\n\n\t\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\n\n\t\t\t\tnodeType = builder.getTypeFromAttribute( attribute );\n\n\t\t\t} else {\n\n\t\t\t\tnodeType = 'float';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeType;\n\n\t}\n\n\t/**\n\t * Sets the attribute name to the given value. The method can be\n\t * overwritten in derived classes if the final name must be computed\n\t * analytically.\n\t *\n\t * @param {string} attributeName - The name of the attribute.\n\t * @return {AttributeNode} A reference to this node.\n\t */\n\tsetAttributeName( attributeName ) {\n\n\t\tthis._attributeName = attributeName;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the attribute name of this node. The method can be\n\t * overwritten in derived classes if the final name must be computed\n\t * analytically.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The attribute name.\n\t */\n\tgetAttributeName( /*builder*/ ) {\n\n\t\treturn this._attributeName;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst attributeName = this.getAttributeName( builder );\n\t\tconst nodeType = this.getNodeType( builder );\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\n\n\t\tif ( geometryAttribute === true ) {\n\n\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\n\t\t\tconst attributeType = builder.getTypeFromAttribute( attribute );\n\n\t\t\tconst nodeAttribute = builder.getAttribute( attributeName, attributeType );\n\n\t\t\tif ( builder.shaderStage === 'vertex' ) {\n\n\t\t\t\treturn builder.format( nodeAttribute.name, attributeType, nodeType );\n\n\t\t\t} else {\n\n\t\t\t\tconst nodeVarying = varying( this );\n\n\t\t\t\treturn nodeVarying.build( builder, nodeType );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( `AttributeNode: Vertex attribute \"${ attributeName }\" not found on geometry.` );\n\n\t\t\treturn builder.generateConst( nodeType );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.global = this.global;\n\t\tdata._attributeName = this._attributeName;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.global = data.global;\n\t\tthis._attributeName = data._attributeName;\n\n\t}\n\n}\n\n/**\n * TSL function for creating an attribute node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the attribute.\n * @param {?string} [nodeType=null] - The node type.\n * @returns {AttributeNode}\n */\nconst attribute = ( name, nodeType = null ) => nodeObject( new AttributeNode( name, nodeType ) );\n\n/**\n * TSL function for creating an uv attribute node with the given index.\n *\n * @tsl\n * @function\n * @param {number} [index=0] - The uv index.\n * @return {AttributeNode<vec2>} The uv attribute node.\n */\nconst uv = ( index = 0 ) => attribute( 'uv' + ( index > 0 ? index : '' ), 'vec2' );\n\n/**\n * A node that represents the dimensions of a texture. The texture size is\n * retrieved in the shader via built-in shader functions like `textureDimensions()`\n * or `textureSize()`.\n *\n * @augments Node\n */\nclass TextureSizeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'TextureSizeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new texture size node.\n\t *\n\t * @param {TextureNode} textureNode - A texture node which size should be retrieved.\n\t * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.\n\t */\n\tconstructor( textureNode, levelNode = null ) {\n\n\t\tsuper( 'uvec2' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTextureSizeNode = true;\n\n\t\t/**\n\t\t * A texture node which size should be retrieved.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * A level node which defines the requested mip.\n\t\t *\n\t\t * @type {Node<int>}\n\t\t * @default null\n\t\t */\n\t\tthis.levelNode = levelNode;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst textureProperty = this.textureNode.build( builder, 'property' );\n\t\tconst level = this.levelNode === null ? '0' : this.levelNode.build( builder, 'int' );\n\n\t\treturn builder.format( `${ builder.getMethod( 'textureDimensions' ) }( ${ textureProperty }, ${ level } )`, this.getNodeType( builder ), output );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a texture size node.\n *\n * @tsl\n * @function\n * @param {TextureNode} textureNode - A texture node which size should be retrieved.\n * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.\n * @returns {TextureSizeNode}\n */\nconst textureSize = /*@__PURE__*/ nodeProxy( TextureSizeNode ).setParameterLength( 1, 2 );\n\n/**\n * A special type of uniform node that computes the\n * maximum mipmap level for a given texture node.\n *\n * ```js\n * const level = maxMipLevel( textureNode );\n * ```\n *\n * @augments UniformNode\n */\nclass MaxMipLevelNode extends UniformNode {\n\n\tstatic get type() {\n\n\t\treturn 'MaxMipLevelNode';\n\n\t}\n\n\t/**\n\t * Constructs a new max mip level node.\n\t *\n\t * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\n\t */\n\tconstructor( textureNode ) {\n\n\t\tsuper( 0 );\n\n\t\t/**\n\t\t * The texture node to compute the max mip level for.\n\t\t *\n\t\t * @private\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis._textureNode = textureNode;\n\n\t\t/**\n\t\t * The `updateType` is set to `NodeUpdateType.FRAME` since the node updates\n\t\t * the texture once per frame in its {@link MaxMipLevelNode#update} method.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.FRAME;\n\n\t}\n\n\t/**\n\t * The texture node to compute the max mip level for.\n\t *\n\t * @readonly\n\t * @type {TextureNode}\n\t */\n\tget textureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\t/**\n\t * The texture.\n\t *\n\t * @readonly\n\t * @type {Texture}\n\t */\n\tget texture() {\n\n\t\treturn this._textureNode.value;\n\n\t}\n\n\tupdate() {\n\n\t\tconst texture = this.texture;\n\t\tconst images = texture.images;\n\t\tconst image = ( images && images.length > 0 ) ? ( ( images[ 0 ] && images[ 0 ].image ) || images[ 0 ] ) : texture.image;\n\n\t\tif ( image && image.width !== undefined ) {\n\n\t\t\tconst { width, height } = image;\n\n\t\t\tthis.value = Math.log2( Math.max( width, height ) );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a max mip level node.\n *\n * @tsl\n * @function\n * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\n * @returns {MaxMipLevelNode}\n */\nconst maxMipLevel = /*@__PURE__*/ nodeProxy( MaxMipLevelNode ).setParameterLength( 1 );\n\n/**\n * This type of uniform node represents a 2D texture.\n *\n * @augments UniformNode\n */\nclass TextureNode extends UniformNode {\n\n\tstatic get type() {\n\n\t\treturn 'TextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new texture node.\n\t *\n\t * @param {Texture} value - The texture.\n\t * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\n\t * @param {?Node<int>} [levelNode=null] - The level node.\n\t * @param {?Node<float>} [biasNode=null] - The bias node.\n\t */\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\n\n\t\tsuper( value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTextureNode = true;\n\n\t\t/**\n\t\t * Represents the texture coordinates.\n\t\t *\n\t\t * @type {?Node<vec2|vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.uvNode = uvNode;\n\n\t\t/**\n\t\t * Represents the mip level that should be selected.\n\t\t *\n\t\t * @type {?Node<int>}\n\t\t * @default null\n\t\t */\n\t\tthis.levelNode = levelNode;\n\n\t\t/**\n\t\t * Represents the bias to be applied during level-of-detail computation.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.biasNode = biasNode;\n\n\t\t/**\n\t\t * Represents a reference value a texture sample is compared to.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.compareNode = null;\n\n\t\t/**\n\t\t * When using texture arrays, the depth node defines the layer to select.\n\t\t *\n\t\t * @type {?Node<int>}\n\t\t * @default null\n\t\t */\n\t\tthis.depthNode = null;\n\n\t\t/**\n\t\t * When defined, a texture is sampled using explicit gradients.\n\t\t *\n\t\t * @type {?Array<Node<vec2>>}\n\t\t * @default null\n\t\t */\n\t\tthis.gradNode = null;\n\n\t\t/**\n\t\t * Whether texture values should be sampled or fetched.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sampler = true;\n\n\t\t/**\n\t\t * Whether the uv transformation matrix should be\n\t\t * automatically updated or not. Use `setUpdateMatrix()`\n\t\t * if you want to change the value of the property.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.updateMatrix = false;\n\n\t\t/**\n\t\t * By default the `update()` method is not executed. `setUpdateMatrix()`\n\t\t * sets the value to `frame` when the uv transformation matrix should\n\t\t * automatically be updated.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'none'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.NONE;\n\n\t\t/**\n\t\t * The reference node.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.referenceNode = null;\n\n\t\t/**\n\t\t * The texture value is stored in a private property.\n\t\t *\n\t\t * @private\n\t\t * @type {Texture}\n\t\t */\n\t\tthis._value = value;\n\n\t\t/**\n\t\t * The uniform node that represents the uv transformation matrix.\n\t\t *\n\t\t * @private\n\t\t * @type {?UniformNode<mat3>}\n\t\t */\n\t\tthis._matrixUniform = null;\n\n\t\tthis.setUpdateMatrix( uvNode === null );\n\n\t}\n\n\tset value( value ) {\n\n\t\tif ( this.referenceNode ) {\n\n\t\t\tthis.referenceNode.value = value;\n\n\t\t} else {\n\n\t\t\tthis._value = value;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * The texture value.\n\t *\n\t * @type {Texture}\n\t */\n\tget value() {\n\n\t\treturn this.referenceNode ? this.referenceNode.value : this._value;\n\n\t}\n\n\t/**\n\t * Overwritten since the uniform hash is defined by the texture's UUID.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The uniform hash.\n\t */\n\tgetUniformHash( /*builder*/ ) {\n\n\t\treturn this.value.uuid;\n\n\t}\n\n\t/**\n\t * Overwritten since the node type is inferred from the texture type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( /*builder*/ ) {\n\n\t\tif ( this.value.isDepthTexture === true ) return 'float';\n\n\t\tif ( this.value.type === UnsignedIntType ) {\n\n\t\t\treturn 'uvec4';\n\n\t\t} else if ( this.value.type === IntType ) {\n\n\t\t\treturn 'ivec4';\n\n\t\t}\n\n\t\treturn 'vec4';\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'texture'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture';\n\n\t}\n\n\t/**\n\t * Returns a default uvs based on the current texture's channel.\n\t *\n\t * @return {AttributeNode<vec2>} The default uvs.\n\t */\n\tgetDefaultUV() {\n\n\t\treturn uv( this.value.channel );\n\n\t}\n\n\t/**\n\t * Overwritten to always return the texture reference of the node.\n\t *\n\t * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.\n\t * @return {Texture} The texture reference.\n\t */\n\tupdateReference( /*state*/ ) {\n\n\t\treturn this.value;\n\n\t}\n\n\t/**\n\t * Transforms the given uv node with the texture transformation matrix.\n\t *\n\t * @param {Node} uvNode - The uv node to transform.\n\t * @return {Node} The transformed uv node.\n\t */\n\tgetTransformedUV( uvNode ) {\n\n\t\tif ( this._matrixUniform === null ) this._matrixUniform = uniform( this.value.matrix );\n\n\t\treturn this._matrixUniform.mul( vec3( uvNode, 1 ) ).xy;\n\n\t}\n\n\t/**\n\t * Defines whether the uv transformation matrix should automatically be updated or not.\n\t *\n\t * @param {boolean} value - The update toggle.\n\t * @return {TextureNode} A reference to this node.\n\t */\n\tsetUpdateMatrix( value ) {\n\n\t\tthis.updateMatrix = value;\n\t\tthis.updateType = value ? NodeUpdateType.OBJECT : NodeUpdateType.NONE;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Setups the uv node. Depending on the backend as well as texture's image and type, it might be necessary\n\t * to modify the uv node for correct sampling.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to setup.\n\t * @return {Node} The updated uv node.\n\t */\n\tsetupUV( builder, uvNode ) {\n\n\t\tconst texture = this.value;\n\n\t\tif ( builder.isFlipY() && ( ( texture.image instanceof ImageBitmap && texture.flipY === true ) || texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true || texture.isDepthTexture === true ) ) {\n\n\t\t\tif ( this.sampler ) {\n\n\t\t\t\tuvNode = uvNode.flipY();\n\n\t\t\t} else {\n\n\t\t\t\tuvNode = uvNode.setY( int( textureSize( this, this.levelNode ).y ).sub( uvNode.y ).sub( 1 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uvNode;\n\n\t}\n\n\t/**\n\t * Setups texture node by preparing the internal nodes for code generation.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.referenceNode = this.referenceNode;\n\n\t\t//\n\n\t\tconst texture = this.value;\n\n\t\tif ( ! texture || texture.isTexture !== true ) {\n\n\t\t\tthrow new Error( 'THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().' );\n\n\t\t}\n\n\t\t//\n\n\t\tlet uvNode = this.uvNode;\n\n\t\tif ( ( uvNode === null || builder.context.forceUVContext === true ) && builder.context.getUV ) {\n\n\t\t\tuvNode = builder.context.getUV( this, builder );\n\n\t\t}\n\n\t\tif ( ! uvNode ) uvNode = this.getDefaultUV();\n\n\t\tif ( this.updateMatrix === true ) {\n\n\t\t\tuvNode = this.getTransformedUV( uvNode );\n\n\t\t}\n\n\t\tuvNode = this.setupUV( builder, uvNode );\n\n\t\t//\n\n\t\tlet levelNode = this.levelNode;\n\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\n\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\n\n\t\t}\n\n\t\t//\n\n\t\tproperties.uvNode = uvNode;\n\t\tproperties.levelNode = levelNode;\n\t\tproperties.biasNode = this.biasNode;\n\t\tproperties.compareNode = this.compareNode;\n\t\tproperties.gradNode = this.gradNode;\n\t\tproperties.depthNode = this.depthNode;\n\n\t}\n\n\t/**\n\t * Generates the uv code snippet.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to generate code for.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerateUV( builder, uvNode ) {\n\n\t\treturn uvNode.build( builder, this.sampler === true ? 'vec2' : 'ivec2' );\n\n\t}\n\n\t/**\n\t * Generates the snippet for the texture sampling.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} textureProperty - The texture property.\n\t * @param {string} uvSnippet - The uv snippet.\n\t * @param {?string} levelSnippet - The level snippet.\n\t * @param {?string} biasSnippet - The bias snippet.\n\t * @param {?string} depthSnippet - The depth snippet.\n\t * @param {?string} compareSnippet - The compare snippet.\n\t * @param {?Array<string>} gradSnippet - The grad snippet.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet ) {\n\n\t\tconst texture = this.value;\n\n\t\tlet snippet;\n\n\t\tif ( levelSnippet ) {\n\n\t\t\tsnippet = builder.generateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet );\n\n\t\t} else if ( biasSnippet ) {\n\n\t\t\tsnippet = builder.generateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet );\n\n\t\t} else if ( gradSnippet ) {\n\n\t\t\tsnippet = builder.generateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet );\n\n\t\t} else if ( compareSnippet ) {\n\n\t\t\tsnippet = builder.generateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet );\n\n\t\t} else if ( this.sampler === false ) {\n\n\t\t\tsnippet = builder.generateTextureLoad( texture, textureProperty, uvSnippet, depthSnippet );\n\n\t\t} else {\n\n\t\t\tsnippet = builder.generateTexture( texture, textureProperty, uvSnippet, depthSnippet );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the texture node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} output - The current output.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( builder, output ) {\n\n\t\tconst texture = this.value;\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tconst textureProperty = super.generate( builder, 'property' );\n\n\t\tif ( /^sampler/.test( output ) ) {\n\n\t\t\treturn textureProperty + '_sampler';\n\n\t\t} else if ( builder.isReference( output ) ) {\n\n\t\t\treturn textureProperty;\n\n\t\t} else {\n\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tlet propertyName = nodeData.propertyName;\n\n\t\t\tif ( propertyName === undefined ) {\n\n\t\t\t\tconst { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode } = properties;\n\n\t\t\t\tconst uvSnippet = this.generateUV( builder, uvNode );\n\t\t\t\tconst levelSnippet = levelNode ? levelNode.build( builder, 'float' ) : null;\n\t\t\t\tconst biasSnippet = biasNode ? biasNode.build( builder, 'float' ) : null;\n\t\t\t\tconst depthSnippet = depthNode ? depthNode.build( builder, 'int' ) : null;\n\t\t\t\tconst compareSnippet = compareNode ? compareNode.build( builder, 'float' ) : null;\n\t\t\t\tconst gradSnippet = gradNode ? [ gradNode[ 0 ].build( builder, 'vec2' ), gradNode[ 1 ].build( builder, 'vec2' ) ] : null;\n\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this );\n\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\n\n\t\t\t\tconst snippet = this.generateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet );\n\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}`, this );\n\n\t\t\t\tnodeData.snippet = snippet;\n\t\t\t\tnodeData.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\tlet snippet = propertyName;\n\t\t\tconst nodeType = this.getNodeType( builder );\n\n\t\t\tif ( builder.needsToWorkingColorSpace( texture ) ) {\n\n\t\t\t\tsnippet = colorSpaceToWorking( expression( snippet, nodeType ), texture.colorSpace ).setup( builder ).build( builder, nodeType );\n\n\t\t\t}\n\n\t\t\treturn builder.format( snippet, nodeType, output );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the sampler value.\n\t *\n\t * @param {boolean} value - The sampler value to set.\n\t * @return {TextureNode} A reference to this texture node.\n\t */\n\tsetSampler( value ) {\n\n\t\tthis.sampler = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the sampler value.\n\t *\n\t * @return {boolean} The sampler value.\n\t */\n\tgetSampler() {\n\n\t\treturn this.sampler;\n\n\t}\n\n\t// @TODO: Move to TSL\n\n\t/**\n\t * @function\n\t * @deprecated since r172. Use {@link TextureNode#sample} instead.\n\t *\n\t * @param {Node} uvNode - The uv node.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tuv( uvNode ) { // @deprecated, r172\n\n\t\tconsole.warn( 'THREE.TextureNode: .uv() has been renamed. Use .sample() instead.' );\n\n\t\treturn this.sample( uvNode );\n\n\t}\n\n\t/**\n\t * Samples the texture with the given uv node.\n\t *\n\t * @param {Node} uvNode - The uv node.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tsample( uvNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.uvNode = nodeObject( uvNode );\n\t\ttextureNode.referenceNode = this.getSelf();\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\t/**\n\t * Samples a blurred version of the texture by defining an internal bias.\n\t *\n\t * @param {Node<float>} amountNode - How blurred the texture should be.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tblur( amountNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.biasNode = nodeObject( amountNode ).mul( maxMipLevel( textureNode ) );\n\t\ttextureNode.referenceNode = this.getSelf();\n\n\t\tconst map = textureNode.value;\n\n\t\tif ( textureNode.generateMipmaps === false && ( map && map.generateMipmaps === false || map.minFilter === NearestFilter || map.magFilter === NearestFilter ) ) {\n\n\t\t\tconsole.warn( 'THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture.' );\n\n\t\t\ttextureNode.biasNode = null;\n\n\t\t}\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\t/**\n\t * Samples a specific mip of the texture.\n\t *\n\t * @param {Node<int>} levelNode - The mip level to sample.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tlevel( levelNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.levelNode = nodeObject( levelNode );\n\t\ttextureNode.referenceNode = this.getSelf();\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\t/**\n\t * Returns the texture size of the requested level.\n\t *\n\t * @param {Node<int>} levelNode - The level to compute the size for.\n\t * @return {TextureSizeNode} The texture size.\n\t */\n\tsize( levelNode ) {\n\n\t\treturn textureSize( this, levelNode );\n\n\t}\n\n\t/**\n\t * Samples the texture with the given bias.\n\t *\n\t * @param {Node<float>} biasNode - The bias node.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tbias( biasNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.biasNode = nodeObject( biasNode );\n\t\ttextureNode.referenceNode = this.getSelf();\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\t/**\n\t * Samples the texture by executing a compare operation.\n\t *\n\t * @param {Node<float>} compareNode - The node that defines the compare value.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tcompare( compareNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.compareNode = nodeObject( compareNode );\n\t\ttextureNode.referenceNode = this.getSelf();\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\t/**\n\t * Samples the texture using an explicit gradient.\n\t *\n\t * @param {Node<vec2>} gradNodeX - The gradX node.\n\t * @param {Node<vec2>} gradNodeY - The gradY node.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tgrad( gradNodeX, gradNodeY ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.gradNode = [ nodeObject( gradNodeX ), nodeObject( gradNodeY ) ];\n\t\ttextureNode.referenceNode = this.getSelf();\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\t/**\n\t * Samples the texture by defining a depth node.\n\t *\n\t * @param {Node<int>} depthNode - The depth node.\n\t * @return {TextureNode} A texture node representing the texture sample.\n\t */\n\tdepth( depthNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.depthNode = nodeObject( depthNode );\n\t\ttextureNode.referenceNode = this.getSelf();\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\t// --\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\n\t\tdata.sampler = this.sampler;\n\t\tdata.updateMatrix = this.updateMatrix;\n\t\tdata.updateType = this.updateType;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.value = data.meta.textures[ data.value ];\n\t\tthis.sampler = data.sampler;\n\t\tthis.updateMatrix = data.updateMatrix;\n\t\tthis.updateType = data.updateType;\n\n\t}\n\n\t/**\n\t * The update is used to implement the update of the uv transformation matrix.\n\t */\n\tupdate() {\n\n\t\tconst texture = this.value;\n\t\tconst matrixUniform = this._matrixUniform;\n\n\t\tif ( matrixUniform !== null ) matrixUniform.value = texture.matrix;\n\n\t\tif ( texture.matrixAutoUpdate === true ) {\n\n\t\t\ttexture.updateMatrix();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Clones the texture node.\n\t *\n\t * @return {TextureNode} The cloned texture node.\n\t */\n\tclone() {\n\n\t\tconst newNode = new this.constructor( this.value, this.uvNode, this.levelNode, this.biasNode );\n\t\tnewNode.sampler = this.sampler;\n\t\tnewNode.depthNode = this.depthNode;\n\t\tnewNode.compareNode = this.compareNode;\n\t\tnewNode.gradNode = this.gradNode;\n\n\t\treturn newNode;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a texture node.\n *\n * @tsl\n * @function\n * @param {Texture} value - The texture.\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\n * @param {?Node<int>} [levelNode=null] - The level node.\n * @param {?Node<float>} [biasNode=null] - The bias node.\n * @returns {TextureNode}\n */\nconst texture = /*@__PURE__*/ nodeProxy( TextureNode ).setParameterLength( 1, 4 );\n\n/**\n * TSL function for creating a texture node that fetches/loads texels without interpolation.\n *\n * @tsl\n * @function\n * @param {Texture} value - The texture.\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\n * @param {?Node<int>} [levelNode=null] - The level node.\n * @param {?Node<float>} [biasNode=null] - The bias node.\n * @returns {TextureNode}\n */\nconst textureLoad = ( ...params ) => texture( ...params ).setSampler( false );\n\n//export const textureLevel = ( value, uv, level ) => texture( value, uv ).level( level );\n\n/**\n * Converts a texture or texture node to a sampler.\n *\n * @tsl\n * @function\n * @param {TextureNode|Texture} value - The texture or texture node to convert.\n * @returns {Node}\n */\nconst sampler = ( value ) => ( value.isNode === true ? value : texture( value ) ).convert( 'sampler' );\n\n/**\n * Converts a texture or texture node to a sampler comparison.\n *\n * @tsl\n * @function\n * @param {TextureNode|Texture} value - The texture or texture node to convert.\n * @returns {Node}\n */\nconst samplerComparison = ( value ) => ( value.isNode === true ? value : texture( value ) ).convert( 'samplerComparison' );\n\n/**\n * A special type of uniform node which represents array-like data\n * as uniform buffers. The access usually happens via `element()`\n * which returns an instance of {@link ArrayElementNode}. For example:\n *\n * ```js\n * const bufferNode = buffer( array, 'mat4', count );\n * const matrixNode = bufferNode.element( index ); // access a matrix from the buffer\n * ```\n * In general, it is recommended to use the more managed {@link UniformArrayNode}\n * since it handles more input types and automatically cares about buffer paddings.\n *\n * @augments UniformNode\n */\nclass BufferNode extends UniformNode {\n\n\tstatic get type() {\n\n\t\treturn 'BufferNode';\n\n\t}\n\n\t/**\n\t * Constructs a new buffer node.\n\t *\n\t * @param {Array<number>} value - Array-like buffer data.\n\t * @param {string} bufferType - The data type of the buffer.\n\t * @param {number} [bufferCount=0] - The count of buffer elements.\n\t */\n\tconstructor( value, bufferType, bufferCount = 0 ) {\n\n\t\tsuper( value, bufferType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferNode = true;\n\n\t\t/**\n\t\t * The data type of the buffer.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.bufferType = bufferType;\n\n\t\t/**\n\t\t * The uniform node that holds the value of the reference node.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bufferCount = bufferCount;\n\n\t}\n\n\t/**\n\t * The data type of the buffer elements.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The element type.\n\t */\n\tgetElementType( builder ) {\n\n\t\treturn this.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'buffer'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'buffer';\n\n\t}\n\n}\n\n/**\n * TSL function for creating a buffer node.\n *\n * @tsl\n * @function\n * @param {Array} value - Array-like buffer data.\n * @param {string} type - The data type of a buffer element.\n * @param {number} count - The count of buffer elements.\n * @returns {BufferNode}\n */\nconst buffer = ( value, type, count ) => nodeObject( new BufferNode( value, type, count ) );\n\n/**\n * Represents the element access on uniform array nodes.\n *\n * @augments ArrayElementNode\n */\nclass UniformArrayElementNode extends ArrayElementNode {\n\n\tstatic get type() {\n\n\t\treturn 'UniformArrayElementNode';\n\n\t}\n\n\t/**\n\t * Constructs a new buffer node.\n\t *\n\t * @param {UniformArrayNode} uniformArrayNode - The uniform array node to access.\n\t * @param {IndexNode} indexNode - The index data that define the position of the accessed element in the array.\n\t */\n\tconstructor( uniformArrayNode, indexNode ) {\n\n\t\tsuper( uniformArrayNode, indexNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayBufferElementNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst snippet = super.generate( builder );\n\t\tconst type = this.getNodeType();\n\t\tconst paddedType = this.node.getPaddedType();\n\n\t\treturn builder.format( snippet, paddedType, type );\n\n\t}\n\n}\n\n/**\n * Similar to {@link BufferNode} this module represents array-like data as\n * uniform buffers. Unlike {@link BufferNode}, it can handle more common\n * data types in the array (e.g `three.js` primitives) and automatically\n * manage buffer padding. It should be the first choice when working with\n * uniforms buffers.\n * ```js\n * const tintColors = uniformArray( [\n * \tnew Color( 1, 0, 0 ),\n * \tnew Color( 0, 1, 0 ),\n * \tnew Color( 0, 0, 1 )\n * ], 'color' );\n *\n * const redColor = tintColors.element( 0 );\n *\n * @augments BufferNode\n */\nclass UniformArrayNode extends BufferNode {\n\n\tstatic get type() {\n\n\t\treturn 'UniformArrayNode';\n\n\t}\n\n\t/**\n\t * Constructs a new uniform array node.\n\t *\n\t * @param {Array<any>} value - Array holding the buffer data.\n\t * @param {?string} [elementType=null] - The data type of a buffer element.\n\t */\n\tconstructor( value, elementType = null ) {\n\n\t\tsuper( null );\n\n\t\t/**\n\t\t * Array holding the buffer data. Unlike {@link BufferNode}, the array can\n\t\t * hold number primitives as well as three.js objects like vectors, matrices\n\t\t * or colors.\n\t\t *\n\t\t * @type {Array<any>}\n\t\t */\n\t\tthis.array = value;\n\n\t\t/**\n\t\t * The data type of an array element.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.elementType = elementType === null ? getValueType( value[ 0 ] ) : elementType;\n\n\t\t/**\n\t\t * The padded type. Uniform buffers must conform to a certain buffer layout\n\t\t * so a separate type is computed to ensure correct buffer size.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.paddedType = this.getPaddedType();\n\n\t\t/**\n\t\t * Overwritten since uniform array nodes are updated per render.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.RENDER;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayBufferNode = true;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from the\n\t * {@link UniformArrayNode#paddedType}.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( /*builder*/ ) {\n\n\t\treturn this.paddedType;\n\n\t}\n\n\t/**\n\t * The data type of the array elements.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The element type.\n\t */\n\tgetElementType() {\n\n\t\treturn this.elementType;\n\n\t}\n\n\t/**\n\t * Returns the padded type based on the element type.\n\t *\n\t * @return {string} The padded type.\n\t */\n\tgetPaddedType() {\n\n\t\tconst elementType = this.elementType;\n\n\t\tlet paddedType = 'vec4';\n\n\t\tif ( elementType === 'mat2' ) {\n\n\t\t\tpaddedType = 'mat2';\n\n\t\t} else if ( /mat/.test( elementType ) === true ) {\n\n\t\t\tpaddedType = 'mat4';\n\n\t\t} else if ( elementType.charAt( 0 ) === 'i' ) {\n\n\t\t\tpaddedType = 'ivec4';\n\n\t\t} else if ( elementType.charAt( 0 ) === 'u' ) {\n\n\t\t\tpaddedType = 'uvec4';\n\n\t\t}\n\n\t\treturn paddedType;\n\n\t}\n\n\t/**\n\t * The update makes sure to correctly transfer the data from the (complex) objects\n\t * in the array to the internal, correctly padded value buffer.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( /*frame*/ ) {\n\n\t\tconst { array, value } = this;\n\n\t\tconst elementType = this.elementType;\n\n\t\tif ( elementType === 'float' || elementType === 'int' || elementType === 'uint' ) {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 4;\n\n\t\t\t\tvalue[ index ] = array[ i ];\n\n\t\t\t}\n\n\t\t} else if ( elementType === 'color' ) {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 4;\n\t\t\t\tconst vector = array[ i ];\n\n\t\t\t\tvalue[ index ] = vector.r;\n\t\t\t\tvalue[ index + 1 ] = vector.g;\n\t\t\t\tvalue[ index + 2 ] = vector.b || 0;\n\t\t\t\t//value[ index + 3 ] = vector.a || 0;\n\n\t\t\t}\n\n\t\t} else if ( elementType === 'mat2' ) {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 4;\n\t\t\t\tconst matrix = array[ i ];\n\n\t\t\t\tvalue[ index ] = matrix.elements[ 0 ];\n\t\t\t\tvalue[ index + 1 ] = matrix.elements[ 1 ];\n\t\t\t\tvalue[ index + 2 ] = matrix.elements[ 2 ];\n\t\t\t\tvalue[ index + 3 ] = matrix.elements[ 3 ];\n\n\t\t\t}\n\n\t\t} else if ( elementType === 'mat3' ) {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 16;\n\t\t\t\tconst matrix = array[ i ];\n\n\t\t\t\tvalue[ index ] = matrix.elements[ 0 ];\n\t\t\t\tvalue[ index + 1 ] = matrix.elements[ 1 ];\n\t\t\t\tvalue[ index + 2 ] = matrix.elements[ 2 ];\n\n\t\t\t\tvalue[ index + 4 ] = matrix.elements[ 3 ];\n\t\t\t\tvalue[ index + 5 ] = matrix.elements[ 4 ];\n\t\t\t\tvalue[ index + 6 ] = matrix.elements[ 5 ];\n\n\t\t\t\tvalue[ index + 8 ] = matrix.elements[ 6 ];\n\t\t\t\tvalue[ index + 9 ] = matrix.elements[ 7 ];\n\t\t\t\tvalue[ index + 10 ] = matrix.elements[ 8 ];\n\n\t\t\t\tvalue[ index + 15 ] = 1;\n\n\t\t\t}\n\n\t\t} else if ( elementType === 'mat4' ) {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 16;\n\t\t\t\tconst matrix = array[ i ];\n\n\t\t\t\tfor ( let i = 0; i < matrix.elements.length; i ++ ) {\n\n\t\t\t\t\tvalue[ index + i ] = matrix.elements[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\tconst index = i * 4;\n\t\t\t\tconst vector = array[ i ];\n\n\t\t\t\tvalue[ index ] = vector.x;\n\t\t\t\tvalue[ index + 1 ] = vector.y;\n\t\t\t\tvalue[ index + 2 ] = vector.z || 0;\n\t\t\t\tvalue[ index + 3 ] = vector.w || 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Implement the value buffer creation based on the array data.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @return {null}\n\t */\n\tsetup( builder ) {\n\n\t\tconst length = this.array.length;\n\t\tconst elementType = this.elementType;\n\n\t\tlet arrayType = Float32Array;\n\n\t\tconst paddedType = this.paddedType;\n\t\tconst paddedElementLength = builder.getTypeLength( paddedType );\n\n\t\tif ( elementType.charAt( 0 ) === 'i' ) arrayType = Int32Array;\n\t\tif ( elementType.charAt( 0 ) === 'u' ) arrayType = Uint32Array;\n\n\t\tthis.value = new arrayType( length * paddedElementLength );\n\t\tthis.bufferCount = length;\n\t\tthis.bufferType = paddedType;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\t/**\n\t * Overwrites the default `element()` method to provide element access\n\t * based on {@link UniformArrayNode}.\n\t *\n\t * @param {IndexNode} indexNode - The index node.\n\t * @return {UniformArrayElementNode}\n\t */\n\telement( indexNode ) {\n\n\t\treturn nodeObject( new UniformArrayElementNode( this, nodeObject( indexNode ) ) );\n\n\t}\n\n}\n\n/**\n * TSL function for creating an uniform array node.\n *\n * @tsl\n * @function\n * @param {Array<any>} values - Array-like data.\n * @param {?string} [nodeType] - The data type of the array elements.\n * @returns {UniformArrayNode}\n */\nconst uniformArray = ( values, nodeType ) => nodeObject( new UniformArrayNode( values, nodeType ) );\n\n/**\n * @tsl\n * @function\n * @deprecated since r168. Use {@link uniformArray} instead.\n *\n * @param {Array<any>} values - Array-like data.\n * @param {string} nodeType - The data type of the array elements.\n * @returns {UniformArrayNode}\n */\nconst uniforms = ( values, nodeType ) => { // @deprecated, r168\n\n\tconsole.warn( 'THREE.TSL: uniforms() has been renamed to uniformArray().' );\n\treturn nodeObject( new UniformArrayNode( values, nodeType ) );\n\n};\n\n/**\n * The node allows to set values for built-in shader variables. That is\n * required for features like hardware-accelerated vertex clipping.\n *\n * @augments Node\n */\nclass BuiltinNode extends Node {\n\n\t/**\n\t * Constructs a new builtin node.\n\t *\n\t * @param {string} name - The name of the built-in shader variable.\n\t */\n\tconstructor( name ) {\n\n\t\tsuper( 'float' );\n\n\t\t/**\n\t\t * The name of the built-in shader variable.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBuiltinNode = true;\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the builtin node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( /* builder */ ) {\n\n\t\treturn this.name;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a builtin node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the built-in shader variable.\n * @returns {BuiltinNode}\n */\nconst builtin = nodeProxy( BuiltinNode ).setParameterLength( 1 );\n\n/**\n * TSL object that represents the current `index` value of the camera if used ArrayCamera.\n *\n * @tsl\n * @type {UniformNode<uint>}\n */\nconst cameraIndex = /*@__PURE__*/ uniform( 0, 'uint' ).label( 'u_cameraIndex' ).setGroup( sharedUniformGroup( 'cameraIndex' ) ).toVarying( 'v_cameraIndex' );\n\n/**\n * TSL object that represents the `near` value of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<float>}\n */\nconst cameraNear = /*@__PURE__*/ uniform( 'float' ).label( 'cameraNear' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.near );\n\n/**\n * TSL object that represents the `far` value of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<float>}\n */\nconst cameraFar = /*@__PURE__*/ uniform( 'float' ).label( 'cameraFar' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.far );\n\n/**\n * TSL object that represents the projection matrix of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<mat4>}\n */\nconst cameraProjectionMatrix = /*@__PURE__*/ ( Fn( ( { camera } ) => {\n\n\tlet cameraProjectionMatrix;\n\n\tif ( camera.isArrayCamera && camera.cameras.length > 0 ) {\n\n\t\tconst matrices = [];\n\n\t\tfor ( const subCamera of camera.cameras ) {\n\n\t\t\tmatrices.push( subCamera.projectionMatrix );\n\n\t\t}\n\n\t\tconst cameraProjectionMatrices = uniformArray( matrices ).setGroup( renderGroup ).label( 'cameraProjectionMatrices' );\n\n\t\tcameraProjectionMatrix = cameraProjectionMatrices.element( camera.isMultiViewCamera ? builtin( 'gl_ViewID_OVR' ) : cameraIndex ).toVar( 'cameraProjectionMatrix' );\n\n\t} else {\n\n\t\tcameraProjectionMatrix = uniform( 'mat4' ).label( 'cameraProjectionMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrix );\n\n\t}\n\n\treturn cameraProjectionMatrix;\n\n} ).once() )();\n\n/**\n * TSL object that represents the inverse projection matrix of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<mat4>}\n */\nconst cameraProjectionMatrixInverse = /*@__PURE__*/ ( Fn( ( { camera } ) => {\n\n\tlet cameraProjectionMatrixInverse;\n\n\tif ( camera.isArrayCamera && camera.cameras.length > 0 ) {\n\n\t\tconst matrices = [];\n\n\t\tfor ( const subCamera of camera.cameras ) {\n\n\t\t\tmatrices.push( subCamera.projectionMatrixInverse );\n\n\t\t}\n\n\t\tconst cameraProjectionMatricesInverse = uniformArray( matrices ).setGroup( renderGroup ).label( 'cameraProjectionMatricesInverse' );\n\n\t\tcameraProjectionMatrixInverse = cameraProjectionMatricesInverse.element( camera.isMultiViewCamera ? builtin( 'gl_ViewID_OVR' ) : cameraIndex ).toVar( 'cameraProjectionMatrixInverse' );\n\n\t} else {\n\n\t\tcameraProjectionMatrixInverse = uniform( 'mat4' ).label( 'cameraProjectionMatrixInverse' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrixInverse );\n\n\t}\n\n\treturn cameraProjectionMatrixInverse;\n\n} ).once() )();\n\n/**\n * TSL object that represents the view matrix of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<mat4>}\n */\nconst cameraViewMatrix = /*@__PURE__*/ ( Fn( ( { camera } ) => {\n\n\tlet cameraViewMatrix;\n\n\tif ( camera.isArrayCamera && camera.cameras.length > 0 ) {\n\n\t\tconst matrices = [];\n\n\t\tfor ( const subCamera of camera.cameras ) {\n\n\t\t\tmatrices.push( subCamera.matrixWorldInverse );\n\n\t\t}\n\n\t\tconst cameraViewMatrices = uniformArray( matrices ).setGroup( renderGroup ).label( 'cameraViewMatrices' );\n\n\t\tcameraViewMatrix = cameraViewMatrices.element( camera.isMultiViewCamera ? builtin( 'gl_ViewID_OVR' ) : cameraIndex ).toVar( 'cameraViewMatrix' );\n\n\t} else {\n\n\t\tcameraViewMatrix = uniform( 'mat4' ).label( 'cameraViewMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorldInverse );\n\n\t}\n\n\treturn cameraViewMatrix;\n\n} ).once() )();\n\n/**\n * TSL object that represents the world matrix of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<mat4>}\n */\nconst cameraWorldMatrix = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraWorldMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorld );\n\n/**\n * TSL object that represents the normal matrix of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<mat3>}\n */\nconst cameraNormalMatrix = /*@__PURE__*/ uniform( 'mat3' ).label( 'cameraNormalMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.normalMatrix );\n\n/**\n * TSL object that represents the position in world space of the camera used for the current render.\n *\n * @tsl\n * @type {UniformNode<vec3>}\n */\nconst cameraPosition = /*@__PURE__*/ uniform( new Vector3() ).label( 'cameraPosition' ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => self.value.setFromMatrixPosition( camera.matrixWorld ) );\n\nconst _sphere = /*@__PURE__*/ new Sphere();\n\n/**\n * This node can be used to access transformation related metrics of 3D objects.\n * Depending on the selected scope, a different metric is represented as a uniform\n * in the shader. The following scopes are supported:\n *\n * - `POSITION`: The object's position in world space.\n * - `VIEW_POSITION`: The object's position in view/camera space.\n * - `DIRECTION`: The object's direction in world space.\n * - `SCALE`: The object's scale in world space.\n * - `WORLD_MATRIX`: The object's matrix in world space.\n *\n * @augments Node\n */\nclass Object3DNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'Object3DNode';\n\n\t}\n\n\t/**\n\t * Constructs a new object 3D node.\n\t *\n\t * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.\n\t * @param {?Object3D} [object3d=null] - The 3D object.\n\t */\n\tconstructor( scope, object3d = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node reports a different type of transformation depending on the scope.\n\t\t *\n\t\t * @type {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * The 3D object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */\n\t\tthis.object3d = object3d;\n\n\t\t/**\n\t\t * Overwritten since this type of node is updated per object.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\t/**\n\t\t * Holds the value of the node as a uniform.\n\t\t *\n\t\t * @private\n\t\t * @type {UniformNode}\n\t\t */\n\t\tthis._uniformNode = new UniformNode( null );\n\n\t}\n\n\t/**\n\t * Overwritten since the node type is inferred from the scope.\n\t *\n\t * @return {string} The node type.\n\t */\n\tgetNodeType() {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\n\n\t\t\treturn 'mat4';\n\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\n\n\t\t\treturn 'vec3';\n\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\n\n\t\t\treturn 'float';\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the uniform value depending on the scope.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tconst object = this.object3d;\n\t\tconst uniformNode = this._uniformNode;\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\n\n\t\t\tuniformNode.value = object.matrixWorld;\n\n\t\t} else if ( scope === Object3DNode.POSITION ) {\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\n\n\t\t} else if ( scope === Object3DNode.SCALE ) {\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\n\t\t\tuniformNode.value.setFromMatrixScale( object.matrixWorld );\n\n\t\t} else if ( scope === Object3DNode.DIRECTION ) {\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\n\t\t\tobject.getWorldDirection( uniformNode.value );\n\n\t\t} else if ( scope === Object3DNode.VIEW_POSITION ) {\n\n\t\t\tconst camera = frame.camera;\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\n\n\t\t\tuniformNode.value.applyMatrix4( camera.matrixWorldInverse );\n\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\n\n\t\t\tconst geometry = frame.object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\tuniformNode.value = _sphere.radius;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the uniform node. The node type of the uniform\n\t * node also depends on the selected scope.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\n\n\t\t\tthis._uniformNode.nodeType = 'mat4';\n\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\n\n\t\t\tthis._uniformNode.nodeType = 'vec3';\n\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\n\n\t\t\tthis._uniformNode.nodeType = 'float';\n\n\t\t}\n\n\t\treturn this._uniformNode.build( builder );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nObject3DNode.WORLD_MATRIX = 'worldMatrix';\nObject3DNode.POSITION = 'position';\nObject3DNode.SCALE = 'scale';\nObject3DNode.VIEW_POSITION = 'viewPosition';\nObject3DNode.DIRECTION = 'direction';\nObject3DNode.RADIUS = 'radius';\n\n/**\n * TSL function for creating an object 3D node that represents the object's direction in world space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nconst objectDirection = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.DIRECTION ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's world matrix.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<mat4>}\n */\nconst objectWorldMatrix = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.WORLD_MATRIX ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's position in world space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nconst objectPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.POSITION ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's scale in world space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nconst objectScale = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.SCALE ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's position in view/camera space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nconst objectViewPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.VIEW_POSITION ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's radius.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nconst objectRadius = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.RADIUS ).setParameterLength( 1 );\n\n/**\n * This type of node is a specialized version of `Object3DNode`\n * with larger set of model related metrics. Unlike `Object3DNode`,\n * `ModelNode` extracts the reference to the 3D object from the\n * current node frame state.\n *\n * @augments Object3DNode\n */\nclass ModelNode extends Object3DNode {\n\n\tstatic get type() {\n\n\t\treturn 'ModelNode';\n\n\t}\n\n\t/**\n\t * Constructs a new object model node.\n\t *\n\t * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.\n\t */\n\tconstructor( scope ) {\n\n\t\tsuper( scope );\n\n\t}\n\n\t/**\n\t * Extracts the model reference from the frame state and then\n\t * updates the uniform value depending on the scope.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tthis.object3d = frame.object;\n\n\t\tsuper.update( frame );\n\n\t}\n\n}\n\n/**\n * TSL object that represents the object's direction in world space.\n *\n * @tsl\n * @type {ModelNode<vec3>}\n */\nconst modelDirection = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.DIRECTION );\n\n/**\n * TSL object that represents the object's world matrix.\n *\n * @tsl\n * @type {ModelNode<mat4>}\n */\nconst modelWorldMatrix = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.WORLD_MATRIX );\n\n/**\n * TSL object that represents the object's position in world space.\n *\n * @tsl\n * @type {ModelNode<vec3>}\n */\nconst modelPosition = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.POSITION );\n\n/**\n * TSL object that represents the object's scale in world space.\n *\n * @tsl\n * @type {ModelNode<vec3>}\n */\nconst modelScale = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.SCALE );\n\n/**\n * TSL object that represents the object's position in view/camera space.\n *\n * @tsl\n * @type {ModelNode<vec3>}\n */\nconst modelViewPosition = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.VIEW_POSITION );\n\n/**\n * TSL object that represents the object's radius.\n *\n * @tsl\n * @type {ModelNode<float>}\n */\nconst modelRadius = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.RADIUS );\n\n/**\n * TSL object that represents the object's normal matrix.\n *\n * @tsl\n * @type {UniformNode<mat3>}\n */\nconst modelNormalMatrix = /*@__PURE__*/ uniform( new Matrix3() ).onObjectUpdate( ( { object }, self ) => self.value.getNormalMatrix( object.matrixWorld ) );\n\n/**\n * TSL object that represents the object's inverse world matrix.\n *\n * @tsl\n * @type {UniformNode<mat4>}\n */\nconst modelWorldMatrixInverse = /*@__PURE__*/ uniform( new Matrix4() ).onObjectUpdate( ( { object }, self ) => self.value.copy( object.matrixWorld ).invert() );\n\n/**\n * TSL object that represents the object's model view matrix.\n *\n * @tsl\n * @type {Node<mat4>}\n */\nconst modelViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\treturn builder.renderer.overrideNodes.modelViewMatrix || mediumpModelViewMatrix;\n\n} ).once() )().toVar( 'modelViewMatrix' );\n\n// GPU Precision\n\n/**\n * TSL object that represents the object's model view in `mediump` precision.\n *\n * @tsl\n * @type {Node<mat4>}\n */\nconst mediumpModelViewMatrix = /*@__PURE__*/ cameraViewMatrix.mul( modelWorldMatrix );\n\n// CPU Precision\n\n/**\n * TSL object that represents the object's model view in `highp` precision\n * which is achieved by computing the matrix in JS and not in the shader.\n *\n * @tsl\n * @type {Node<mat4>}\n */\nconst highpModelViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tbuilder.context.isHighPrecisionModelViewMatrix = true;\n\n\treturn uniform( 'mat4' ).onObjectUpdate( ( { object, camera } ) => {\n\n\t\treturn object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\n\t} );\n\n} ).once() )().toVar( 'highpModelViewMatrix' );\n\n/**\n * TSL object that represents the object's model normal view in `highp` precision\n * which is achieved by computing the matrix in JS and not in the shader.\n *\n * @tsl\n * @type {Node<mat3>}\n */\nconst highpModelNormalViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tconst isHighPrecisionModelViewMatrix = builder.context.isHighPrecisionModelViewMatrix;\n\n\treturn uniform( 'mat3' ).onObjectUpdate( ( { object, camera } ) => {\n\n\t\tif ( isHighPrecisionModelViewMatrix !== true ) {\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\n\t\t}\n\n\t\treturn object.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t} );\n\n} ).once() )().toVar( 'highpModelNormalViewMatrix' );\n\n/**\n * TSL object that represents the position attribute of the current rendered object.\n *\n * @tsl\n * @type {AttributeNode<vec3>}\n */\nconst positionGeometry = /*@__PURE__*/ attribute( 'position', 'vec3' );\n\n/**\n * TSL object that represents the vertex position in local space of the current rendered object.\n *\n * @tsl\n * @type {AttributeNode<vec3>}\n */\nconst positionLocal = /*@__PURE__*/ positionGeometry.toVarying( 'positionLocal' );\n\n/**\n * TSL object that represents the previous vertex position in local space of the current rendered object.\n * Used in context of {@link VelocityNode} for rendering motion vectors.\n *\n * @tsl\n * @type {AttributeNode<vec3>}\n */\nconst positionPrevious = /*@__PURE__*/ positionGeometry.toVarying( 'positionPrevious' );\n\n/**\n * TSL object that represents the vertex position in world space of the current rendered object.\n *\n * @tsl\n * @type {VaryingNode<vec3>}\n */\nconst positionWorld = /*@__PURE__*/ modelWorldMatrix.mul( positionLocal ).xyz.toVarying( 'v_positionWorld' ).context( { needsPositionReassign: true } );\n\n/**\n * TSL object that represents the position world direction of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst positionWorldDirection = /*@__PURE__*/ positionLocal.transformDirection( modelWorldMatrix ).toVarying( 'v_positionWorldDirection' ).normalize().toVar( 'positionWorldDirection' ).context( { needsPositionReassign: true } );\n\n/**\n * TSL object that represents the vertex position in view space of the current rendered object.\n *\n * @tsl\n * @type {VaryingNode<vec3>}\n */\nconst positionView = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\treturn builder.context.setupPositionView();\n\n}, 'vec3' ).once() )().toVarying( 'v_positionView' ).context( { needsPositionReassign: true } );\n\n/**\n * TSL object that represents the position view direction of the current rendered object.\n *\n * @tsl\n * @type {VaryingNode<vec3>}\n */\nconst positionViewDirection = /*@__PURE__*/ positionView.negate().toVarying( 'v_positionViewDirection' ).normalize().toVar( 'positionViewDirection' );\n\n/**\n * This node can be used to evaluate whether a primitive is front or back facing.\n *\n * @augments Node\n */\nclass FrontFacingNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'FrontFacingNode';\n\n\t}\n\n\t/**\n\t * Constructs a new front facing node.\n\t */\n\tconstructor() {\n\n\t\tsuper( 'bool' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFrontFacingNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { renderer, material } = builder;\n\n\t\tif ( renderer.coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\treturn 'false';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn builder.getFrontFacing();\n\n\t}\n\n}\n\n/**\n * TSL object that represents whether a primitive is front or back facing\n *\n * @tsl\n * @type {FrontFacingNode<bool>}\n */\nconst frontFacing = /*@__PURE__*/ nodeImmutable( FrontFacingNode );\n\n/**\n * TSL object that represents the front facing status as a number instead of a bool.\n * `1` means front facing, `-1` means back facing.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst faceDirection = /*@__PURE__*/ float( frontFacing ).mul( 2.0 ).sub( 1.0 );\n\n/**\n * TSL object that represents the normal attribute of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst normalGeometry = /*@__PURE__*/ attribute( 'normal', 'vec3' );\n\n/**\n * TSL object that represents the vertex normal in local space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst normalLocal = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tif ( builder.geometry.hasAttribute( 'normal' ) === false ) {\n\n\t\tconsole.warn( 'THREE.TSL: Vertex attribute \"normal\" not found on geometry.' );\n\n\t\treturn vec3( 0, 1, 0 );\n\n\t}\n\n\treturn normalGeometry;\n\n}, 'vec3' ).once() )().toVar( 'normalLocal' );\n\n/**\n * TSL object that represents the flat vertex normal in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst normalFlat = /*@__PURE__*/ positionView.dFdx().cross( positionView.dFdy() ).normalize().toVar( 'normalFlat' );\n\n/**\n * TSL object that represents the vertex normal in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst normalView = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tlet node;\n\n\tif ( builder.material.flatShading === true ) {\n\n\t\tnode = normalFlat;\n\n\t} else {\n\n\t\tnode = varying( transformNormalToView( normalLocal ), 'v_normalView' ).normalize();\n\n\t}\n\n\treturn node;\n\n}, 'vec3' ).once() )().toVar( 'normalView' );\n\n/**\n * TSL object that represents the vertex normal in world space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst normalWorld = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tlet normal = normalView.transformDirection( cameraViewMatrix );\n\n\tif ( builder.material.flatShading !== true ) {\n\n\t\tnormal = varying( normal, 'v_normalWorld' );\n\n\t}\n\n\treturn normal;\n\n}, 'vec3' ).once() )().normalize().toVar( 'normalWorld' );\n\n/**\n * TSL object that represents the transformed vertex normal in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst transformedNormalView = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\t// Use getUV context to avoid side effects from nodes overwriting getUV in the context (e.g. EnvironmentNode)\n\n\tlet node = builder.context.setupNormal().context( { getUV: null } );\n\n\tif ( builder.material.flatShading !== true ) node = node.mul( faceDirection );\n\n\treturn node;\n\n}, 'vec3' ).once() )().toVar( 'transformedNormalView' );\n\n/**\n * TSL object that represents the transformed vertex normal in world space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst transformedNormalWorld = /*@__PURE__*/ transformedNormalView.transformDirection( cameraViewMatrix ).toVar( 'transformedNormalWorld' );\n\n/**\n * TSL object that represents the transformed clearcoat vertex normal in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst transformedClearcoatNormalView = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\t// Use getUV context to avoid side effects from nodes overwriting getUV in the context (e.g. EnvironmentNode)\n\n\tlet node = builder.context.setupClearcoatNormal().context( { getUV: null } );\n\n\tif ( builder.material.flatShading !== true ) node = node.mul( faceDirection );\n\n\treturn node;\n\n}, 'vec3' ).once() )().toVar( 'transformedClearcoatNormalView' );\n\n/**\n * Transforms the normal with the given matrix.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} normal - The normal.\n * @param {Node<mat3>} [matrix=modelWorldMatrix] - The matrix.\n * @return {Node<vec3>} The transformed normal.\n */\nconst transformNormal = /*@__PURE__*/ Fn( ( [ normal, matrix = modelWorldMatrix ] ) => {\n\n\tconst m = mat3( matrix );\n\n\tconst transformedNormal = normal.div( vec3( m[ 0 ].dot( m[ 0 ] ), m[ 1 ].dot( m[ 1 ] ), m[ 2 ].dot( m[ 2 ] ) ) );\n\n\treturn m.mul( transformedNormal ).xyz;\n\n} );\n\n/**\n * Transforms the given normal from local to view space.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} normal - The normal.\n * @param {NodeBuilder} builder - The current node builder.\n * @return {Node<vec3>} The transformed normal.\n */\nconst transformNormalToView = /*@__PURE__*/ Fn( ( [ normal ], builder ) => {\n\n\tconst modelNormalViewMatrix = builder.renderer.overrideNodes.modelNormalViewMatrix;\n\n\tif ( modelNormalViewMatrix !== null ) {\n\n\t\treturn modelNormalViewMatrix.transformDirection( normal );\n\n\t}\n\n\t//\n\n\tconst transformedNormal = modelNormalMatrix.mul( normal );\n\n\treturn cameraViewMatrix.transformDirection( transformedNormal );\n\n} );\n\nconst _e1$1 = /*@__PURE__*/ new Euler();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\n\n/**\n * TSL object that represents the refraction ratio of the material used for rendering the current object.\n *\n * @tsl\n * @type {UniformNode<float>}\n */\nconst materialRefractionRatio = /*@__PURE__*/ uniform( 0 ).onReference( ( { material } ) => material ).onObjectUpdate( ( { material } ) => material.refractionRatio );\n\n/**\n * TSL object that represents the intensity of environment maps of PBR materials.\n * When `material.envMap` is set, the value is `material.envMapIntensity` otherwise `scene.environmentIntensity`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialEnvIntensity = /*@__PURE__*/ uniform( 1 ).onReference( ( { material } ) => material ).onObjectUpdate( function ( { material, scene } ) {\n\n\treturn material.envMap ? material.envMapIntensity : scene.environmentIntensity;\n\n} );\n\n/**\n * TSL object that represents the rotation of environment maps.\n * When `material.envMap` is set, the value is `material.envMapRotation`. `scene.environmentRotation` controls the\n * rotation of `scene.environment` instead.\n *\n * @tsl\n * @type {Node<mat4>}\n */\nconst materialEnvRotation = /*@__PURE__*/ uniform( new Matrix4() ).onReference( function ( frame ) {\n\n\treturn frame.material;\n\n} ).onObjectUpdate( function ( { material, scene } ) {\n\n\tconst rotation = ( scene.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;\n\n\tif ( rotation ) {\n\n\t\t_e1$1.copy( rotation );\n\n\t\t_m1$1.makeRotationFromEuler( _e1$1 );\n\n\t} else {\n\n\t\t_m1$1.identity();\n\n\t}\n\n\treturn _m1$1;\n\n} );\n\n/**\n * The reflect vector in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst reflectView = /*@__PURE__*/ positionViewDirection.negate().reflect( transformedNormalView );\n\n/**\n * The refract vector in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst refractView = /*@__PURE__*/ positionViewDirection.negate().refract( transformedNormalView, materialRefractionRatio );\n\n/**\n * Used for sampling cube maps when using cube reflection mapping.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst reflectVector = /*@__PURE__*/ reflectView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\n\n/**\n * Used for sampling cube maps when using cube refraction mapping.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst refractVector = /*@__PURE__*/ refractView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\n\n/**\n * This type of uniform node represents a cube texture.\n *\n * @augments TextureNode\n */\nclass CubeTextureNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'CubeTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new cube texture node.\n\t *\n\t * @param {CubeTexture} value - The cube texture.\n\t * @param {?Node<vec3>} [uvNode=null] - The uv node.\n\t * @param {?Node<int>} [levelNode=null] - The level node.\n\t * @param {?Node<float>} [biasNode=null] - The bias node.\n\t */\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\n\n\t\tsuper( value, uvNode, levelNode, biasNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeTextureNode = true;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'cubeTexture'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'cubeTexture';\n\n\t}\n\n\t/**\n\t * Returns a default uvs based on the mapping type of the cube texture.\n\t *\n\t * @return {Node<vec3>} The default uv attribute.\n\t */\n\tgetDefaultUV() {\n\n\t\tconst texture = this.value;\n\n\t\tif ( texture.mapping === CubeReflectionMapping ) {\n\n\t\t\treturn reflectVector;\n\n\t\t} else if ( texture.mapping === CubeRefractionMapping ) {\n\n\t\t\treturn refractVector;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.CubeTextureNode: Mapping \"%s\" not supported.', texture.mapping );\n\n\t\t\treturn vec3( 0, 0, 0 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\n\t * for cube textures. The uv transformation matrix is not applied to cube textures.\n\t *\n\t * @param {boolean} value - The update toggle.\n\t */\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for CubeTextureNode\n\n\t/**\n\t * Setups the uv node. Depending on the backend as well as the texture type, it might be necessary\n\t * to modify the uv node for correct sampling.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to setup.\n\t * @return {Node} The updated uv node.\n\t */\n\tsetupUV( builder, uvNode ) {\n\n\t\tconst texture = this.value;\n\n\t\tif ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem || ! texture.isRenderTargetTexture ) {\n\n\t\t\tuvNode = vec3( uvNode.x.negate(), uvNode.yz );\n\n\t\t}\n\n\t\treturn materialEnvRotation.mul( uvNode );\n\n\t}\n\n\t/**\n\t * Generates the uv code snippet.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} cubeUV - The uv node to generate code for.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerateUV( builder, cubeUV ) {\n\n\t\treturn cubeUV.build( builder, 'vec3' );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a cube texture node.\n *\n * @tsl\n * @function\n * @param {CubeTexture} value - The cube texture.\n * @param {?Node<vec3>} [uvNode=null] - The uv node.\n * @param {?Node<int>} [levelNode=null] - The level node.\n * @param {?Node<float>} [biasNode=null] - The bias node.\n * @returns {CubeTextureNode}\n */\nconst cubeTexture = /*@__PURE__*/ nodeProxy( CubeTextureNode ).setParameterLength( 1, 4 ).setName( 'cubeTexture' );\n\n// TODO: Avoid duplicated code and ues only ReferenceBaseNode or ReferenceNode\n\n/**\n * This class is only relevant if the referenced property is array-like.\n * In this case, `ReferenceElementNode` allows to refer to a specific\n * element inside the data structure via an index.\n *\n * @augments ArrayElementNode\n */\nclass ReferenceElementNode extends ArrayElementNode {\n\n\tstatic get type() {\n\n\t\treturn 'ReferenceElementNode';\n\n\t}\n\n\t/**\n\t * Constructs a new reference element node.\n\t *\n\t * @param {?ReferenceNode} referenceNode - The reference node.\n\t * @param {Node} indexNode - The index node that defines the element access.\n\t */\n\tconstructor( referenceNode, indexNode ) {\n\n\t\tsuper( referenceNode, indexNode );\n\n\t\t/**\n\t\t * Similar to {@link ReferenceNode#reference}, an additional\n\t\t * property references to the current node.\n\t\t *\n\t\t * @type {?ReferenceNode}\n\t\t * @default null\n\t\t */\n\t\tthis.referenceNode = referenceNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isReferenceElementNode = true;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from\n\t * the uniform type of the reference node.\n\t *\n\t * @return {string} The node type.\n\t */\n\tgetNodeType() {\n\n\t\treturn this.referenceNode.uniformType;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst snippet = super.generate( builder );\n\t\tconst arrayType = this.referenceNode.getNodeType();\n\t\tconst elementType = this.getNodeType();\n\n\t\treturn builder.format( snippet, arrayType, elementType );\n\n\t}\n\n}\n\n/**\n * This type of node establishes a reference to a property of another object.\n * In this way, the value of the node is automatically linked to the value of\n * referenced object. Reference nodes internally represent the linked value\n * as a uniform.\n *\n * @augments Node\n */\nclass ReferenceNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ReferenceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new reference node.\n\t *\n\t * @param {string} property - The name of the property the node refers to.\n\t * @param {string} uniformType - The uniform type that should be used to represent the property value.\n\t * @param {?Object} [object=null] - The object the property belongs to.\n\t * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.\n\t */\n\tconstructor( property, uniformType, object = null, count = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The name of the property the node refers to.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.property = property;\n\n\t\t/**\n\t\t * The uniform type that should be used to represent the property value.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.uniformType = uniformType;\n\n\t\t/**\n\t\t * The object the property belongs to.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * When the linked property is an array, this parameter defines its length.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * The property name might have dots so nested properties can be referred.\n\t\t * The hierarchy of the names is stored inside this array.\n\t\t *\n\t\t * @type {Array<string>}\n\t\t */\n\t\tthis.properties = property.split( '.' );\n\n\t\t/**\n\t\t * Points to the current referred object. This property exists next to {@link ReferenceNode#object}\n\t\t * since the final reference might be updated from calling code.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.reference = object;\n\n\t\t/**\n\t\t * The uniform node that holds the value of the reference node.\n\t\t *\n\t\t * @type {UniformNode}\n\t\t * @default null\n\t\t */\n\t\tthis.node = null;\n\n\t\t/**\n\t\t * The uniform group of the internal uniform.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t * @default null\n\t\t */\n\t\tthis.group = null;\n\n\t\t/**\n\t\t * An optional label of the internal uniform node.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.name = null;\n\n\t\t/**\n\t\t * Overwritten since reference nodes are updated per object.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t}\n\n\t/**\n\t * When the referred property is array-like, this method can be used\n\t * to access elements via an index node.\n\t *\n\t * @param {IndexNode} indexNode - indexNode.\n\t * @return {ReferenceElementNode} A reference to an element.\n\t */\n\telement( indexNode ) {\n\n\t\treturn nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );\n\n\t}\n\n\t/**\n\t * Sets the uniform group for this reference node.\n\t *\n\t * @param {UniformGroupNode} group - The uniform group to set.\n\t * @return {ReferenceNode} A reference to this node.\n\t */\n\tsetGroup( group ) {\n\n\t\tthis.group = group;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the label for the internal uniform.\n\t *\n\t * @param {string} name - The label to set.\n\t * @return {ReferenceNode} A reference to this node.\n\t */\n\tlabel( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the node type which automatically defines the internal\n\t * uniform type.\n\t *\n\t * @param {string} uniformType - The type to set.\n\t */\n\tsetNodeType( uniformType ) {\n\n\t\tlet node = null;\n\n\t\tif ( this.count !== null ) {\n\n\t\t\tnode = buffer( null, uniformType, this.count );\n\n\t\t} else if ( Array.isArray( this.getValueFromReference() ) ) {\n\n\t\t\tnode = uniformArray( null, uniformType );\n\n\t\t} else if ( uniformType === 'texture' ) {\n\n\t\t\tnode = texture( null );\n\n\t\t} else if ( uniformType === 'cubeTexture' ) {\n\n\t\t\tnode = cubeTexture( null );\n\n\t\t} else {\n\n\t\t\tnode = uniform( null, uniformType );\n\n\t\t}\n\n\t\tif ( this.group !== null ) {\n\n\t\t\tnode.setGroup( this.group );\n\n\t\t}\n\n\t\tif ( this.name !== null ) node.label( this.name );\n\n\t\tthis.node = node.getSelf();\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from\n\t * the type of the reference node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.node === null ) {\n\n\t\t\tthis.updateReference( builder );\n\t\t\tthis.updateValue();\n\n\t\t}\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Returns the property value from the given referred object.\n\t *\n\t * @param {Object} [object=this.reference] - The object to retrieve the property value from.\n\t * @return {any} The value.\n\t */\n\tgetValueFromReference( object = this.reference ) {\n\n\t\tconst { properties } = this;\n\n\t\tlet value = object[ properties[ 0 ] ];\n\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\n\n\t\t\tvalue = value[ properties[ i ] ];\n\n\t\t}\n\n\t\treturn value;\n\n\t}\n\n\t/**\n\t * Allows to update the reference based on the given state. The state is only\n\t * evaluated {@link ReferenceNode#object} is not set.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\n\t * @return {Object} The updated reference.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.object !== null ? this.object : state.object;\n\n\t\treturn this.reference;\n\n\t}\n\n\t/**\n\t * The output of the reference node is the internal uniform node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {UniformNode} The output node.\n\t */\n\tsetup( /* builder */ ) {\n\n\t\tthis.updateValue();\n\n\t\treturn this.node;\n\n\t}\n\n\t/**\n\t * Overwritten to update the internal uniform value.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( /*frame*/ ) {\n\n\t\tthis.updateValue();\n\n\t}\n\n\t/**\n\t * Retrieves the value from the referred object property and uses it\n\t * to updated the internal uniform.\n\t */\n\tupdateValue() {\n\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\n\n\t\tconst value = this.getValueFromReference();\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tthis.node.array = value;\n\n\t\t} else {\n\n\t\t\tthis.node.value = value;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a reference node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the property the node refers to.\n * @param {string} type - The uniform type that should be used to represent the property value.\n * @param {?Object} [object] - The object the property belongs to.\n * @returns {ReferenceNode}\n */\nconst reference = ( name, type, object ) => nodeObject( new ReferenceNode( name, type, object ) );\n\n/**\n * TSL function for creating a reference node. Use this function if you want need a reference\n * to an array-like property that should be represented as a uniform buffer.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the property the node refers to.\n * @param {string} type - The uniform type that should be used to represent the property value.\n * @param {number} count - The number of value inside the array-like object.\n * @param {Object} object - An array-like object the property belongs to.\n * @returns {ReferenceNode}\n */\nconst referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceNode( name, type, object, count ) );\n\n/**\n * This node is a special type of reference node which is intended\n * for linking material properties with node values.\n * ```js\n * const opacityNode = materialReference( 'opacity', 'float', material );\n * ```\n * When changing `material.opacity`, the node value of `opacityNode` will\n * automatically be updated.\n *\n * @augments ReferenceNode\n */\nclass MaterialReferenceNode extends ReferenceNode {\n\n\tstatic get type() {\n\n\t\treturn 'MaterialReferenceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new material reference node.\n\t *\n\t * @param {string} property - The name of the property the node refers to.\n\t * @param {string} inputType - The uniform type that should be used to represent the property value.\n\t * @param {?Material} [material=null] - The material the property belongs to. When no material is set,\n\t * the node refers to the material of the current rendered object.\n\t */\n\tconstructor( property, inputType, material = null ) {\n\n\t\tsuper( property, inputType, material );\n\n\t\t/**\n\t\t * The material the property belongs to. When no material is set,\n\t\t * the node refers to the material of the current rendered object.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMaterialReferenceNode = true;\n\n\t}\n\n\t/**\n\t * Updates the reference based on the given state. The state is only evaluated\n\t * {@link MaterialReferenceNode#material} is not set.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\n\t * @return {Object} The updated reference.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.material !== null ? this.material : state.material;\n\n\t\treturn this.reference;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a material reference node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the property the node refers to.\n * @param {string} type - The uniform type that should be used to represent the property value.\n * @param {?Material} [material=null] - The material the property belongs to.\n * When no material is set, the node refers to the material of the current rendered object.\n * @returns {MaterialReferenceNode}\n */\nconst materialReference = ( name, type, material = null ) => nodeObject( new MaterialReferenceNode( name, type, material ) );\n\n/**\n * TSL object that represents the tangent attribute of the current rendered object.\n *\n * @tsl\n * @type {Node<vec4>}\n */\nconst tangentGeometry = /*@__PURE__*/ Fn( ( builder ) => {\n\n\tif ( builder.geometry.hasAttribute( 'tangent' ) === false ) {\n\n\t\tbuilder.geometry.computeTangents();\n\n\t}\n\n\treturn attribute( 'tangent', 'vec4' );\n\n} )();\n\n/**\n * TSL object that represents the vertex tangent in local space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst tangentLocal = /*@__PURE__*/ tangentGeometry.xyz.toVar( 'tangentLocal' );\n\n/**\n * TSL object that represents the vertex tangent in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst tangentView = /*@__PURE__*/ modelViewMatrix.mul( vec4( tangentLocal, 0 ) ).xyz.toVarying( 'v_tangentView' ).normalize().toVar( 'tangentView' );\n\n/**\n * TSL object that represents the vertex tangent in world space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst tangentWorld = /*@__PURE__*/ tangentView.transformDirection( cameraViewMatrix ).toVarying( 'v_tangentWorld' ).normalize().toVar( 'tangentWorld' );\n\n/**\n * TSL object that represents the transformed vertex tangent in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst transformedTangentView = /*@__PURE__*/ tangentView.toVar( 'transformedTangentView' );\n\n/**\n * TSL object that represents the transformed vertex tangent in world space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst transformedTangentWorld = /*@__PURE__*/ transformedTangentView.transformDirection( cameraViewMatrix ).normalize().toVar( 'transformedTangentWorld' );\n\n/**\n * Returns the bitangent node and assigns it to a varying if the material is not flat shaded.\n *\n * @tsl\n * @private\n * @param {Node<vec3>} crossNormalTangent - The cross product of the normal and tangent vectors.\n * @param {string} varyingName - The name of the varying to assign the bitangent to.\n * @returns {Node<vec3>} The bitangent node.\n */\nconst getBitangent = /*@__PURE__*/ Fn( ( [ crossNormalTangent, varyingName ], builder ) => {\n\n\tlet bitangent = crossNormalTangent.mul( tangentGeometry.w ).xyz;\n\n\tif ( builder.material.flatShading !== true ) {\n\n\t\tbitangent = varying( crossNormalTangent, varyingName );\n\n\t}\n\n\treturn bitangent;\n\n} ).once();\n\n/**\n * TSL object that represents the bitangent attribute of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst bitangentGeometry = /*@__PURE__*/ getBitangent( normalGeometry.cross( tangentGeometry ), 'v_bitangentGeometry' ).normalize().toVar( 'bitangentGeometry' );\n\n/**\n * TSL object that represents the vertex bitangent in local space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst bitangentLocal = /*@__PURE__*/ getBitangent( normalLocal.cross( tangentLocal ), 'v_bitangentLocal' ).normalize().toVar( 'bitangentLocal' );\n\n/**\n * TSL object that represents the vertex bitangent in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst bitangentView = getBitangent( normalView.cross( tangentView ), 'v_bitangentView' ).normalize().toVar( 'bitangentView' );\n\n/**\n * TSL object that represents the vertex bitangent in world space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst bitangentWorld = /*@__PURE__*/ getBitangent( normalWorld.cross( tangentWorld ), 'v_bitangentWorld' ).normalize().toVar( 'bitangentWorld' );\n\n/**\n * TSL object that represents the transformed vertex bitangent in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst transformedBitangentView = /*@__PURE__*/ getBitangent( transformedNormalView.cross( transformedTangentView ), 'v_transformedBitangentView' ).normalize().toVar( 'transformedBitangentView' );\n\n/**\n * TSL object that represents the transformed vertex bitangent in world space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec4>}\n */\nconst transformedBitangentWorld = /*@__PURE__*/ transformedBitangentView.transformDirection( cameraViewMatrix ).normalize().toVar( 'transformedBitangentWorld' );\n\n/**\n * TSL object that represents the TBN matrix in view space.\n *\n * @tsl\n * @type {Node<mat3>}\n */\nconst TBNViewMatrix = /*@__PURE__*/ mat3( tangentView, bitangentView, normalView );\n\n/**\n * TSL object that represents the parallax direction.\n *\n * @tsl\n * @type {Node<mat3>}\n */\nconst parallaxDirection = /*@__PURE__*/ positionViewDirection.mul( TBNViewMatrix )/*.normalize()*/;\n\n/**\n * TSL function for computing parallax uv coordinates.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} uv - A uv node.\n * @param {Node<vec2>} scale - A scale node.\n * @returns {Node<vec2>} Parallax uv coordinates.\n */\nconst parallaxUV = ( uv, scale ) => uv.sub( parallaxDirection.mul( scale ) );\n\n/**\n * TSL function for computing bent normals.\n *\n * @tsl\n * @function\n * @returns {Node<vec3>} Bent normals.\n */\nconst transformedBentNormalView = /*@__PURE__*/ ( () => {\n\n\t// https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\n\n\tlet bentNormal = anisotropyB.cross( positionViewDirection );\n\tbentNormal = bentNormal.cross( anisotropyB ).normalize();\n\tbentNormal = mix( bentNormal, transformedNormalView, anisotropy.mul( roughness.oneMinus() ).oneMinus().pow2().pow2() ).normalize();\n\n\treturn bentNormal;\n\n\n} )();\n\n// Normal Mapping Without Precomputed Tangents\n// http://www.thetenthplanet.de/archives/1180\n\nconst perturbNormal2Arb = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { eye_pos, surf_norm, mapN, uv } = inputs;\n\n\tconst q0 = eye_pos.dFdx();\n\tconst q1 = eye_pos.dFdy();\n\tconst st0 = uv.dFdx();\n\tconst st1 = uv.dFdy();\n\n\tconst N = surf_norm; // normalized\n\n\tconst q1perp = q1.cross( N );\n\tconst q0perp = N.cross( q0 );\n\n\tconst T = q1perp.mul( st0.x ).add( q0perp.mul( st1.x ) );\n\tconst B = q1perp.mul( st0.y ).add( q0perp.mul( st1.y ) );\n\n\tconst det = T.dot( T ).max( B.dot( B ) );\n\tconst scale = faceDirection.mul( det.inverseSqrt() );\n\n\treturn add( T.mul( mapN.x, scale ), B.mul( mapN.y, scale ), N.mul( mapN.z ) ).normalize();\n\n} );\n\n/**\n * This class can be used for applying normals maps to materials.\n *\n * ```js\n * material.normalNode = normalMap( texture( normalTex ) );\n * ```\n *\n * @augments TempNode\n */\nclass NormalMapNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'NormalMapNode';\n\n\t}\n\n\t/**\n\t * Constructs a new normal map node.\n\t *\n\t * @param {Node<vec3>} node - Represents the normal map data.\n\t * @param {?Node<vec2>} [scaleNode=null] - Controls the intensity of the effect.\n\t */\n\tconstructor( node, scaleNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * Represents the normal map data.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * Controls the intensity of the effect.\n\t\t *\n\t\t * @type {?Node<vec2>}\n\t\t * @default null\n\t\t */\n\t\tthis.scaleNode = scaleNode;\n\n\t\t/**\n\t\t * The normal map type.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { normalMapType, scaleNode } = this;\n\n\t\tlet normalMap = this.node.mul( 2.0 ).sub( 1.0 );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tnormalMap = vec3( normalMap.xy.mul( scaleNode ), normalMap.z );\n\n\t\t}\n\n\t\tlet outputNode = null;\n\n\t\tif ( normalMapType === ObjectSpaceNormalMap ) {\n\n\t\t\toutputNode = transformNormalToView( normalMap );\n\n\t\t} else if ( normalMapType === TangentSpaceNormalMap ) {\n\n\t\t\tconst tangent = builder.hasGeometryAttribute( 'tangent' );\n\n\t\t\tif ( tangent === true ) {\n\n\t\t\t\toutputNode = TBNViewMatrix.mul( normalMap ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\toutputNode = perturbNormal2Arb( {\n\t\t\t\t\teye_pos: positionView,\n\t\t\t\t\tsurf_norm: normalView,\n\t\t\t\t\tmapN: normalMap,\n\t\t\t\t\tuv: uv()\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a normal map node.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} node - Represents the normal map data.\n * @param {?Node<vec2>} [scaleNode=null] - Controls the intensity of the effect.\n * @returns {NormalMapNode}\n */\nconst normalMap = /*@__PURE__*/ nodeProxy( NormalMapNode ).setParameterLength( 1, 2 );\n\n// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\nconst dHdxy_fwd = Fn( ( { textureNode, bumpScale } ) => {\n\n\t// It's used to preserve the same TextureNode instance\n\tconst sampleTexture = ( callback ) => textureNode.cache().context( { getUV: ( texNode ) => callback( texNode.uvNode || uv() ), forceUVContext: true } );\n\n\tconst Hll = float( sampleTexture( ( uvNode ) => uvNode ) );\n\n\treturn vec2(\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdx() ) ) ).sub( Hll ),\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdy() ) ) ).sub( Hll )\n\t).mul( bumpScale );\n\n} );\n\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\nconst perturbNormalArb = Fn( ( inputs ) => {\n\n\tconst { surf_pos, surf_norm, dHdxy } = inputs;\n\n\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\n\tconst vSigmaX = surf_pos.dFdx().normalize();\n\tconst vSigmaY = surf_pos.dFdy().normalize();\n\tconst vN = surf_norm; // normalized\n\n\tconst R1 = vSigmaY.cross( vN );\n\tconst R2 = vN.cross( vSigmaX );\n\n\tconst fDet = vSigmaX.dot( R1 ).mul( faceDirection );\n\n\tconst vGrad = fDet.sign().mul( dHdxy.x.mul( R1 ).add( dHdxy.y.mul( R2 ) ) );\n\n\treturn fDet.abs().mul( surf_norm ).sub( vGrad ).normalize();\n\n} );\n\n/**\n * This class can be used for applying bump maps to materials.\n *\n * ```js\n * material.normalNode = bumpMap( texture( bumpTex ) );\n * ```\n *\n * @augments TempNode\n */\nclass BumpMapNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'BumpMapNode';\n\n\t}\n\n\t/**\n\t * Constructs a new bump map node.\n\t *\n\t * @param {Node<float>} textureNode - Represents the bump map data.\n\t * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.\n\t */\n\tconstructor( textureNode, scaleNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * Represents the bump map data.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * Controls the intensity of the bump effect.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.scaleNode = scaleNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\n\t\tconst dHdxy = dHdxy_fwd( { textureNode: this.textureNode, bumpScale } );\n\n\t\treturn perturbNormalArb( {\n\t\t\tsurf_pos: positionView,\n\t\t\tsurf_norm: normalView,\n\t\t\tdHdxy\n\t\t} );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a bump map node.\n *\n * @tsl\n * @function\n * @param {Node<float>} textureNode - Represents the bump map data.\n * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.\n * @returns {BumpMapNode}\n */\nconst bumpMap = /*@__PURE__*/ nodeProxy( BumpMapNode ).setParameterLength( 1, 2 );\n\nconst _propertyCache = new Map();\n\n/**\n * This class should simplify the node access to material properties.\n * It internal uses reference nodes to make sure  changes to material\n * properties are automatically reflected to predefined TSL objects\n * like e.g. `materialColor`.\n *\n * @augments Node\n */\nclass MaterialNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'MaterialNode';\n\n\t}\n\n\t/**\n\t * Constructs a new material node.\n\t *\n\t * @param {string} scope - The scope defines what kind of material property is referred by the node.\n\t */\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scope defines what material property is referred by the node.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.scope = scope;\n\n\t}\n\n\t/**\n\t * Returns a cached reference node for the given property and type.\n\t *\n\t * @param {string} property - The name of the material property.\n\t * @param {string} type - The uniform type of the property.\n\t * @return {MaterialReferenceNode} A material reference node representing the property access.\n\t */\n\tgetCache( property, type ) {\n\n\t\tlet node = _propertyCache.get( property );\n\n\t\tif ( node === undefined ) {\n\n\t\t\tnode = materialReference( property, type );\n\n\t\t\t_propertyCache.set( property, node );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * Returns a float-typed material reference node for the given property name.\n\t *\n\t * @param {string} property - The name of the material property.\n\t * @return {MaterialReferenceNode<float>} A material reference node representing the property access.\n\t */\n\tgetFloat( property ) {\n\n\t\treturn this.getCache( property, 'float' );\n\n\t}\n\n\t/**\n\t * Returns a color-typed material reference node for the given property name.\n\t *\n\t * @param {string} property - The name of the material property.\n\t * @return {MaterialReferenceNode<color>} A material reference node representing the property access.\n\t */\n\tgetColor( property ) {\n\n\t\treturn this.getCache( property, 'color' );\n\n\t}\n\n\t/**\n\t * Returns a texture-typed material reference node for the given property name.\n\t *\n\t * @param {string} property - The name of the material property.\n\t * @return {MaterialReferenceNode} A material reference node representing the property access.\n\t */\n\tgetTexture( property ) {\n\n\t\treturn this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );\n\n\t}\n\n\t/**\n\t * The node setup is done depending on the selected scope. Multiple material properties\n\t * might be grouped into a single node composition if they logically belong together.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The node representing the selected scope.\n\t */\n\tsetup( builder ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = material.color !== undefined ? this.getColor( scope ) : vec3();\n\n\t\t\tif ( material.map && material.map.isTexture === true ) {\n\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = this.getFloat( scope );\n\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\n\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alpha' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\n\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\n\n\t\t\t\tnode = this.getTexture( 'specular' ).r;\n\n\t\t\t} else {\n\n\t\t\t\tnode = float( 1 );\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_INTENSITY ) {\n\n\t\t\tconst specularIntensityNode = this.getFloat( scope );\n\n\t\t\tif ( material.specularIntensityMap && material.specularIntensityMap.isTexture === true ) {\n\n\t\t\t\tnode = specularIntensityNode.mul( this.getTexture( scope ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = specularIntensityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\n\n\t\t\tconst specularColorNode = this.getColor( scope );\n\n\t\t\tif ( material.specularColorMap && material.specularColorMap.isTexture === true ) {\n\n\t\t\t\tnode = specularColorNode.mul( this.getTexture( scope ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = specularColorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches\n\n\t\t\tconst roughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( scope ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\n\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( scope ).b );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveIntensityNode = this.getFloat( 'emissiveIntensity' );\n\t\t\tconst emissiveNode = this.getColor( scope ).mul( emissiveIntensityNode );\n\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\n\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( scope ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.NORMAL ) {\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tnode = normalMap( this.getTexture( 'normal' ), this.getCache( 'normalScale', 'vec2' ) );\n\t\t\t\tnode.normalMapType = material.normalMapType;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tnode = bumpMap( this.getTexture( 'bump' ).r, this.getFloat( 'bumpScale' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\n\n\t\t\tconst clearcoatNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\n\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatRoughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tnode = normalMap( this.getTexture( scope ), this.getCache( scope + 'Scale', 'vec2' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\n\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\n\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\n\n\t\t\tconst sheenRoughnessNode = this.getFloat( scope );\n\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( scope ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenRoughnessNode;\n\n\t\t\t}\n\n\t\t\tnode = node.clamp( 0.07, 1.0 );\n\n\t\t} else if ( scope === MaterialNode.ANISOTROPY ) {\n\n\t\t\tif ( material.anisotropyMap && material.anisotropyMap.isTexture === true ) {\n\n\t\t\t\tconst anisotropyPolar = this.getTexture( scope );\n\t\t\t\tconst anisotropyMat = mat2( materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x );\n\n\t\t\t\tnode = anisotropyMat.mul( anisotropyPolar.rg.mul( 2.0 ).sub( vec2( 1.0 ) ).normalize().mul( anisotropyPolar.b ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = materialAnisotropyVector;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\n\n\t\t\tconst iridescenceThicknessMaximum = reference( '1', 'float', material.iridescenceThicknessRange );\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tconst iridescenceThicknessMinimum = reference( '0', 'float', material.iridescenceThicknessRange );\n\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );\n\n\t\t\t} else {\n\n\t\t\t\tnode = iridescenceThicknessMaximum;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.TRANSMISSION ) {\n\n\t\t\tconst transmissionNode = this.getFloat( scope );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tnode = transmissionNode.mul( this.getTexture( scope ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = transmissionNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.THICKNESS ) {\n\n\t\t\tconst thicknessNode = this.getFloat( scope );\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tnode = thicknessNode.mul( this.getTexture( scope ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = thicknessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.IOR ) {\n\n\t\t\tnode = this.getFloat( scope );\n\n\t\t} else if ( scope === MaterialNode.LIGHT_MAP ) {\n\n\t\t\tnode = this.getTexture( scope ).rgb.mul( this.getFloat( 'lightMapIntensity' ) );\n\n\t\t} else if ( scope === MaterialNode.AO ) {\n\n\t\t\tnode = this.getTexture( scope ).r.sub( 1.0 ).mul( this.getFloat( 'aoMapIntensity' ) ).add( 1.0 );\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = this.getCache( scope, outputType );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.SPECULAR_INTENSITY = 'specularIntensity';\nMaterialNode.SPECULAR_COLOR = 'specularColor';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.NORMAL = 'normal';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.ANISOTROPY = 'anisotropy';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nMaterialNode.IOR = 'ior';\nMaterialNode.TRANSMISSION = 'transmission';\nMaterialNode.THICKNESS = 'thickness';\nMaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';\nMaterialNode.ATTENUATION_COLOR = 'attenuationColor';\nMaterialNode.LINE_SCALE = 'scale';\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\nMaterialNode.LINE_WIDTH = 'linewidth';\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\nMaterialNode.POINT_SIZE = 'size';\nMaterialNode.DISPERSION = 'dispersion';\nMaterialNode.LIGHT_MAP = 'light';\nMaterialNode.AO = 'ao';\n\n/**\n * TSL object that represents alpha test of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialAlphaTest = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\n\n/**\n * TSL object that represents the diffuse color of the current material.\n * The value is composed via `color` * `map`.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.COLOR );\n\n/**\n * TSL object that represents the shininess of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialShininess = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHININESS );\n\n/**\n * TSL object that represents the emissive color of the current material.\n * The value is composed via `emissive` * `emissiveIntensity` * `emissiveMap`.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialEmissive = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\n\n/**\n * TSL object that represents the opacity of the current material.\n * The value is composed via `opacity` * `alphaMap`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialOpacity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.OPACITY );\n\n/**\n * TSL object that represents the specular of the current material.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialSpecular = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\n\n/**\n * TSL object that represents the specular intensity of the current material.\n * The value is composed via `specularIntensity` * `specularMap.a`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialSpecularIntensity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_INTENSITY );\n\n/**\n * TSL object that represents the specular color of the current material.\n * The value is composed via `specularColor` * `specularMap.rgb`.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialSpecularColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\n\n/**\n * TSL object that represents the specular strength of the current material.\n * The value is composed via `specularMap.r`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialSpecularStrength = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\n\n/**\n * TSL object that represents the reflectivity of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialReflectivity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\n\n/**\n * TSL object that represents the roughness of the current material.\n * The value is composed via `roughness` * `roughnessMap.g`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\n\n/**\n * TSL object that represents the metalness of the current material.\n * The value is composed via `metalness` * `metalnessMap.b`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialMetalness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.METALNESS );\n\n/**\n * TSL object that represents the normal of the current material.\n * The value will be either `normalMap` * `normalScale`, `bumpMap` * `bumpScale` or `normalView`.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.NORMAL );\n\n/**\n * TSL object that represents the clearcoat of the current material.\n * The value is composed via `clearcoat` * `clearcoatMap.r`\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialClearcoat = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\n\n/**\n * TSL object that represents the clearcoat roughness of the current material.\n * The value is composed via `clearcoatRoughness` * `clearcoatRoughnessMap.r`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialClearcoatRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\n\n/**\n * TSL object that represents the clearcoat normal of the current material.\n * The value will be either `clearcoatNormalMap` or `normalView`.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialClearcoatNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL );\n\n/**\n * TSL object that represents the rotation of the current sprite material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialRotation = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROTATION );\n\n/**\n * TSL object that represents the sheen color of the current material.\n * The value is composed via `sheen` * `sheenColor` * `sheenColorMap`.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialSheen = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN );\n\n/**\n * TSL object that represents the sheen roughness of the current material.\n * The value is composed via `sheenRoughness` * `sheenRoughnessMap.a`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialSheenRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\n\n/**\n * TSL object that represents the anisotropy of the current material.\n *\n * @tsl\n * @type {Node<vec2>}\n */\nconst materialAnisotropy = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ANISOTROPY );\n\n/**\n * TSL object that represents the iridescence of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialIridescence = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\n\n/**\n * TSL object that represents the iridescence IOR of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialIridescenceIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\n\n/**\n * TSL object that represents the iridescence thickness of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialIridescenceThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\n\n/**\n * TSL object that represents the transmission of the current material.\n * The value is composed via `transmission` * `transmissionMap.r`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialTransmission = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.TRANSMISSION );\n\n/**\n * TSL object that represents the thickness of the current material.\n * The value is composed via `thickness` * `thicknessMap.g`.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.THICKNESS );\n\n/**\n * TSL object that represents the IOR of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IOR );\n\n/**\n * TSL object that represents the attenuation distance of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialAttenuationDistance = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_DISTANCE );\n\n/**\n * TSL object that represents the attenuation color of the current material.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialAttenuationColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_COLOR );\n\n/**\n * TSL object that represents the scale of the current dashed line material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialLineScale = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );\n\n/**\n * TSL object that represents the dash size of the current dashed line material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialLineDashSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );\n\n/**\n * TSL object that represents the gap size of the current dashed line material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialLineGapSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );\n\n/**\n * TSL object that represents the line width of the current line material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialLineWidth = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );\n\n/**\n * TSL object that represents the dash offset of the current line material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialLineDashOffset = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );\n\n/**\n * TSL object that represents the point size of the current points material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialPointSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.POINT_SIZE );\n\n/**\n * TSL object that represents the dispersion of the current material.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialDispersion = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.DISPERSION );\n\n/**\n * TSL object that represents the light map of the current material.\n * The value is composed via `lightMapIntensity` * `lightMap.rgb`.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst materialLightMap = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LIGHT_MAP );\n\n/**\n * TSL object that represents the ambient occlusion map of the current material.\n * The value is composed via `aoMap.r` - 1 * `aoMapIntensity` + 1.\n *\n * @tsl\n * @type {Node<float>}\n */\nconst materialAO = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.AO );\n\n/**\n * TSL object that represents the anisotropy vector of the current material.\n *\n * @tsl\n * @type {Node<vec2>}\n */\nconst materialAnisotropyVector = /*@__PURE__*/ uniform( new Vector2() ).onReference( function ( frame ) {\n\n\treturn frame.material;\n\n} ).onRenderUpdate( function ( { material } ) {\n\n\tthis.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\n\n} );\n\n/**\n * TSL object that represents the position in clip space after the model-view-projection transform of the current rendered object.\n *\n * @tsl\n * @type {VaryingNode<vec4>}\n */\nconst modelViewProjection = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\treturn builder.context.setupModelViewProjection();\n\n}, 'vec4' ).once() )().toVarying( 'v_modelViewProjection' );\n\n/**\n * This class represents shader indices of different types. The following predefined node\n * objects cover frequent use cases:\n *\n * - `vertexIndex`: The index of a vertex within a mesh.\n * - `instanceIndex`: The index of either a mesh instance or an invocation of a compute shader.\n * - `drawIndex`: The index of a draw call.\n * - `invocationLocalIndex`: The index of a compute invocation within the scope of a workgroup load.\n * - `invocationSubgroupIndex`: The index of a compute invocation within the scope of a subgroup.\n * - `subgroupIndex`: The index of the subgroup the current compute invocation belongs to.\n *\n * @augments Node\n */\nclass IndexNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'IndexNode';\n\n\t}\n\n\t/**\n\t * Constructs a new index node.\n\t *\n\t * @param {('vertex'|'instance'|'subgroup'|'invocationLocal'|'invocationSubgroup'|'draw')} scope - The scope of the index node.\n\t */\n\tconstructor( scope ) {\n\n\t\tsuper( 'uint' );\n\n\t\t/**\n\t\t * The scope of the index node.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isIndexNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst nodeType = this.getNodeType( builder );\n\t\tconst scope = this.scope;\n\n\t\tlet propertyName;\n\n\t\tif ( scope === IndexNode.VERTEX ) {\n\n\t\t\tpropertyName = builder.getVertexIndex();\n\n\t\t} else if ( scope === IndexNode.INSTANCE ) {\n\n\t\t\tpropertyName = builder.getInstanceIndex();\n\n\t\t} else if ( scope === IndexNode.DRAW ) {\n\n\t\t\tpropertyName = builder.getDrawIndex();\n\n\t\t} else if ( scope === IndexNode.INVOCATION_LOCAL ) {\n\n\t\t\tpropertyName = builder.getInvocationLocalIndex();\n\n\t\t} else if ( scope === IndexNode.INVOCATION_SUBGROUP ) {\n\n\t\t\tpropertyName = builder.getInvocationSubgroupIndex();\n\n\t\t} else if ( scope === IndexNode.SUBGROUP ) {\n\n\t\t\tpropertyName = builder.getSubgroupIndex();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.IndexNode: Unknown scope: ' + scope );\n\n\t\t}\n\n\t\tlet output;\n\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\n\n\t\t\toutput = propertyName;\n\n\t\t} else {\n\n\t\t\tconst nodeVarying = varying( this );\n\n\t\t\toutput = nodeVarying.build( builder, nodeType );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nIndexNode.VERTEX = 'vertex';\nIndexNode.INSTANCE = 'instance';\nIndexNode.SUBGROUP = 'subgroup';\nIndexNode.INVOCATION_LOCAL = 'invocationLocal';\nIndexNode.INVOCATION_SUBGROUP = 'invocationSubgroup';\nIndexNode.DRAW = 'draw';\n\n/**\n * TSL object that represents the index of a vertex within a mesh.\n *\n * @tsl\n * @type {IndexNode}\n */\nconst vertexIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.VERTEX );\n\n/**\n * TSL object that represents the index of either a mesh instance or an invocation of a compute shader.\n *\n * @tsl\n * @type {IndexNode}\n */\nconst instanceIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INSTANCE );\n\n/**\n * TSL object that represents the index of the subgroup the current compute invocation belongs to.\n *\n * @tsl\n * @type {IndexNode}\n */\nconst subgroupIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.SUBGROUP );\n\n/**\n * TSL object that represents the index of a compute invocation within the scope of a subgroup.\n *\n * @tsl\n * @type {IndexNode}\n */\nconst invocationSubgroupIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_SUBGROUP );\n\n/**\n * TSL object that represents the index of a compute invocation within the scope of a workgroup load.\n *\n * @tsl\n * @type {IndexNode}\n */\nconst invocationLocalIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_LOCAL );\n\n/**\n * TSL object that represents the index of a draw call.\n *\n * @tsl\n * @type {IndexNode}\n */\nconst drawIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.DRAW );\n\n/**\n * This node implements the vertex shader logic which is required\n * when rendering 3D objects via instancing. The code makes sure\n * vertex positions, normals and colors can be modified via instanced\n * data.\n *\n * @augments Node\n */\nclass InstanceNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'InstanceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new instance node.\n\t *\n\t * @param {number} count - The number of instances.\n\t * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.\n\t * @param {?InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.\n\t */\n\tconstructor( count, instanceMatrix, instanceColor = null ) {\n\n\t\tsuper( 'void' );\n\n\t\t/**\n\t\t * The number of instances.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * Instanced buffer attribute representing the transformation of instances.\n\t\t *\n\t\t * @type {InstancedBufferAttribute}\n\t\t */\n\t\tthis.instanceMatrix = instanceMatrix;\n\n\t\t/**\n\t\t * Instanced buffer attribute representing the color of instances.\n\t\t *\n\t\t * @type {InstancedBufferAttribute}\n\t\t */\n\t\tthis.instanceColor = instanceColor;\n\n\t\t/**\n\t\t * The node that represents the instance matrix data.\n\t\t *\n\t\t * @type {?Node}\n\t\t */\n\t\tthis.instanceMatrixNode = null;\n\n\t\t/**\n\t\t * The node that represents the instance color data.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.instanceColorNode = null;\n\n\t\t/**\n\t\t * The update type is set to `frame` since an update\n\t\t * of instanced buffer data must be checked per frame.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.FRAME;\n\n\t\t/**\n\t\t * A reference to a buffer that is used by `instanceMatrixNode`.\n\t\t *\n\t\t * @type {?InstancedInterleavedBuffer}\n\t\t */\n\t\tthis.buffer = null;\n\n\t\t/**\n\t\t * A reference to a buffer that is used by `instanceColorNode`.\n\t\t *\n\t\t * @type {?InstancedBufferAttribute}\n\t\t */\n\t\tthis.bufferColor = null;\n\n\t}\n\n\t/**\n\t * Setups the internal buffers and nodes and assigns the transformed vertex data\n\t * to predefined node variables for accumulation. That follows the same patterns\n\t * like with morph and skinning nodes.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tconst { count, instanceMatrix, instanceColor } = this;\n\n\t\tlet { instanceMatrixNode, instanceColorNode } = this;\n\n\t\tif ( instanceMatrixNode === null ) {\n\n\t\t\t// Both WebGPU and WebGL backends have UBO max limited to 64kb. Matrix count number bigger than 1000 ( 16 * 4 * 1000 = 64kb ) will fallback to attribute.\n\n\t\t\tif ( count <= 1000 ) {\n\n\t\t\t\tinstanceMatrixNode = buffer( instanceMatrix.array, 'mat4', Math.max( count, 1 ) ).element( instanceIndex );\n\n\t\t\t} else {\n\n\t\t\t\tconst buffer = new InstancedInterleavedBuffer( instanceMatrix.array, 16, 1 );\n\n\t\t\t\tthis.buffer = buffer;\n\n\t\t\t\tconst bufferFn = instanceMatrix.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\n\n\t\t\t\tconst instanceBuffers = [\n\t\t\t\t\t// F.Signature -> bufferAttribute( array, type, stride, offset )\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 0 ),\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 4 ),\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 8 ),\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 12 )\n\t\t\t\t];\n\n\t\t\t\tinstanceMatrixNode = mat4( ...instanceBuffers );\n\n\t\t\t}\n\n\t\t\tthis.instanceMatrixNode = instanceMatrixNode;\n\n\t\t}\n\n\t\tif ( instanceColor && instanceColorNode === null ) {\n\n\t\t\tconst buffer = new InstancedBufferAttribute( instanceColor.array, 3 );\n\n\t\t\tconst bufferFn = instanceColor.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\n\n\t\t\tthis.bufferColor = buffer;\n\n\t\t\tinstanceColorNode = vec3( bufferFn( buffer, 'vec3', 3, 0 ) );\n\n\t\t\tthis.instanceColorNode = instanceColorNode;\n\n\t\t}\n\n\t\t// POSITION\n\n\t\tconst instancePosition = instanceMatrixNode.mul( positionLocal ).xyz;\n\t\tpositionLocal.assign( instancePosition );\n\n\t\t// NORMAL\n\n\t\tif ( builder.hasGeometryAttribute( 'normal' ) ) {\n\n\t\t\tconst instanceNormal = transformNormal( normalLocal, instanceMatrixNode );\n\n\t\t\t// ASSIGNS\n\n\t\t\tnormalLocal.assign( instanceNormal );\n\n\t\t}\n\n\t\t// COLOR\n\n\t\tif ( this.instanceColorNode !== null ) {\n\n\t\t\tvaryingProperty( 'vec3', 'vInstanceColor' ).assign( this.instanceColorNode );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Checks if the internal buffers required an update.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdate( /*frame*/ ) {\n\n\t\tif ( this.instanceMatrix.usage !== DynamicDrawUsage && this.buffer !== null && this.instanceMatrix.version !== this.buffer.version ) {\n\n\t\t\tthis.buffer.version = this.instanceMatrix.version;\n\n\t\t}\n\n\t\tif ( this.instanceColor && this.instanceColor.usage !== DynamicDrawUsage && this.bufferColor !== null && this.instanceColor.version !== this.bufferColor.version ) {\n\n\t\t\tthis.bufferColor.version = this.instanceColor.version;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating an instance node.\n *\n * @tsl\n * @function\n * @param {number} count - The number of instances.\n * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.\n * @param {?InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.\n * @returns {InstanceNode}\n */\nconst instance = /*@__PURE__*/ nodeProxy( InstanceNode ).setParameterLength( 2, 3 );\n\n/**\n * This is a special version of `InstanceNode` which requires the usage of {@link InstancedMesh}.\n * It allows an easier setup of the instance node.\n *\n * @augments InstanceNode\n */\nclass InstancedMeshNode extends InstanceNode {\n\n\tstatic get type() {\n\n\t\treturn 'InstancedMeshNode';\n\n\t}\n\n\t/**\n\t * Constructs a new instanced mesh node.\n\t *\n\t * @param {InstancedMesh} instancedMesh - The instanced mesh.\n\t */\n\tconstructor( instancedMesh ) {\n\n\t\tconst { count, instanceMatrix, instanceColor } = instancedMesh;\n\n\t\tsuper( count, instanceMatrix, instanceColor );\n\n\t\t/**\n\t\t * A reference to the instanced mesh.\n\t\t *\n\t\t * @type {InstancedMesh}\n\t\t */\n\t\tthis.instancedMesh = instancedMesh;\n\n\t}\n\n}\n\n/**\n * TSL function for creating an instanced mesh node.\n *\n * @tsl\n * @function\n * @param {InstancedMesh} instancedMesh - The instancedMesh.\n * @returns {InstancedMeshNode}\n */\nconst instancedMesh = /*@__PURE__*/ nodeProxy( InstancedMeshNode ).setParameterLength( 1 );\n\n/**\n * This node implements the vertex shader logic which is required\n * when rendering 3D objects via batching. `BatchNode` must be used\n * with instances of {@link BatchedMesh}.\n *\n * @augments Node\n */\nclass BatchNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'BatchNode';\n\n\t}\n\n\t/**\n\t * Constructs a new batch node.\n\t *\n\t * @param {BatchedMesh} batchMesh - A reference to batched mesh.\n\t */\n\tconstructor( batchMesh ) {\n\n\t\tsuper( 'void' );\n\n\t\t/**\n\t\t * A reference to batched mesh.\n\t\t *\n\t\t * @type {BatchedMesh}\n\t\t */\n\t\tthis.batchMesh = batchMesh;\n\n\t\t/**\n\t\t * The batching index node.\n\t\t *\n\t\t * @type {?IndexNode}\n\t\t * @default null\n\t\t */\n\t\tthis.batchingIdNode = null;\n\n\t}\n\n\t/**\n\t * Setups the internal buffers and nodes and assigns the transformed vertex data\n\t * to predefined node variables for accumulation. That follows the same patterns\n\t * like with morph and skinning nodes.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tif ( this.batchingIdNode === null ) {\n\n\t\t\tif ( builder.getDrawIndex() === null ) {\n\n\t\t\t\tthis.batchingIdNode = instanceIndex;\n\n\t\t\t} else {\n\n\t\t\t\tthis.batchingIdNode = drawIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getIndirectIndex = Fn( ( [ id ] ) => {\n\n\t\t\tconst size = int( textureSize( textureLoad( this.batchMesh._indirectTexture ), 0 ).x );\n\t\t\tconst x = int( id ).mod( size );\n\t\t\tconst y = int( id ).div( size );\n\t\t\treturn textureLoad( this.batchMesh._indirectTexture, ivec2( x, y ) ).x;\n\n\t\t} ).setLayout( {\n\t\t\tname: 'getIndirectIndex',\n\t\t\ttype: 'uint',\n\t\t\tinputs: [\n\t\t\t\t{ name: 'id', type: 'int' }\n\t\t\t]\n\t\t} );\n\n\t\tconst indirectId = getIndirectIndex( int( this.batchingIdNode ) );\n\n\t\tconst matricesTexture = this.batchMesh._matricesTexture;\n\n\t\tconst size = int( textureSize( textureLoad( matricesTexture ), 0 ).x );\n\t\tconst j = float( indirectId ).mul( 4 ).toInt().toVar();\n\n\t\tconst x = j.mod( size );\n\t\tconst y = j.div( size );\n\t\tconst batchingMatrix = mat4(\n\t\t\ttextureLoad( matricesTexture, ivec2( x, y ) ),\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 1 ), y ) ),\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 2 ), y ) ),\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 3 ), y ) )\n\t\t);\n\n\n\t\tconst colorsTexture = this.batchMesh._colorsTexture;\n\n\t\tif ( colorsTexture !== null ) {\n\n\t\t\tconst getBatchingColor = Fn( ( [ id ] ) => {\n\n\t\t\t\tconst size = int( textureSize( textureLoad( colorsTexture ), 0 ).x );\n\t\t\t\tconst j = id;\n\t\t\t\tconst x = j.mod( size );\n\t\t\t\tconst y = j.div( size );\n\t\t\t\treturn textureLoad( colorsTexture, ivec2( x, y ) ).rgb;\n\n\t\t\t} ).setLayout( {\n\t\t\t\tname: 'getBatchingColor',\n\t\t\t\ttype: 'vec3',\n\t\t\t\tinputs: [\n\t\t\t\t\t{ name: 'id', type: 'int' }\n\t\t\t\t]\n\t\t\t} );\n\n\t\t\tconst color = getBatchingColor( indirectId );\n\n\t\t\tvaryingProperty( 'vec3', 'vBatchColor' ).assign( color );\n\n\t\t}\n\n\t\tconst bm = mat3( batchingMatrix );\n\n\t\tpositionLocal.assign( batchingMatrix.mul( positionLocal ) );\n\n\t\tconst transformedNormal = normalLocal.div( vec3( bm[ 0 ].dot( bm[ 0 ] ), bm[ 1 ].dot( bm[ 1 ] ), bm[ 2 ].dot( bm[ 2 ] ) ) );\n\n\t\tconst batchingNormal = bm.mul( transformedNormal ).xyz;\n\n\t\tnormalLocal.assign( batchingNormal );\n\n\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\n\n\t\t\ttangentLocal.mulAssign( bm );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a batch node.\n *\n * @tsl\n * @function\n * @param {BatchedMesh} batchMesh - A reference to batched mesh.\n * @returns {BatchNode}\n */\nconst batch = /*@__PURE__*/ nodeProxy( BatchNode ).setParameterLength( 1 );\n\n/**\n * This class enables element access on instances of {@link StorageBufferNode}.\n * In most cases, it is indirectly used when accessing elements with the\n * {@link StorageBufferNode#element} method.\n *\n * ```js\n * const position = positionStorage.element( instanceIndex );\n * ```\n *\n * @augments ArrayElementNode\n */\nclass StorageArrayElementNode extends ArrayElementNode {\n\n\tstatic get type() {\n\n\t\treturn 'StorageArrayElementNode';\n\n\t}\n\n\t/**\n\t * Constructs storage buffer element node.\n\t *\n\t * @param {StorageBufferNode} storageBufferNode - The storage buffer node.\n\t * @param {Node} indexNode - The index node that defines the element access.\n\t */\n\tconstructor( storageBufferNode, indexNode ) {\n\n\t\tsuper( storageBufferNode, indexNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageArrayElementNode = true;\n\n\t}\n\n\t/**\n\t * The storage buffer node.\n\t *\n\t * @param {Node} value\n\t * @type {StorageBufferNode}\n\t */\n\tset storageBufferNode( value ) {\n\n\t\tthis.node = value;\n\n\t}\n\n\tget storageBufferNode() {\n\n\t\treturn this.node;\n\n\t}\n\n\tgetMemberType( builder, name ) {\n\n\t\tconst structTypeNode = this.storageBufferNode.structTypeNode;\n\n\t\tif ( structTypeNode ) {\n\n\t\t\treturn structTypeNode.getMemberType( builder, name );\n\n\t\t}\n\n\t\treturn 'void';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\n\n\t\t\tif ( this.node.isPBO === true ) {\n\n\t\t\t\tbuilder.setupPBO( this.node );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet snippet;\n\n\t\tconst isAssignContext = builder.context.assign;\n\n\t\t//\n\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\n\n\t\t\tif ( this.node.isPBO === true && isAssignContext !== true && ( this.node.value.isInstancedBufferAttribute || builder.shaderStage !== 'compute' ) ) {\n\n\t\t\t\tsnippet = builder.generatePBO( this );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = this.node.build( builder );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tsnippet = super.generate( builder );\n\n\t\t}\n\n\t\tif ( isAssignContext !== true ) {\n\n\t\t\tconst type = this.getNodeType( builder );\n\n\t\t\tsnippet = builder.format( snippet, type, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a storage element node.\n *\n * @tsl\n * @function\n * @param {StorageBufferNode} storageBufferNode - The storage buffer node.\n * @param {Node} indexNode - The index node that defines the element access.\n * @returns {StorageArrayElementNode}\n */\nconst storageElement = /*@__PURE__*/ nodeProxy( StorageArrayElementNode ).setParameterLength( 2 );\n\n/**\n * This node is used in context of compute shaders and allows to define a\n * storage buffer for data. A typical workflow is to create instances of\n * this node with the convenience functions `attributeArray()` or `instancedArray()`,\n * setup up a compute shader that writes into the buffers and then convert\n * the storage buffers to attribute nodes for rendering.\n *\n * ```js\n * const positionBuffer = instancedArray( particleCount, 'vec3' ); // the storage buffer node\n *\n * const computeInit = Fn( () => { // the compute shader\n *\n * \tconst position = positionBuffer.element( instanceIndex );\n *\n * \t// compute position data\n *\n * \tposition.x = 1;\n * \tposition.y = 1;\n * \tposition.z = 1;\n *\n * } )().compute( particleCount );\n *\n * const particleMaterial = new THREE.SpriteNodeMaterial();\n * particleMaterial.positionNode = positionBuffer.toAttribute();\n *\n * renderer.computeAsync( computeInit );\n *\n * ```\n *\n * @augments BufferNode\n */\nclass StorageBufferNode extends BufferNode {\n\n\tstatic get type() {\n\n\t\treturn 'StorageBufferNode';\n\n\t}\n\n\t/**\n\t * Constructs a new storage buffer node.\n\t *\n\t * @param {StorageBufferAttribute|StorageInstancedBufferAttribute|BufferAttribute} value - The buffer data.\n\t * @param {?(string|Struct)} [bufferType=null] - The buffer type (e.g. `'vec3'`).\n\t * @param {number} [bufferCount=0] - The buffer count.\n\t */\n\tconstructor( value, bufferType = null, bufferCount = 0 ) {\n\n\t\tlet nodeType, structTypeNode = null;\n\n\t\tif ( bufferType && bufferType.isStruct ) {\n\n\t\t\tnodeType = 'struct';\n\t\t\tstructTypeNode = bufferType.layout;\n\n\t\t\tif ( value.isStorageBufferAttribute || value.isStorageInstancedBufferAttribute ) {\n\n\t\t\t\tbufferCount = value.count;\n\n\t\t\t}\n\n\t\t} else if ( bufferType === null && ( value.isStorageBufferAttribute || value.isStorageInstancedBufferAttribute ) ) {\n\n\t\t\tnodeType = getTypeFromLength( value.itemSize );\n\t\t\tbufferCount = value.count;\n\n\t\t} else {\n\n\t\t\tnodeType = bufferType;\n\n\t\t}\n\n\t\tsuper( value, nodeType, bufferCount );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageBufferNode = true;\n\n\n\t\t/**\n\t\t * The buffer struct type.\n\t\t *\n\t\t * @type {?StructTypeNode}\n\t\t * @default null\n\t\t */\n\t\tthis.structTypeNode = structTypeNode;\n\n\t\t/**\n\t\t * The access type of the texture node.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'readWrite'\n\t\t */\n\t\tthis.access = NodeAccess.READ_WRITE;\n\n\t\t/**\n\t\t * Whether the node is atomic or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.isAtomic = false;\n\n\t\t/**\n\t\t * Whether the node represents a PBO or not.\n\t\t * Only relevant for WebGL.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.isPBO = false;\n\n\t\t/**\n\t\t * A reference to the internal buffer attribute node.\n\t\t *\n\t\t * @type {?BufferAttributeNode}\n\t\t * @default null\n\t\t */\n\t\tthis._attribute = null;\n\n\t\t/**\n\t\t * A reference to the internal varying node.\n\t\t *\n\t\t * @type {?VaryingNode}\n\t\t * @default null\n\t\t */\n\t\tthis._varying = null;\n\n\t\t/**\n\t\t * `StorageBufferNode` sets this property to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.global = true;\n\n\t\tif ( value.isStorageBufferAttribute !== true && value.isStorageInstancedBufferAttribute !== true ) {\n\n\t\t\t// TODO: Improve it, possibly adding a new property to the BufferAttribute to identify it as a storage buffer read-only attribute in Renderer\n\n\t\t\tif ( value.isInstancedBufferAttribute ) value.isStorageInstancedBufferAttribute = true;\n\t\t\telse value.isStorageBufferAttribute = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is overwritten since the buffer data might be shared\n\t * and thus the hash should be shared as well.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The hash.\n\t */\n\tgetHash( builder ) {\n\n\t\tif ( this.bufferCount === 0 ) {\n\n\t\t\tlet bufferData = builder.globalCache.getData( this.value );\n\n\t\t\tif ( bufferData === undefined ) {\n\n\t\t\t\tbufferData = {\n\t\t\t\t\tnode: this\n\t\t\t\t};\n\n\t\t\t\tbuilder.globalCache.setData( this.value, bufferData );\n\n\t\t\t}\n\n\t\t\treturn bufferData.node.uuid;\n\n\t\t}\n\n\t\treturn this.uuid;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'indirectStorageBuffer'` or `'storageBuffer'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn this.value.isIndirectStorageBufferAttribute ? 'indirectStorageBuffer' : 'storageBuffer';\n\n\t}\n\n\t/**\n\t * Enables element access with the given index node.\n\t *\n\t * @param {IndexNode} indexNode - The index node.\n\t * @return {StorageArrayElementNode} A node representing the element access.\n\t */\n\telement( indexNode ) {\n\n\t\treturn storageElement( this, indexNode );\n\n\t}\n\n\t/**\n\t * Defines whether this node is a PBO or not. Only relevant for WebGL.\n\t *\n\t * @param {boolean} value - The value so set.\n\t * @return {StorageBufferNode} A reference to this node.\n\t */\n\tsetPBO( value ) {\n\n\t\tthis.isPBO = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the `isPBO` value.\n\t *\n\t * @return {boolean} Whether the node represents a PBO or not.\n\t */\n\tgetPBO() {\n\n\t\treturn this.isPBO;\n\n\t}\n\n\t/**\n\t * Defines the node access.\n\t *\n\t * @param {string} value - The node access.\n\t * @return {StorageBufferNode} A reference to this node.\n\t */\n\tsetAccess( value ) {\n\n\t\tthis.access = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Convenience method for configuring a read-only node access.\n\t *\n\t * @return {StorageBufferNode} A reference to this node.\n\t */\n\ttoReadOnly() {\n\n\t\treturn this.setAccess( NodeAccess.READ_ONLY );\n\n\t}\n\n\t/**\n\t * Defines whether the node is atomic or not.\n\t *\n\t * @param {boolean} value - The atomic flag.\n\t * @return {StorageBufferNode} A reference to this node.\n\t */\n\tsetAtomic( value ) {\n\n\t\tthis.isAtomic = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Convenience method for making this node atomic.\n\t *\n\t * @return {StorageBufferNode} A reference to this node.\n\t */\n\ttoAtomic() {\n\n\t\treturn this.setAtomic( true );\n\n\t}\n\n\t/**\n\t * Returns attribute data for this storage buffer node.\n\t *\n\t * @return {{attribute: BufferAttributeNode, varying: VaryingNode}} The attribute data.\n\t */\n\tgetAttributeData() {\n\n\t\tif ( this._attribute === null ) {\n\n\t\t\tthis._attribute = bufferAttribute( this.value );\n\t\t\tthis._varying = varying( this._attribute );\n\n\t\t}\n\n\t\treturn {\n\t\t\tattribute: this._attribute,\n\t\t\tvarying: this._varying\n\t\t};\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type from the availability of storage buffers\n\t * and the attribute data.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.structTypeNode !== null ) {\n\n\t\t\treturn this.structTypeNode.getNodeType( builder );\n\n\t\t}\n\n\t\tif ( builder.isAvailable( 'storageBuffer' ) || builder.isAvailable( 'indirectStorageBuffer' ) ) {\n\n\t\t\treturn super.getNodeType( builder );\n\n\t\t}\n\n\t\tconst { attribute } = this.getAttributeData();\n\n\t\treturn attribute.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the storage buffer node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( builder ) {\n\n\t\tif ( this.structTypeNode !== null ) this.structTypeNode.build( builder );\n\n\t\tif ( builder.isAvailable( 'storageBuffer' ) || builder.isAvailable( 'indirectStorageBuffer' ) ) {\n\n\t\t\treturn super.generate( builder );\n\n\t\t}\n\n\t\tconst { attribute, varying } = this.getAttributeData();\n\n\t\tconst output = varying.build( builder );\n\n\t\tbuilder.registerTransform( output, attribute );\n\n\t\treturn output;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a storage buffer node.\n *\n * @tsl\n * @function\n * @param {StorageBufferAttribute|StorageInstancedBufferAttribute|BufferAttribute} value - The buffer data.\n * @param {?(string|Struct)} [type=null] - The buffer type (e.g. `'vec3'`).\n * @param {number} [count=0] - The buffer count.\n * @returns {StorageBufferNode}\n */\nconst storage = ( value, type = null, count = 0 ) => nodeObject( new StorageBufferNode( value, type, count ) );\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use `storage().setPBO( true )` instead.\n *\n * @param {StorageBufferAttribute|StorageInstancedBufferAttribute|BufferAttribute} value - The buffer data.\n * @param {?string} type - The buffer type (e.g. `'vec3'`).\n * @param {number} count - The buffer count.\n * @returns {StorageBufferNode}\n */\nconst storageObject = ( value, type, count ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"storageObject()\" is deprecated. Use \"storage().setPBO( true )\" instead.' );\n\n\treturn storage( value, type, count ).setPBO( true );\n\n};\n\nconst _frameId = new WeakMap();\n\n/**\n * This node implements the vertex transformation shader logic which is required\n * for skinning/skeletal animation.\n *\n * @augments Node\n */\nclass SkinningNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SkinningNode';\n\n\t}\n\n\t/**\n\t * Constructs a new skinning node.\n\t *\n\t * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\n\t */\n\tconstructor( skinnedMesh ) {\n\n\t\tsuper( 'void' );\n\n\t\t/**\n\t\t * The skinned mesh.\n\t\t *\n\t\t * @type {SkinnedMesh}\n\t\t */\n\t\tthis.skinnedMesh = skinnedMesh;\n\n\t\t/**\n\t\t * The update type overwritten since skinning nodes are updated per object.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\t//\n\n\t\t/**\n\t\t * The skin index attribute.\n\t\t *\n\t\t * @type {AttributeNode}\n\t\t */\n\t\tthis.skinIndexNode = attribute( 'skinIndex', 'uvec4' );\n\n\t\t/**\n\t\t * The skin weight attribute.\n\t\t *\n\t\t * @type {AttributeNode}\n\t\t */\n\t\tthis.skinWeightNode = attribute( 'skinWeight', 'vec4' );\n\n\t\t/**\n\t\t * The bind matrix node.\n\t\t *\n\t\t * @type {Node<mat4>}\n\t\t */\n\t\tthis.bindMatrixNode = reference( 'bindMatrix', 'mat4' );\n\n\t\t/**\n\t\t * The bind matrix inverse node.\n\t\t *\n\t\t * @type {Node<mat4>}\n\t\t */\n\t\tthis.bindMatrixInverseNode = reference( 'bindMatrixInverse', 'mat4' );\n\n\t\t/**\n\t\t * The bind matrices as a uniform buffer node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.boneMatricesNode = referenceBuffer( 'skeleton.boneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );\n\n\t\t/**\n\t\t * The current vertex position in local space.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.positionNode = positionLocal;\n\n\t\t/**\n\t\t * The result of vertex position in local space.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.toPositionNode = positionLocal;\n\n\t\t/**\n\t\t * The previous bind matrices as a uniform buffer node.\n\t\t * Required for computing motion vectors.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.previousBoneMatricesNode = null;\n\n\t}\n\n\t/**\n\t * Transforms the given vertex position via skinning.\n\t *\n\t * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices\n\t * @param {Node<vec3>} [position=this.positionNode] - The vertex position in local space.\n\t * @return {Node<vec3>} The transformed vertex position.\n\t */\n\tgetSkinnedPosition( boneMatrices = this.boneMatricesNode, position = this.positionNode ) {\n\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;\n\n\t\tconst boneMatX = boneMatrices.element( skinIndexNode.x );\n\t\tconst boneMatY = boneMatrices.element( skinIndexNode.y );\n\t\tconst boneMatZ = boneMatrices.element( skinIndexNode.z );\n\t\tconst boneMatW = boneMatrices.element( skinIndexNode.w );\n\n\t\t// POSITION\n\n\t\tconst skinVertex = bindMatrixNode.mul( position );\n\n\t\tconst skinned = add(\n\t\t\tboneMatX.mul( skinWeightNode.x ).mul( skinVertex ),\n\t\t\tboneMatY.mul( skinWeightNode.y ).mul( skinVertex ),\n\t\t\tboneMatZ.mul( skinWeightNode.z ).mul( skinVertex ),\n\t\t\tboneMatW.mul( skinWeightNode.w ).mul( skinVertex )\n\t\t);\n\n\t\treturn bindMatrixInverseNode.mul( skinned ).xyz;\n\n\t}\n\n\t/**\n\t * Transforms the given vertex normal via skinning.\n\t *\n\t * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices\n\t * @param {Node<vec3>} [normal=normalLocal] - The vertex normal in local space.\n\t * @return {Node<vec3>} The transformed vertex normal.\n\t */\n\tgetSkinnedNormal( boneMatrices = this.boneMatricesNode, normal = normalLocal ) {\n\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;\n\n\t\tconst boneMatX = boneMatrices.element( skinIndexNode.x );\n\t\tconst boneMatY = boneMatrices.element( skinIndexNode.y );\n\t\tconst boneMatZ = boneMatrices.element( skinIndexNode.z );\n\t\tconst boneMatW = boneMatrices.element( skinIndexNode.w );\n\n\t\t// NORMAL\n\n\t\tlet skinMatrix = add(\n\t\t\tskinWeightNode.x.mul( boneMatX ),\n\t\t\tskinWeightNode.y.mul( boneMatY ),\n\t\t\tskinWeightNode.z.mul( boneMatZ ),\n\t\t\tskinWeightNode.w.mul( boneMatW )\n\t\t);\n\n\t\tskinMatrix = bindMatrixInverseNode.mul( skinMatrix ).mul( bindMatrixNode );\n\n\t\treturn skinMatrix.transformDirection( normal ).xyz;\n\n\t}\n\n\t/**\n\t * Computes the transformed/skinned vertex position of the previous frame.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec3>} The skinned position from the previous frame.\n\t */\n\tgetPreviousSkinnedPosition( builder ) {\n\n\t\tconst skinnedMesh = builder.object;\n\n\t\tif ( this.previousBoneMatricesNode === null ) {\n\n\t\t\tskinnedMesh.skeleton.previousBoneMatrices = new Float32Array( skinnedMesh.skeleton.boneMatrices );\n\n\t\t\tthis.previousBoneMatricesNode = referenceBuffer( 'skeleton.previousBoneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );\n\n\t\t}\n\n\t\treturn this.getSkinnedPosition( this.previousBoneMatricesNode, positionPrevious );\n\n\t}\n\n\t/**\n\t * Returns `true` if bone matrices from the previous frame are required. Relevant\n\t * when computing motion vectors with {@link VelocityNode}.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether bone matrices from the previous frame are required or not.\n\t */\n\tneedsPreviousBoneMatrices( builder ) {\n\n\t\tconst mrt = builder.renderer.getMRT();\n\n\t\treturn ( mrt && mrt.has( 'velocity' ) ) || getDataFromObject( builder.object ).useVelocity === true;\n\n\t}\n\n\t/**\n\t * Setups the skinning node by assigning the transformed vertex data to predefined node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec3>} The transformed vertex position.\n\t */\n\tsetup( builder ) {\n\n\t\tif ( this.needsPreviousBoneMatrices( builder ) ) {\n\n\t\t\tpositionPrevious.assign( this.getPreviousSkinnedPosition( builder ) );\n\n\t\t}\n\n\t\tconst skinPosition = this.getSkinnedPosition();\n\n\t\tif ( this.toPositionNode ) this.toPositionNode.assign( skinPosition );\n\n\t\t//\n\n\t\tif ( builder.hasGeometryAttribute( 'normal' ) ) {\n\n\t\t\tconst skinNormal = this.getSkinnedNormal();\n\n\t\t\tnormalLocal.assign( skinNormal );\n\n\t\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\n\n\t\t\t\ttangentLocal.assign( skinNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skinPosition;\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the skinning node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} output - The current output.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( builder, output ) {\n\n\t\tif ( output !== 'void' ) {\n\n\t\t\treturn super.generate( builder, output );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the state of the skinned mesh by updating the skeleton once per frame.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tconst skeleton = frame.object && frame.object.skeleton ? frame.object.skeleton : this.skinnedMesh.skeleton;\n\n\t\tif ( _frameId.get( skeleton ) === frame.frameId ) return;\n\n\t\t_frameId.set( skeleton, frame.frameId );\n\n\t\tif ( this.previousBoneMatricesNode !== null ) skeleton.previousBoneMatrices.set( skeleton.boneMatrices );\n\n\t\tskeleton.update();\n\n\t}\n\n}\n\n/**\n * TSL function for creating a skinning node.\n *\n * @tsl\n * @function\n * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\n * @returns {SkinningNode}\n */\nconst skinning = ( skinnedMesh ) => nodeObject( new SkinningNode( skinnedMesh ) );\n\n/**\n * TSL function for computing skinning.\n *\n * @tsl\n * @function\n * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\n * @param {Node<vec3>} [toPosition=null] - The target position.\n * @returns {SkinningNode}\n */\nconst computeSkinning = ( skinnedMesh, toPosition = null ) => {\n\n\tconst node = new SkinningNode( skinnedMesh );\n\tnode.positionNode = storage( new InstancedBufferAttribute( skinnedMesh.geometry.getAttribute( 'position' ).array, 3 ), 'vec3' ).setPBO( true ).toReadOnly().element( instanceIndex ).toVar();\n\tnode.skinIndexNode = storage( new InstancedBufferAttribute( new Uint32Array( skinnedMesh.geometry.getAttribute( 'skinIndex' ).array ), 4 ), 'uvec4' ).setPBO( true ).toReadOnly().element( instanceIndex ).toVar();\n\tnode.skinWeightNode = storage( new InstancedBufferAttribute( skinnedMesh.geometry.getAttribute( 'skinWeight' ).array, 4 ), 'vec4' ).setPBO( true ).toReadOnly().element( instanceIndex ).toVar();\n\tnode.bindMatrixNode = uniform( skinnedMesh.bindMatrix, 'mat4' );\n\tnode.bindMatrixInverseNode = uniform( skinnedMesh.bindMatrixInverse, 'mat4' );\n\tnode.boneMatricesNode = buffer( skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length );\n\tnode.toPositionNode = toPosition;\n\n\treturn nodeObject( node );\n\n};\n\n/**\n * This module offers a variety of ways to implement loops in TSL. In it's basic form it's:\n * ```js\n * Loop( count, ( { i } ) => {\n *\n * } );\n * ```\n * However, it is also possible to define a start and end ranges, data types and loop conditions:\n * ```js\n * Loop( { start: int( 0 ), end: int( 10 ), type: 'int', condition: '<' }, ( { i } ) => {\n *\n * } );\n *```\n * Nested loops can be defined in a compacted form:\n * ```js\n * Loop( 10, 5, ( { i, j } ) => {\n *\n * } );\n * ```\n * Loops that should run backwards can be defined like so:\n * ```js\n * Loop( { start: 10 }, () => {} );\n * ```\n * It is possible to execute with boolean values, similar to the `while` syntax.\n * ```js\n * const value = float( 0 ).toVar();\n *\n * Loop( value.lessThan( 10 ), () => {\n *\n * \tvalue.addAssign( 1 );\n *\n * } );\n * ```\n * The module also provides `Break()` and `Continue()` TSL expression for loop control.\n * @augments Node\n */\nclass LoopNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'LoopNode';\n\n\t}\n\n\t/**\n\t * Constructs a new loop node.\n\t *\n\t * @param {Array<any>} params - Depending on the loop type, array holds different parameterization values for the loop.\n\t */\n\tconstructor( params = [] ) {\n\n\t\tsuper();\n\n\t\tthis.params = params;\n\n\t}\n\n\t/**\n\t * Returns a loop variable name based on an index. The pattern is\n\t * `0` = `i`, `1`= `j`, `2`= `k` and so on.\n\t *\n\t * @param {number} index - The index.\n\t * @return {string} The loop variable name.\n\t */\n\tgetVarName( index ) {\n\n\t\treturn String.fromCharCode( 'i'.charCodeAt( 0 ) + index );\n\n\t}\n\n\t/**\n\t * Returns properties about this node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Object} The node properties.\n\t */\n\tgetProperties( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tif ( properties.stackNode !== undefined ) return properties;\n\n\t\t//\n\n\t\tconst inputs = {};\n\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\n\n\t\t\tconst param = this.params[ i ];\n\n\t\t\tconst name = ( param.isNode !== true && param.name ) || this.getVarName( i );\n\t\t\tconst type = ( param.isNode !== true && param.type ) || 'int';\n\n\t\t\tinputs[ name ] = expression( name, type );\n\n\t\t}\n\n\t\tconst stack = builder.addStack(); // TODO: cache() it\n\n\t\tproperties.returnsNode = this.params[ this.params.length - 1 ]( inputs, builder );\n\t\tproperties.stackNode = stack;\n\n\t\tconst baseParam = this.params[ 0 ];\n\n\t\tif ( baseParam.isNode !== true && typeof baseParam.update === 'function' ) {\n\n\t\t\tproperties.updateNode = Fn( this.params[ 0 ].update )( inputs );\n\n\t\t}\n\n\t\tbuilder.removeStack();\n\n\t\treturn properties;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred based on the loop configuration.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tconst { returnsNode } = this.getProperties( builder );\n\n\t\treturn returnsNode ? returnsNode.getNodeType( builder ) : 'void';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// setup properties\n\n\t\tthis.getProperties( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst properties = this.getProperties( builder );\n\n\t\tconst params = this.params;\n\t\tconst stackNode = properties.stackNode;\n\n\t\tfor ( let i = 0, l = params.length - 1; i < l; i ++ ) {\n\n\t\t\tconst param = params[ i ];\n\n\t\t\tlet isWhile = false, start = null, end = null, name = null, type = null, condition = null, update = null;\n\n\t\t\tif ( param.isNode ) {\n\n\t\t\t\tif ( param.getNodeType( builder ) === 'bool' ) {\n\n\t\t\t\t\tisWhile = true;\n\t\t\t\t\ttype = 'bool';\n\t\t\t\t\tend = param.build( builder, type );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttype = 'int';\n\t\t\t\t\tname = this.getVarName( i );\n\t\t\t\t\tstart = '0';\n\t\t\t\t\tend = param.build( builder, type );\n\t\t\t\t\tcondition = '<';\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = param.type || 'int';\n\t\t\t\tname = param.name || this.getVarName( i );\n\t\t\t\tstart = param.start;\n\t\t\t\tend = param.end;\n\t\t\t\tcondition = param.condition;\n\t\t\t\tupdate = param.update;\n\n\t\t\t\tif ( typeof start === 'number' ) start = builder.generateConst( type, start );\n\t\t\t\telse if ( start && start.isNode ) start = start.build( builder, type );\n\n\t\t\t\tif ( typeof end === 'number' ) end = builder.generateConst( type, end );\n\t\t\t\telse if ( end && end.isNode ) end = end.build( builder, type );\n\n\t\t\t\tif ( start !== undefined && end === undefined ) {\n\n\t\t\t\t\tstart = start + ' - 1';\n\t\t\t\t\tend = '0';\n\t\t\t\t\tcondition = '>=';\n\n\t\t\t\t} else if ( end !== undefined && start === undefined ) {\n\n\t\t\t\t\tstart = '0';\n\t\t\t\t\tcondition = '<';\n\n\t\t\t\t}\n\n\t\t\t\tif ( condition === undefined ) {\n\n\t\t\t\t\tif ( Number( start ) > Number( end ) ) {\n\n\t\t\t\t\t\tcondition = '>=';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcondition = '<';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet loopSnippet;\n\n\t\t\tif ( isWhile ) {\n\n\t\t\t\tloopSnippet = `while ( ${ end } )`;\n\n\t\t\t} else {\n\n\t\t\t\tconst internalParam = { start, end};\n\n\t\t\t\t//\n\n\t\t\t\tconst startSnippet = internalParam.start;\n\t\t\t\tconst endSnippet = internalParam.end;\n\n\t\t\t\tlet updateSnippet;\n\n\t\t\t\tconst deltaOperator = () => condition.includes( '<' ) ? '+=' : '-=';\n\n\t\t\t\tif ( update !== undefined && update !== null ) {\n\n\t\t\t\t\tswitch ( typeof update ) {\n\n\t\t\t\t\t\tcase 'function':\n\n\t\t\t\t\t\t\tconst flow = builder.flowStagesNode( properties.updateNode, 'void' );\n\t\t\t\t\t\t\tconst snippet = flow.code.replace( /\\t|;/g, '' );\n\n\t\t\t\t\t\t\tupdateSnippet = snippet;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'number':\n\n\t\t\t\t\t\t\tupdateSnippet = name + ' ' + deltaOperator() + ' ' + builder.generateConst( type, update );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'string':\n\n\t\t\t\t\t\t\tupdateSnippet = name + ' ' + update;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tif ( update.isNode ) {\n\n\t\t\t\t\t\t\t\tupdateSnippet = name + ' ' + deltaOperator() + ' ' + update.build( builder );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.TSL: \\'Loop( { update: ... } )\\' is not a function, string or number.' );\n\n\t\t\t\t\t\t\t\tupdateSnippet = 'break /* invalid update */';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( type === 'int' || type === 'uint' ) {\n\n\t\t\t\t\t\tupdate = condition.includes( '<' ) ? '++' : '--';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tupdate = deltaOperator() + ' 1.';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tupdateSnippet = name + ' ' + update;\n\n\t\t\t\t}\n\n\t\t\t\tconst declarationSnippet = builder.getVar( type, name ) + ' = ' + startSnippet;\n\t\t\t\tconst conditionalSnippet = name + ' ' + condition + ' ' + endSnippet;\n\n\t\t\t\tloopSnippet = `for ( ${ declarationSnippet }; ${ conditionalSnippet }; ${ updateSnippet } )`;\n\n\t\t\t}\n\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '\\n' : '' ) + builder.tab + loopSnippet + ' {\\n\\n' ).addFlowTab();\n\n\t\t}\n\n\t\tconst stackSnippet = stackNode.build( builder, 'void' );\n\n\t\tconst returnsSnippet = properties.returnsNode ? properties.returnsNode.build( builder ) : '';\n\n\t\tbuilder.removeFlowTab().addFlowCode( '\\n' + builder.tab + stackSnippet );\n\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\n\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '' : builder.tab ) + '}\\n\\n' ).removeFlowTab();\n\n\t\t}\n\n\t\tbuilder.addFlowTab();\n\n\t\treturn returnsSnippet;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a loop node.\n *\n * @tsl\n * @function\n * @param {...any} params - A list of parameters.\n * @returns {LoopNode}\n */\nconst Loop = ( ...params ) => nodeObject( new LoopNode( nodeArray( params, 'int' ) ) ).toStack();\n\n/**\n * TSL function for creating a `Continue()` expression.\n *\n * @tsl\n * @function\n * @returns {ExpressionNode}\n */\nconst Continue = () => expression( 'continue' ).toStack();\n\n/**\n * TSL function for creating a `Break()` expression.\n *\n * @tsl\n * @function\n * @returns {ExpressionNode}\n */\nconst Break = () => expression( 'break' ).toStack();\n\n// Deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r168. Use {@link Loop} instead.\n *\n * @param {...any} params\n * @returns {LoopNode}\n */\nconst loop = ( ...params ) => { // @deprecated, r168\n\n\tconsole.warn( 'THREE.TSL: loop() has been renamed to Loop().' );\n\treturn Loop( ...params );\n\n};\n\nconst _morphTextures = /*@__PURE__*/ new WeakMap();\nconst _morphVec4 = /*@__PURE__*/ new Vector4();\n\nconst getMorph = /*@__PURE__*/ Fn( ( { bufferMap, influence, stride, width, depth, offset } ) => {\n\n\tconst texelIndex = int( vertexIndex ).mul( stride ).add( offset );\n\n\tconst y = texelIndex.div( width );\n\tconst x = texelIndex.sub( y.mul( width ) );\n\n\tconst bufferAttrib = textureLoad( bufferMap, ivec2( x, y ) ).depth( depth ).xyz;\n\n\treturn bufferAttrib.mul( influence );\n\n} );\n\nfunction getEntry( geometry ) {\n\n\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t// into an array of data textures. Each layer represents a single morph target.\n\n\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\tlet entry = _morphTextures.get( geometry );\n\n\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\tlet vertexDataCount = 0;\n\n\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\tlet height = 1;\n\n\t\tconst maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'\n\n\t\tif ( width > maxTextureSize ) {\n\n\t\t\theight = Math.ceil( width / maxTextureSize );\n\t\t\twidth = maxTextureSize;\n\n\t\t}\n\n\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\tconst bufferTexture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\tbufferTexture.type = FloatType;\n\t\tbufferTexture.needsUpdate = true;\n\n\t\t// fill buffer\n\n\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\tbuffer[ offset + stride + 0 ] = _morphVec4.x;\n\t\t\t\t\tbuffer[ offset + stride + 1 ] = _morphVec4.y;\n\t\t\t\t\tbuffer[ offset + stride + 2 ] = _morphVec4.z;\n\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\tbuffer[ offset + stride + 4 ] = _morphVec4.x;\n\t\t\t\t\tbuffer[ offset + stride + 5 ] = _morphVec4.y;\n\t\t\t\t\tbuffer[ offset + stride + 6 ] = _morphVec4.z;\n\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\tbuffer[ offset + stride + 8 ] = _morphVec4.x;\n\t\t\t\t\tbuffer[ offset + stride + 9 ] = _morphVec4.y;\n\t\t\t\t\tbuffer[ offset + stride + 10 ] = _morphVec4.z;\n\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? _morphVec4.w : 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tentry = {\n\t\t\tcount: morphTargetsCount,\n\t\t\ttexture: bufferTexture,\n\t\t\tstride: vertexDataCount,\n\t\t\tsize: new Vector2( width, height )\n\t\t};\n\n\t\t_morphTextures.set( geometry, entry );\n\n\t\tfunction disposeTexture() {\n\n\t\t\tbufferTexture.dispose();\n\n\t\t\t_morphTextures.delete( geometry );\n\n\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t}\n\n\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t}\n\n\treturn entry;\n\n}\n\n/**\n * This node implements the vertex transformation shader logic which is required\n * for morph target animation.\n *\n * @augments Node\n */\nclass MorphNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'MorphNode';\n\n\t}\n\n\t/**\n\t * Constructs a new morph node.\n\t *\n\t * @param {Mesh} mesh - The mesh holding the morph targets.\n\t */\n\tconstructor( mesh ) {\n\n\t\tsuper( 'void' );\n\n\t\t/**\n\t\t * The mesh holding the morph targets.\n\t\t *\n\t\t * @type {Mesh}\n\t\t */\n\t\tthis.mesh = mesh;\n\n\t\t/**\n\t\t * A uniform node which represents the morph base influence value.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.morphBaseInfluence = uniform( 1 );\n\n\t\t/**\n\t\t * The update type overwritten since morph nodes are updated per object.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t}\n\n\t/**\n\t * Setups the morph node by assigning the transformed vertex data to predefined node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tconst { geometry } = builder;\n\n\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\tconst hasMorphNormals = geometry.hasAttribute( 'normal' ) && geometry.morphAttributes.normal !== undefined;\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t// nodes\n\n\t\tconst { texture: bufferMap, stride, size } = getEntry( geometry );\n\n\t\tif ( hasMorphPosition === true ) positionLocal.mulAssign( this.morphBaseInfluence );\n\t\tif ( hasMorphNormals === true ) normalLocal.mulAssign( this.morphBaseInfluence );\n\n\t\tconst width = int( size.width );\n\n\t\tLoop( morphTargetsCount, ( { i } ) => {\n\n\t\t\tconst influence = float( 0 ).toVar();\n\n\t\t\tif ( this.mesh.count > 1 && ( this.mesh.morphTexture !== null && this.mesh.morphTexture !== undefined ) ) {\n\n\t\t\t\tinfluence.assign( textureLoad( this.mesh.morphTexture, ivec2( int( i ).add( 1 ), int( instanceIndex ) ) ).r );\n\n\t\t\t} else {\n\n\t\t\t\tinfluence.assign( reference( 'morphTargetInfluences', 'float' ).element( i ).toVar() );\n\n\t\t\t}\n\n\t\t\tIf( influence.notEqual( 0 ), () => {\n\n\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\tpositionLocal.addAssign( getMorph( {\n\t\t\t\t\t\tbufferMap,\n\t\t\t\t\t\tinfluence,\n\t\t\t\t\t\tstride,\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\tdepth: i,\n\t\t\t\t\t\toffset: int( 0 )\n\t\t\t\t\t} ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\tnormalLocal.addAssign( getMorph( {\n\t\t\t\t\t\tbufferMap,\n\t\t\t\t\t\tinfluence,\n\t\t\t\t\t\tstride,\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\tdepth: i,\n\t\t\t\t\t\toffset: int( 1 )\n\t\t\t\t\t} ) );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Updates the state of the morphed mesh by updating the base influence.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdate( /*frame*/ ) {\n\n\t\tconst morphBaseInfluence = this.morphBaseInfluence;\n\n\t\tif ( this.mesh.geometry.morphTargetsRelative ) {\n\n\t\t\tmorphBaseInfluence.value = 1;\n\n\t\t} else {\n\n\t\t\tmorphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce( ( a, b ) => a + b, 0 );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a morph node.\n *\n * @tsl\n * @function\n * @param {Mesh} mesh - The mesh holding the morph targets.\n * @returns {MorphNode}\n */\nconst morphReference = /*@__PURE__*/ nodeProxy( MorphNode ).setParameterLength( 1 );\n\n/**\n * Base class for lighting nodes.\n *\n * @augments Node\n */\nclass LightingNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'LightingNode';\n\n\t}\n\n\t/**\n\t * Constructs a new lighting node.\n\t */\n\tconstructor() {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLightingNode = true;\n\n\t}\n\n}\n\n/**\n * A generic class that can be used by nodes which contribute\n * ambient occlusion to the scene. E.g. an ambient occlusion map\n * node can be used as input for this module. Used in {@link NodeMaterial}.\n *\n * @augments LightingNode\n */\nclass AONode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'AONode';\n\n\t}\n\n\t/**\n\t * Constructs a new AO node.\n\t *\n\t * @param {?Node<float>} [aoNode=null] - The ambient occlusion node.\n\t */\n\tconstructor( aoNode = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The ambient occlusion node.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.aoNode = aoNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.context.ambientOcclusion.mulAssign( this.aoNode );\n\n\t}\n\n}\n\n/**\n * `LightingContextNode` represents an extension of the {@link ContextNode} module\n * by adding lighting specific context data. It represents the runtime context of\n * {@link LightsNode}.\n *\n * @augments ContextNode\n */\nclass LightingContextNode extends ContextNode {\n\n\tstatic get type() {\n\n\t\treturn 'LightingContextNode';\n\n\t}\n\n\t/**\n\t * Constructs a new lighting context node.\n\t *\n\t * @param {LightsNode} lightsNode - The lights node.\n\t * @param {?LightingModel} [lightingModel=null] - The current lighting model.\n\t * @param {?Node<vec3>} [backdropNode=null] - A backdrop node.\n\t * @param {?Node<float>} [backdropAlphaNode=null] - A backdrop alpha node.\n\t */\n\tconstructor( lightsNode, lightingModel = null, backdropNode = null, backdropAlphaNode = null ) {\n\n\t\tsuper( lightsNode );\n\n\t\t/**\n\t\t * The current lighting model.\n\t\t *\n\t\t * @type {?LightingModel}\n\t\t * @default null\n\t\t */\n\t\tthis.lightingModel = lightingModel;\n\n\t\t/**\n\t\t * A backdrop node.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.backdropNode = backdropNode;\n\n\t\t/**\n\t\t * A backdrop alpha node.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.backdropAlphaNode = backdropAlphaNode;\n\n\t\tthis._value = null;\n\n\t}\n\n\t/**\n\t * Returns a lighting context object.\n\t *\n\t * @return {{\n\t * radiance: Node<vec3>,\n\t * irradiance: Node<vec3>,\n\t * iblIrradiance: Node<vec3>,\n\t * ambientOcclusion: Node<float>,\n\t * reflectedLight: {directDiffuse: Node<vec3>, directSpecular: Node<vec3>, indirectDiffuse: Node<vec3>, indirectSpecular: Node<vec3>},\n\t * backdrop: Node<vec3>,\n\t * backdropAlpha: Node<float>\n\t * }} The lighting context object.\n\t */\n\tgetContext() {\n\n\t\tconst { backdropNode, backdropAlphaNode } = this;\n\n\t\tconst directDiffuse = vec3().toVar( 'directDiffuse' ),\n\t\t\tdirectSpecular = vec3().toVar( 'directSpecular' ),\n\t\t\tindirectDiffuse = vec3().toVar( 'indirectDiffuse' ),\n\t\t\tindirectSpecular = vec3().toVar( 'indirectSpecular' );\n\n\t\tconst reflectedLight = {\n\t\t\tdirectDiffuse,\n\t\t\tdirectSpecular,\n\t\t\tindirectDiffuse,\n\t\t\tindirectSpecular\n\t\t};\n\n\t\tconst context = {\n\t\t\tradiance: vec3().toVar( 'radiance' ),\n\t\t\tirradiance: vec3().toVar( 'irradiance' ),\n\t\t\tiblIrradiance: vec3().toVar( 'iblIrradiance' ),\n\t\t\tambientOcclusion: float( 1 ).toVar( 'ambientOcclusion' ),\n\t\t\treflectedLight,\n\t\t\tbackdrop: backdropNode,\n\t\t\tbackdropAlpha: backdropAlphaNode\n\t\t};\n\n\t\treturn context;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.value = this._value || ( this._value = this.getContext() );\n\t\tthis.value.lightingModel = this.lightingModel || builder.context.lightingModel;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n}\n\nconst lightingContext = /*@__PURE__*/ nodeProxy( LightingContextNode );\n\n/**\n * A generic class that can be used by nodes which contribute\n * irradiance to the scene. E.g. a light map node can be used\n * as input for this module. Used in {@link NodeMaterial}.\n *\n * @augments LightingNode\n */\nclass IrradianceNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'IrradianceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new irradiance node.\n\t *\n\t * @param {Node<vec3>} node - A node contributing irradiance.\n\t */\n\tconstructor( node ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * A node contributing irradiance.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.node = node;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.context.irradiance.addAssign( this.node );\n\n\t}\n\n}\n\nlet screenSizeVec, viewportVec;\n\n/**\n * This node provides a collection of screen related metrics.\n * Depending on {@link ScreenNode#scope}, the nodes can represent\n * resolution or viewport data as well as fragment or uv coordinates.\n *\n * @augments Node\n */\nclass ScreenNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ScreenNode';\n\n\t}\n\n\t/**\n\t * Constructs a new screen node.\n\t *\n\t * @param {('coordinate'|'viewport'|'size'|'uv')} scope - The node's scope.\n\t */\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node represents different metric depending on which scope is selected.\n\t\t *\n\t\t * - `ScreenNode.COORDINATE`: Window-relative coordinates of the current fragment according to WebGPU standards.\n\t\t * - `ScreenNode.VIEWPORT`: The current viewport defined as a four-dimensional vector.\n\t\t * - `ScreenNode.SIZE`: The dimensions of the current bound framebuffer.\n\t\t * - `ScreenNode.UV`: Normalized coordinates.\n\t\t *\n\t\t * @type {('coordinate'|'viewport'|'size'|'uv')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isViewportNode = true;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type depends on the selected scope.\n\t *\n\t * @return {('vec2'|'vec4')} The node type.\n\t */\n\tgetNodeType() {\n\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) return 'vec4';\n\t\telse return 'vec2';\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node's update type depends on the selected scope.\n\t *\n\t * @return {NodeUpdateType} The update type.\n\t */\n\tgetUpdateType() {\n\n\t\tlet updateType = NodeUpdateType.NONE;\n\n\t\tif ( this.scope === ScreenNode.SIZE || this.scope === ScreenNode.VIEWPORT ) {\n\n\t\t\tupdateType = NodeUpdateType.RENDER;\n\n\t\t}\n\n\t\tthis.updateType = updateType;\n\n\t\treturn updateType;\n\n\t}\n\n\t/**\n\t * `ScreenNode` implements {@link Node#update} to retrieve viewport and size information\n\t * from the current renderer.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( { renderer } ) {\n\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) {\n\n\t\t\tif ( renderTarget !== null ) {\n\n\t\t\t\tviewportVec.copy( renderTarget.viewport );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getViewport( viewportVec );\n\n\t\t\t\tviewportVec.multiplyScalar( renderer.getPixelRatio() );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( renderTarget !== null ) {\n\n\t\t\t\tscreenSizeVec.width = renderTarget.width;\n\t\t\t\tscreenSizeVec.height = renderTarget.height;\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getDrawingBufferSize( screenSizeVec );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetup( /*builder*/ ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet output = null;\n\n\t\tif ( scope === ScreenNode.SIZE ) {\n\n\t\t\toutput = uniform( screenSizeVec || ( screenSizeVec = new Vector2() ) );\n\n\t\t} else if ( scope === ScreenNode.VIEWPORT ) {\n\n\t\t\toutput = uniform( viewportVec || ( viewportVec = new Vector4() ) );\n\n\t\t} else {\n\n\t\t\toutput = vec2( screenCoordinate.div( screenSize ) );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tif ( this.scope === ScreenNode.COORDINATE ) {\n\n\t\t\tlet coord = builder.getFragCoord();\n\n\t\t\tif ( builder.isFlipY() ) {\n\n\t\t\t\t// follow webgpu standards\n\n\t\t\t\tconst size = builder.getNodeProperties( screenSize ).outputNode.build( builder );\n\n\t\t\t\tcoord = `${ builder.getType( 'vec2' ) }( ${ coord }.x, ${ size }.y - ${ coord }.y )`;\n\n\t\t\t}\n\n\t\t\treturn coord;\n\n\t\t}\n\n\t\treturn super.generate( builder );\n\n\t}\n\n}\n\nScreenNode.COORDINATE = 'coordinate';\nScreenNode.VIEWPORT = 'viewport';\nScreenNode.SIZE = 'size';\nScreenNode.UV = 'uv';\n\n// Screen\n\n/**\n * TSL object that represents normalized screen coordinates, unitless in `[0, 1]`.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nconst screenUV = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.UV );\n\n/**\n * TSL object that represents the screen resolution in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nconst screenSize = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.SIZE );\n\n/**\n * TSL object that represents the current `x`/`y` pixel position on the screen in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nconst screenCoordinate = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.COORDINATE );\n\n// Viewport\n\n/**\n * TSL object that represents the viewport rectangle as `x`, `y`, `width` and `height` in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec4>}\n */\nconst viewport = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.VIEWPORT );\n\n/**\n * TSL object that represents the viewport resolution in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nconst viewportSize = viewport.zw;\n\n/**\n * TSL object that represents the current `x`/`y` pixel position on the viewport in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nconst viewportCoordinate = /*@__PURE__*/ screenCoordinate.sub( viewport.xy );\n\n/**\n * TSL object that represents normalized viewport coordinates, unitless in `[0, 1]`.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nconst viewportUV = /*@__PURE__*/ viewportCoordinate.div( viewportSize );\n\n// Deprecated\n\n/**\n * @deprecated since r169. Use {@link screenSize} instead.\n */\nconst viewportResolution = /*@__PURE__*/ ( Fn( () => { // @deprecated, r169\n\n\tconsole.warn( 'THREE.TSL: \"viewportResolution\" is deprecated. Use \"screenSize\" instead.' );\n\n\treturn screenSize;\n\n}, 'vec2' ).once() )();\n\n/**\n * @tsl\n * @deprecated since r168. Use {@link screenUV} instead.\n * @type {Node<vec2>}\n */\nconst viewportTopLeft = /*@__PURE__*/ ( Fn( () => { // @deprecated, r168\n\n\tconsole.warn( 'THREE.TSL: \"viewportTopLeft\" is deprecated. Use \"screenUV\" instead.' );\n\n\treturn screenUV;\n\n}, 'vec2' ).once() )();\n\n/**\n * @tsl\n * @deprecated since r168. Use `screenUV.flipY()` instead.\n * @type {Node<vec2>}\n */\nconst viewportBottomLeft = /*@__PURE__*/ ( Fn( () => { // @deprecated, r168\n\n\tconsole.warn( 'THREE.TSL: \"viewportBottomLeft\" is deprecated. Use \"screenUV.flipY()\" instead.' );\n\n\treturn screenUV.flipY();\n\n}, 'vec2' ).once() )();\n\nconst _size$4 = /*@__PURE__*/ new Vector2();\n\n/**\n * A special type of texture node which represents the data of the current viewport\n * as a texture. The module extracts data from the current bound framebuffer with\n * a copy operation so no extra render pass is required to produce the texture data\n * (which is good for performance). `ViewportTextureNode` can be used as an input for a\n * variety of effects like refractive or transmissive materials.\n *\n * @augments TextureNode\n */\nclass ViewportTextureNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'ViewportTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new viewport texture node.\n\t *\n\t * @param {Node} [uvNode=screenUV] - The uv node.\n\t * @param {?Node} [levelNode=null] - The level node.\n\t * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\n\t */\n\tconstructor( uvNode = screenUV, levelNode = null, framebufferTexture = null ) {\n\n\t\tif ( framebufferTexture === null ) {\n\n\t\t\tframebufferTexture = new FramebufferTexture();\n\t\t\tframebufferTexture.minFilter = LinearMipmapLinearFilter;\n\n\t\t}\n\n\t\tsuper( framebufferTexture, uvNode, levelNode );\n\n\t\t/**\n\t\t * Whether to generate mipmaps or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isOutputTextureNode = true;\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node renders the\n\t\t * scene once per frame in its {@link ViewportTextureNode#updateBefore} method.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst renderer = frame.renderer;\n\t\trenderer.getDrawingBufferSize( _size$4 );\n\n\t\t//\n\n\t\tconst framebufferTexture = this.value;\n\n\t\tif ( framebufferTexture.image.width !== _size$4.width || framebufferTexture.image.height !== _size$4.height ) {\n\n\t\t\tframebufferTexture.image.width = _size$4.width;\n\t\t\tframebufferTexture.image.height = _size$4.height;\n\t\t\tframebufferTexture.needsUpdate = true;\n\n\t\t}\n\n\t\t//\n\n\t\tconst currentGenerateMipmaps = framebufferTexture.generateMipmaps;\n\t\tframebufferTexture.generateMipmaps = this.generateMipmaps;\n\n\t\trenderer.copyFramebufferToTexture( framebufferTexture );\n\n\t\tframebufferTexture.generateMipmaps = currentGenerateMipmaps;\n\n\t}\n\n\tclone() {\n\n\t\tconst viewportTextureNode = new this.constructor( this.uvNode, this.levelNode, this.value );\n\t\tviewportTextureNode.generateMipmaps = this.generateMipmaps;\n\n\t\treturn viewportTextureNode;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a viewport texture node.\n *\n * @tsl\n * @function\n * @param {?Node} [uvNode=screenUV] - The uv node.\n * @param {?Node} [levelNode=null] - The level node.\n * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\n * @returns {ViewportTextureNode}\n */\nconst viewportTexture = /*@__PURE__*/ nodeProxy( ViewportTextureNode ).setParameterLength( 0, 3 );\n\n/**\n * TSL function for creating a viewport texture node with enabled mipmap generation.\n *\n * @tsl\n * @function\n * @param {?Node} [uvNode=screenUV] - The uv node.\n * @param {?Node} [levelNode=null] - The level node.\n * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\n * @returns {ViewportTextureNode}\n */\nconst viewportMipTexture = /*@__PURE__*/ nodeProxy( ViewportTextureNode, null, null, { generateMipmaps: true } ).setParameterLength( 0, 3 );\n\nlet sharedDepthbuffer = null;\n\n/**\n * Represents the depth of the current viewport as a texture. This module\n * can be used in combination with viewport texture to achieve effects\n * that require depth evaluation.\n *\n * @augments ViewportTextureNode\n */\nclass ViewportDepthTextureNode extends ViewportTextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'ViewportDepthTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new viewport depth texture node.\n\t *\n\t * @param {Node} [uvNode=screenUV] - The uv node.\n\t * @param {?Node} [levelNode=null] - The level node.\n\t */\n\tconstructor( uvNode = screenUV, levelNode = null ) {\n\n\t\tif ( sharedDepthbuffer === null ) {\n\n\t\t\tsharedDepthbuffer = new DepthTexture();\n\n\t\t}\n\n\t\tsuper( uvNode, levelNode, sharedDepthbuffer );\n\n\t}\n\n}\n\n/**\n * TSL function for a viewport depth texture node.\n *\n * @tsl\n * @function\n * @param {?Node} [uvNode=screenUV] - The uv node.\n * @param {?Node} [levelNode=null] - The level node.\n * @returns {ViewportDepthTextureNode}\n */\nconst viewportDepthTexture = /*@__PURE__*/ nodeProxy( ViewportDepthTextureNode ).setParameterLength( 0, 2 );\n\n/**\n * This node offers a collection of features in context of the depth logic in the fragment shader.\n * Depending on {@link ViewportDepthNode#scope}, it can be used to define a depth value for the current\n * fragment or for depth evaluation purposes.\n *\n * @augments Node\n */\nclass ViewportDepthNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ViewportDepthNode';\n\n\t}\n\n\t/**\n\t * Constructs a new viewport depth node.\n\t *\n\t * @param {('depth'|'depthBase'|'linearDepth')} scope - The node's scope.\n\t * @param {?Node} [valueNode=null] - The value node.\n\t */\n\tconstructor( scope, valueNode = null ) {\n\n\t\tsuper( 'float' );\n\n\t\t/**\n\t\t * The node behaves differently depending on which scope is selected.\n\t\t *\n\t\t * - `ViewportDepthNode.DEPTH_BASE`: Allows to define a value for the current fragment's depth.\n\t\t * - `ViewportDepthNode.DEPTH`: Represents the depth value for the current fragment (`valueNode` is ignored).\n\t\t * - `ViewportDepthNode.LINEAR_DEPTH`: Represents the linear (orthographic) depth value of the current fragment.\n\t\t * If a `valueNode` is set, the scope can be used to convert perspective depth data to linear data.\n\t\t *\n\t\t * @type {('depth'|'depthBase'|'linearDepth')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * Can be used to define a custom depth value.\n\t\t * The property is ignored in the `ViewportDepthNode.DEPTH` scope.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.valueNode = valueNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isViewportDepthNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { scope } = this;\n\n\t\tif ( scope === ViewportDepthNode.DEPTH_BASE ) {\n\n\t\t\treturn builder.getFragDepth();\n\n\t\t}\n\n\t\treturn super.generate( builder );\n\n\t}\n\n\tsetup( { camera } ) {\n\n\t\tconst { scope } = this;\n\t\tconst value = this.valueNode;\n\n\t\tlet node = null;\n\n\t\tif ( scope === ViewportDepthNode.DEPTH_BASE ) {\n\n\t\t\tif ( value !== null ) {\n\n \t\t\t\tnode = depthBase().assign( value );\n\n\t\t\t}\n\n\t\t} else if ( scope === ViewportDepthNode.DEPTH ) {\n\n\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\tnode = viewZToPerspectiveDepth( positionView.z, cameraNear, cameraFar );\n\n\t\t\t} else {\n\n\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\n\n\t\t\t}\n\n\t\t} else if ( scope === ViewportDepthNode.LINEAR_DEPTH ) {\n\n\t\t\tif ( value !== null ) {\n\n\t\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\t\tconst viewZ = perspectiveDepthToViewZ( value, cameraNear, cameraFar );\n\n\t\t\t\t\tnode = viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode = value;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nViewportDepthNode.DEPTH_BASE = 'depthBase';\nViewportDepthNode.DEPTH = 'depth';\nViewportDepthNode.LINEAR_DEPTH = 'linearDepth';\n\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\n\n/**\n * TSL function for converting a viewZ value to an orthographic depth value.\n *\n * @tsl\n * @function\n * @param {Node<float>} viewZ - The viewZ node.\n * @param {Node<float>} near - The camera's near value.\n * @param {Node<float>} far - The camera's far value.\n * @returns {Node<float>}\n */\nconst viewZToOrthographicDepth = ( viewZ, near, far ) => viewZ.add( near ).div( near.sub( far ) );\n\n/**\n * TSL function for converting an orthographic depth value to a viewZ value.\n *\n * @tsl\n * @function\n * @param {Node<float>} depth - The orthographic depth.\n * @param {Node<float>} near - The camera's near value.\n * @param {Node<float>} far - The camera's far value.\n * @returns {Node<float>}\n */\nconst orthographicDepthToViewZ = ( depth, near, far ) => near.sub( far ).mul( depth ).sub( near );\n\n/**\n * TSL function for converting a viewZ value to a perspective depth value.\n *\n * Note: {link https://twitter.com/gonnavis/status/1377183786949959682}.\n *\n * @tsl\n * @function\n * @param {Node<float>} viewZ - The viewZ node.\n * @param {Node<float>} near - The camera's near value.\n * @param {Node<float>} far - The camera's far value.\n * @returns {Node<float>}\n */\nconst viewZToPerspectiveDepth = ( viewZ, near, far ) => near.add( viewZ ).mul( far ).div( far.sub( near ).mul( viewZ ) );\n\n/**\n * TSL function for converting a perspective depth value to a viewZ value.\n *\n * @tsl\n * @function\n * @param {Node<float>} depth - The perspective depth.\n * @param {Node<float>} near - The camera's near value.\n * @param {Node<float>} far - The camera's far value.\n * @returns {Node<float>}\n */\nconst perspectiveDepthToViewZ = ( depth, near, far ) => near.mul( far ).div( far.sub( near ).mul( depth ).sub( far ) );\n\n/**\n * TSL function for converting a viewZ value to a logarithmic depth value.\n *\n * @tsl\n * @function\n * @param {Node<float>} viewZ - The viewZ node.\n * @param {Node<float>} near - The camera's near value.\n * @param {Node<float>} far - The camera's far value.\n * @returns {Node<float>}\n */\nconst viewZToLogarithmicDepth = ( viewZ, near, far ) => {\n\n\t// NOTE: viewZ must be negative--see explanation at the end of this comment block.\n\t// The final logarithmic depth formula used here is adapted from one described in an\n\t// article by Thatcher Ulrich (see http://tulrich.com/geekstuff/log_depth_buffer.txt),\n\t// which was an improvement upon an earlier formula one described in an\n\t// Outerra article (https://outerra.blogspot.com/2009/08/logarithmic-z-buffer.html).\n\t// Ulrich's formula is the following:\n\t//     z = K * log( w / cameraNear ) / log( cameraFar / cameraNear )\n\t//     where K = 2^k - 1, and k is the number of bits in the depth buffer.\n\t// The Outerra variant ignored the camera near plane (it assumed it was 0) and instead\n\t// opted for a \"C-constant\" for resolution adjustment of objects near the camera.\n\t// Outerra states: \"Notice that the 'C' variant doesn’t use a near plane distance, it has it\n\t// set at 0\" (quote from https://outerra.blogspot.com/2012/11/maximizing-depth-buffer-range-and.html).\n\t// Ulrich's variant has the benefit of constant relative precision over the whole near-far range.\n\t// It was debated here whether Outerra's \"C-constant\" or Ulrich's \"near plane\" variant should\n\t// be used, and ultimately Ulrich's \"near plane\" version was chosen.\n\t// Outerra eventually made another improvement to their original \"C-constant\" variant,\n\t// but it still does not incorporate the camera near plane (for this version,\n\t// see https://outerra.blogspot.com/2013/07/logarithmic-depth-buffer-optimizations.html).\n\t// Here we make 4 changes to Ulrich's formula:\n\t// 1. Clamp the camera near plane so we don't divide by 0.\n\t// 2. Use log2 instead of log to avoid an extra multiply (shaders implement log using log2).\n\t// 3. Assume K is 1 (K = maximum value in depth buffer; see Ulrich's formula above).\n\t// 4. To maintain consistency with the functions \"viewZToOrthographicDepth\" and \"viewZToPerspectiveDepth\",\n\t//    we modify the formula here to use 'viewZ' instead of 'w'. The other functions expect a negative viewZ,\n\t//    so we do the same here, hence the 'viewZ.negate()' call.\n\t// For visual representation of this depth curve, see https://www.desmos.com/calculator/uyqk0vex1u\n\tnear = near.max( 1e-6 ).toVar();\n\tconst numerator = log2( viewZ.negate().div( near ) );\n\tconst denominator = log2( far.div( near ) );\n\treturn numerator.div( denominator );\n\n};\n\n/**\n * TSL function for converting a logarithmic depth value to a viewZ value.\n *\n * @tsl\n * @function\n * @param {Node<float>} depth - The logarithmic depth.\n * @param {Node<float>} near - The camera's near value.\n * @param {Node<float>} far - The camera's far value.\n * @returns {Node<float>}\n */\nconst logarithmicDepthToViewZ = ( depth, near, far ) => {\n\n\t// NOTE: we add a 'negate()' call to the return value here to maintain consistency with\n\t// the functions \"orthographicDepthToViewZ\" and \"perspectiveDepthToViewZ\" (they return\n\t// a negative viewZ).\n\tconst exponent = depth.mul( log( far.div( near ) ) );\n\treturn float( Math.E ).pow( exponent ).mul( near ).negate();\n\n};\n\n/**\n * TSL function for defining a value for the current fragment's depth.\n *\n * @tsl\n * @function\n * @param {Node<float>} value - The depth value to set.\n * @returns {ViewportDepthNode<float>}\n */\nconst depthBase = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.DEPTH_BASE );\n\n/**\n * TSL object that represents the depth value for the current fragment.\n *\n * @tsl\n * @type {ViewportDepthNode}\n */\nconst depth = /*@__PURE__*/ nodeImmutable( ViewportDepthNode, ViewportDepthNode.DEPTH );\n\n/**\n * TSL function for converting a perspective depth value to linear depth.\n *\n * @tsl\n * @function\n * @param {?Node<float>} [value=null] - The perspective depth. If `null` is provided, the current fragment's depth is used.\n * @returns {ViewportDepthNode<float>}\n */\nconst linearDepth = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH ).setParameterLength( 0, 1 );\n\n/**\n * TSL object that represents the linear (orthographic) depth value of the current fragment\n *\n * @tsl\n * @type {ViewportDepthNode}\n */\nconst viewportLinearDepth = /*@__PURE__*/ linearDepth( viewportDepthTexture() );\n\ndepth.assign = ( value ) => depthBase( value );\n\n/**\n * This node is used in {@link NodeMaterial} to setup the clipping\n * which can happen hardware-accelerated (if supported) and optionally\n * use alpha-to-coverage for anti-aliasing clipped edges.\n *\n * @augments Node\n */\nclass ClippingNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ClippingNode';\n\n\t}\n\n\t/**\n\t * Constructs a new clipping node.\n\t *\n\t * @param {('default'|'hardware'|'alphaToCoverage')} [scope='default'] - The node's scope. Similar to other nodes,\n\t * the selected scope influences the behavior of the node and what type of code is generated.\n\t */\n\tconstructor( scope = ClippingNode.DEFAULT ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node's scope. Similar to other nodes, the selected scope influences\n\t\t * the behavior of the node and what type of code is generated.\n\t\t *\n\t\t * @type {('default'|'hardware'|'alphaToCoverage')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t}\n\n\t/**\n\t * Setups the node depending on the selected scope.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The result node.\n\t */\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst clippingContext = builder.clippingContext;\n\t\tconst { intersectionPlanes, unionPlanes } = clippingContext;\n\n\t\tthis.hardwareClipping = builder.material.hardwareClipping;\n\n\t\tif ( this.scope === ClippingNode.ALPHA_TO_COVERAGE ) {\n\n\t\t\treturn this.setupAlphaToCoverage( intersectionPlanes, unionPlanes );\n\n\t\t} else if ( this.scope === ClippingNode.HARDWARE ) {\n\n\t\t\treturn this.setupHardwareClipping( unionPlanes, builder );\n\n\t\t} else {\n\n\t\t\treturn this.setupDefault( intersectionPlanes, unionPlanes );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups alpha to coverage.\n\t *\n\t * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\n\t * @return {Node} The result node.\n\t */\n\tsetupAlphaToCoverage( intersectionPlanes, unionPlanes ) {\n\n\t\treturn Fn( () => {\n\n\t\t\tconst distanceToPlane = float().toVar( 'distanceToPlane' );\n\t\t\tconst distanceGradient = float().toVar( 'distanceToGradient' );\n\n\t\t\tconst clipOpacity = float( 1 ).toVar( 'clipOpacity' );\n\n\t\t\tconst numUnionPlanes = unionPlanes.length;\n\n\t\t\tif ( this.hardwareClipping === false && numUnionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\n\n\t\t\t\tLoop( numUnionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\n\n\t\t\t\t\tclipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ) );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst numIntersectionPlanes = intersectionPlanes.length;\n\n\t\t\tif ( numIntersectionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( intersectionPlanes );\n\t\t\t\tconst intersectionClipOpacity = float( 1 ).toVar( 'intersectionClipOpacity' );\n\n\t\t\t\tLoop( numIntersectionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\n\n\t\t\t\t\tintersectionClipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ).oneMinus() );\n\n\t\t\t\t} );\n\n\t\t\t\tclipOpacity.mulAssign( intersectionClipOpacity.oneMinus() );\n\n\t\t\t}\n\n\t\t\tdiffuseColor.a.mulAssign( clipOpacity );\n\n\t\t\tdiffuseColor.a.equal( 0.0 ).discard();\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * Setups the default clipping.\n\t *\n\t * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\n\t * @return {Node} The result node.\n\t */\n\tsetupDefault( intersectionPlanes, unionPlanes ) {\n\n\t\treturn Fn( () => {\n\n\t\t\tconst numUnionPlanes = unionPlanes.length;\n\n\t\t\tif ( this.hardwareClipping === false && numUnionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\n\n\t\t\t\tLoop( numUnionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\t\t\t\t\tpositionView.dot( plane.xyz ).greaterThan( plane.w ).discard();\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst numIntersectionPlanes = intersectionPlanes.length;\n\n\t\t\tif ( numIntersectionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( intersectionPlanes );\n\t\t\t\tconst clipped = bool( true ).toVar( 'clipped' );\n\n\t\t\t\tLoop( numIntersectionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\t\t\t\t\tclipped.assign( positionView.dot( plane.xyz ).greaterThan( plane.w ).and( clipped ) );\n\n\t\t\t\t} );\n\n\t\t\t\tclipped.discard();\n\n\t\t\t}\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * Setups hardware clipping.\n\t *\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The result node.\n\t */\n\tsetupHardwareClipping( unionPlanes, builder ) {\n\n\t\tconst numUnionPlanes = unionPlanes.length;\n\n\t\tbuilder.enableHardwareClipping( numUnionPlanes );\n\n\t\treturn Fn( () => {\n\n\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\n\t\t\tconst hw_clip_distances = builtin( builder.getClipDistance() );\n\n\t\t\tLoop( numUnionPlanes, ( { i } ) => {\n\n\t\t\t\tconst plane = clippingPlanes.element( i );\n\n\t\t\t\tconst distance = positionView.dot( plane.xyz ).sub( plane.w ).negate();\n\t\t\t\thw_clip_distances.element( i ).assign( distance );\n\n\t\t\t} );\n\n\t\t} )();\n\n\t}\n\n}\n\nClippingNode.ALPHA_TO_COVERAGE = 'alphaToCoverage';\nClippingNode.DEFAULT = 'default';\nClippingNode.HARDWARE = 'hardware';\n\n/**\n * TSL function for setting up the default clipping logic.\n *\n * @tsl\n * @function\n * @returns {ClippingNode}\n */\nconst clipping = () => nodeObject( new ClippingNode() );\n\n/**\n * TSL function for setting up alpha to coverage.\n *\n * @tsl\n * @function\n * @returns {ClippingNode}\n */\nconst clippingAlpha = () => nodeObject( new ClippingNode( ClippingNode.ALPHA_TO_COVERAGE ) );\n\n/**\n * TSL function for setting up hardware-based clipping.\n *\n * @tsl\n * @function\n * @returns {ClippingNode}\n */\nconst hardwareClipping = () => nodeObject( new ClippingNode( ClippingNode.HARDWARE ) );\n\n// See: https://casual-effects.com/research/Wyman2017Hashed/index.html\n\nconst ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.\n\nconst hash2D = /*@__PURE__*/ Fn( ( [ value ] ) => {\n\n\treturn fract( mul( 1.0e4, sin( mul( 17.0, value.x ).add( mul( 0.1, value.y ) ) ) ).mul( add( 0.1, abs( sin( mul( 13.0, value.y ).add( value.x ) ) ) ) ) );\n\n} );\n\nconst hash3D = /*@__PURE__*/ Fn( ( [ value ] ) => {\n\n\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\n} );\n\nconst getAlphaHashThreshold = /*@__PURE__*/ Fn( ( [ position ] ) => {\n\n\t// Find the discretized derivatives of our coordinates\n\tconst maxDeriv = max$1(\n\t\tlength( dFdx( position.xyz ) ),\n\t\tlength( dFdy( position.xyz ) )\n\t);\n\n\tconst pixScale = float( 1 ).div( float( ALPHA_HASH_SCALE ).mul( maxDeriv ) ).toVar( 'pixScale' );\n\n\t// Find two nearest log-discretized noise scales\n\tconst pixScales = vec2(\n\t\texp2( floor( log2( pixScale ) ) ),\n\t\texp2( ceil( log2( pixScale ) ) )\n\t);\n\n\t// Compute alpha thresholds at our two noise scales\n\tconst alpha = vec2(\n\t\thash3D( floor( pixScales.x.mul( position.xyz ) ) ),\n\t\thash3D( floor( pixScales.y.mul( position.xyz ) ) ),\n\t);\n\n\t// Factor to interpolate lerp with\n\tconst lerpFactor = fract( log2( pixScale ) );\n\n\t// Interpolate alpha threshold from noise at two scales\n\tconst x = add( mul( lerpFactor.oneMinus(), alpha.x ), mul( lerpFactor, alpha.y ) );\n\n\t// Pass into CDF to compute uniformly distrib threshold\n\tconst a = min$1( lerpFactor, lerpFactor.oneMinus() );\n\tconst cases = vec3(\n\t\tx.mul( x ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ),\n\t\tx.sub( mul( 0.5, a ) ).div( sub( 1.0, a ) ),\n\t\tsub( 1.0, sub( 1.0, x ).mul( sub( 1.0, x ) ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ) ) );\n\n\t// Find our final, uniformly distributed alpha threshold (ατ)\n\tconst threshold = x.lessThan( a.oneMinus() ).select( x.lessThan( a ).select( cases.x, cases.y ), cases.z );\n\n\t// Avoids ατ == 0. Could also do ατ =1-ατ\n\treturn clamp( threshold, 1.0e-6, 1.0 );\n\n} ).setLayout( {\n\tname: 'getAlphaHashThreshold',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'position', type: 'vec3' }\n\t]\n} );\n\n/**\n * An attribute node for representing vertex colors.\n *\n * @augments AttributeNode\n */\nclass VertexColorNode extends AttributeNode {\n\n\tstatic get type() {\n\n\t\treturn 'VertexColorNode';\n\n\t}\n\n\t/**\n\t * Constructs a new vertex color node.\n\t *\n\t * @param {number} index - The attribute index.\n\t */\n\tconstructor( index ) {\n\n\t\tsuper( null, 'vec4' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVertexColorNode = true;\n\n\t\t/**\n\t\t * The attribute index to enable more than one sets of vertex colors.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.index = index;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation by honoring the attribute index.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The attribute name.\n\t */\n\tgetAttributeName( /*builder*/ ) {\n\n\t\tconst index = this.index;\n\n\t\treturn 'color' + ( index > 0 ? index : '' );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst attributeName = this.getAttributeName( builder );\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\n\n\t\tlet result;\n\n\t\tif ( geometryAttribute === true ) {\n\n\t\t\tresult = super.generate( builder );\n\n\t\t} else {\n\n\t\t\t// Vertex color fallback should be white\n\t\t\tresult = builder.generateConst( this.nodeType, new Vector4( 1, 1, 1, 1 ) );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.index = this.index;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.index = data.index;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a reference node.\n *\n * @tsl\n * @function\n * @param {number} [index=0] - The attribute index.\n * @returns {VertexColorNode}\n */\nconst vertexColor = ( index = 0 ) => nodeObject( new VertexColorNode( index ) );\n\n/**\n * Base class for all node materials.\n *\n * @augments Material\n */\nclass NodeMaterial extends Material {\n\n\tstatic get type() {\n\n\t\treturn 'NodeMaterial';\n\n\t}\n\n\t/**\n\t * Represents the type of the node material.\n\t *\n\t * @type {string}\n\t */\n\tget type() {\n\n\t\treturn this.constructor.type;\n\n\t}\n\n\tset type( _value ) { /* */ }\n\n\t/**\n\t * Constructs a new node material.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNodeMaterial = true;\n\n\t\t/**\n\t\t * Whether this material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\t/**\n\t\t * Whether this material is affected by lights or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.lights = false;\n\n\t\t/**\n\t\t * Whether this material uses hardware clipping or not.\n\t\t * This property is managed by the engine and should not be\n\t\t * modified by apps.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.hardwareClipping = false;\n\n\t\t/**\n\t\t * Node materials which set their `lights` property to `true`\n\t\t * are affected by all lights of the scene. Sometimes selective\n\t\t * lighting is wanted which means only _some_ lights in the scene\n\t\t * affect a material. This can be achieved by creating an instance\n\t\t * of {@link LightsNode} with a list of selective\n\t\t * lights and assign the node to this property.\n\t\t *\n\t\t * ```js\n\t\t * const customLightsNode = lights( [ light1, light2 ] );\n\t\t * material.lightsNode = customLightsNode;\n\t\t * ```\n\t\t *\n\t\t * @type {?LightsNode}\n\t\t * @default null\n\t\t */\n\t\tthis.lightsNode = null;\n\n\t\t/**\n\t\t * The environment of node materials can be defined by an environment\n\t\t * map assigned to the `envMap` property or by `Scene.environment`\n\t\t * if the node material is a PBR material. This node property allows to overwrite\n\t\t * the default behavior and define the environment with a custom node.\n\t\t *\n\t\t * ```js\n\t\t * material.envNode = pmremTexture( renderTarget.texture );\n\t\t * ```\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.envNode = null;\n\n\t\t/**\n\t\t * The lighting of node materials might be influenced by ambient occlusion.\n\t\t * The default AO is inferred from an ambient occlusion map assigned to `aoMap`\n\t\t * and the respective `aoMapIntensity`. This node property allows to overwrite\n\t\t * the default and define the ambient occlusion with a custom node instead.\n\t\t *\n\t\t * If you don't want to overwrite the diffuse color but modify the existing\n\t\t * values instead, use {@link materialAO}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.aoNode = null;\n\n\t\t/**\n\t\t * The diffuse color of node materials is by default inferred from the\n\t\t * `color` and `map` properties. This node property allows to overwrite the default\n\t\t * and define the diffuse color with a node instead.\n\t\t *\n\t\t * ```js\n\t\t * material.colorNode = color( 0xff0000 ); // define red color\n\t\t * ```\n\t\t *\n\t\t * If you don't want to overwrite the diffuse color but modify the existing\n\t\t * values instead, use {@link materialColor}.\n\t\t *\n\t\t * ```js\n\t\t * material.colorNode = materialColor.mul( color( 0xff0000 ) ); // give diffuse colors a red tint\n\t\t * ```\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.colorNode = null;\n\n\t\t/**\n\t\t * The normals of node materials are by default inferred from the `normalMap`/`normalScale`\n\t\t * or `bumpMap`/`bumpScale` properties. This node property allows to overwrite the default\n\t\t * and define the normals with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the normals but modify the existing values instead,\n\t\t * use {@link materialNormal}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.normalNode = null;\n\n\t\t/**\n\t\t * The opacity of node materials is by default inferred from the `opacity`\n\t\t * and `alphaMap` properties. This node property allows to overwrite the default\n\t\t * and define the opacity with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the normals but modify the existing\n\t\t * value instead, use {@link materialOpacity}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.opacityNode = null;\n\n\t\t/**\n\t\t * This node can be used to implement a variety of filter-like effects. The idea is\n\t\t * to store the current rendering into a texture e.g. via `viewportSharedTexture()`, use it\n\t\t * to create an arbitrary effect and then assign the node composition to this property.\n\t\t * Everything behind the object using this material will now be affected by a filter.\n\t\t *\n\t\t * ```js\n\t\t * const material = new NodeMaterial()\n\t\t * material.transparent = true;\n\t\t *\n\t\t * // everything behind the object will be monochromatic\n\t\t * material.backdropNode = saturation( viewportSharedTexture().rgb, 0 );\n\t\t * ```\n\t\t *\n\t\t * Backdrop computations are part of the lighting so only lit materials can use this property.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.backdropNode = null;\n\n\t\t/**\n\t\t * This node allows to modulate the influence of `backdropNode` to the outgoing light.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.backdropAlphaNode = null;\n\n\t\t/**\n\t\t * The alpha test of node materials is by default inferred from the `alphaTest`\n\t\t * property. This node property allows to overwrite the default and define the\n\t\t * alpha test with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the alpha test but modify the existing\n\t\t * value instead, use {@link materialAlphaTest}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaTestNode = null;\n\n\t\t/**\n\t\t * The local vertex positions are computed based on multiple factors like the\n\t\t * attribute data, morphing or skinning. This node property allows to overwrite\n\t\t * the default and define local vertex positions with nodes instead.\n\t\t *\n\t\t * If you don't want to overwrite the vertex positions but modify the existing\n\t\t * values instead, use {@link positionLocal}.\n\t\t *\n\t\t *```js\n\t\t * material.positionNode = positionLocal.add( displace );\n\t\t * ```\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.positionNode = null;\n\n\t\t/**\n\t\t * This node property is intended for logic which modifies geometry data once or per animation step.\n\t\t * Apps usually place such logic randomly in initialization routines or in the animation loop.\n\t\t * `geometryNode` is intended as a dedicated API so there is an intended spot where geometry modifications\n\t\t * can be implemented.\n\t\t *\n\t\t * The idea is to assign a `Fn` definition that holds the geometry modification logic. A typical example\n\t\t * would be a GPU based particle system that provides a node material for usage on app level. The particle\n\t\t * simulation would be implemented as compute shaders and managed inside a `Fn` function. This function is\n\t\t * eventually assigned to `geometryNode`.\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis.geometryNode = null;\n\n\t\t/**\n\t\t * Allows to overwrite depth values in the fragment shader.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.depthNode = null;\n\n\t\t/**\n\t\t * Allows to overwrite the position used for shadow map rendering which\n\t\t * is by default {@link positionWorld}, the vertex position\n\t\t * in world space.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.receivedShadowPositionNode = null;\n\n\t\t/**\n\t\t * Allows to overwrite the geometry position used for shadow map projection which\n\t\t * is by default {@link positionLocal}, the vertex position in local space.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.castShadowPositionNode = null;\n\n\t\t/**\n\t\t * This node can be used to influence how an object using this node material\n\t\t * receive shadows.\n\t\t *\n\t\t * ```js\n\t\t * const totalShadows = float( 1 ).toVar();\n\t\t * material.receivedShadowNode = Fn( ( [ shadow ] ) => {\n\t\t * \ttotalShadows.mulAssign( shadow );\n\t\t * \t//return float( 1 ); // bypass received shadows\n\t\t * \treturn shadow.mix( color( 0xff0000 ), 1 ); // modify shadow color\n\t\t * } );\n\t\t *\n\t\t * @type {?(Function|FunctionNode<vec4>)}\n\t\t * @default null\n\t\t */\n\t\tthis.receivedShadowNode = null;\n\n\t\t/**\n\t\t * This node can be used to influence how an object using this node material\n\t\t * casts shadows. To apply a color to shadows, you can simply do:\n\t\t *\n\t\t * ```js\n\t\t * material.castShadowNode = vec4( 1, 0, 0, 1 );\n\t\t * ```\n\t\t *\n\t\t * Which can be nice to fake colored shadows of semi-transparent objects. It\n\t\t * is also common to use the property with `Fn` function so checks are performed\n\t\t * per fragment.\n\t\t *\n\t\t * ```js\n\t\t * materialCustomShadow.castShadowNode = Fn( () => {\n\t\t * \thash( vertexIndex ).greaterThan( 0.5 ).discard();\n\t\t * \treturn materialColor;\n\t\t * } )();\n\t\t *  ```\n\t\t *\n\t\t * @type {?Node<vec4>}\n\t\t * @default null\n\t\t */\n\t\tthis.castShadowNode = null;\n\n\t\t/**\n\t\t * This node can be used to define the final output of the material.\n\t\t *\n\t\t * TODO: Explain the differences to `fragmentNode`.\n\t\t *\n\t\t * @type {?Node<vec4>}\n\t\t * @default null\n\t\t */\n\t\tthis.outputNode = null;\n\n\t\t/**\n\t\t * MRT configuration is done on renderer or pass level. This node allows to\n\t\t * overwrite what values are written into MRT targets on material level. This\n\t\t * can be useful for implementing selective FX features that should only affect\n\t\t * specific objects.\n\t\t *\n\t\t * @type {?MRTNode}\n\t\t * @default null\n\t\t */\n\t\tthis.mrtNode = null;\n\n\t\t/**\n\t\t * This node property can be used if you need complete freedom in implementing\n\t\t * the fragment shader. Assigning a node will replace the built-in material\n\t\t * logic used in the fragment stage.\n\t\t *\n\t\t * @type {?Node<vec4>}\n\t\t * @default null\n\t\t */\n\t\tthis.fragmentNode = null;\n\n\t\t/**\n\t\t * This node property can be used if you need complete freedom in implementing\n\t\t * the vertex shader. Assigning a node will replace the built-in material logic\n\t\t * used in the vertex stage.\n\t\t *\n\t\t * @type {?Node<vec4>}\n\t\t * @default null\n\t\t */\n\t\tthis.vertexNode = null;\n\n\t\t// Deprecated properties\n\n\t\tObject.defineProperty( this, 'shadowPositionNode', { // @deprecated, r176\n\n\t\t\tget: () => {\n\n\t\t\t\treturn this.receivedShadowPositionNode;\n\n\t\t\t},\n\n\t\t\tset: ( value ) => {\n\n\t\t\t\tconsole.warn( 'THREE.NodeMaterial: \".shadowPositionNode\" was renamed to \".receivedShadowPositionNode\".' );\n\n\t\t\t\tthis.receivedShadowPositionNode = value;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Allows to define a custom cache key that influence the material key computation\n\t * for render objects.\n\t *\n\t * @return {string} The custom cache key.\n\t */\n\tcustomProgramCacheKey() {\n\n\t\treturn this.type + getCacheKey$1( this );\n\n\t}\n\n\t/**\n\t * Builds this material with the given node builder.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tbuild( builder ) {\n\n\t\tthis.setup( builder );\n\n\t}\n\n\t/**\n\t * Setups a node material observer with the given builder.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {NodeMaterialObserver} The node material observer.\n\t */\n\tsetupObserver( builder ) {\n\n\t\treturn new NodeMaterialObserver( builder );\n\n\t}\n\n\t/**\n\t * Setups the vertex and fragment stage of this node material.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tbuilder.context.setupNormal = () => this.setupNormal( builder );\n\t\tbuilder.context.setupPositionView = () => this.setupPositionView( builder );\n\t\tbuilder.context.setupModelViewProjection = () => this.setupModelViewProjection( builder );\n\n\t\tconst renderer = builder.renderer;\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\t// < VERTEX STAGE >\n\n\t\tbuilder.addStack();\n\n\t\tconst vertexNode = this.vertexNode || this.setupVertex( builder );\n\n\t\tbuilder.stack.outputNode = vertexNode;\n\n\t\tthis.setupHardwareClipping( builder );\n\n\t\tif ( this.geometryNode !== null ) {\n\n\t\t\tbuilder.stack.outputNode = builder.stack.outputNode.bypass( this.geometryNode );\n\n\t\t}\n\n\t\tbuilder.addFlow( 'vertex', builder.removeStack() );\n\n\t\t// < FRAGMENT STAGE >\n\n\t\tbuilder.addStack();\n\n\t\tlet resultNode;\n\n\t\tconst clippingNode = this.setupClipping( builder );\n\n\t\tif ( this.depthWrite === true || this.depthTest === true ) {\n\n\t\t\t// only write depth if depth buffer is configured\n\n\t\t\tif ( renderTarget !== null ) {\n\n\t\t\t\tif ( renderTarget.depthBuffer === true ) this.setupDepth( builder );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderer.depth === true ) this.setupDepth( builder );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.fragmentNode === null ) {\n\n\t\t\tthis.setupDiffuseColor( builder );\n\t\t\tthis.setupVariants( builder );\n\n\t\t\tconst outgoingLightNode = this.setupLighting( builder );\n\n\t\t\tif ( clippingNode !== null ) builder.stack.add( clippingNode );\n\n\t\t\t// force unsigned floats - useful for RenderTargets\n\n\t\t\tconst basicOutput = vec4( outgoingLightNode, diffuseColor.a ).max( 0 );\n\n\t\t\tresultNode = this.setupOutput( builder, basicOutput );\n\n\t\t\t// OUTPUT NODE\n\n\t\t\toutput.assign( resultNode );\n\n\t\t\t//\n\n\t\t\tconst isCustomOutput = this.outputNode !== null;\n\n\t\t\tif ( isCustomOutput ) resultNode = this.outputNode;\n\n\t\t\t// MRT\n\n\t\t\tif ( renderTarget !== null ) {\n\n\t\t\t\tconst mrt = renderer.getMRT();\n\t\t\t\tconst materialMRT = this.mrtNode;\n\n\t\t\t\tif ( mrt !== null ) {\n\n\t\t\t\t\tif ( isCustomOutput ) output.assign( resultNode );\n\n\t\t\t\t\tresultNode = mrt;\n\n\t\t\t\t\tif ( materialMRT !== null ) {\n\n\t\t\t\t\t\tresultNode = mrt.merge( materialMRT );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialMRT !== null ) {\n\n\t\t\t\t\tresultNode = materialMRT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tlet fragmentNode = this.fragmentNode;\n\n\t\t\tif ( fragmentNode.isOutputStructNode !== true ) {\n\n\t\t\t\tfragmentNode = vec4( fragmentNode );\n\n\t\t\t}\n\n\t\t\tresultNode = this.setupOutput( builder, fragmentNode );\n\n\t\t}\n\n\t\tbuilder.stack.outputNode = resultNode;\n\n\t\tbuilder.addFlow( 'fragment', builder.removeStack() );\n\n\t\t// < OBSERVER >\n\n\t\tbuilder.observer = this.setupObserver( builder );\n\n\t}\n\n\t/**\n\t * Setups the clipping node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {ClippingNode} The clipping node.\n\t */\n\tsetupClipping( builder ) {\n\n\t\tif ( builder.clippingContext === null ) return null;\n\n\t\tconst { unionPlanes, intersectionPlanes } = builder.clippingContext;\n\n\t\tlet result = null;\n\n\t\tif ( unionPlanes.length > 0 || intersectionPlanes.length > 0 ) {\n\n\t\t\tconst samples = builder.renderer.samples;\n\n\t\t\tif ( this.alphaToCoverage && samples > 1 ) {\n\n\t\t\t\t// to be added to flow when the color/alpha value has been determined\n\t\t\t\tresult = clippingAlpha();\n\n\t\t\t} else {\n\n\t\t\t\tbuilder.stack.add( clipping() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Setups the hardware clipping if available on the current device.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupHardwareClipping( builder ) {\n\n\t\tthis.hardwareClipping = false;\n\n\t\tif ( builder.clippingContext === null ) return;\n\n\t\tconst candidateCount = builder.clippingContext.unionPlanes.length;\n\n\t\t// 8 planes supported by WebGL ANGLE_clip_cull_distance and WebGPU clip-distances\n\n\t\tif ( candidateCount > 0 && candidateCount <= 8 && builder.isAvailable( 'clipDistance' ) ) {\n\n\t\t\tbuilder.stack.add( hardwareClipping() );\n\n\t\t\tthis.hardwareClipping = true;\n\n\t\t}\n\n\t\treturn;\n\n\t}\n\n\t/**\n\t * Setups the depth of this material.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupDepth( builder ) {\n\n\t\tconst { renderer, camera } = builder;\n\n\t\t// Depth\n\n\t\tlet depthNode = this.depthNode;\n\n\t\tif ( depthNode === null ) {\n\n\t\t\tconst mrt = renderer.getMRT();\n\n\t\t\tif ( mrt && mrt.has( 'depth' ) ) {\n\n\t\t\t\tdepthNode = mrt.get( 'depth' );\n\n\t\t\t} else if ( renderer.logarithmicDepthBuffer === true ) {\n\n\t\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\t\tdepthNode = viewZToLogarithmicDepth( positionView.z, cameraNear, cameraFar );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdepthNode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( depthNode !== null ) {\n\n\t\t\tdepth.assign( depthNode ).toStack();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups the position node in view space. This method exists\n\t * so derived node materials can modify the implementation e.g. sprite materials.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec3>} The position in view space.\n\t */\n\tsetupPositionView( /*builder*/ ) {\n\n\t\treturn modelViewMatrix.mul( positionLocal ).xyz;\n\n\t}\n\n\t/**\n\t * Setups the position in clip space.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec4>} The position in view space.\n\t */\n\tsetupModelViewProjection( /*builder*/ ) {\n\n\t\treturn cameraProjectionMatrix.mul( positionView );\n\n\t}\n\n\t/**\n\t * Setups the logic for the vertex stage.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec4>} The position in clip space.\n\t */\n\tsetupVertex( builder ) {\n\n\t\tbuilder.addStack();\n\n\t\tthis.setupPosition( builder );\n\n\t\tbuilder.context.vertex = builder.removeStack();\n\n\t\treturn modelViewProjection;\n\n\t}\n\n\t/**\n\t * Setups the computation of the position in local space.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec3>} The position in local space.\n\t */\n\tsetupPosition( builder ) {\n\n\t\tconst { object, geometry } = builder;\n\n\t\tif ( geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color ) {\n\n\t\t\tmorphReference( object ).toStack();\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\tskinning( object ).toStack();\n\n\t\t}\n\n\t\tif ( this.displacementMap ) {\n\n\t\t\tconst displacementMap = materialReference( 'displacementMap', 'texture' );\n\t\t\tconst displacementScale = materialReference( 'displacementScale', 'float' );\n\t\t\tconst displacementBias = materialReference( 'displacementBias', 'float' );\n\n\t\t\tpositionLocal.addAssign( normalLocal.normalize().mul( ( displacementMap.x.mul( displacementScale ).add( displacementBias ) ) ) );\n\n\t\t}\n\n\t\tif ( object.isBatchedMesh ) {\n\n\t\t\tbatch( object ).toStack();\n\n\t\t}\n\n\t\tif ( ( object.isInstancedMesh && object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true ) ) {\n\n\t\t\tinstancedMesh( object ).toStack();\n\n\t\t}\n\n\t\tif ( this.positionNode !== null ) {\n\n\t\t\tpositionLocal.assign( this.positionNode.context( { isPositionNodeInput: true } ) );\n\n\t\t}\n\n\t\treturn positionLocal;\n\n\t}\n\n\t/**\n\t * Setups the computation of the material's diffuse color.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {BufferGeometry} geometry - The geometry.\n\t */\n\tsetupDiffuseColor( { object, geometry } ) {\n\n\t\tlet colorNode = this.colorNode ? vec4( this.colorNode ) : materialColor;\n\n\t\t// VERTEX COLORS\n\n\t\tif ( this.vertexColors === true && geometry.hasAttribute( 'color' ) ) {\n\n\t\t\tcolorNode = colorNode.mul( vertexColor() );\n\n\t\t}\n\n\t\t// Instanced colors\n\n\t\tif ( object.instanceColor ) {\n\n\t\t\tconst instanceColor = varyingProperty( 'vec3', 'vInstanceColor' );\n\n\t\t\tcolorNode = instanceColor.mul( colorNode );\n\n\t\t}\n\n\t\tif ( object.isBatchedMesh && object._colorsTexture ) {\n\n\t\t\tconst batchColor = varyingProperty( 'vec3', 'vBatchColor' );\n\n\t\t\tcolorNode = batchColor.mul( colorNode );\n\n\t\t}\n\n\n\t\t// COLOR\n\n\t\tdiffuseColor.assign( colorNode );\n\n\t\t// OPACITY\n\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\n\t\tdiffuseColor.a.assign( diffuseColor.a.mul( opacityNode ) );\n\n\t\t// ALPHA TEST\n\n\t\tif ( this.alphaTestNode !== null || this.alphaTest > 0 ) {\n\n\t\t\tconst alphaTestNode = this.alphaTestNode !== null ? float( this.alphaTestNode ) : materialAlphaTest;\n\n\t\t\tdiffuseColor.a.lessThanEqual( alphaTestNode ).discard();\n\n\t\t}\n\n\t\t// ALPHA HASH\n\n\t\tif ( this.alphaHash === true ) {\n\n\t\t\tdiffuseColor.a.lessThan( getAlphaHashThreshold( positionLocal ) ).discard();\n\n\t\t}\n\n\t\tif ( this.transparent === false && this.blending === NormalBlending && this.alphaToCoverage === false ) {\n\n\t\t\tdiffuseColor.a.assign( 1.0 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract interface method that can be implemented by derived materials\n\t * to setup material-specific node variables.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( /*builder*/ ) {\n\n\t\t// Interface function.\n\n\t}\n\n\t/**\n\t * Setups the outgoing light node variable\n\t *\n\t * @return {Node<vec3>} The outgoing light node.\n\t */\n\tsetupOutgoingLight() {\n\n\t\treturn ( this.lights === true ) ? vec3( 0 ) : diffuseColor.rgb;\n\n\t}\n\n\t/**\n\t * Setups the normal node from the material.\n\t *\n\t * @return {Node<vec3>} The normal node.\n\t */\n\tsetupNormal() {\n\n\t\treturn this.normalNode ? vec3( this.normalNode ) : materialNormal;\n\n\t}\n\n\t/**\n\t * Setups the environment node from the material.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec4>} The environment node.\n\t */\n\tsetupEnvironment( /*builder*/ ) {\n\n\t\tlet node = null;\n\n\t\tif ( this.envNode ) {\n\n\t\t\tnode = this.envNode;\n\n\t\t} else if ( this.envMap ) {\n\n\t\t\tnode = this.envMap.isCubeTexture ? materialReference( 'envMap', 'cubeTexture' ) : materialReference( 'envMap', 'texture' );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * Setups the light map node from the material.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec3>} The light map node.\n\t */\n\tsetupLightMap( builder ) {\n\n\t\tlet node = null;\n\n\t\tif ( builder.material.lightMap ) {\n\n\t\t\tnode = new IrradianceNode( materialLightMap );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * Setups the lights node based on the scene, environment and material.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {LightsNode} The lights node.\n\t */\n\tsetupLights( builder ) {\n\n\t\tconst materialLightsNode = [];\n\n\t\t//\n\n\t\tconst envNode = this.setupEnvironment( builder );\n\n\t\tif ( envNode && envNode.isLightingNode ) {\n\n\t\t\tmaterialLightsNode.push( envNode );\n\n\t\t}\n\n\t\tconst lightMapNode = this.setupLightMap( builder );\n\n\t\tif ( lightMapNode && lightMapNode.isLightingNode ) {\n\n\t\t\tmaterialLightsNode.push( lightMapNode );\n\n\t\t}\n\n\t\tif ( this.aoNode !== null || builder.material.aoMap ) {\n\n\t\t\tconst aoNode = this.aoNode !== null ? this.aoNode : materialAO;\n\n\t\t\tmaterialLightsNode.push( new AONode( aoNode ) );\n\n\t\t}\n\n\t\tlet lightsN = this.lightsNode || builder.lightsNode;\n\n\t\tif ( materialLightsNode.length > 0 ) {\n\n\t\t\tlightsN = builder.renderer.lighting.createNode( [ ...lightsN.getLights(), ...materialLightsNode ] );\n\n\t\t}\n\n\t\treturn lightsN;\n\n\t}\n\n\t/**\n\t * This method should be implemented by most derived materials\n\t * since it defines the material's lighting model.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {LightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\t// Interface function.\n\n\t}\n\n\t/**\n\t * Setups the outgoing light node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec3>} The outgoing light node.\n\t */\n\tsetupLighting( builder ) {\n\n\t\tconst { material } = builder;\n\t\tconst { backdropNode, backdropAlphaNode, emissiveNode } = this;\n\n\t\t// OUTGOING LIGHT\n\n\t\tconst lights = this.lights === true || this.lightsNode !== null;\n\n\t\tconst lightsNode = lights ? this.setupLights( builder ) : null;\n\n\t\tlet outgoingLightNode = this.setupOutgoingLight( builder );\n\n\t\tif ( lightsNode && lightsNode.getScope().hasLights ) {\n\n\t\t\tconst lightingModel = this.setupLightingModel( builder ) || null;\n\n\t\t\toutgoingLightNode = lightingContext( lightsNode, lightingModel, backdropNode, backdropAlphaNode );\n\n\t\t} else if ( backdropNode !== null ) {\n\n\t\t\toutgoingLightNode = vec3( backdropAlphaNode !== null ? mix( outgoingLightNode, backdropNode, backdropAlphaNode ) : backdropNode );\n\n\t\t}\n\n\t\t// EMISSIVE\n\n\t\tif ( ( emissiveNode && emissiveNode.isNode === true ) || ( material.emissive && material.emissive.isColor === true ) ) {\n\n\t\t\temissive.assign( vec3( emissiveNode ? emissiveNode : materialEmissive ) );\n\n\t\t\toutgoingLightNode = outgoingLightNode.add( emissive );\n\n\t\t}\n\n\t\treturn outgoingLightNode;\n\n\t}\n\n\t/**\n\t * Setup the fog.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node<vec4>} outputNode - The existing output node.\n\t * @return {Node<vec4>} The output node.\n\t */\n\tsetupFog( builder, outputNode ) {\n\n\t\tconst fogNode = builder.fogNode;\n\n\t\tif ( fogNode ) {\n\n\t\t\toutput.assign( outputNode );\n\n\t\t\toutputNode = vec4( fogNode );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n\t/**\n\t * Setups the output node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node<vec4>} outputNode - The existing output node.\n\t * @return {Node<vec4>} The output node.\n\t */\n\tsetupOutput( builder, outputNode ) {\n\n\t\t// FOG\n\n\t\tif ( this.fog === true ) {\n\n\t\t\toutputNode = this.setupFog( builder, outputNode );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n\t/**\n\t * Most classic material types have a node pendant e.g. for `MeshBasicMaterial`\n\t * there is `MeshBasicNodeMaterial`. This utility method is intended for\n\t * defining all material properties of the classic type in the node type.\n\t *\n\t * @param {Material} material - The material to copy properties with their values to this node material.\n\t */\n\tsetDefaultValues( material ) {\n\n\t\t// This approach is to reuse the native refreshUniforms*\n\t\t// and turn available the use of features like transmission and environment in core\n\n\t\tfor ( const property in material ) {\n\n\t\t\tconst value = material[ property ];\n\n\t\t\tif ( this[ property ] === undefined ) {\n\n\t\t\t\tthis[ property ] = value;\n\n\t\t\t\tif ( value && value.clone ) this[ property ] = value.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst descriptors = Object.getOwnPropertyDescriptors( material.constructor.prototype );\n\n\t\tfor ( const key in descriptors ) {\n\n\t\t\tif ( Object.getOwnPropertyDescriptor( this.constructor.prototype, key ) === undefined &&\n\t\t\t     descriptors[ key ].get !== undefined ) {\n\n\t\t\t\tObject.defineProperty( this.constructor.prototype, key, descriptors[ key ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes this material to JSON.\n\t *\n\t * @param {?(Object|string)} meta - The meta information for serialization.\n\t * @return {Object} The serialized node.\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = Material.prototype.toJSON.call( this, meta );\n\t\tconst nodeChildren = getNodeChildren( this );\n\n\t\tdata.inputNodes = {};\n\n\t\tfor ( const { property, childNode } of nodeChildren ) {\n\n\t\t\tdata.inputNodes[ property ] = childNode.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Copies the properties of the given node material to this instance.\n\t *\n\t * @param {NodeMaterial} source - The material to copy.\n\t * @return {NodeMaterial} A reference to this node material.\n\t */\n\tcopy( source ) {\n\n\t\tthis.lightsNode = source.lightsNode;\n\t\tthis.envNode = source.envNode;\n\n\t\tthis.colorNode = source.colorNode;\n\t\tthis.normalNode = source.normalNode;\n\t\tthis.opacityNode = source.opacityNode;\n\t\tthis.backdropNode = source.backdropNode;\n\t\tthis.backdropAlphaNode = source.backdropAlphaNode;\n\t\tthis.alphaTestNode = source.alphaTestNode;\n\n\t\tthis.positionNode = source.positionNode;\n\t\tthis.geometryNode = source.geometryNode;\n\n\t\tthis.depthNode = source.depthNode;\n\t\tthis.receivedShadowPositionNode = source.receivedShadowPositionNode;\n\t\tthis.castShadowPositionNode = source.castShadowPositionNode;\n\t\tthis.receivedShadowNode = source.receivedShadowNode;\n\t\tthis.castShadowNode = source.castShadowNode;\n\n\t\tthis.outputNode = source.outputNode;\n\t\tthis.mrtNode = source.mrtNode;\n\n\t\tthis.fragmentNode = source.fragmentNode;\n\t\tthis.vertexNode = source.vertexNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nconst _defaultValues$d = /*@__PURE__*/ new LineBasicMaterial();\n\n/**\n * Node material version of {@link LineBasicMaterial}.\n *\n * @augments NodeMaterial\n */\nclass LineBasicNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'LineBasicNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new line basic node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineBasicNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues$d );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n\nconst _defaultValues$c = /*@__PURE__*/ new LineDashedMaterial();\n\n/**\n * Node material version of  {@link LineDashedMaterial}.\n *\n * @augments NodeMaterial\n */\nclass LineDashedNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'LineDashedNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new line dashed node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineDashedNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues$c );\n\n\t\t/**\n\t\t * The dash offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.dashOffset = 0;\n\n\t\t/**\n\t\t * The offset of dash materials is by default inferred from the `dashOffset`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the offset with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the offset but modify the existing\n\t\t * value instead, use {@link materialLineDashOffset}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.offsetNode = null;\n\n\t\t/**\n\t\t * The scale of dash materials is by default inferred from the `scale`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the scale with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the scale but modify the existing\n\t\t * value instead, use {@link materialLineScale}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dashScaleNode = null;\n\n\t\t/**\n\t\t * The dash size of dash materials is by default inferred from the `dashSize`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the dash size with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the dash size but modify the existing\n\t\t * value instead, use {@link materialLineDashSize}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dashSizeNode = null;\n\n\t\t/**\n\t\t * The gap size of dash materials is by default inferred from the `gapSize`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the gap size with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the gap size but modify the existing\n\t\t * value instead, use {@link materialLineGapSize}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.gapSizeNode = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the dash specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( /* builder */ ) {\n\n\t\tconst offsetNode = this.offsetNode ? float( this.offsetNode ) : materialLineDashOffset;\n\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\n\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\n\t\tconst gapSizeNode = this.gapSizeNode ? float( this.gapSizeNode ) : materialLineGapSize;\n\n\t\tdashSize.assign( dashSizeNode );\n\t\tgapSize.assign( gapSizeNode );\n\n\t\tconst vLineDistance = varying( attribute( 'lineDistance' ).mul( dashScaleNode ) );\n\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\n\n\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard();\n\n\t}\n\n}\n\nlet _sharedFramebuffer = null;\n\n/**\n * `ViewportTextureNode` creates an internal texture for each node instance. This module\n * shares a texture across all instances of `ViewportSharedTextureNode`. It should\n * be the first choice when using data of the default/screen framebuffer for performance reasons.\n *\n * @augments ViewportTextureNode\n */\nclass ViewportSharedTextureNode extends ViewportTextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'ViewportSharedTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new viewport shared texture node.\n\t *\n\t * @param {Node} [uvNode=screenUV] - The uv node.\n\t * @param {?Node} [levelNode=null] - The level node.\n\t */\n\tconstructor( uvNode = screenUV, levelNode = null ) {\n\n\t\tif ( _sharedFramebuffer === null ) {\n\n\t\t\t_sharedFramebuffer = new FramebufferTexture();\n\n\t\t}\n\n\t\tsuper( uvNode, levelNode, _sharedFramebuffer );\n\n\t}\n\n\tupdateReference() {\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a shared viewport texture node.\n *\n * @tsl\n * @function\n * @param {?Node} [uvNode=screenUV] - The uv node.\n * @param {?Node} [levelNode=null] - The level node.\n * @returns {ViewportSharedTextureNode}\n */\nconst viewportSharedTexture = /*@__PURE__*/ nodeProxy( ViewportSharedTextureNode ).setParameterLength( 0, 2 );\n\nconst _defaultValues$b = /*@__PURE__*/ new LineDashedMaterial();\n\n/**\n * This node material can be used to render lines with a size larger than one\n * by representing them as instanced meshes.\n *\n * @augments NodeMaterial\n */\nclass Line2NodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'Line2NodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new node material for wide line rendering.\n\t *\n\t * @param {Object} [parameters={}] - The configuration parameter.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLine2NodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues$b );\n\n\t\t/**\n\t\t * Whether vertex colors should be used or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.useColor = parameters.vertexColors;\n\n\t\t/**\n\t\t * The dash offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.dashOffset = 0;\n\n\t\t/**\n\t\t * The line width.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.lineWidth = 1;\n\n\t\t/**\n\t\t * Defines the lines color.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.lineColorNode = null;\n\n\t\t/**\n\t\t * Defines the offset.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.offsetNode = null;\n\n\t\t/**\n\t\t * Defines the dash scale.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dashScaleNode = null;\n\n\t\t/**\n\t\t * Defines the dash size.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dashSizeNode = null;\n\n\t\t/**\n\t\t * Defines the gap size.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.gapSizeNode = null;\n\n\t\t/**\n\t\t * Blending is set to `NoBlending` since transparency\n\t\t * is not supported, yet.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.blending = NoBlending;\n\n\t\tthis._useDash = parameters.dashed;\n\t\tthis._useAlphaToCoverage = true;\n\t\tthis._useWorldUnits = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the vertex and fragment stage of this node material.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tconst { renderer } = builder;\n\n\t\tconst useAlphaToCoverage = this._useAlphaToCoverage;\n\t\tconst useColor = this.useColor;\n\t\tconst useDash = this._useDash;\n\t\tconst useWorldUnits = this._useWorldUnits;\n\n\t\tconst trimSegment = Fn( ( { start, end } ) => {\n\n\t\t\tconst a = cameraProjectionMatrix.element( 2 ).element( 2 ); // 3nd entry in 3th column\n\t\t\tconst b = cameraProjectionMatrix.element( 3 ).element( 2 ); // 3nd entry in 4th column\n\t\t\tconst nearEstimate = b.mul( -0.5 ).div( a );\n\n\t\t\tconst alpha = nearEstimate.sub( start.z ).div( end.z.sub( start.z ) );\n\n\t\t\treturn vec4( mix( start.xyz, end.xyz, alpha ), end.w );\n\n\t\t} ).setLayout( {\n\t\t\tname: 'trimSegment',\n\t\t\ttype: 'vec4',\n\t\t\tinputs: [\n\t\t\t\t{ name: 'start', type: 'vec4' },\n\t\t\t\t{ name: 'end', type: 'vec4' }\n\t\t\t]\n\t\t} );\n\n\t\tthis.vertexNode = Fn( () => {\n\n\t\t\tconst instanceStart = attribute( 'instanceStart' );\n\t\t\tconst instanceEnd = attribute( 'instanceEnd' );\n\n\t\t\t// camera space\n\n\t\t\tconst start = vec4( modelViewMatrix.mul( vec4( instanceStart, 1.0 ) ) ).toVar( 'start' );\n\t\t\tconst end = vec4( modelViewMatrix.mul( vec4( instanceEnd, 1.0 ) ) ).toVar( 'end' );\n\n\t\t\tif ( useDash ) {\n\n\t\t\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\n\t\t\t\tconst offsetNode = this.offsetNode ? float( this.offsetNode ) : materialLineDashOffset;\n\n\t\t\t\tconst instanceDistanceStart = attribute( 'instanceDistanceStart' );\n\t\t\t\tconst instanceDistanceEnd = attribute( 'instanceDistanceEnd' );\n\n\t\t\t\tlet lineDistance = positionGeometry.y.lessThan( 0.5 ).select( dashScaleNode.mul( instanceDistanceStart ), dashScaleNode.mul( instanceDistanceEnd ) );\n\t\t\t\tlineDistance = lineDistance.add( offsetNode );\n\n\t\t\t\tvaryingProperty( 'float', 'lineDistance' ).assign( lineDistance );\n\n\t\t\t}\n\n\t\t\tif ( useWorldUnits ) {\n\n\t\t\t\tvaryingProperty( 'vec3', 'worldStart' ).assign( start.xyz );\n\t\t\t\tvaryingProperty( 'vec3', 'worldEnd' ).assign( end.xyz );\n\n\t\t\t}\n\n\t\t\tconst aspect = viewport.z.div( viewport.w );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tconst perspective = cameraProjectionMatrix.element( 2 ).element( 3 ).equal( -1 ); // 4th entry in the 3rd column\n\n\t\t\tIf( perspective, () => {\n\n\t\t\t\tIf( start.z.lessThan( 0.0 ).and( end.z.greaterThan( 0.0 ) ), () => {\n\n\t\t\t\t\tend.assign( trimSegment( { start: start, end: end } ) );\n\n\t\t\t\t} ).ElseIf( end.z.lessThan( 0.0 ).and( start.z.greaterThanEqual( 0.0 ) ), () => {\n\n\t\t\t\t\tstart.assign( trimSegment( { start: end, end: start } ) );\n\n\t\t\t \t} );\n\n\t\t\t} );\n\n\t\t\t// clip space\n\t\t\tconst clipStart = cameraProjectionMatrix.mul( start );\n\t\t\tconst clipEnd = cameraProjectionMatrix.mul( end );\n\n\t\t\t// ndc space\n\t\t\tconst ndcStart = clipStart.xyz.div( clipStart.w );\n\t\t\tconst ndcEnd = clipEnd.xyz.div( clipEnd.w );\n\n\t\t\t// direction\n\t\t\tconst dir = ndcEnd.xy.sub( ndcStart.xy ).toVar();\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x.assign( dir.x.mul( aspect ) );\n\t\t\tdir.assign( dir.normalize() );\n\n\t\t\tconst clip = vec4().toVar();\n\n\t\t\tif ( useWorldUnits ) {\n\n\t\t\t\t// get the offset direction as perpendicular to the view vector\n\n\t\t\t\tconst worldDir = end.xyz.sub( start.xyz ).normalize();\n\t\t\t\tconst tmpFwd = mix( start.xyz, end.xyz, 0.5 ).normalize();\n\t\t\t\tconst worldUp = worldDir.cross( tmpFwd ).normalize();\n\t\t\t\tconst worldFwd = worldDir.cross( worldUp );\n\n\t\t\t\tconst worldPos = varyingProperty( 'vec4', 'worldPos' );\n\n\t\t\t\tworldPos.assign( positionGeometry.y.lessThan( 0.5 ).select( start, end ) );\n\n\t\t\t\t// height offset\n\t\t\t\tconst hw = materialLineWidth.mul( 0.5 );\n\t\t\t\tworldPos.addAssign( vec4( positionGeometry.x.lessThan( 0.0 ).select( worldUp.mul( hw ), worldUp.mul( hw ).negate() ), 0 ) );\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\tif ( ! useDash ) {\n\n\t\t\t\t\t// cap extension\n\t\t\t\t\tworldPos.addAssign( vec4( positionGeometry.y.lessThan( 0.5 ).select( worldDir.mul( hw ).negate(), worldDir.mul( hw ) ), 0 ) );\n\n\t\t\t\t\t// add width to the box\n\t\t\t\t\tworldPos.addAssign( vec4( worldFwd.mul( hw ), 0 ) );\n\n\t\t\t\t\t// endcaps\n\t\t\t\t\tIf( positionGeometry.y.greaterThan( 1.0 ).or( positionGeometry.y.lessThan( 0.0 ) ), () => {\n\n\t\t\t\t\t\tworldPos.subAssign( vec4( worldFwd.mul( 2.0 ).mul( hw ), 0 ) );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\t// project the worldpos\n\t\t\t\tclip.assign( cameraProjectionMatrix.mul( worldPos ) );\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tconst clipPose = vec3().toVar();\n\n\t\t\t\tclipPose.assign( positionGeometry.y.lessThan( 0.5 ).select( ndcStart, ndcEnd ) );\n\t\t\t\tclip.z.assign( clipPose.z.mul( clip.w ) );\n\n\t\t\t} else {\n\n\t\t\t\tconst offset = vec2( dir.y, dir.x.negate() ).toVar( 'offset' );\n\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x.assign( dir.x.div( aspect ) );\n\t\t\t\toffset.x.assign( offset.x.div( aspect ) );\n\n\t\t\t\t// sign flip\n\t\t\t\toffset.assign( positionGeometry.x.lessThan( 0.0 ).select( offset.negate(), offset ) );\n\n\t\t\t\t// endcaps\n\t\t\t\tIf( positionGeometry.y.lessThan( 0.0 ), () => {\n\n\t\t\t\t\toffset.assign( offset.sub( dir ) );\n\n\t\t\t\t} ).ElseIf( positionGeometry.y.greaterThan( 1.0 ), () => {\n\n\t\t\t\t\toffset.assign( offset.add( dir ) );\n\n\t\t\t\t} );\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset.assign( offset.mul( materialLineWidth ) );\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset.assign( offset.div( viewport.w ) );\n\n\t\t\t\t// select end\n\t\t\t\tclip.assign( positionGeometry.y.lessThan( 0.5 ).select( clipStart, clipEnd ) );\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset.assign( offset.mul( clip.w ) );\n\n\t\t\t\tclip.assign( clip.add( vec4( offset, 0, 0 ) ) );\n\n\t\t\t}\n\n\t\t\treturn clip;\n\n\t\t} )();\n\n\t\tconst closestLineToLine = Fn( ( { p1, p2, p3, p4 } ) => {\n\n\t\t\tconst p13 = p1.sub( p3 );\n\t\t\tconst p43 = p4.sub( p3 );\n\n\t\t\tconst p21 = p2.sub( p1 );\n\n\t\t\tconst d1343 = p13.dot( p43 );\n\t\t\tconst d4321 = p43.dot( p21 );\n\t\t\tconst d1321 = p13.dot( p21 );\n\t\t\tconst d4343 = p43.dot( p43 );\n\t\t\tconst d2121 = p21.dot( p21 );\n\n\t\t\tconst denom = d2121.mul( d4343 ).sub( d4321.mul( d4321 ) );\n\t\t\tconst numer = d1343.mul( d4321 ).sub( d1321.mul( d4343 ) );\n\n\t\t\tconst mua = numer.div( denom ).clamp();\n\t\t\tconst mub = d1343.add( d4321.mul( mua ) ).div( d4343 ).clamp();\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t} );\n\n\t\tthis.colorNode = Fn( () => {\n\n\t\t\tconst vUv = uv();\n\n\t\t\tif ( useDash ) {\n\n\t\t\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\n\t\t\t\tconst gapSizeNode = this.gapSizeNode ? float( this.gapSizeNode ) : materialLineGapSize;\n\n\t\t\t\tdashSize.assign( dashSizeNode );\n\t\t\t\tgapSize.assign( gapSizeNode );\n\n\t\t\t\tconst vLineDistance = varyingProperty( 'float', 'lineDistance' );\n\n\t\t\t\tvUv.y.lessThan( -1 ).or( vUv.y.greaterThan( 1.0 ) ).discard(); // discard endcaps\n\t\t\t\tvLineDistance.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard(); // todo - FIX\n\n\t\t\t}\n\n\t\t\tconst alpha = float( 1 ).toVar( 'alpha' );\n\n\t\t\tif ( useWorldUnits ) {\n\n\t\t\t\tconst worldStart = varyingProperty( 'vec3', 'worldStart' );\n\t\t\t\tconst worldEnd = varyingProperty( 'vec3', 'worldEnd' );\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tconst rayEnd = varyingProperty( 'vec4', 'worldPos' ).xyz.normalize().mul( 1e5 );\n\t\t\t\tconst lineDir = worldEnd.sub( worldStart );\n\t\t\t\tconst params = closestLineToLine( { p1: worldStart, p2: worldEnd, p3: vec3( 0.0, 0.0, 0.0 ), p4: rayEnd } );\n\n\t\t\t\tconst p1 = worldStart.add( lineDir.mul( params.x ) );\n\t\t\t\tconst p2 = rayEnd.mul( params.y );\n\t\t\t\tconst delta = p1.sub( p2 );\n\t\t\t\tconst len = delta.length();\n\t\t\t\tconst norm = len.div( materialLineWidth );\n\n\t\t\t\tif ( ! useDash ) {\n\n\t\t\t\t\tif ( useAlphaToCoverage && renderer.samples > 1 ) {\n\n\t\t\t\t\t\tconst dnorm = norm.fwidth();\n\t\t\t\t\t\talpha.assign( smoothstep( dnorm.negate().add( 0.5 ), dnorm.add( 0.5 ), norm ).oneMinus() );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnorm.greaterThan( 0.5 ).discard();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// round endcaps\n\n\t\t\t\tif ( useAlphaToCoverage && renderer.samples > 1 ) {\n\n\t\t\t\t\tconst a = vUv.x;\n\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).select( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\n\n\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\n\n\t\t\t\t\tconst dlen = float( len2.fwidth() ).toVar( 'dlen' );\n\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\n\n\t\t\t\t\t\talpha.assign( smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus() );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\n\n\t\t\t\t\t\tconst a = vUv.x;\n\t\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).select( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\n\t\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\n\n\t\t\t\t\t\tlen2.greaterThan( 1.0 ).discard();\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet lineColorNode;\n\n\t\t\tif ( this.lineColorNode ) {\n\n\t\t\t\tlineColorNode = this.lineColorNode;\n\n\t\t\t} else {\n\n\t\t\t\tif ( useColor ) {\n\n\t\t\t\t\tconst instanceColorStart = attribute( 'instanceColorStart' );\n\t\t\t\t\tconst instanceColorEnd = attribute( 'instanceColorEnd' );\n\n\t\t\t\t\tconst instanceColor = positionGeometry.y.lessThan( 0.5 ).select( instanceColorStart, instanceColorEnd );\n\n\t\t\t\t\tlineColorNode = instanceColor.mul( materialColor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlineColorNode = materialColor;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn vec4( lineColorNode, alpha );\n\n\t\t} )();\n\n\t\tif ( this.transparent ) {\n\n\t\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\n\n\t\t\tthis.outputNode = vec4( this.colorNode.rgb.mul( opacityNode ).add( viewportSharedTexture().rgb.mul( opacityNode.oneMinus() ) ), this.colorNode.a );\n\n\t\t}\n\n\t\tsuper.setup( builder );\n\n\t}\n\n\t/**\n\t * Whether the lines should sized in world units or not.\n\t * When set to `false` the unit is pixel.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t */\n\tget worldUnits() {\n\n\t\treturn this._useWorldUnits;\n\n\t}\n\n\tset worldUnits( value ) {\n\n\t\tif ( this._useWorldUnits !== value ) {\n\n\t\t\tthis._useWorldUnits = value;\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Whether the lines should be dashed or not.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t */\n\tget dashed() {\n\n\t\treturn this._useDash;\n\n\t}\n\n\tset dashed( value ) {\n\n\t\tif ( this._useDash !== value ) {\n\n\t\t\tthis._useDash = value;\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Whether alpha to coverage should be used or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget alphaToCoverage() {\n\n\t\treturn this._useAlphaToCoverage;\n\n\t}\n\n\tset alphaToCoverage( value ) {\n\n\t\tif ( this._useAlphaToCoverage !== value ) {\n\n\t\t\tthis._useAlphaToCoverage = value;\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Packs a direction vector into a color value.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} node - The direction to pack.\n * @return {Node<vec3>} The color.\n */\nconst directionToColor = ( node ) => nodeObject( node ).mul( 0.5 ).add( 0.5 );\n\n/**\n * Unpacks a color value into a direction vector.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} node - The color to unpack.\n * @return {Node<vec3>} The direction.\n */\nconst colorToDirection = ( node ) => nodeObject( node ).mul( 2.0 ).sub( 1 );\n\nconst _defaultValues$a = /*@__PURE__*/ new MeshNormalMaterial();\n\n/**\n * Node material version of {@link MeshNormalMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshNormalNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshNormalNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh normal node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshNormalNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues$a );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation by computing the diffuse color\n\t * based on the normal data.\n\t */\n\tsetupDiffuseColor() {\n\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\n\n\t\t// By convention, a normal packed to RGB is in sRGB color space. Convert it to working color space.\n\n\t\tdiffuseColor.assign( colorSpaceToWorking( vec4( directionToColor( transformedNormalView ), opacityNode ), SRGBColorSpace ) );\n\n\t}\n\n}\n\n/**\n * Can be used to compute texture coordinates for projecting an\n * equirectangular texture onto a mesh for using it as the scene's\n * background.\n *\n * ```js\n * scene.backgroundNode = texture( equirectTexture, equirectUV() );\n * ```\n *\n * @augments TempNode\n */\nclass EquirectUVNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'EquirectUVNode';\n\n\t}\n\n\t/**\n\t * Constructs a new equirect uv node.\n\t *\n\t * @param {Node<vec3>} [dirNode=positionWorldDirection] - A direction vector for sampling which is by default `positionWorldDirection`.\n\t */\n\tconstructor( dirNode = positionWorldDirection ) {\n\n\t\tsuper( 'vec2' );\n\n\t\t/**\n\t\t * A direction vector for sampling why is by default `positionWorldDirection`.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.dirNode = dirNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst dir = this.dirNode;\n\n\t\tconst u = dir.z.atan( dir.x ).mul( 1 / ( Math.PI * 2 ) ).add( 0.5 );\n\t\tconst v = dir.y.clamp( -1, 1.0 ).asin().mul( 1 / Math.PI ).add( 0.5 );\n\n\t\treturn vec2( u, v );\n\n\t}\n\n}\n\n/**\n * TSL function for creating an equirect uv node.\n *\n * @tsl\n * @function\n * @param {?Node<vec3>} [dirNode=positionWorldDirection] - A direction vector for sampling which is by default `positionWorldDirection`.\n * @returns {EquirectUVNode}\n */\nconst equirectUV = /*@__PURE__*/ nodeProxy( EquirectUVNode ).setParameterLength( 0, 1 );\n\n// @TODO: Consider rename WebGLCubeRenderTarget to just CubeRenderTarget\n\n/**\n * This class represents a cube render target. It is a special version\n * of `WebGLCubeRenderTarget` which is compatible with `WebGPURenderer`.\n *\n * @augments WebGLCubeRenderTarget\n */\nclass CubeRenderTarget extends WebGLCubeRenderTarget {\n\n\t/**\n\t * Constructs a new cube render target.\n\t *\n\t * @param {number} [size=1] - The size of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeRenderTarget = true;\n\n\t}\n\n\t/**\n\t * Converts the given equirectangular texture to a cube map.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Texture} texture - The equirectangular texture.\n\t * @return {CubeRenderTarget} A reference to this cube render target.\n\t */\n\tfromEquirectangularTexture( renderer, texture$1 ) {\n\n\t\tconst currentMinFilter = texture$1.minFilter;\n\t\tconst currentGenerateMipmaps = texture$1.generateMipmaps;\n\n\t\ttexture$1.generateMipmaps = true;\n\n\t\tthis.texture.type = texture$1.type;\n\t\tthis.texture.colorSpace = texture$1.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture$1.generateMipmaps;\n\t\tthis.texture.minFilter = texture$1.minFilter;\n\t\tthis.texture.magFilter = texture$1.magFilter;\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst uvNode = equirectUV( positionWorldDirection );\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.colorNode = texture( texture$1, uvNode, 0 );\n\t\tmaterial.side = BackSide;\n\t\tmaterial.blending = NoBlending;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst scene = new Scene();\n\t\tscene.add( mesh );\n\n\t\t// Avoid blurred poles\n\t\tif ( texture$1.minFilter === LinearMipmapLinearFilter ) texture$1.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\n\t\tconst currentMRT = renderer.getMRT();\n\t\trenderer.setMRT( null );\n\n\t\tcamera.update( renderer, scene );\n\n\t\trenderer.setMRT( currentMRT );\n\n\t\ttexture$1.minFilter = currentMinFilter;\n\t\ttexture$1.currentGenerateMipmaps = currentGenerateMipmaps;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _cache$1 = new WeakMap();\n\n/**\n * This node can be used to automatically convert environment maps in the\n * equirectangular format into the cube map format.\n *\n * @augments TempNode\n */\nclass CubeMapNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'CubeMapNode';\n\n\t}\n\n\t/**\n\t * Constructs a new cube map node.\n\t *\n\t * @param {Node} envNode - The node representing the environment map.\n\t */\n\tconstructor( envNode ) {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * The node representing the environment map.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.envNode = envNode;\n\n\t\t/**\n\t\t * A reference to the internal cube texture.\n\t\t *\n\t\t * @private\n\t\t * @type {?CubeTexture}\n\t\t * @default null\n\t\t */\n\t\tthis._cubeTexture = null;\n\n\t\t/**\n\t\t * A reference to the internal cube texture node.\n\t\t *\n\t\t * @private\n\t\t * @type {CubeTextureNode}\n\t\t */\n\t\tthis._cubeTextureNode = cubeTexture( null );\n\n\t\tconst defaultTexture = new CubeTexture();\n\t\tdefaultTexture.isRenderTargetTexture = true;\n\n\t\t/**\n\t\t * A default cube texture that acts as a placeholder.\n\t\t * It is used when the conversion from equirectangular to cube\n\t\t * map has not finished yet for a given texture.\n\t\t *\n\t\t * @private\n\t\t * @type {CubeTexture}\n\t\t */\n\t\tthis._defaultTexture = defaultTexture;\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.RENDER` since the node updates\n\t\t * the texture once per render in its {@link CubeMapNode#updateBefore} method.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer, material } = frame;\n\n\t\tconst envNode = this.envNode;\n\n\t\tif ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {\n\n\t\t\tconst texture = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];\n\n\t\t\tif ( texture && texture.isTexture ) {\n\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\t\t// check for converted cubemap map\n\n\t\t\t\t\tif ( _cache$1.has( texture ) ) {\n\n\t\t\t\t\t\tconst cubeMap = _cache$1.get( texture );\n\n\t\t\t\t\t\tmapTextureMapping( cubeMap, texture.mapping );\n\t\t\t\t\t\tthis._cubeTexture = cubeMap;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// create cube map from equirectangular map\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( isEquirectangularMapReady$1( image ) ) {\n\n\t\t\t\t\t\t\tconst renderTarget = new CubeRenderTarget( image.height );\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\n\t\t\t\t\t\t\tmapTextureMapping( renderTarget.texture, texture.mapping );\n\t\t\t\t\t\t\tthis._cubeTexture = renderTarget.texture;\n\n\t\t\t\t\t\t\t_cache$1.set( texture, renderTarget.texture );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// default cube texture as fallback when equirectangular texture is not yet loaded\n\n\t\t\t\t\t\t\tthis._cubeTexture = this._defaultTexture;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//\n\n\t\t\t\t\tthis._cubeTextureNode.value = this._cubeTexture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// envNode already refers to a cube map\n\n\t\t\t\t\tthis._cubeTextureNode = this.envNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.updateBefore( builder );\n\n\t\treturn this._cubeTextureNode;\n\n\t}\n\n}\n\n/**\n * Returns true if the given equirectangular image has been fully loaded\n * and is ready for further processing.\n *\n * @private\n * @param {Image} image - The equirectangular image to check.\n * @return {boolean} Whether the image is ready or not.\n */\nfunction isEquirectangularMapReady$1( image ) {\n\n\tif ( image === null || image === undefined ) return false;\n\n\treturn image.height > 0;\n\n}\n\n/**\n * This function is executed when `dispose()` is called on the equirectangular\n * texture. In this case, the generated cube map with its render target\n * is deleted as well.\n *\n * @private\n * @param {Object} event - The event object.\n */\nfunction onTextureDispose( event ) {\n\n\tconst texture = event.target;\n\n\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\tconst renderTarget = _cache$1.get( texture );\n\n\tif ( renderTarget !== undefined ) {\n\n\t\t_cache$1.delete( texture );\n\n\t\trenderTarget.dispose();\n\n\t}\n\n}\n\n/**\n * This function makes sure the generated cube map uses the correct\n * texture mapping that corresponds to the equirectangular original.\n *\n * @private\n * @param {Texture} texture - The cube texture.\n * @param {number} mapping - The original texture mapping.\n */\nfunction mapTextureMapping( texture, mapping ) {\n\n\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\ttexture.mapping = CubeReflectionMapping;\n\n\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\ttexture.mapping = CubeRefractionMapping;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a cube map node.\n *\n * @tsl\n * @function\n * @param {Node} envNode - The node representing the environment map.\n * @returns {CubeMapNode}\n */\nconst cubeMapNode = /*@__PURE__*/ nodeProxy( CubeMapNode ).setParameterLength( 1 );\n\n/**\n * Represents a basic model for Image-based lighting (IBL). The environment\n * is defined via environment maps in the equirectangular or cube map format.\n * `BasicEnvironmentNode` is intended for non-PBR materials like {@link MeshBasicNodeMaterial}\n * or {@link MeshPhongNodeMaterial}.\n *\n * @augments LightingNode\n */\nclass BasicEnvironmentNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'BasicEnvironmentNode';\n\n\t}\n\n\t/**\n\t * Constructs a new basic environment node.\n\t *\n\t * @param {Node} [envNode=null] - A node representing the environment.\n\t */\n\tconstructor( envNode = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * A node representing the environment.\n\t\t *\n\t\t * @type {Node}\n\t\t * @default null\n\t\t */\n\t\tthis.envNode = envNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// environment property is used in the finish() method of BasicLightingModel\n\n\t\tbuilder.context.environment = cubeMapNode( this.envNode );\n\n\t}\n\n}\n\n/**\n * A specific version of {@link IrradianceNode} that is only relevant\n * for {@link MeshBasicNodeMaterial}. Since the material is unlit, it\n * requires a special scaling factor for the light map.\n *\n * @augments LightingNode\n */\nclass BasicLightMapNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'BasicLightMapNode';\n\n\t}\n\n\t/**\n\t * Constructs a new basic light map node.\n\t *\n\t * @param {?Node<vec3>} [lightMapNode=null] - The light map node.\n\t */\n\tconstructor( lightMapNode = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light map node.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t */\n\t\tthis.lightMapNode = lightMapNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// irradianceLightMap property is used in the indirectDiffuse() method of BasicLightingModel\n\n\t\tconst RECIPROCAL_PI = float( 1 / Math.PI );\n\n\t\tbuilder.context.irradianceLightMap = this.lightMapNode.mul( RECIPROCAL_PI );\n\n\t}\n\n}\n\n/**\n * Abstract class for implementing lighting models. The module defines\n * multiple methods that concrete lighting models can implement. These\n * methods are executed at different points during the light evaluation\n * process.\n */\nclass LightingModel {\n\n\t/**\n\t * This method is intended for setting up lighting model and context data\n\t * which are later used in the evaluation process.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tstart( builder ) {\n\n\t\t// lights ( direct )\n\n\t\tbuilder.lightsNode.setupLights( builder, builder.lightsNode.getLightNodes( builder ) );\n\n\t\t// indirect\n\n\t\tthis.indirect( builder );\n\n\t}\n\n\t/**\n\t * This method is intended for executing final tasks like final updates\n\t * to the outgoing light.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tfinish( /*builder*/ ) { }\n\n\t/**\n\t * This method is intended for implementing the direct light term and\n\t * executed during the build process of directional, point and spot light nodes.\n\t *\n\t * @abstract\n\t * @param {Object} lightData - The light data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirect( /*lightData, builder*/ ) { }\n\n\t/**\n\t * This method is intended for implementing the direct light term for\n\t * rect area light nodes.\n\t *\n\t * @abstract\n\t * @param {Object} lightData - The light data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirectRectArea( /*lightData, builder*/ ) {}\n\n\t/**\n\t * This method is intended for implementing the indirect light term.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirect( /*builder*/ ) { }\n\n\t/**\n\t * This method is intended for implementing the ambient occlusion term.\n\t * Unlike other methods, this method must be called manually by the lighting\n\t * model in its indirect term.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tambientOcclusion( /*input, stack, builder*/ ) { }\n\n}\n\n/**\n * Represents the lighting model for unlit materials. The only light contribution\n * is baked indirect lighting modulated with ambient occlusion and the material's\n * diffuse color. Environment mapping is supported. Used in {@link MeshBasicNodeMaterial}.\n *\n * @augments LightingModel\n */\nclass BasicLightingModel extends LightingModel {\n\n\t/**\n\t * Constructs a new basic lighting model.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t}\n\n\t/**\n\t * Implements the baked indirect lighting with its modulation.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirect( { context } ) {\n\n\t\tconst ambientOcclusion = context.ambientOcclusion;\n\t\tconst reflectedLight = context.reflectedLight;\n\t\tconst irradianceLightMap = context.irradianceLightMap;\n\n\t\treflectedLight.indirectDiffuse.assign( vec4( 0.0 ) );\n\n\t\t// accumulation (baked indirect lighting only)\n\n\t\tif ( irradianceLightMap ) {\n\n\t\t\treflectedLight.indirectDiffuse.addAssign( irradianceLightMap );\n\n\t\t} else {\n\n\t\t\treflectedLight.indirectDiffuse.addAssign( vec4( 1.0, 1.0, 1.0, 0.0 ) );\n\n\t\t}\n\n\t\t// modulation\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\n\t\treflectedLight.indirectDiffuse.mulAssign( diffuseColor.rgb );\n\n\t}\n\n\t/**\n\t * Implements the environment mapping.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tfinish( builder ) {\n\n\t\tconst { material, context } = builder;\n\n\t\tconst outgoingLight = context.outgoingLight;\n\t\tconst envNode = builder.context.environment;\n\n\t\tif ( envNode ) {\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, outgoingLight.rgb.mul( envNode.rgb ), materialSpecularStrength.mul( materialReflectivity ) ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul( materialReflectivity ) ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\toutgoingLight.rgb.addAssign( envNode.rgb.mul( materialSpecularStrength.mul( materialReflectivity ) ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.BasicLightingModel: Unsupported .combine value:', material.combine );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nconst _defaultValues$9 = /*@__PURE__*/ new MeshBasicMaterial();\n\n/**\n * Node material version of {@link MeshBasicMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshBasicNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshBasicNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh basic node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshBasicNodeMaterial = true;\n\n\t\t/**\n\t\t * Although the basic material is by definition unlit, we set\n\t\t * this property to `true` since we use a lighting model to compute\n\t\t * the outgoing light of the fragment shader.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\tthis.setDefaultValues( _defaultValues$9 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Basic materials are not affected by normal and bump maps so we\n\t * return by default {@link normalView}.\n\t *\n\t * @return {Node<vec3>} The normal node.\n\t */\n\tsetupNormal() {\n\n\t\treturn normalView; // see #28839\n\n\t}\n\n\t/**\n\t * Overwritten since this type of material uses {@link BasicEnvironmentNode}\n\t * to implement the default environment mapping.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?BasicEnvironmentNode<vec3>} The environment node.\n\t */\n\tsetupEnvironment( builder ) {\n\n\t\tconst envNode = super.setupEnvironment( builder );\n\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\n\n\t}\n\n\t/**\n\t * This method must be overwritten since light maps are evaluated\n\t * with a special scaling factor for basic materials.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?BasicLightMapNode<vec3>} The light map node.\n\t */\n\tsetupLightMap( builder ) {\n\n\t\tlet node = null;\n\n\t\tif ( builder.material.lightMap ) {\n\n\t\t\tnode = new BasicLightMapNode( materialLightMap );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * The material overwrites this method because `lights` is set to `true` but\n\t * we still want to return the diffuse color as the outgoing light.\n\t *\n\t * @return {Node<vec3>} The outgoing light node.\n\t */\n\tsetupOutgoingLight() {\n\n\t\treturn diffuseColor.rgb;\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {BasicLightingModel} The lighting model.\n\t */\n\tsetupLightingModel() {\n\n\t\treturn new BasicLightingModel();\n\n\t}\n\n}\n\nconst F_Schlick = /*@__PURE__*/ Fn( ( { f0, f90, dotVH } ) => {\n\n\t// Original approximation by Christophe Schlick '94\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tconst fresnel = dotVH.mul( -5.55473 ).sub( 6.98316 ).mul( dotVH ).exp2();\n\n\treturn f0.mul( fresnel.oneMinus() ).add( f90.mul( fresnel ) );\n\n} ); // validated\n\nconst BRDF_Lambert = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\treturn inputs.diffuseColor.mul( 1 / Math.PI ); // punctual light\n\n} ); // validated\n\nconst G_BlinnPhong_Implicit = () => float( 0.25 );\n\nconst D_BlinnPhong = /*@__PURE__*/ Fn( ( { dotNH } ) => {\n\n\treturn shininess.mul( float( 0.5 ) ).add( 1.0 ).mul( float( 1 / Math.PI ) ).mul( dotNH.pow( shininess ) );\n\n} );\n\nconst BRDF_BlinnPhong = /*@__PURE__*/ Fn( ( { lightDirection } ) => {\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\n\n\tconst F = F_Schlick( { f0: specularColor, f90: 1.0, dotVH } );\n\tconst G = G_BlinnPhong_Implicit();\n\tconst D = D_BlinnPhong( { dotNH } );\n\n\treturn F.mul( G ).mul( D );\n\n} );\n\n/**\n * Represents the lighting model for a phong material. Used in {@link MeshPhongNodeMaterial}.\n *\n * @augments BasicLightingModel\n */\nclass PhongLightingModel extends BasicLightingModel {\n\n\t/**\n\t * Constructs a new phong lighting model.\n\t *\n\t * @param {boolean} [specular=true] - Whether specular is supported or not.\n\t */\n\tconstructor( specular = true ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Whether specular is supported or not. Set this to `false` if you are\n\t\t * looking for a Lambert-like material meaning a material for non-shiny\n\t\t * surfaces, without specular highlights.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.specular = specular;\n\n\t}\n\n\t/**\n\t * Implements the direct lighting. The specular portion is optional an can be controlled\n\t * with the {@link PhongLightingModel#specular} flag.\n\t *\n\t * @param {Object} lightData - The light data.\n\t */\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\n\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\n\t\tconst irradiance = dotNL.mul( lightColor );\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t\tif ( this.specular === true ) {\n\n\t\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_BlinnPhong( { lightDirection } ) ).mul( materialSpecularStrength ) );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Implements the indirect lighting.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirect( builder ) {\n\n\t\tconst { ambientOcclusion, irradiance, reflectedLight } = builder.context;\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\n\t}\n\n}\n\nconst _defaultValues$8 = /*@__PURE__*/ new MeshLambertMaterial();\n\n/**\n * Node material version of {@link MeshLambertMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshLambertNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshLambertNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh lambert node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshLambertNodeMaterial = true;\n\n\t\t/**\n\t\t * Set to `true` because lambert materials react on lights.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\tthis.setDefaultValues( _defaultValues$8 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Overwritten since this type of material uses {@link BasicEnvironmentNode}\n\t * to implement the default environment mapping.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?BasicEnvironmentNode<vec3>} The environment node.\n\t */\n\tsetupEnvironment( builder ) {\n\n\t\tconst envNode = super.setupEnvironment( builder );\n\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {PhongLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhongLightingModel( false ); // ( specular ) -> force lambert\n\n\t}\n\n}\n\nconst _defaultValues$7 = /*@__PURE__*/ new MeshPhongMaterial();\n\n/**\n * Node material version of {@link MeshPhongMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshPhongNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshPhongNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh lambert node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhongNodeMaterial = true;\n\n\t\t/**\n\t\t * Set to `true` because phong materials react on lights.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\t/**\n\t\t * The shininess of phong materials is by default inferred from the `shininess`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the shininess with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the shininess but modify the existing\n\t\t * value instead, use {@link materialShininess}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.shininessNode = null;\n\n\t\t/**\n\t\t * The specular color of phong materials is by default inferred from the\n\t\t * `specular` property. This node property allows to overwrite the default\n\t\t * and define the specular color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the specular color but modify the existing\n\t\t * value instead, use {@link materialSpecular}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.specularNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues$7 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Overwritten since this type of material uses {@link BasicEnvironmentNode}\n\t * to implement the default environment mapping.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?BasicEnvironmentNode<vec3>} The environment node.\n\t */\n\tsetupEnvironment( builder ) {\n\n\t\tconst envNode = super.setupEnvironment( builder );\n\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {PhongLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhongLightingModel();\n\n\t}\n\n\t/**\n\t * Setups the phong specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( /*builder*/ ) {\n\n\t\t// SHININESS\n\n\t\tconst shininessNode = ( this.shininessNode ? float( this.shininessNode ) : materialShininess ).max( 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tshininess.assign( shininessNode );\n\n\t\t// SPECULAR COLOR\n\n\t\tconst specularNode = this.specularNode || materialSpecular;\n\n\t\tspecularColor.assign( specularNode );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.shininessNode = source.shininessNode;\n\t\tthis.specularNode = source.specularNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nconst getGeometryRoughness = /*@__PURE__*/ Fn( ( builder ) => {\n\n\tif ( builder.geometry.hasAttribute( 'normal' ) === false ) {\n\n\t\treturn float( 0 );\n\n\t}\n\n\tconst dxy = normalView.dFdx().abs().max( normalView.dFdy().abs() );\n\tconst geometryRoughness = dxy.x.max( dxy.y ).max( dxy.z );\n\n\treturn geometryRoughness;\n\n} );\n\nconst getRoughness = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { roughness } = inputs;\n\n\tconst geometryRoughness = getGeometryRoughness();\n\n\tlet roughnessFactor = roughness.max( 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.\n\troughnessFactor = roughnessFactor.add( geometryRoughness );\n\troughnessFactor = roughnessFactor.min( 1.0 );\n\n\treturn roughnessFactor;\n\n} );\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nconst V_GGX_SmithCorrelated = /*@__PURE__*/ Fn( ( { alpha, dotNL, dotNV } ) => {\n\n\tconst a2 = alpha.pow2();\n\n\tconst gv = dotNL.mul( a2.add( a2.oneMinus().mul( dotNV.pow2() ) ).sqrt() );\n\tconst gl = dotNV.mul( a2.add( a2.oneMinus().mul( dotNL.pow2() ) ).sqrt() );\n\n\treturn div( 0.5, gv.add( gl ).max( EPSILON ) );\n\n} ).setLayout( {\n\tname: 'V_GGX_SmithCorrelated',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alpha', type: 'float' },\n\t\t{ name: 'dotNL', type: 'float' },\n\t\t{ name: 'dotNV', type: 'float' }\n\t]\n} ); // validated\n\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\n\nconst V_GGX_SmithCorrelated_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } ) => {\n\n\tconst gv = dotNL.mul( vec3( alphaT.mul( dotTV ), alphaB.mul( dotBV ), dotNV ).length() );\n\tconst gl = dotNV.mul( vec3( alphaT.mul( dotTL ), alphaB.mul( dotBL ), dotNL ).length() );\n\tconst v = div( 0.5, gv.add( gl ) );\n\n\treturn v.saturate();\n\n} ).setLayout( {\n\tname: 'V_GGX_SmithCorrelated_Anisotropic',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotTV', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotBV', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotTL', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotBL', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotNV', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotNL', type: 'float', qualifier: 'in' }\n\t]\n} );\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is \"roughness squared\" in Disney’s reparameterization\nconst D_GGX = /*@__PURE__*/ Fn( ( { alpha, dotNH } ) => {\n\n\tconst a2 = alpha.pow2();\n\n\tconst denom = dotNH.pow2().mul( a2.oneMinus() ).oneMinus(); // avoid alpha = 0 with dotNH = 1\n\n\treturn a2.div( denom.pow2() ).mul( 1 / Math.PI );\n\n} ).setLayout( {\n\tname: 'D_GGX',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alpha', type: 'float' },\n\t\t{ name: 'dotNH', type: 'float' }\n\t]\n} ); // validated\n\nconst RECIPROCAL_PI = /*@__PURE__*/ float( 1 / Math.PI );\n\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\n\nconst D_GGX_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotNH, dotTH, dotBH } ) => {\n\n\tconst a2 = alphaT.mul( alphaB );\n\tconst v = vec3( alphaB.mul( dotTH ), alphaT.mul( dotBH ), a2.mul( dotNH ) );\n\tconst v2 = v.dot( v );\n\tconst w2 = a2.div( v2 );\n\n\treturn RECIPROCAL_PI.mul( a2.mul( w2.pow2() ) );\n\n} ).setLayout( {\n\tname: 'D_GGX_Anisotropic',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotNH', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotTH', type: 'float', qualifier: 'in' },\n\t\t{ name: 'dotBH', type: 'float', qualifier: 'in' }\n\t]\n} );\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { lightDirection, f0, f90, roughness, f, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;\n\n\tconst normalView = inputs.normalView || transformedNormalView;\n\n\tconst alpha = roughness.pow2(); // UE4's roughness\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNL = normalView.dot( lightDirection ).clamp();\n\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\tconst dotNH = normalView.dot( halfDir ).clamp();\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\n\n\tlet F = F_Schlick( { f0, f90, dotVH } );\n\tlet V, D;\n\n\tif ( defined( USE_IRIDESCENCE ) ) {\n\n\t\tF = iridescence.mix( F, f );\n\n\t}\n\n\tif ( defined( USE_ANISOTROPY ) ) {\n\n\t\tconst dotTL = anisotropyT.dot( lightDirection );\n\t\tconst dotTV = anisotropyT.dot( positionViewDirection );\n\t\tconst dotTH = anisotropyT.dot( halfDir );\n\t\tconst dotBL = anisotropyB.dot( lightDirection );\n\t\tconst dotBV = anisotropyB.dot( positionViewDirection );\n\t\tconst dotBH = anisotropyB.dot( halfDir );\n\n\t\tV = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );\n\t\tD = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );\n\n\t} else {\n\n\t\tV = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );\n\t\tD = D_GGX( { alpha, dotNH } );\n\n\t}\n\n\treturn F.mul( V ).mul( D );\n\n} ); // validated\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nconst DFGApprox = /*@__PURE__*/ Fn( ( { roughness, dotNV } ) => {\n\n\tconst c0 = vec4( -1, -0.0275, -0.572, 0.022 );\n\n\tconst c1 = vec4( 1, 0.0425, 1.04, -0.04 );\n\n\tconst r = roughness.mul( c0 ).add( c1 );\n\n\tconst a004 = r.x.mul( r.x ).min( dotNV.mul( -9.28 ).exp2() ).mul( r.x ).add( r.y );\n\n\tconst fab = vec2( -1.04, 1.04 ).mul( a004 ).add( r.zw );\n\n\treturn fab;\n\n} ).setLayout( {\n\tname: 'DFGApprox',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'dotNV', type: 'vec3' }\n\t]\n} );\n\nconst EnvironmentBRDF = /*@__PURE__*/ Fn( ( inputs ) => {\n\n\tconst { dotNV, specularColor, specularF90, roughness } = inputs;\n\n\tconst fab = DFGApprox( { dotNV, roughness } );\n\treturn specularColor.mul( fab.x ).add( specularF90.mul( fab.y ) );\n\n} );\n\nconst Schlick_to_F0 = /*@__PURE__*/ Fn( ( { f, f90, dotVH } ) => {\n\n\tconst x = dotVH.oneMinus().saturate();\n\tconst x2 = x.mul( x );\n\tconst x5 = x.mul( x2, x2 ).clamp( 0, .9999 );\n\n\treturn f.sub( vec3( f90 ).mul( x5 ) ).div( x5.oneMinus() );\n\n} ).setLayout( {\n\tname: 'Schlick_to_F0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'f', type: 'vec3' },\n\t\t{ name: 'f90', type: 'float' },\n\t\t{ name: 'dotVH', type: 'float' }\n\t]\n} );\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nconst D_Charlie = /*@__PURE__*/ Fn( ( { roughness, dotNH } ) => {\n\n\tconst alpha = roughness.pow2();\n\n\t// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\n\tconst invAlpha = float( 1.0 ).div( alpha );\n\tconst cos2h = dotNH.pow2();\n\tconst sin2h = cos2h.oneMinus().max( 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n\treturn float( 2.0 ).add( invAlpha ).mul( sin2h.pow( invAlpha.mul( 0.5 ) ) ).div( 2.0 * Math.PI );\n\n} ).setLayout( {\n\tname: 'D_Charlie',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'dotNH', type: 'float' }\n\t]\n} );\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nconst V_Neubelt = /*@__PURE__*/ Fn( ( { dotNV, dotNL } ) => {\n\n\t// Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n\treturn float( 1.0 ).div( float( 4.0 ).mul( dotNL.add( dotNV ).sub( dotNL.mul( dotNV ) ) ) );\n\n} ).setLayout( {\n\tname: 'V_Neubelt',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'dotNV', type: 'float' },\n\t\t{ name: 'dotNL', type: 'float' }\n\t]\n} );\n\nconst BRDF_Sheen = /*@__PURE__*/ Fn( ( { lightDirection } ) => {\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\n\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp();\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\n\n\tconst D = D_Charlie( { roughness: sheenRoughness, dotNH } );\n\tconst V = V_Neubelt( { dotNV, dotNL } );\n\n\treturn sheen.mul( D ).mul( V );\n\n} );\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nconst LTC_Uv = /*@__PURE__*/ Fn( ( { N, V, roughness } ) => {\n\n\tconst LUT_SIZE = 64.0;\n\tconst LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst LUT_BIAS = 0.5 / LUT_SIZE;\n\n\tconst dotNV = N.dot( V ).saturate();\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tconst uv = vec2( roughness, dotNV.oneMinus().sqrt() );\n\n\tuv.assign( uv.mul( LUT_SCALE ).add( LUT_BIAS ) );\n\n\treturn uv;\n\n} ).setLayout( {\n\tname: 'LTC_Uv',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'N', type: 'vec3' },\n\t\t{ name: 'V', type: 'vec3' },\n\t\t{ name: 'roughness', type: 'float' }\n\t]\n} );\n\nconst LTC_ClippedSphereFormFactor = /*@__PURE__*/ Fn( ( { f } ) => {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tconst l = f.length();\n\n\treturn max$1( l.mul( l ).add( f.z ).div( l.add( 1.0 ) ), 0 );\n\n} ).setLayout( {\n\tname: 'LTC_ClippedSphereFormFactor',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'f', type: 'vec3' }\n\t]\n} );\n\nconst LTC_EdgeVectorFormFactor = /*@__PURE__*/ Fn( ( { v1, v2 } ) => {\n\n\tconst x = v1.dot( v2 );\n\tconst y = x.abs().toVar();\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tconst a = y.mul( 0.0145206 ).add( 0.4965155 ).mul( y ).add( 0.8543985 ).toVar();\n\tconst b = y.add( 4.1616724 ).mul( y ).add( 3.4175940 ).toVar();\n\tconst v = a.div( b );\n\n\tconst theta_sintheta = x.greaterThan( 0.0 ).select( v, max$1( x.mul( x ).oneMinus(), 1e-7 ).inverseSqrt().mul( 0.5 ).sub( v ) );\n\n\treturn v1.cross( v2 ).mul( theta_sintheta );\n\n} ).setLayout( {\n\tname: 'LTC_EdgeVectorFormFactor',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' }\n\t]\n} );\n\nconst LTC_Evaluate = /*@__PURE__*/ Fn( ( { N, V, P, mInv, p0, p1, p2, p3 } ) => {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tconst v1 = p1.sub( p0 ).toVar();\n\tconst v2 = p3.sub( p0 ).toVar();\n\n\tconst lightNormal = v1.cross( v2 );\n\tconst result = vec3().toVar();\n\n\tIf( lightNormal.dot( P.sub( p0 ) ).greaterThanEqual( 0.0 ), () => {\n\n\t\t// construct orthonormal basis around N\n\t\tconst T1 = V.sub( N.mul( V.dot( N ) ) ).normalize();\n\t\tconst T2 = N.cross( T1 ).negate(); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t\t// compute transform\n\t\tconst mat = mInv.mul( mat3( T1, T2, N ).transpose() ).toVar();\n\n\t\t// transform rect\n\t\t// & project rect onto sphere\n\t\tconst coords0 = mat.mul( p0.sub( P ) ).normalize().toVar();\n\t\tconst coords1 = mat.mul( p1.sub( P ) ).normalize().toVar();\n\t\tconst coords2 = mat.mul( p2.sub( P ) ).normalize().toVar();\n\t\tconst coords3 = mat.mul( p3.sub( P ) ).normalize().toVar();\n\n\t\t// calculate vector form factor\n\t\tconst vectorFormFactor = vec3( 0 ).toVar();\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords0, v2: coords1 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords1, v2: coords2 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords2, v2: coords3 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords3, v2: coords0 } ) );\n\n\t\t// adjust for horizon clipping\n\t\tresult.assign( vec3( LTC_ClippedSphereFormFactor( { f: vectorFormFactor } ) ) );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'LTC_Evaluate',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'N', type: 'vec3' },\n\t\t{ name: 'V', type: 'vec3' },\n\t\t{ name: 'P', type: 'vec3' },\n\t\t{ name: 'mInv', type: 'mat3' },\n\t\t{ name: 'p0', type: 'vec3' },\n\t\t{ name: 'p1', type: 'vec3' },\n\t\t{ name: 'p2', type: 'vec3' },\n\t\t{ name: 'p3', type: 'vec3' }\n\t]\n} );\n\nconst LTC_Evaluate_Volume = /*@__PURE__*/ Fn( ( { P, p0, p1, p2, p3 } ) => {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tconst v1 = p1.sub( p0 ).toVar();\n\tconst v2 = p3.sub( p0 ).toVar();\n\n\tconst lightNormal = v1.cross( v2 );\n\tconst result = vec3().toVar();\n\n\tIf( lightNormal.dot( P.sub( p0 ) ).greaterThanEqual( 0.0 ), () => {\n\n\t\t// transform rect\n\t\t// & project rect onto sphere\n\t\tconst coords0 = p0.sub( P ).normalize().toVar();\n\t\tconst coords1 = p1.sub( P ).normalize().toVar();\n\t\tconst coords2 = p2.sub( P ).normalize().toVar();\n\t\tconst coords3 = p3.sub( P ).normalize().toVar();\n\n\t\t// calculate vector form factor\n\t\tconst vectorFormFactor = vec3( 0 ).toVar();\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords0, v2: coords1 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords1, v2: coords2 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords2, v2: coords3 } ) );\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords3, v2: coords0 } ) );\n\n\t\t// adjust for horizon clipping\n\t\tresult.assign( vec3( LTC_ClippedSphereFormFactor( { f: vectorFormFactor.abs() } ) ) );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'LTC_Evaluate',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'P', type: 'vec3' },\n\t\t{ name: 'p0', type: 'vec3' },\n\t\t{ name: 'p1', type: 'vec3' },\n\t\t{ name: 'p2', type: 'vec3' },\n\t\t{ name: 'p3', type: 'vec3' }\n\t]\n} );\n\n// Mipped Bicubic Texture Filtering by N8\n// https://www.shadertoy.com/view/Dl2SDW\n\nconst bC = 1.0 / 6.0;\n\nconst w0 = ( a ) => mul( bC, mul( a, mul( a, a.negate().add( 3.0 ) ).sub( 3.0 ) ).add( 1.0 ) );\n\nconst w1 = ( a ) => mul( bC, mul( a, mul( a, mul( 3.0, a ).sub( 6.0 ) ) ).add( 4.0 ) );\n\nconst w2 = ( a ) => mul( bC, mul( a, mul( a, mul( -3, a ).add( 3.0 ) ).add( 3.0 ) ).add( 1.0 ) );\n\nconst w3 = ( a ) => mul( bC, pow( a, 3 ) );\n\nconst g0 = ( a ) => w0( a ).add( w1( a ) );\n\nconst g1 = ( a ) => w2( a ).add( w3( a ) );\n\n// h0 and h1 are the two offset functions\nconst h0 = ( a ) => add( -1, w1( a ).div( w0( a ).add( w1( a ) ) ) );\n\nconst h1 = ( a ) => add( 1.0, w3( a ).div( w2( a ).add( w3( a ) ) ) );\n\nconst bicubic = ( textureNode, texelSize, lod ) => {\n\n\tconst uv = textureNode.uvNode;\n\tconst uvScaled = mul( uv, texelSize.zw ).add( 0.5 );\n\n\tconst iuv = floor( uvScaled );\n\tconst fuv = fract( uvScaled );\n\n\tconst g0x = g0( fuv.x );\n\tconst g1x = g1( fuv.x );\n\tconst h0x = h0( fuv.x );\n\tconst h1x = h1( fuv.x );\n\tconst h0y = h0( fuv.y );\n\tconst h1y = h1( fuv.y );\n\n\tconst p0 = vec2( iuv.x.add( h0x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\n\tconst p1 = vec2( iuv.x.add( h1x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\n\tconst p2 = vec2( iuv.x.add( h0x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\n\tconst p3 = vec2( iuv.x.add( h1x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\n\n\tconst a = g0( fuv.y ).mul( add( g0x.mul( textureNode.sample( p0 ).level( lod ) ), g1x.mul( textureNode.sample( p1 ).level( lod ) ) ) );\n\tconst b = g1( fuv.y ).mul( add( g0x.mul( textureNode.sample( p2 ).level( lod ) ), g1x.mul( textureNode.sample( p3 ).level( lod ) ) ) );\n\n\treturn a.add( b );\n\n};\n\n/**\n * Applies mipped bicubic texture filtering to the given texture node.\n *\n * @tsl\n * @function\n * @param {TextureNode} textureNode - The texture node that should be filtered.\n * @param {Node<float>} [lodNode=float(3)] - Defines the LOD to sample from.\n * @return {Node} The filtered texture sample.\n */\nconst textureBicubic = /*@__PURE__*/ Fn( ( [ textureNode, lodNode = float( 3 ) ] ) => {\n\n\tconst fLodSize = vec2( textureNode.size( int( lodNode ) ) );\n\tconst cLodSize = vec2( textureNode.size( int( lodNode.add( 1.0 ) ) ) );\n\tconst fLodSizeInv = div( 1.0, fLodSize );\n\tconst cLodSizeInv = div( 1.0, cLodSize );\n\tconst fSample = bicubic( textureNode, vec4( fLodSizeInv, fLodSize ), floor( lodNode ) );\n\tconst cSample = bicubic( textureNode, vec4( cLodSizeInv, cLodSize ), ceil( lodNode ) );\n\n\treturn fract( lodNode ).mix( fSample, cSample );\n\n} );\n\n//\n// Transmission\n//\n\nconst getVolumeTransmissionRay = /*@__PURE__*/ Fn( ( [ n, v, thickness, ior, modelMatrix ] ) => {\n\n\t// Direction of refracted light.\n\tconst refractionVector = vec3( refract( v.negate(), normalize( n ), div( 1.0, ior ) ) );\n\n\t// Compute rotation-independent scaling of the model matrix.\n\tconst modelScale = vec3(\n\t\tlength( modelMatrix[ 0 ].xyz ),\n\t\tlength( modelMatrix[ 1 ].xyz ),\n\t\tlength( modelMatrix[ 2 ].xyz )\n\t);\n\n\t// The thickness is specified in local space.\n\treturn normalize( refractionVector ).mul( thickness.mul( modelScale ) );\n\n} ).setLayout( {\n\tname: 'getVolumeTransmissionRay',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'n', type: 'vec3' },\n\t\t{ name: 'v', type: 'vec3' },\n\t\t{ name: 'thickness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' },\n\t\t{ name: 'modelMatrix', type: 'mat4' }\n\t]\n} );\n\nconst applyIorToRoughness = /*@__PURE__*/ Fn( ( [ roughness, ior ] ) => {\n\n\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\treturn roughness.mul( clamp( ior.mul( 2.0 ).sub( 2.0 ), 0.0, 1.0 ) );\n\n} ).setLayout( {\n\tname: 'applyIorToRoughness',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' }\n\t]\n} );\n\nconst viewportBackSideTexture = /*@__PURE__*/ viewportMipTexture();\nconst viewportFrontSideTexture = /*@__PURE__*/ viewportMipTexture();\n\nconst getTransmissionSample = /*@__PURE__*/ Fn( ( [ fragCoord, roughness, ior ], { material } ) => {\n\n\tconst vTexture = material.side === BackSide ? viewportBackSideTexture : viewportFrontSideTexture;\n\n\tconst transmissionSample = vTexture.sample( fragCoord );\n\t//const transmissionSample = viewportMipTexture( fragCoord );\n\n\tconst lod = log2( screenSize.x ).mul( applyIorToRoughness( roughness, ior ) );\n\n\treturn textureBicubic( transmissionSample, lod );\n\n} );\n\nconst volumeAttenuation = /*@__PURE__*/ Fn( ( [ transmissionDistance, attenuationColor, attenuationDistance ] ) => {\n\n\tIf( attenuationDistance.notEqual( 0 ), () => {\n\n\t\t// Compute light attenuation using Beer's law.\n\t\tconst attenuationCoefficient = log( attenuationColor ).negate().div( attenuationDistance );\n\t\tconst transmittance = exp( attenuationCoefficient.negate().mul( transmissionDistance ) );\n\n\t\treturn transmittance;\n\n\t} );\n\n\t// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\n\treturn vec3( 1.0 );\n\n} ).setLayout( {\n\tname: 'volumeAttenuation',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'transmissionDistance', type: 'float' },\n\t\t{ name: 'attenuationColor', type: 'vec3' },\n\t\t{ name: 'attenuationDistance', type: 'float' }\n\t]\n} );\n\nconst getIBLVolumeRefraction = /*@__PURE__*/ Fn( ( [ n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion ] ) => {\n\n\tlet transmittedLight, transmittance;\n\n\tif ( dispersion ) {\n\n\t\ttransmittedLight = vec4().toVar();\n\t\ttransmittance = vec3().toVar();\n\n\t\tconst halfSpread = ior.sub( 1.0 ).mul( dispersion.mul( 0.025 ) );\n\t\tconst iors = vec3( ior.sub( halfSpread ), ior, ior.add( halfSpread ) );\n\n\t\tLoop( { start: 0, end: 3 }, ( { i } ) => {\n\n\t\t\tconst ior = iors.element( i );\n\n\t\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\t\trefractionCoords.addAssign( 1.0 );\n\t\t\trefractionCoords.divAssign( 2.0 );\n\t\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\t\tconst transmissionSample = getTransmissionSample( refractionCoords, roughness, ior );\n\n\t\t\ttransmittedLight.element( i ).assign( transmissionSample.element( i ) );\n\t\t\ttransmittedLight.a.addAssign( transmissionSample.a );\n\n\t\t\ttransmittance.element( i ).assign( diffuseColor.element( i ).mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ).element( i ) ) );\n\n\t\t} );\n\n\t\ttransmittedLight.a.divAssign( 3.0 );\n\n\t} else {\n\n\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\trefractionCoords.addAssign( 1.0 );\n\t\trefractionCoords.divAssign( 2.0 );\n\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\ttransmittance = diffuseColor.mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ) );\n\n\t}\n\n\tconst attenuatedColor = transmittance.rgb.mul( transmittedLight.rgb );\n\tconst dotNV = n.dot( v ).clamp();\n\n\t// Get the specular component.\n\tconst F = vec3( EnvironmentBRDF( { // n, v, specularColor, specularF90, roughness\n\t\tdotNV,\n\t\tspecularColor,\n\t\tspecularF90,\n\t\troughness\n\t} ) );\n\n\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\n\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n\tconst transmittanceFactor = transmittance.r.add( transmittance.g, transmittance.b ).div( 3.0 );\n\n\treturn vec4( F.oneMinus().mul( attenuatedColor ), transmittedLight.a.oneMinus().mul( transmittanceFactor ).oneMinus() );\n\n} );\n\n//\n// Iridescence\n//\n\n// XYZ to linear-sRGB color space\nconst XYZ_TO_REC709 = /*@__PURE__*/ mat3(\n\t3.2404542, -0.969266, 0.0556434,\n\t-1.5371385, 1.8760108, -0.2040259,\n\t-0.4985314, 0.0415560, 1.0572252\n);\n\n// Assume air interface for top\n// Note: We don't handle the case fresnel0 == 1\nconst Fresnel0ToIor = ( fresnel0 ) => {\n\n\tconst sqrtF0 = fresnel0.sqrt();\n\treturn vec3( 1.0 ).add( sqrtF0 ).div( vec3( 1.0 ).sub( sqrtF0 ) );\n\n};\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nconst IorToFresnel0 = ( transmittedIor, incidentIor ) => {\n\n\treturn transmittedIor.sub( incidentIor ).div( transmittedIor.add( incidentIor ) ).pow2();\n\n};\n\n// Fresnel equations for dielectric/dielectric interfaces.\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n// Evaluation XYZ sensitivity curves in Fourier space\nconst evalSensitivity = ( OPD, shift ) => {\n\n\tconst phase = OPD.mul( 2.0 * Math.PI * 1.0e-9 );\n\tconst val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\tconst pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\tconst VAR = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\tconst x = float( 9.7470e-14 * Math.sqrt( 2.0 * Math.PI * 4.5282e+09 ) ).mul( phase.mul( 2.2399e+06 ).add( shift.x ).cos() ).mul( phase.pow2().mul( -45282e5 ).exp() );\n\n\tlet xyz = val.mul( VAR.mul( 2.0 * Math.PI ).sqrt() ).mul( pos.mul( phase ).add( shift ).cos() ).mul( phase.pow2().negate().mul( VAR ).exp() );\n\txyz = vec3( xyz.x.add( x ), xyz.y, xyz.z ).div( 1.0685e-7 );\n\n\tconst rgb = XYZ_TO_REC709.mul( xyz );\n\n\treturn rgb;\n\n};\n\nconst evalIridescence = /*@__PURE__*/ Fn( ( { outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 } ) => {\n\n\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n\tconst iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t// Evaluate the cosTheta on the base layer (Snell law)\n\tconst sinTheta2Sq = outsideIOR.div( iridescenceIOR ).pow2().mul( cosTheta1.pow2().oneMinus() );\n\n\t// Handle TIR:\n\tconst cosTheta2Sq = sinTheta2Sq.oneMinus();\n\n\tIf( cosTheta2Sq.lessThan( 0 ), () => {\n\n\t\treturn vec3( 1.0 );\n\n\t} );\n\n\tconst cosTheta2 = cosTheta2Sq.sqrt();\n\n\t// First interface\n\tconst R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\tconst R12 = F_Schlick( { f0: R0, f90: 1.0, dotVH: cosTheta1 } );\n\t//const R21 = R12;\n\tconst T121 = R12.oneMinus();\n\tconst phi12 = iridescenceIOR.lessThan( outsideIOR ).select( Math.PI, 0.0 );\n\tconst phi21 = float( Math.PI ).sub( phi12 );\n\n\t// Second interface\n\tconst baseIOR = Fresnel0ToIor( baseF0.clamp( 0.0, 0.9999 ) ); // guard against 1.0\n\tconst R1 = IorToFresnel0( baseIOR, iridescenceIOR.toVec3() );\n\tconst R23 = F_Schlick( { f0: R1, f90: 1.0, dotVH: cosTheta2 } );\n\tconst phi23 = vec3(\n\t\tbaseIOR.x.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\n\t\tbaseIOR.y.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\n\t\tbaseIOR.z.lessThan( iridescenceIOR ).select( Math.PI, 0.0 )\n\t);\n\n\t// Phase shift\n\tconst OPD = iridescenceIOR.mul( thinFilmThickness, cosTheta2, 2.0 );\n\tconst phi = vec3( phi21 ).add( phi23 );\n\n\t// Compound terms\n\tconst R123 = R12.mul( R23 ).clamp( 1e-5, 0.9999 );\n\tconst r123 = R123.sqrt();\n\tconst Rs = T121.pow2().mul( R23 ).div( vec3( 1.0 ).sub( R123 ) );\n\n\t// Reflectance term for m = 0 (DC term amplitude)\n\tconst C0 = R12.add( Rs );\n\tconst I = C0.toVar();\n\n\t// Reflectance term for m > 0 (pairs of diracs)\n\tconst Cm = Rs.sub( T121 ).toVar();\n\n\tLoop( { start: 1, end: 2, condition: '<=', name: 'm' }, ( { m } ) => {\n\n\t\tCm.mulAssign( r123 );\n\t\tconst Sm = evalSensitivity( float( m ).mul( OPD ), float( m ).mul( phi ) ).mul( 2.0 );\n\t\tI.addAssign( Cm.mul( Sm ) );\n\n\t} );\n\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\treturn I.max( vec3( 0.0 ) );\n\n} ).setLayout( {\n\tname: 'evalIridescence',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'outsideIOR', type: 'float' },\n\t\t{ name: 'eta2', type: 'float' },\n\t\t{ name: 'cosTheta1', type: 'float' },\n\t\t{ name: 'thinFilmThickness', type: 'float' },\n\t\t{ name: 'baseF0', type: 'vec3' }\n\t]\n} );\n\n//\n//\tSheen\n//\n\n// This is a curve-fit approximation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\nconst IBLSheenBRDF = /*@__PURE__*/ Fn( ( { normal, viewDir, roughness } ) => {\n\n\tconst dotNV = normal.dot( viewDir ).saturate();\n\n\tconst r2 = roughness.pow2();\n\n\tconst a = select(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( -339.2 ).mul( r2 ).add( float( 161.4 ).mul( roughness ) ).sub( 25.9 ),\n\t\tfloat( -8.48 ).mul( r2 ).add( float( 14.3 ).mul( roughness ) ).sub( 9.95 )\n\t);\n\n\tconst b = select(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( 44.0 ).mul( r2 ).sub( float( 23.7 ).mul( roughness ) ).add( 3.26 ),\n\t\tfloat( 1.97 ).mul( r2 ).sub( float( 3.27 ).mul( roughness ) ).add( 0.72 )\n\t);\n\n\tconst DG = select( roughness.lessThan( 0.25 ), 0.0, float( 0.1 ).mul( roughness ).sub( 0.025 ) ).add( a.mul( dotNV ).add( b ).exp() );\n\n\treturn DG.mul( 1.0 / Math.PI ).saturate();\n\n} );\n\nconst clearcoatF0 = vec3( 0.04 );\nconst clearcoatF90 = float( 1 );\n\n\n/**\n * Represents the lighting model for a PBR material.\n *\n * @augments LightingModel\n */\nclass PhysicalLightingModel extends LightingModel {\n\n\t/**\n\t * Constructs a new physical lighting model.\n\t *\n\t * @param {boolean} [clearcoat=false] - Whether clearcoat is supported or not.\n\t * @param {boolean} [sheen=false] - Whether sheen is supported or not.\n\t * @param {boolean} [iridescence=false] - Whether iridescence is supported or not.\n\t * @param {boolean} [anisotropy=false] - Whether anisotropy is supported or not.\n\t * @param {boolean} [transmission=false] - Whether transmission is supported or not.\n\t * @param {boolean} [dispersion=false] - Whether dispersion is supported or not.\n\t */\n\tconstructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Whether clearcoat is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clearcoat = clearcoat;\n\n\t\t/**\n\t\t * Whether sheen is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.sheen = sheen;\n\n\t\t/**\n\t\t * Whether iridescence is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.iridescence = iridescence;\n\n\t\t/**\n\t\t * Whether anisotropy is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.anisotropy = anisotropy;\n\n\t\t/**\n\t\t * Whether transmission is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.transmission = transmission;\n\n\t\t/**\n\t\t * Whether dispersion is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.dispersion = dispersion;\n\n\t\t/**\n\t\t * The clear coat radiance.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatRadiance = null;\n\n\t\t/**\n\t\t * The clear coat specular direct.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatSpecularDirect = null;\n\n\t\t/**\n\t\t * The clear coat specular indirect.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatSpecularIndirect = null;\n\n\t\t/**\n\t\t * The sheen specular direct.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenSpecularDirect = null;\n\n\t\t/**\n\t\t * The sheen specular indirect.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenSpecularIndirect = null;\n\n\t\t/**\n\t\t * The iridescence Fresnel.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceFresnel = null;\n\n\t\t/**\n\t\t * The iridescence F0.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceF0 = null;\n\n\t}\n\n\t/**\n\t * Depending on what features are requested, the method prepares certain node variables\n\t * which are later used for lighting computations.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tstart( builder ) {\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatRadiance = vec3().toVar( 'clearcoatRadiance' );\n\t\t\tthis.clearcoatSpecularDirect = vec3().toVar( 'clearcoatSpecularDirect' );\n\t\t\tthis.clearcoatSpecularIndirect = vec3().toVar( 'clearcoatSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect = vec3().toVar( 'sheenSpecularDirect' );\n\t\t\tthis.sheenSpecularIndirect = vec3().toVar( 'sheenSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.iridescence === true ) {\n\n\t\t\tconst dotNVi = transformedNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tthis.iridescenceFresnel = evalIridescence( {\n\t\t\t\toutsideIOR: float( 1.0 ),\n\t\t\t\teta2: iridescenceIOR,\n\t\t\t\tcosTheta1: dotNVi,\n\t\t\t\tthinFilmThickness: iridescenceThickness,\n\t\t\t\tbaseF0: specularColor\n\t\t\t} );\n\n\t\t\tthis.iridescenceF0 = Schlick_to_F0( { f: this.iridescenceFresnel, f90: 1.0, dotVH: dotNVi } );\n\n\t\t}\n\n\t\tif ( this.transmission === true ) {\n\n\t\t\tconst position = positionWorld;\n\t\t\tconst v = cameraPosition.sub( positionWorld ).normalize(); // TODO: Create Node for this, same issue in MaterialX\n\t\t\tconst n = transformedNormalWorld;\n\n\t\t\tconst context = builder.context;\n\n\t\t\tcontext.backdrop = getIBLVolumeRefraction(\n\t\t\t\tn,\n\t\t\t\tv,\n\t\t\t\troughness,\n\t\t\t\tdiffuseColor,\n\t\t\t\tspecularColor,\n\t\t\t\tspecularF90, // specularF90\n\t\t\t\tposition, // positionWorld\n\t\t\t\tmodelWorldMatrix, // modelMatrix\n\t\t\t\tcameraViewMatrix, // viewMatrix\n\t\t\t\tcameraProjectionMatrix, // projMatrix\n\t\t\t\tior,\n\t\t\t\tthickness,\n\t\t\t\tattenuationColor,\n\t\t\t\tattenuationDistance,\n\t\t\t\tthis.dispersion ? dispersion : null\n\t\t\t);\n\n\t\t\tcontext.backdropAlpha = transmission;\n\n\t\t\tdiffuseColor.a.mulAssign( mix( 1, context.backdrop.a, transmission ) );\n\n\t\t}\n\n\t\tsuper.start( builder );\n\n\t}\n\n\t// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n\t// Approximates multi-scattering in order to preserve energy.\n\t// http://www.jcgt.org/published/0008/01/03/\n\n\tcomputeMultiscattering( singleScatter, multiScatter, specularF90 ) {\n\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst fab = DFGApprox( { roughness, dotNV } );\n\n\t\tconst Fr = this.iridescenceF0 ? iridescence.mix( specularColor, this.iridescenceF0 ) : specularColor;\n\n\t\tconst FssEss = Fr.mul( fab.x ).add( specularF90.mul( fab.y ) );\n\n\t\tconst Ess = fab.x.add( fab.y );\n\t\tconst Ems = Ess.oneMinus();\n\n\t\tconst Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21\n\t\tconst Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );\n\n\t\tsingleScatter.addAssign( FssEss );\n\t\tmultiScatter.addAssign( Fms.mul( Ems ) );\n\n\t}\n\n\t/**\n\t * Implements the direct light.\n\t *\n\t * @param {Object} lightData - The light data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\n\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\n\t\tconst irradiance = dotNL.mul( lightColor );\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect.addAssign( irradiance.mul( BRDF_Sheen( { lightDirection } ) ) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNLcc = transformedClearcoatNormalView.dot( lightDirection ).clamp();\n\t\t\tconst ccIrradiance = dotNLcc.mul( lightColor );\n\n\t\t\tthis.clearcoatSpecularDirect.addAssign( ccIrradiance.mul( BRDF_GGX( { lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView } ) ) );\n\n\t\t}\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX( { lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy } ) ) );\n\n\t}\n\n\t/**\n\t * This method is intended for implementing the direct light term for\n\t * rect area light nodes.\n\t *\n\t * @param {Object} input - The input data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirectRectArea( { lightColor, lightPosition, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 } ) {\n\n\t\tconst p0 = lightPosition.add( halfWidth ).sub( halfHeight ); // counterclockwise; light shines in local neg z direction\n\t\tconst p1 = lightPosition.sub( halfWidth ).sub( halfHeight );\n\t\tconst p2 = lightPosition.sub( halfWidth ).add( halfHeight );\n\t\tconst p3 = lightPosition.add( halfWidth ).add( halfHeight );\n\n\t\tconst N = transformedNormalView;\n\t\tconst V = positionViewDirection;\n\t\tconst P = positionView.toVar();\n\n\t\tconst uv = LTC_Uv( { N, V, roughness } );\n\n\t\tconst t1 = ltc_1.sample( uv ).toVar();\n\t\tconst t2 = ltc_2.sample( uv ).toVar();\n\n\t\tconst mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3( 0, 1, 0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t).toVar();\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tconst fresnel = specularColor.mul( t2.x ).add( specularColor.oneMinus().mul( t2.y ) ).toVar();\n\n\t\treflectedLight.directSpecular.addAssign( lightColor.mul( fresnel ).mul( LTC_Evaluate( { N, V, P, mInv, p0, p1, p2, p3 } ) ) );\n\n\t\treflectedLight.directDiffuse.addAssign( lightColor.mul( diffuseColor ).mul( LTC_Evaluate( { N, V, P, mInv: mat3( 1, 0, 0, 0, 1, 0, 0, 0, 1 ), p0, p1, p2, p3 } ) ) );\n\n\t}\n\n\t/**\n\t * Implements the indirect lighting.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirect( builder ) {\n\n\t\tthis.indirectDiffuse( builder );\n\t\tthis.indirectSpecular( builder );\n\t\tthis.ambientOcclusion( builder );\n\n\t}\n\n\t/**\n\t * Implements the indirect diffuse term.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirectDiffuse( builder ) {\n\n\t\tconst { irradiance, reflectedLight } = builder.context;\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t}\n\n\t/**\n\t * Implements the indirect specular term.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirectSpecular( builder ) {\n\n\t\tconst { radiance, iblIrradiance, reflectedLight } = builder.context;\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.addAssign( iblIrradiance.mul(\n\t\t\t\tsheen,\n\t\t\t\tIBLSheenBRDF( {\n\t\t\t\t\tnormal: transformedNormalView,\n\t\t\t\t\tviewDir: positionViewDirection,\n\t\t\t\t\troughness: sheenRoughness\n\t\t\t\t} )\n\t\t\t) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst clearcoatEnv = EnvironmentBRDF( {\n\t\t\t\tdotNV: dotNVcc,\n\t\t\t\tspecularColor: clearcoatF0,\n\t\t\t\tspecularF90: clearcoatF90,\n\t\t\t\troughness: clearcoatRoughness\n\t\t\t} );\n\n\t\t\tthis.clearcoatSpecularIndirect.addAssign( this.clearcoatRadiance.mul( clearcoatEnv ) );\n\n\t\t}\n\n\t\t// Both indirect specular and indirect diffuse light accumulate here\n\n\t\tconst singleScattering = vec3().toVar( 'singleScattering' );\n\t\tconst multiScattering = vec3().toVar( 'multiScattering' );\n\t\tconst cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );\n\n\t\tthis.computeMultiscattering( singleScattering, multiScattering, specularF90 );\n\n\t\tconst totalScattering = singleScattering.add( multiScattering );\n\n\t\tconst diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );\n\n\t\treflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );\n\t\treflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );\n\n\t\treflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );\n\n\t}\n\n\t/**\n\t * Implements the ambient occlusion term.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tambientOcclusion( builder ) {\n\n\t\tconst { ambientOcclusion, reflectedLight } = builder.context;\n\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst aoNV = dotNV.add( ambientOcclusion );\n\t\tconst aoExp = roughness.mul( -16 ).oneMinus().negate().exp2();\n\n\t\tconst aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\t\treflectedLight.indirectSpecular.mulAssign( aoNode );\n\n\t}\n\n\t/**\n\t * Used for final lighting accumulations depending on the requested features.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tfinish( { context } ) {\n\n\t\tconst { outgoingLight } = context;\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst Fcc = F_Schlick( {\n\t\t\t\tdotVH: dotNVcc,\n\t\t\t\tf0: clearcoatF0,\n\t\t\t\tf90: clearcoatF90\n\t\t\t} );\n\n\t\t\tconst clearcoatLight = outgoingLight.mul( clearcoat.mul( Fcc ).oneMinus() ).add( this.clearcoatSpecularDirect.add( this.clearcoatSpecularIndirect ).mul( clearcoat ) );\n\n\t\t\toutgoingLight.assign( clearcoatLight );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tconst sheenEnergyComp = sheen.r.max( sheen.g ).max( sheen.b ).mul( 0.157 ).oneMinus();\n\t\t\tconst sheenLight = outgoingLight.mul( sheenEnergyComp ).add( this.sheenSpecularDirect, this.sheenSpecularIndirect );\n\n\t\t\toutgoingLight.assign( sheenLight );\n\n\t\t}\n\n\t}\n\n}\n\n// These defines must match with PMREMGenerator\n\nconst cubeUV_r0 = /*@__PURE__*/ float( 1.0 );\nconst cubeUV_m0 = /*@__PURE__*/ float( -2 );\nconst cubeUV_r1 = /*@__PURE__*/ float( 0.8 );\nconst cubeUV_m1 = /*@__PURE__*/ float( -1 );\nconst cubeUV_r4 = /*@__PURE__*/ float( 0.4 );\nconst cubeUV_m4 = /*@__PURE__*/ float( 2.0 );\nconst cubeUV_r5 = /*@__PURE__*/ float( 0.305 );\nconst cubeUV_m5 = /*@__PURE__*/ float( 3.0 );\nconst cubeUV_r6 = /*@__PURE__*/ float( 0.21 );\nconst cubeUV_m6 = /*@__PURE__*/ float( 4.0 );\n\nconst cubeUV_minMipLevel = /*@__PURE__*/ float( 4.0 );\nconst cubeUV_minTileSize = /*@__PURE__*/ float( 16.0 );\n\n// These shader functions convert between the UV coordinates of a single face of\n// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n// sampling a textureCube (not generally normalized ).\n\nconst getFace = /*@__PURE__*/ Fn( ( [ direction ] ) => {\n\n\tconst absDirection = vec3( abs( direction ) ).toVar();\n\tconst face = float( -1 ).toVar();\n\n\tIf( absDirection.x.greaterThan( absDirection.z ), () => {\n\n\t\tIf( absDirection.x.greaterThan( absDirection.y ), () => {\n\n\t\t\tface.assign( select( direction.x.greaterThan( 0.0 ), 0.0, 3.0 ) );\n\n\t\t} ).Else( () => {\n\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\n\n\t\t} );\n\n\t} ).Else( () => {\n\n\t\tIf( absDirection.z.greaterThan( absDirection.y ), () => {\n\n\t\t\tface.assign( select( direction.z.greaterThan( 0.0 ), 2.0, 5.0 ) );\n\n\t\t} ).Else( () => {\n\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\n\n\t\t} );\n\n\t} );\n\n\treturn face;\n\n} ).setLayout( {\n\tname: 'getFace',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'direction', type: 'vec3' }\n\t]\n} );\n\n// RH coordinate system; PMREM face-indexing convention\nconst getUV = /*@__PURE__*/ Fn( ( [ direction, face ] ) => {\n\n\tconst uv = vec2().toVar();\n\n\tIf( face.equal( 0.0 ), () => {\n\n\t\tuv.assign( vec2( direction.z, direction.y ).div( abs( direction.x ) ) ); // pos x\n\n\t} ).ElseIf( face.equal( 1.0 ), () => {\n\n\t\tuv.assign( vec2( direction.x.negate(), direction.z.negate() ).div( abs( direction.y ) ) ); // pos y\n\n\t} ).ElseIf( face.equal( 2.0 ), () => {\n\n\t\tuv.assign( vec2( direction.x.negate(), direction.y ).div( abs( direction.z ) ) ); // pos z\n\n\t} ).ElseIf( face.equal( 3.0 ), () => {\n\n\t\tuv.assign( vec2( direction.z.negate(), direction.y ).div( abs( direction.x ) ) ); // neg x\n\n\t} ).ElseIf( face.equal( 4.0 ), () => {\n\n\t\tuv.assign( vec2( direction.x.negate(), direction.z ).div( abs( direction.y ) ) ); // neg y\n\n\t} ).Else( () => {\n\n\t\tuv.assign( vec2( direction.x, direction.y ).div( abs( direction.z ) ) ); // neg z\n\n\t} );\n\n\treturn mul( 0.5, uv.add( 1.0 ) );\n\n} ).setLayout( {\n\tname: 'getUV',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'direction', type: 'vec3' },\n\t\t{ name: 'face', type: 'float' }\n\t]\n} );\n\nconst roughnessToMip = /*@__PURE__*/ Fn( ( [ roughness ] ) => {\n\n\tconst mip = float( 0.0 ).toVar();\n\n\tIf( roughness.greaterThanEqual( cubeUV_r1 ), () => {\n\n\t\tmip.assign( cubeUV_r0.sub( roughness ).mul( cubeUV_m1.sub( cubeUV_m0 ) ).div( cubeUV_r0.sub( cubeUV_r1 ) ).add( cubeUV_m0 ) );\n\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r4 ), () => {\n\n\t\tmip.assign( cubeUV_r1.sub( roughness ).mul( cubeUV_m4.sub( cubeUV_m1 ) ).div( cubeUV_r1.sub( cubeUV_r4 ) ).add( cubeUV_m1 ) );\n\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r5 ), () => {\n\n\t\tmip.assign( cubeUV_r4.sub( roughness ).mul( cubeUV_m5.sub( cubeUV_m4 ) ).div( cubeUV_r4.sub( cubeUV_r5 ) ).add( cubeUV_m4 ) );\n\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r6 ), () => {\n\n\t\tmip.assign( cubeUV_r5.sub( roughness ).mul( cubeUV_m6.sub( cubeUV_m5 ) ).div( cubeUV_r5.sub( cubeUV_r6 ) ).add( cubeUV_m5 ) );\n\n\t} ).Else( () => {\n\n\t\tmip.assign( float( -2 ).mul( log2( mul( 1.16, roughness ) ) ) ); // 1.16 = 1.79^0.25\n\n\t} );\n\n\treturn mip;\n\n} ).setLayout( {\n\tname: 'roughnessToMip',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' }\n\t]\n} );\n\n// RH coordinate system; PMREM face-indexing convention\nconst getDirection = /*@__PURE__*/ Fn( ( [ uv_immutable, face ] ) => {\n\n\tconst uv = uv_immutable.toVar();\n\tuv.assign( mul( 2.0, uv ).sub( 1.0 ) );\n\tconst direction = vec3( uv, 1.0 ).toVar();\n\n\tIf( face.equal( 0.0 ), () => {\n\n\t\tdirection.assign( direction.zyx ); // ( 1, v, u ) pos x\n\n\t} ).ElseIf( face.equal( 1.0 ), () => {\n\n\t\tdirection.assign( direction.xzy );\n\t\tdirection.xz.mulAssign( -1 ); // ( -u, 1, -v ) pos y\n\n\t} ).ElseIf( face.equal( 2.0 ), () => {\n\n\t\tdirection.x.mulAssign( -1 ); // ( -u, v, 1 ) pos z\n\n\t} ).ElseIf( face.equal( 3.0 ), () => {\n\n\t\tdirection.assign( direction.zyx );\n\t\tdirection.xz.mulAssign( -1 ); // ( -1, v, -u ) neg x\n\n\t} ).ElseIf( face.equal( 4.0 ), () => {\n\n\t\tdirection.assign( direction.xzy );\n\t\tdirection.xy.mulAssign( -1 ); // ( -u, -1, v ) neg y\n\n\t} ).ElseIf( face.equal( 5.0 ), () => {\n\n\t\tdirection.z.mulAssign( -1 ); // ( u, v, -1 ) neg zS\n\n\t} );\n\n\treturn direction;\n\n} ).setLayout( {\n\tname: 'getDirection',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'uv', type: 'vec2' },\n\t\t{ name: 'face', type: 'float' }\n\t]\n} );\n\n//\n\nconst textureCubeUV = /*@__PURE__*/ Fn( ( [ envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\n\n\tconst roughness = float( roughness_immutable );\n\tconst sampleDir = vec3( sampleDir_immutable );\n\n\tconst mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\tconst mipF = fract( mip );\n\tconst mipInt = floor( mip );\n\tconst color0 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\n\n\tIf( mipF.notEqual( 0.0 ), () => {\n\n\t\tconst color1 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt.add( 1.0 ), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\n\n\t\tcolor0.assign( mix( color0, color1, mipF ) );\n\n\t} );\n\n\treturn color0;\n\n} );\n\nconst bilinearCubeUV = /*@__PURE__*/ Fn( ( [ envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\n\n\tconst mipInt = float( mipInt_immutable ).toVar();\n\tconst direction = vec3( direction_immutable );\n\tconst face = float( getFace( direction ) ).toVar();\n\tconst filterInt = float( max$1( cubeUV_minMipLevel.sub( mipInt ), 0.0 ) ).toVar();\n\tmipInt.assign( max$1( mipInt, cubeUV_minMipLevel ) );\n\tconst faceSize = float( exp2( mipInt ) ).toVar();\n\tconst uv = vec2( getUV( direction, face ).mul( faceSize.sub( 2.0 ) ).add( 1.0 ) ).toVar();\n\n\tIf( face.greaterThan( 2.0 ), () => {\n\n\t\tuv.y.addAssign( faceSize );\n\t\tface.subAssign( 3.0 );\n\n\t} );\n\n\tuv.x.addAssign( face.mul( faceSize ) );\n\tuv.x.addAssign( filterInt.mul( mul( 3.0, cubeUV_minTileSize ) ) );\n\tuv.y.addAssign( mul( 4.0, exp2( CUBEUV_MAX_MIP ).sub( faceSize ) ) );\n\tuv.x.mulAssign( CUBEUV_TEXEL_WIDTH );\n\tuv.y.mulAssign( CUBEUV_TEXEL_HEIGHT );\n\n\treturn envMap.sample( uv ).grad( vec2(), vec2() ); // disable anisotropic filtering\n\n} );\n\nconst getSample = /*@__PURE__*/ Fn( ( { envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\n\n\tconst cosTheta = cos( theta );\n\n\t// Rodrigues' axis-angle rotation\n\tconst sampleDirection = outputDirection.mul( cosTheta )\n\t\t.add( axis.cross( outputDirection ).mul( sin( theta ) ) )\n\t\t.add( axis.mul( axis.dot( outputDirection ).mul( cosTheta.oneMinus() ) ) );\n\n\treturn bilinearCubeUV( envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP );\n\n} );\n\nconst blur = /*@__PURE__*/ Fn( ( { n, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\n\n\tconst axis = vec3( select( latitudinal, poleAxis, cross( poleAxis, outputDirection ) ) ).toVar();\n\n\tIf( axis.equal( vec3( 0.0 ) ), () => {\n\n\t\taxis.assign( vec3( outputDirection.z, 0.0, outputDirection.x.negate() ) );\n\n\t} );\n\n\taxis.assign( normalize( axis ) );\n\n\tconst gl_FragColor = vec3().toVar();\n\tgl_FragColor.addAssign( weights.element( 0 ).mul( getSample( { theta: 0.0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\n\n\tLoop( { start: int( 1 ), end: n }, ( { i } ) => {\n\n\t\tIf( i.greaterThanEqual( samples ), () => {\n\n\t\t\tBreak();\n\n\t\t} );\n\n\t\tconst theta = float( dTheta.mul( float( i ) ) ).toVar();\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta: theta.mul( -1 ), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\n\n\t} );\n\n\treturn vec4( gl_FragColor, 1 );\n\n} );\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera( -1, 1, 1, -1, 0, 1 );\nconst _cubeCamera = /*@__PURE__*/ new PerspectiveCamera( 90, 1 );\nconst _clearColor$2 = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\nlet _oldActiveCubeFace = 0;\nlet _oldActiveMipmapLevel = 0;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( -1, 1, -1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, -1 ),\n\t/*@__PURE__*/ new Vector3( -1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 )\n];\n\nconst _origin = /*@__PURE__*/ new Vector3();\n\n// maps blur materials to their uniforms dictionary\n\nconst _uniformsMap = new WeakMap();\n\n// WebGPU Face indices\nconst _faceLib = [\n\t3, 1, 5,\n\t0, 4, 2\n];\n\nconst _direction = /*@__PURE__*/ getDirection( uv(), attribute( 'faceIndex' ) ).normalize();\nconst _outputDirection = /*@__PURE__*/ vec3( _direction.x, _direction.y, _direction.z );\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting:\n * {@link https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view}\n*/\nclass PMREMGenerator {\n\n\t/**\n\t * Constructs a new PMREM generator.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t */\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\t\tthis._lodMeshes = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\t\tthis._backgroundBox = null;\n\n\t}\n\n\tget _hasInitialized() {\n\n\t\treturn this._renderer.hasInitialized();\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety.\n\t *\n\t * @param {Scene} scene - The scene to be captured.\n\t * @param {number} [sigma=0] - The blur radius in radians.\n\t * @param {number} [near=0.1] - The near plane distance.\n\t * @param {number} [far=100] - The far plane distance.\n\t * @param {Object} [options={}] - The configuration options.\n\t * @param {number} [options.size=256] - The texture size of the PMREM.\n\t * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.\n\t * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.\n\t * @return {RenderTarget} The resulting PMREM.\n\t * @see {@link PMREMGenerator#fromSceneAsync}\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100, options = {} ) {\n\n\t\tconst {\n\t\t\tsize = 256,\n\t\t\tposition = _origin,\n\t\t\trenderTarget = null,\n\t\t} = options;\n\n\t\tthis._setSize( size );\n\n\t\tif ( this._hasInitialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.' );\n\n\t\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\n\t\t\toptions.renderTarget = cubeUVRenderTarget;\n\n\t\t\tthis.fromSceneAsync( scene, sigma, near, far, options );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t *\n\t * @param {Scene} scene - The scene to be captured.\n\t * @param {number} [sigma=0] - The blur radius in radians.\n\t * @param {number} [near=0.1] - The near plane distance.\n\t * @param {number} [far=100] - The far plane distance.\n\t * @param {Object} [options={}] - The configuration options.\n\t * @param {number} [options.size=256] - The texture size of the PMREM.\n\t * @param {Vector3} [options.position=origin] - The position of the internal cube camera that renders the scene.\n\t * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.\n\t * @return {Promise<RenderTarget>} A Promise that resolve with the PMREM when the generation has been finished.\n\t * @see {@link PMREMGenerator#fromScene}\n\t */\n\tasync fromSceneAsync( scene, sigma = 0, near = 0.1, far = 100, options = {} ) {\n\n\t\tif ( this._hasInitialized === false ) await this._renderer.init();\n\n\t\treturn this.fromScene( scene, sigma, near, far, options );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t *\n\t * @param {Texture} equirectangular - The equirectangular texture to be converted.\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\n\t * @return {RenderTarget} The resulting PMREM.\n\t * @see {@link PMREMGenerator#fromEquirectangularAsync}\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\tif ( this._hasInitialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead.' );\n\n\t\t\tthis._setSizeFromTexture( equirectangular );\n\n\t\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\n\t\t\tthis.fromEquirectangularAsync( equirectangular, cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t}\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t *\n\t * @param {Texture} equirectangular - The equirectangular texture to be converted.\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\n\t * @return {Promise<RenderTarget>} The resulting PMREM.\n\t * @see {@link PMREMGenerator#fromEquirectangular}\n\t */\n\tasync fromEquirectangularAsync( equirectangular, renderTarget = null ) {\n\n\t\tif ( this._hasInitialized === false ) await this._renderer.init();\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t *\n\t * @param {Texture} cubemap - The cubemap texture to be converted.\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\n\t * @return {RenderTarget} The resulting PMREM.\n\t * @see {@link PMREMGenerator#fromCubemapAsync}\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\tif ( this._hasInitialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead.' );\n\n\t\t\tthis._setSizeFromTexture( cubemap );\n\n\t\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\n\t\t\tthis.fromCubemapAsync( cubemap, renderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t}\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * with the 256 x 256 cubemap output.\n\t *\n\t * @param {Texture} cubemap - The cubemap texture to be converted.\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\n\t * @return {Promise<RenderTarget>} The resulting PMREM.\n\t * @see {@link PMREMGenerator#fromCubemap}\n\t */\n\tasync fromCubemapAsync( cubemap, renderTarget = null ) {\n\n\t\tif ( this._hasInitialized === false ) await this._renderer.init();\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t *\n\t * @returns {Promise}\n\t */\n\tasync compileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tawait this._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t *\n\t * @returns {Promise}\n\t */\n\tasync compileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tawait this._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\t\tif ( this._backgroundBox !== null ) {\n\n\t\t\tthis._backgroundBox.geometry.dispose();\n\t\t\tthis._backgroundBox.material.dispose();\n\n\t\t}\n\n\t}\n\n\t// private interface\n\n\t_setSizeFromTexture( texture ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t}\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tthis._setSizeFromTexture( texture );\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\t//depthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tasync _compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tawait this._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position ) {\n\n\t\tconst cubeCamera = _cubeCamera;\n\t\tcubeCamera.near = near;\n\t\tcubeCamera.far = far;\n\n\t\t// px, py, pz, nx, ny, nz\n\t\tconst upSign = [ 1, 1, 1, 1, -1, 1 ];\n\t\tconst forwardSign = [ 1, -1, 1, -1, 1, -1 ];\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.getClearColor( _clearColor$2 );\n\n\t\trenderer.autoClear = false;\n\n\t\tlet backgroundBox = this._backgroundBox;\n\n\t\tif ( backgroundBox === null ) {\n\n\t\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\t\tname: 'PMREM.Background',\n\t\t\t\tside: BackSide,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tdepthTest: false\n\t\t\t} );\n\n\t\t\tbackgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\t}\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundBox.material.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundBox.material.color.copy( _clearColor$2 );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\trenderer.clear();\n\n\t\tif ( useSolidColor ) {\n\n\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\n\t\t\t\tcubeCamera.lookAt( position.x + forwardSign[ i ], position.y, position.z );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\n\t\t\t\tcubeCamera.lookAt( position.x, position.y + forwardSign[ i ], position.z );\n\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\n\t\t\t\tcubeCamera.lookAt( position.x, position.y, position.z + forwardSign[ i ] );\n\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial( texture );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial( texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tmaterial.fragmentNode.value = texture;\n\n\t\tconst mesh = this._lodMeshes[ 0 ];\n\t\tmesh.material = material;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\t\tconst n = this._lodPlanes.length;\n\n\t\tfor ( let i = 1; i < n; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t *\n\t * @private\n\t * @param {RenderTarget} cubeUVRenderTarget - The cubemap render target.\n\t * @param {number} lodIn - The input level-of-detail.\n\t * @param {number} lodOut - The output level-of-detail.\n\t * @param {number} sigma - The blur radius in radians.\n\t * @param {Vector3} [poleAxis] - The pole axis.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error( 'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = this._lodMeshes[ lodOut ];\n\t\tblurMesh.material = blurMaterial;\n\n\t\tconst blurUniforms = _uniformsMap.get( blurMaterial );\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\ttargetIn.texture.frame = ( targetIn.texture.frame || 0 ) + 1;\n\n\t\tblurUniforms.envMap.value = targetIn.texture;\n\t\tblurUniforms.samples.value = samples;\n\t\tblurUniforms.weights.array = weights;\n\t\tblurUniforms.latitudinal.value = direction === 'latitudinal' ? 1 : 0;\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms.poleAxis.value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms.dTheta.value = radiansPerPixel;\n\t\tblurUniforms.mipInt.value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\tconst lodMeshes = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\n\t\tconst min = - texelSize;\n\t\tconst max = 1 + texelSize;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\n\t\t\tconst faceIdx = _faceLib[ face ];\n\t\t\tposition.set( coordinates, positionSize * vertices * faceIdx );\n\t\t\tuv.set( uv1, uvSize * vertices * faceIdx );\n\t\t\tconst fill = [ faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * faceIdx );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\t\tlodMeshes.push( new Mesh( planes, null ) );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas, lodMeshes };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new RenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.texture.isPMREMTexture = true;\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getMaterial( type ) {\n\n\tconst material = new NodeMaterial();\n\tmaterial.depthTest = false;\n\tmaterial.depthWrite = false;\n\tmaterial.blending = NoBlending;\n\tmaterial.name = `PMREM_${ type }`;\n\n\treturn material;\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = uniformArray( new Array( MAX_SAMPLES ).fill( 0 ) );\n\tconst poleAxis = uniform( new Vector3( 0, 1, 0 ) );\n\tconst dTheta = uniform( 0 );\n\tconst n = float( MAX_SAMPLES );\n\tconst latitudinal = uniform( 0 ); // false, bool\n\tconst samples = uniform( 1 ); // int\n\tconst envMap = texture( null );\n\tconst mipInt = uniform( 0 ); // int\n\tconst CUBEUV_TEXEL_WIDTH = float( 1 / width );\n\tconst CUBEUV_TEXEL_HEIGHT = float( 1 / height );\n\tconst CUBEUV_MAX_MIP = float( lodMax );\n\n\tconst materialUniforms = {\n\t\tn,\n\t\tlatitudinal,\n\t\tweights,\n\t\tpoleAxis,\n\t\toutputDirection: _outputDirection,\n\t\tdTheta,\n\t\tsamples,\n\t\tenvMap,\n\t\tmipInt,\n\t\tCUBEUV_TEXEL_WIDTH,\n\t\tCUBEUV_TEXEL_HEIGHT,\n\t\tCUBEUV_MAX_MIP\n\t};\n\n\tconst material = _getMaterial( 'blur' );\n\tmaterial.fragmentNode = blur( { ...materialUniforms, latitudinal: latitudinal.equal( 1 ) } );\n\n\t_uniformsMap.set( material, materialUniforms );\n\n\treturn material;\n\n}\n\nfunction _getCubemapMaterial( envTexture ) {\n\n\tconst material = _getMaterial( 'cubemap' );\n\tmaterial.fragmentNode = cubeTexture( envTexture, _outputDirection );\n\n\treturn material;\n\n}\n\nfunction _getEquirectMaterial( envTexture ) {\n\n\tconst material = _getMaterial( 'equirect' );\n\tmaterial.fragmentNode = texture( envTexture, equirectUV( _outputDirection ), 0 );\n\n\treturn material;\n\n}\n\nconst _cache = new WeakMap();\n\n/**\n * Generates the cubeUV size based on the given image height.\n *\n * @private\n * @param {number} imageHeight - The image height.\n * @return {{texelWidth: number,texelHeight: number, maxMip: number}} The result object.\n */\nfunction _generateCubeUVSize( imageHeight ) {\n\n\tconst maxMip = Math.log2( imageHeight ) - 2;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\n/**\n * Generates a PMREM from the given texture.\n *\n * @private\n * @param {Texture} texture - The texture to create the PMREM for.\n * @param {Renderer} renderer - The renderer.\n * @param {PMREMGenerator} generator - The PMREM generator.\n * @return {?Texture} The PMREM.\n */\nfunction _getPMREMFromTexture( texture, renderer, generator ) {\n\n\tconst cache = _getCache( renderer );\n\n\tlet cacheTexture = cache.get( texture );\n\n\tconst pmremVersion = cacheTexture !== undefined ? cacheTexture.pmremVersion : -1;\n\n\tif ( pmremVersion !== texture.pmremVersion ) {\n\n\t\tconst image = texture.image;\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( isCubeMapReady( image ) ) {\n\n\t\t\t\tcacheTexture = generator.fromCubemap( texture, cacheTexture );\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\n\t\t} else {\n\n\t\t\tif ( isEquirectangularMapReady( image ) ) {\n\n\t\t\t\tcacheTexture = generator.fromEquirectangular( texture, cacheTexture );\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcacheTexture.pmremVersion = texture.pmremVersion;\n\n\t\tcache.set( texture, cacheTexture );\n\n\t}\n\n\treturn cacheTexture.texture;\n\n}\n\n/**\n * Returns a cache that stores generated PMREMs for the respective textures.\n * A cache must be maintained per renderer since PMREMs are render target textures\n * which can't be shared across render contexts.\n *\n * @private\n * @param {Renderer} renderer - The renderer.\n * @return {WeakMap<Texture, Texture>} The PMREM cache.\n */\nfunction _getCache( renderer ) {\n\n\tlet rendererCache = _cache.get( renderer );\n\n\tif ( rendererCache === undefined ) {\n\n\t\trendererCache = new WeakMap();\n\t\t_cache.set( renderer, rendererCache );\n\n\t}\n\n\treturn rendererCache;\n\n}\n\n/**\n * This node represents a PMREM which is a special type of preprocessed\n * environment map intended for PBR materials.\n *\n * ```js\n * const material = new MeshStandardNodeMaterial();\n * material.envNode = pmremTexture( envMap );\n * ```\n *\n * @augments TempNode\n */\nclass PMREMNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'PMREMNode';\n\n\t}\n\n\t/**\n\t * Constructs a new function overloading node.\n\t *\n\t * @param {Texture} value - The input texture.\n\t * @param {Node<vec2>} [uvNode=null] - The uv node.\n\t * @param {Node<float>} [levelNode=null] - The level node.\n\t */\n\tconstructor( value, uvNode = null, levelNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * Reference to the input texture.\n\t\t *\n\t\t * @private\n\t\t * @type {Texture}\n\t\t */\n\t\tthis._value = value;\n\n\t\t/**\n\t\t * Reference to the generated PMREM.\n\t\t *\n\t\t * @private\n\t\t * @type {Texture | null}\n\t\t * @default null\n\t\t */\n\t\tthis._pmrem = null;\n\n\t\t/**\n\t\t *  The uv node.\n\t\t *\n\t\t * @type {Node<vec2>}\n\t\t */\n\t\tthis.uvNode = uvNode;\n\n\t\t/**\n\t\t *  The level node.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.levelNode = levelNode;\n\n\t\t/**\n\t\t * Reference to a PMREM generator.\n\t\t *\n\t\t * @private\n\t\t * @type {?PMREMGenerator}\n\t\t * @default null\n\t\t */\n\t\tthis._generator = null;\n\n\t\tconst defaultTexture = new Texture();\n\t\tdefaultTexture.isRenderTargetTexture = true;\n\n\t\t/**\n\t\t * The texture node holding the generated PMREM.\n\t\t *\n\t\t * @private\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis._texture = texture( defaultTexture );\n\n\t\t/**\n\t\t * A uniform representing the PMREM's width.\n\t\t *\n\t\t * @private\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis._width = uniform( 0 );\n\n\t\t/**\n\t\t * A uniform representing the PMREM's height.\n\t\t *\n\t\t * @private\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis._height = uniform( 0 );\n\n\t\t/**\n\t\t * A uniform representing the PMREM's max Mip.\n\t\t *\n\t\t * @private\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis._maxMip = uniform( 0 );\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.RENDER`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\tset value( value ) {\n\n\t\tthis._value = value;\n\t\tthis._pmrem = null;\n\n\t}\n\n\t/**\n\t * The node's texture value.\n\t *\n\t * @type {Texture}\n\t */\n\tget value() {\n\n\t\treturn this._value;\n\n\t}\n\n\t/**\n\t * Uses the given PMREM texture to update internal values.\n\t *\n\t * @param {Texture} texture - The PMREM texture.\n\t */\n\tupdateFromTexture( texture ) {\n\n\t\tconst cubeUVSize = _generateCubeUVSize( texture.image.height );\n\n\t\tthis._texture.value = texture;\n\t\tthis._width.value = cubeUVSize.texelWidth;\n\t\tthis._height.value = cubeUVSize.texelHeight;\n\t\tthis._maxMip.value = cubeUVSize.maxMip;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tlet pmrem = this._pmrem;\n\n\t\tconst pmremVersion = pmrem ? pmrem.pmremVersion : -1;\n\t\tconst texture = this._value;\n\n\t\tif ( pmremVersion !== texture.pmremVersion ) {\n\n\t\t\tif ( texture.isPMREMTexture === true ) {\n\n\t\t\t\tpmrem = texture;\n\n\t\t\t} else {\n\n\t\t\t\tpmrem = _getPMREMFromTexture( texture, frame.renderer, this._generator );\n\n\t\t\t}\n\n\t\t\tif ( pmrem !== null ) {\n\n\t\t\t\tthis._pmrem = pmrem;\n\n\t\t\t\tthis.updateFromTexture( pmrem );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tif ( this._generator === null ) {\n\n\t\t\tthis._generator = new PMREMGenerator( builder.renderer );\n\n\t\t}\n\n\t\tthis.updateBefore( builder );\n\n\t\t//\n\n\t\tlet uvNode = this.uvNode;\n\n\t\tif ( uvNode === null && builder.context.getUV ) {\n\n\t\t\tuvNode = builder.context.getUV( this );\n\n\t\t}\n\n\t\t//\n\n\t\tuvNode = materialEnvRotation.mul( vec3( uvNode.x, uvNode.y.negate(), uvNode.z ) );\n\n\t\t//\n\n\t\tlet levelNode = this.levelNode;\n\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\n\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\n\n\t\t}\n\n\t\t//\n\n\t\treturn textureCubeUV( this._texture, uvNode, levelNode, this._width, this._height, this._maxMip );\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tif ( this._generator !== null ) this._generator.dispose();\n\n\t}\n\n}\n\n/**\n * Returns `true` if the given cube map image has been fully loaded.\n *\n * @private\n * @param {?Array<(Image|Object)>} [image] - The cube map image.\n * @return {boolean} Whether the given cube map is ready or not.\n */\nfunction isCubeMapReady( image ) {\n\n\tif ( image === null || image === undefined ) return false;\n\n\tlet count = 0;\n\tconst length = 6;\n\n\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t}\n\n\treturn count === length;\n\n\n}\n\n/**\n * Returns `true` if the given equirectangular image has been fully loaded.\n *\n * @private\n * @param {(Image|Object)} image - The equirectangular image.\n * @return {boolean} Whether the given cube map is ready or not.\n */\nfunction isEquirectangularMapReady( image ) {\n\n\tif ( image === null || image === undefined ) return false;\n\n\treturn image.height > 0;\n\n}\n\n/**\n * TSL function for creating a PMREM node.\n *\n * @tsl\n * @function\n * @param {Texture} value - The input texture.\n * @param {?Node<vec2>} [uvNode=null] - The uv node.\n * @param {?Node<float>} [levelNode=null] - The level node.\n * @returns {PMREMNode}\n */\nconst pmremTexture = /*@__PURE__*/ nodeProxy( PMREMNode ).setParameterLength( 1, 3 );\n\nconst _envNodeCache = new WeakMap();\n\n/**\n * Represents a physical model for Image-based lighting (IBL). The environment\n * is defined via environment maps in the equirectangular, cube map or cubeUV (PMREM) format.\n * `EnvironmentNode` is intended for PBR materials like {@link MeshStandardNodeMaterial}.\n *\n * @augments LightingNode\n */\nclass EnvironmentNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'EnvironmentNode';\n\n\t}\n\n\t/**\n\t * Constructs a new environment node.\n\t *\n\t * @param {Node} [envNode=null] - A node representing the environment.\n\t */\n\tconstructor( envNode = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * A node representing the environment.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.envNode = envNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { material } = builder;\n\n\t\tlet envNode = this.envNode;\n\n\t\tif ( envNode.isTextureNode || envNode.isMaterialReferenceNode ) {\n\n\t\t\tconst value = ( envNode.isTextureNode ) ? envNode.value : material[ envNode.property ];\n\n\t\t\tlet cacheEnvNode = _envNodeCache.get( value );\n\n\t\t\tif ( cacheEnvNode === undefined ) {\n\n\t\t\t\tcacheEnvNode = pmremTexture( value );\n\n\t\t\t\t_envNodeCache.set( value, cacheEnvNode );\n\n\t\t\t}\n\n\t\t\tenvNode\t= cacheEnvNode;\n\n\t\t}\n\n\t\t//\n\n\t\tconst useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;\n\t\tconst radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;\n\n\t\tconst radiance = envNode.context( createRadianceContext( roughness, radianceNormalView ) ).mul( materialEnvIntensity );\n\t\tconst irradiance = envNode.context( createIrradianceContext( transformedNormalWorld ) ).mul( Math.PI ).mul( materialEnvIntensity );\n\n\t\tconst isolateRadiance = cache( radiance );\n\t\tconst isolateIrradiance = cache( irradiance );\n\n\t\t//\n\n\t\tbuilder.context.radiance.addAssign( isolateRadiance );\n\n\t\tbuilder.context.iblIrradiance.addAssign( isolateIrradiance );\n\n\t\t//\n\n\t\tconst clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\n\n\t\tif ( clearcoatRadiance ) {\n\n\t\t\tconst clearcoatRadianceContext = envNode.context( createRadianceContext( clearcoatRoughness, transformedClearcoatNormalView ) ).mul( materialEnvIntensity );\n\t\t\tconst isolateClearcoatRadiance = cache( clearcoatRadianceContext );\n\n\t\t\tclearcoatRadiance.addAssign( isolateClearcoatRadiance );\n\n\t\t}\n\n\t}\n\n}\n\nconst createRadianceContext = ( roughnessNode, normalViewNode ) => {\n\n\tlet reflectVec = null;\n\n\treturn {\n\t\tgetUV: () => {\n\n\t\t\tif ( reflectVec === null ) {\n\n\t\t\t\treflectVec = positionViewDirection.negate().reflect( normalViewNode );\n\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\t\treflectVec = roughnessNode.mul( roughnessNode ).mix( reflectVec, normalViewNode ).normalize();\n\n\t\t\t\treflectVec = reflectVec.transformDirection( cameraViewMatrix );\n\n\t\t\t}\n\n\t\t\treturn reflectVec;\n\n\t\t},\n\t\tgetTextureLevel: () => {\n\n\t\t\treturn roughnessNode;\n\n\t\t}\n\t};\n\n};\n\nconst createIrradianceContext = ( normalWorldNode ) => {\n\n\treturn {\n\t\tgetUV: () => {\n\n\t\t\treturn normalWorldNode;\n\n\t\t},\n\t\tgetTextureLevel: () => {\n\n\t\t\treturn float( 1.0 );\n\n\t\t}\n\t};\n\n};\n\nconst _defaultValues$6 = /*@__PURE__*/ new MeshStandardMaterial();\n\n/**\n * Node material version of {@link MeshStandardMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshStandardNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshStandardNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh standard node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshStandardNodeMaterial = true;\n\n\t\t/**\n\t\t * Set to `true` because standard materials react on lights.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\t/**\n\t\t * The emissive color of standard materials is by default inferred from the `emissive`,\n\t\t * `emissiveIntensity` and `emissiveMap` properties. This node property allows to\n\t\t * overwrite the default and define the emissive color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the emissive color but modify the existing\n\t\t * value instead, use {@link materialEmissive}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveNode = null;\n\n\t\t/**\n\t\t * The metalness of standard materials is by default inferred from the `metalness`,\n\t\t * and `metalnessMap` properties. This node property allows to\n\t\t * overwrite the default and define the metalness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the metalness but modify the existing\n\t\t * value instead, use {@link materialMetalness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.metalnessNode = null;\n\n\t\t/**\n\t\t * The roughness of standard materials is by default inferred from the `roughness`,\n\t\t * and `roughnessMap` properties. This node property allows to\n\t\t * overwrite the default and define the roughness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the roughness but modify the existing\n\t\t * value instead, use {@link materialRoughness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.roughnessNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues$6 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Overwritten since this type of material uses {@link EnvironmentNode}\n\t * to implement the PBR (PMREM based) environment mapping. Besides, the\n\t * method honors `Scene.environment`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?EnvironmentNode<vec3>} The environment node.\n\t */\n\tsetupEnvironment( builder ) {\n\n\t\tlet envNode = super.setupEnvironment( builder );\n\n\t\tif ( envNode === null && builder.environmentNode ) {\n\n\t\t\tenvNode = builder.environmentNode;\n\n\t\t}\n\n\t\treturn envNode ? new EnvironmentNode( envNode ) : null;\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {PhysicalLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel();\n\n\t}\n\n\t/**\n\t * Setups the specular related node variables.\n\t */\n\tsetupSpecular() {\n\n\t\tconst specularColorNode = mix( vec3( 0.04 ), diffuseColor.rgb, metalness );\n\n\t\tspecularColor.assign( specularColorNode );\n\t\tspecularF90.assign( 1.0 );\n\n\t}\n\n\t/**\n\t * Setups the standard specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants() {\n\n\t\t// METALNESS\n\n\t\tconst metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\n\n\t\tmetalness.assign( metalnessNode );\n\n\t\t// ROUGHNESS\n\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\n\t\troughnessNode = getRoughness( { roughness: roughnessNode } );\n\n\t\troughness.assign( roughnessNode );\n\n\t\t// SPECULAR COLOR\n\n\t\tthis.setupSpecular();\n\n\t\t// DIFFUSE COLOR\n\n\t\tdiffuseColor.assign( vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.emissiveNode = source.emissiveNode;\n\n\t\tthis.metalnessNode = source.metalnessNode;\n\t\tthis.roughnessNode = source.roughnessNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nconst _defaultValues$5 = /*@__PURE__*/ new MeshPhysicalMaterial();\n\n/**\n * Node material version of {@link MeshPhysicalMaterial}.\n *\n * @augments MeshStandardNodeMaterial\n */\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshPhysicalNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh physical node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhysicalNodeMaterial = true;\n\n\t\t/**\n\t\t * The clearcoat of physical materials is by default inferred from the `clearcoat`\n\t\t * and `clearcoatMap` properties. This node property allows to overwrite the default\n\t\t * and define the clearcoat with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the clearcoat but modify the existing\n\t\t * value instead, use {@link materialClearcoat}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatNode = null;\n\n\t\t/**\n\t\t * The clearcoat roughness of physical materials is by default inferred from the `clearcoatRoughness`\n\t\t * and `clearcoatRoughnessMap` properties. This node property allows to overwrite the default\n\t\t * and define the clearcoat roughness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the clearcoat roughness but modify the existing\n\t\t * value instead, use {@link materialClearcoatRoughness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatRoughnessNode = null;\n\n\t\t/**\n\t\t * The clearcoat normal of physical materials is by default inferred from the `clearcoatNormalMap`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the clearcoat normal with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the clearcoat normal but modify the existing\n\t\t * value instead, use {@link materialClearcoatNormal}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatNormalNode = null;\n\n\t\t/**\n\t\t * The sheen of physical materials is by default inferred from the `sheen`, `sheenColor`\n\t\t * and `sheenColorMap` properties. This node property allows to overwrite the default\n\t\t * and define the sheen with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the sheen but modify the existing\n\t\t * value instead, use {@link materialSheen}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenNode = null;\n\n\t\t/**\n\t\t * The sheen roughness of physical materials is by default inferred from the `sheenRoughness` and\n\t\t * `sheenRoughnessMap` properties. This node property allows to overwrite the default\n\t\t * and define the sheen roughness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the sheen roughness but modify the existing\n\t\t * value instead, use {@link materialSheenRoughness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenRoughnessNode = null;\n\n\t\t/**\n\t\t * The iridescence of physical materials is by default inferred from the `iridescence`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the iridescence with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the iridescence but modify the existing\n\t\t * value instead, use {@link materialIridescence}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceNode = null;\n\n\t\t/**\n\t\t * The iridescence IOR of physical materials is by default inferred from the `iridescenceIOR`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the iridescence IOR with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the iridescence IOR but modify the existing\n\t\t * value instead, use {@link materialIridescenceIOR}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceIORNode = null;\n\n\t\t/**\n\t\t * The iridescence thickness of physical materials is by default inferred from the `iridescenceThicknessRange`\n\t\t * and `iridescenceThicknessMap` properties. This node property allows to overwrite the default\n\t\t * and define the iridescence thickness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the iridescence thickness but modify the existing\n\t\t * value instead, use {@link materialIridescenceThickness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceThicknessNode = null;\n\n\t\t/**\n\t\t * The specular intensity of physical materials is by default inferred from the `specularIntensity`\n\t\t * and `specularIntensityMap` properties. This node property allows to overwrite the default\n\t\t * and define the specular intensity with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the specular intensity but modify the existing\n\t\t * value instead, use {@link materialSpecularIntensity}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.specularIntensityNode = null;\n\n\t\t/**\n\t\t * The specular color of physical materials is by default inferred from the `specularColor`\n\t\t * and `specularColorMap` properties. This node property allows to overwrite the default\n\t\t * and define the specular color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the specular color but modify the existing\n\t\t * value instead, use {@link materialSpecularColor}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.specularColorNode = null;\n\n\t\t/**\n\t\t * The ior of physical materials is by default inferred from the `ior`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the ior with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the ior but modify the existing\n\t\t * value instead, use {@link materialIOR}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iorNode = null;\n\n\t\t/**\n\t\t * The transmission of physical materials is by default inferred from the `transmission` and\n\t\t * `transmissionMap` properties. This node property allows to overwrite the default\n\t\t * and define the transmission with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the transmission but modify the existing\n\t\t * value instead, use {@link materialTransmission}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.transmissionNode = null;\n\n\t\t/**\n\t\t * The thickness of physical materials is by default inferred from the `thickness` and\n\t\t * `thicknessMap` properties. This node property allows to overwrite the default\n\t\t * and define the thickness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the thickness but modify the existing\n\t\t * value instead, use {@link materialThickness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.thicknessNode = null;\n\n\t\t/**\n\t\t * The attenuation distance of physical materials is by default inferred from the\n\t\t * `attenuationDistance` property. This node property allows to overwrite the default\n\t\t * and define the attenuation distance with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the attenuation distance but modify the existing\n\t\t * value instead, use {@link materialAttenuationDistance}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.attenuationDistanceNode = null;\n\n\t\t/**\n\t\t * The attenuation color of physical materials is by default inferred from the\n\t\t * `attenuationColor` property. This node property allows to overwrite the default\n\t\t * and define the attenuation color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the attenuation color but modify the existing\n\t\t * value instead, use {@link materialAttenuationColor}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.attenuationColorNode = null;\n\n\t\t/**\n\t\t * The dispersion of physical materials is by default inferred from the\n\t\t * `dispersion` property. This node property allows to overwrite the default\n\t\t * and define the dispersion with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the dispersion but modify the existing\n\t\t * value instead, use {@link materialDispersion}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dispersionNode = null;\n\n\t\t/**\n\t\t * The anisotropy of physical materials is by default inferred from the\n\t\t * `anisotropy` property. This node property allows to overwrite the default\n\t\t * and define the anisotropy with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the anisotropy but modify the existing\n\t\t * value instead, use {@link materialAnisotropy}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.anisotropyNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues$5 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use clearcoat or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useClearcoat() {\n\n\t\treturn this.clearcoat > 0 || this.clearcoatNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use iridescence or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useIridescence() {\n\n\t\treturn this.iridescence > 0 || this.iridescenceNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use sheen or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useSheen() {\n\n\t\treturn this.sheen > 0 || this.sheenNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use anisotropy or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useAnisotropy() {\n\n\t\treturn this.anisotropy > 0 || this.anisotropyNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use transmission or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useTransmission() {\n\n\t\treturn this.transmission > 0 || this.transmissionNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use dispersion or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useDispersion() {\n\n\t\treturn this.dispersion > 0 || this.dispersionNode !== null;\n\n\t}\n\n\t/**\n\t * Setups the specular related node variables.\n\t */\n\tsetupSpecular() {\n\n\t\tconst iorNode = this.iorNode ? float( this.iorNode ) : materialIOR;\n\n\t\tior.assign( iorNode );\n\t\tspecularColor.assign( mix( min$1( pow2( ior.sub( 1.0 ).div( ior.add( 1.0 ) ) ).mul( materialSpecularColor ), vec3( 1.0 ) ).mul( materialSpecularIntensity ), diffuseColor.rgb, metalness ) );\n\t\tspecularF90.assign( mix( materialSpecularIntensity, 1.0, metalness ) );\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {PhysicalLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion );\n\n\t}\n\n\t/**\n\t * Setups the physical specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( builder ) {\n\n\t\tsuper.setupVariants( builder );\n\n\t\t// CLEARCOAT\n\n\t\tif ( this.useClearcoat ) {\n\n\t\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\n\t\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\n\n\t\t\tclearcoat.assign( clearcoatNode );\n\t\t\tclearcoatRoughness.assign( getRoughness( { roughness: clearcoatRoughnessNode } ) );\n\n\t\t}\n\n\t\t// SHEEN\n\n\t\tif ( this.useSheen ) {\n\n\t\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\n\t\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\n\n\t\t\tsheen.assign( sheenNode );\n\t\t\tsheenRoughness.assign( sheenRoughnessNode );\n\n\t\t}\n\n\t\t// IRIDESCENCE\n\n\t\tif ( this.useIridescence ) {\n\n\t\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\n\t\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\n\t\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\n\n\t\t\tiridescence.assign( iridescenceNode );\n\t\t\tiridescenceIOR.assign( iridescenceIORNode );\n\t\t\tiridescenceThickness.assign( iridescenceThicknessNode );\n\n\t\t}\n\n\t\t// ANISOTROPY\n\n\t\tif ( this.useAnisotropy ) {\n\n\t\t\tconst anisotropyV = ( this.anisotropyNode ? vec2( this.anisotropyNode ) : materialAnisotropy ).toVar();\n\n\t\t\tanisotropy.assign( anisotropyV.length() );\n\n\t\t\tIf( anisotropy.equal( 0.0 ), () => {\n\n\t\t\t\tanisotropyV.assign( vec2( 1.0, 0.0 ) );\n\n\t\t\t} ).Else( () => {\n\n\t\t\t\tanisotropyV.divAssign( vec2( anisotropy ) );\n\t\t\t\tanisotropy.assign( anisotropy.saturate() );\n\n\t\t\t} );\n\n\t\t\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\n\t\t\talphaT.assign( anisotropy.pow2().mix( roughness.pow2(), 1.0 ) );\n\n\t\t\tanisotropyT.assign( TBNViewMatrix[ 0 ].mul( anisotropyV.x ).add( TBNViewMatrix[ 1 ].mul( anisotropyV.y ) ) );\n\t\t\tanisotropyB.assign( TBNViewMatrix[ 1 ].mul( anisotropyV.x ).sub( TBNViewMatrix[ 0 ].mul( anisotropyV.y ) ) );\n\n\t\t}\n\n\t\t// TRANSMISSION\n\n\t\tif ( this.useTransmission ) {\n\n\t\t\tconst transmissionNode = this.transmissionNode ? float( this.transmissionNode ) : materialTransmission;\n\t\t\tconst thicknessNode = this.thicknessNode ? float( this.thicknessNode ) : materialThickness;\n\t\t\tconst attenuationDistanceNode = this.attenuationDistanceNode ? float( this.attenuationDistanceNode ) : materialAttenuationDistance;\n\t\t\tconst attenuationColorNode = this.attenuationColorNode ? vec3( this.attenuationColorNode ) : materialAttenuationColor;\n\n\t\t\ttransmission.assign( transmissionNode );\n\t\t\tthickness.assign( thicknessNode );\n\t\t\tattenuationDistance.assign( attenuationDistanceNode );\n\t\t\tattenuationColor.assign( attenuationColorNode );\n\n\t\t\tif ( this.useDispersion ) {\n\n\t\t\t\tconst dispersionNode = this.dispersionNode ? float( this.dispersionNode ) : materialDispersion;\n\n\t\t\t\tdispersion.assign( dispersionNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups the clearcoat normal node.\n\t *\n\t * @return {Node<vec3>} The clearcoat normal.\n\t */\n\tsetupClearcoatNormal() {\n\n\t\treturn this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.context.setupClearcoatNormal = () => this.setupClearcoatNormal( builder );\n\n\t\tsuper.setup( builder );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.clearcoatNode = source.clearcoatNode;\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\n\n\t\tthis.sheenNode = source.sheenNode;\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\n\n\t\tthis.iridescenceNode = source.iridescenceNode;\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\n\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\n\t\tthis.specularColorNode = source.specularColorNode;\n\n\t\tthis.transmissionNode = source.transmissionNode;\n\t\tthis.thicknessNode = source.thicknessNode;\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\n\t\tthis.dispersionNode = source.dispersionNode;\n\n\t\tthis.anisotropyNode = source.anisotropyNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\n/**\n * Represents the lighting model for {@link MeshSSSNodeMaterial}.\n *\n * @augments PhysicalLightingModel\n */\nclass SSSLightingModel extends PhysicalLightingModel {\n\n\t/**\n\t * Constructs a new physical lighting model.\n\t *\n\t * @param {boolean} [clearcoat=false] - Whether clearcoat is supported or not.\n\t * @param {boolean} [sheen=false] - Whether sheen is supported or not.\n\t * @param {boolean} [iridescence=false] - Whether iridescence is supported or not.\n\t * @param {boolean} [anisotropy=false] - Whether anisotropy is supported or not.\n\t * @param {boolean} [transmission=false] - Whether transmission is supported or not.\n\t * @param {boolean} [dispersion=false] - Whether dispersion is supported or not.\n\t * @param {boolean} [sss=false] - Whether SSS is supported or not.\n\t */\n\tconstructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false, sss = false ) {\n\n\t\tsuper( clearcoat, sheen, iridescence, anisotropy, transmission, dispersion );\n\n\t\t/**\n\t\t * Whether the lighting model should use SSS or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.useSSS = sss;\n\n\t}\n\n\t/**\n\t * Extends the default implementation with a SSS term.\n\t *\n\t * Reference: [Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look]{@link https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/}\n\t *\n\t * @param {Object} input - The input data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirect( { lightDirection, lightColor, reflectedLight }, builder ) {\n\n\t\tif ( this.useSSS === true ) {\n\n\t\t\tconst material = builder.material;\n\n\t\t\tconst { thicknessColorNode, thicknessDistortionNode, thicknessAmbientNode, thicknessAttenuationNode, thicknessPowerNode, thicknessScaleNode } = material;\n\n\t\t\tconst scatteringHalf = lightDirection.add( transformedNormalView.mul( thicknessDistortionNode ) ).normalize();\n\t\t\tconst scatteringDot = float( positionViewDirection.dot( scatteringHalf.negate() ).saturate().pow( thicknessPowerNode ).mul( thicknessScaleNode ) );\n\t\t\tconst scatteringIllu = vec3( scatteringDot.add( thicknessAmbientNode ).mul( thicknessColorNode ) );\n\n\t\t\treflectedLight.directDiffuse.addAssign( scatteringIllu.mul( thicknessAttenuationNode.mul( lightColor ) ) );\n\n\t\t}\n\n\t\tsuper.direct( { lightDirection, lightColor, reflectedLight }, builder );\n\n\t}\n\n}\n\n/**\n * This node material is an experimental extension of {@link MeshPhysicalNodeMaterial}\n * that implements a Subsurface scattering (SSS) term.\n *\n * @augments MeshPhysicalNodeMaterial\n */\nclass MeshSSSNodeMaterial extends MeshPhysicalNodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshSSSNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh SSS node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\t/**\n\t\t * Represents the thickness color.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.thicknessColorNode = null;\n\n\t\t/**\n\t\t * Represents the distortion factor.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t */\n\t\tthis.thicknessDistortionNode = float( 0.1 );\n\n\t\t/**\n\t\t * Represents the thickness ambient factor.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t */\n\t\tthis.thicknessAmbientNode = float( 0.0 );\n\n\t\t/**\n\t\t * Represents the thickness attenuation.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t */\n\t\tthis.thicknessAttenuationNode = float( .1 );\n\n\t\t/**\n\t\t * Represents the thickness power.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t */\n\t\tthis.thicknessPowerNode = float( 2.0 );\n\n\t\t/**\n\t\t * Represents the thickness scale.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t */\n\t\tthis.thicknessScaleNode = float( 10.0 );\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use SSS or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useSSS() {\n\n\t\treturn this.thicknessColorNode !== null;\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {SSSLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new SSSLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion, this.useSSS );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.thicknessColorNode = source.thicknessColorNode;\n\t\tthis.thicknessDistortionNode = source.thicknessDistortionNode;\n\t\tthis.thicknessAmbientNode = source.thicknessAmbientNode;\n\t\tthis.thicknessAttenuationNode = source.thicknessAttenuationNode;\n\t\tthis.thicknessPowerNode = source.thicknessPowerNode;\n\t\tthis.thicknessScaleNode = source.thicknessScaleNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nconst getGradientIrradiance = /*@__PURE__*/ Fn( ( { normal, lightDirection, builder } ) => {\n\n\t// dotNL will be from -1.0 to 1.0\n\tconst dotNL = normal.dot( lightDirection );\n\tconst coord = vec2( dotNL.mul( 0.5 ).add( 0.5 ), 0.0 );\n\n\tif ( builder.material.gradientMap ) {\n\n\t\tconst gradientMap = materialReference( 'gradientMap', 'texture' ).context( { getUV: () => coord } );\n\n\t\treturn vec3( gradientMap.r );\n\n\t} else {\n\n\t\tconst fw = coord.fwidth().mul( 0.5 );\n\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( float( 0.7 ).sub( fw.x ), float( 0.7 ).add( fw.x ), coord.x ) );\n\n\t}\n\n} );\n\n/**\n * Represents the lighting model for a toon material. Used in {@link MeshToonNodeMaterial}.\n *\n * @augments LightingModel\n */\nclass ToonLightingModel extends LightingModel {\n\n\t/**\n\t * Implements the direct lighting. Instead of using a conventional smooth irradiance, the irradiance is\n\t * reduced to a small number of discrete shades to create a comic-like, flat look.\n\t *\n\t * @param {Object} lightData - The light data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirect( { lightDirection, lightColor, reflectedLight }, builder ) {\n\n\t\tconst irradiance = getGradientIrradiance( { normal: normalGeometry, lightDirection, builder } ).mul( lightColor );\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t}\n\n\t/**\n\t * Implements the indirect lighting.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirect( builder ) {\n\n\t\tconst { ambientOcclusion, irradiance, reflectedLight } = builder.context;\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\n\t}\n\n}\n\nconst _defaultValues$4 = /*@__PURE__*/ new MeshToonMaterial();\n\n/**\n * Node material version of {@link MeshToonMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshToonNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshToonNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh toon node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshToonNodeMaterial = true;\n\n\t\t/**\n\t\t * Set to `true` because toon materials react on lights.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\tthis.setDefaultValues( _defaultValues$4 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {ToonLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new ToonLightingModel();\n\n\t}\n\n}\n\n/**\n * Can be used to compute texture coordinates for projecting a\n * matcap onto a mesh. Used by {@link MeshMatcapNodeMaterial}.\n *\n * @augments TempNode\n */\nclass MatcapUVNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'MatcapUVNode';\n\n\t}\n\n\t/**\n\t * Constructs a new matcap uv node.\n\t */\n\tconstructor() {\n\n\t\tsuper( 'vec2' );\n\n\t}\n\n\tsetup() {\n\n\t\tconst x = vec3( positionViewDirection.z, 0, positionViewDirection.x.negate() ).normalize();\n\t\tconst y = positionViewDirection.cross( x );\n\n\t\treturn vec2( x.dot( transformedNormalView ), y.dot( transformedNormalView ) ).mul( 0.495 ).add( 0.5 ); // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t}\n\n}\n\n/**\n * TSL function for creating a matcap uv node.\n *\n * @tsl\n * @function\n * @returns {MatcapUVNode}\n */\nconst matcapUV = /*@__PURE__*/ nodeImmutable( MatcapUVNode );\n\nconst _defaultValues$3 = /*@__PURE__*/ new MeshMatcapMaterial();\n\n/**\n * Node material version of {@link MeshMatcapMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshMatcapNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshMatcapNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh normal node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshMatcapNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues$3 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the matcap specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( builder ) {\n\n\t\tconst uv = matcapUV;\n\n\t\tlet matcapColor;\n\n\t\tif ( builder.material.matcap ) {\n\n\t\t\tmatcapColor = materialReference( 'matcap', 'texture' ).context( { getUV: () => uv } );\n\n\t\t} else {\n\n\t\t\tmatcapColor = vec3( mix( 0.2, 0.8, uv.y ) ); // default if matcap is missing\n\n\t\t}\n\n\t\tdiffuseColor.rgb.mulAssign( matcapColor.rgb );\n\n\t}\n\n}\n\n/**\n * Applies a rotation to the given position node.\n *\n * @augments TempNode\n */\nclass RotateNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'RotateNode';\n\n\t}\n\n\t/**\n\t * Constructs a new rotate node.\n\t *\n\t * @param {Node} positionNode - The position node.\n\t * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\n\t * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n\t */\n\tconstructor( positionNode, rotationNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The position node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.positionNode = positionNode;\n\n\t\t/**\n\t\t *  Represents the rotation that is applied to the position node.\n\t\t *  Depending on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.rotationNode = rotationNode;\n\n\t}\n\n\t/**\n\t * The type of the {@link RotateNode#positionNode} defines the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node's type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.positionNode.getNodeType( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { rotationNode, positionNode } = this;\n\n\t\tconst nodeType = this.getNodeType( builder );\n\n\t\tif ( nodeType === 'vec2' ) {\n\n\t\t\tconst cosAngle = rotationNode.cos();\n\t\t\tconst sinAngle = rotationNode.sin();\n\n\t\t\tconst rotationMatrix = mat2(\n\t\t\t\tcosAngle, sinAngle,\n\t\t\t\tsinAngle.negate(), cosAngle\n\t\t\t);\n\n\t\t\treturn rotationMatrix.mul( positionNode );\n\n\t\t} else {\n\n\t\t\tconst rotation = rotationNode;\n\t\t\tconst rotationXMatrix = mat4( vec4( 1.0, 0.0, 0.0, 0.0 ), vec4( 0.0, cos( rotation.x ), sin( rotation.x ).negate(), 0.0 ), vec4( 0.0, sin( rotation.x ), cos( rotation.x ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\t\t\tconst rotationYMatrix = mat4( vec4( cos( rotation.y ), 0.0, sin( rotation.y ), 0.0 ), vec4( 0.0, 1.0, 0.0, 0.0 ), vec4( sin( rotation.y ).negate(), 0.0, cos( rotation.y ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\t\t\tconst rotationZMatrix = mat4( vec4( cos( rotation.z ), sin( rotation.z ).negate(), 0.0, 0.0 ), vec4( sin( rotation.z ), cos( rotation.z ), 0.0, 0.0 ), vec4( 0.0, 0.0, 1.0, 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\n\t\t\treturn rotationXMatrix.mul( rotationYMatrix ).mul( rotationZMatrix ).mul( vec4( positionNode, 1.0 ) ).xyz;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a rotate node.\n *\n * @tsl\n * @function\n * @param {Node} positionNode - The position node.\n * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\n * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n * @returns {RotateNode}\n */\nconst rotate = /*@__PURE__*/ nodeProxy( RotateNode ).setParameterLength( 2 );\n\nconst _defaultValues$2 = /*@__PURE__*/ new SpriteMaterial();\n\n/**\n * Node material version of {@link SpriteMaterial}.\n *\n * @augments NodeMaterial\n */\nclass SpriteNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'SpriteNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new sprite node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpriteNodeMaterial = true;\n\n\t\tthis._useSizeAttenuation = true;\n\n\t\t/**\n\t\t * This property makes it possible to define the position of the sprite with a\n\t\t * node. That can be useful when the material is used with instanced rendering\n\t\t * and node data are defined with an instanced attribute node:\n\t\t * ```js\n\t\t * const positionAttribute = new InstancedBufferAttribute( new Float32Array( positions ), 3 );\n\t\t * material.positionNode = instancedBufferAttribute( positionAttribute );\n\t\t * ```\n\t\t * Another possibility is to compute the instanced data with a compute shader:\n\t\t * ```js\n\t\t * const positionBuffer = instancedArray( particleCount, 'vec3' );\n\t\t * particleMaterial.positionNode = positionBuffer.toAttribute();\n\t\t * ```\n\t\t *\n\t\t * @type {?Node<vec2>}\n\t\t * @default null\n\t\t */\n\t\tthis.positionNode = null;\n\n\t\t/**\n\t\t * The rotation of sprite materials is by default inferred from the `rotation`,\n\t\t * property. This node property allows to overwrite the default and define\n\t\t * the rotation with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the rotation but modify the existing\n\t\t * value instead, use {@link materialRotation}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.rotationNode = null;\n\n\t\t/**\n\t\t * This node property provides an additional way to scale sprites next to\n\t\t * `Object3D.scale`. The scale transformation based in `Object3D.scale`\n\t\t * is multiplied with the scale value of this node in the vertex shader.\n\t\t *\n\t\t * @type {?Node<vec2>}\n\t\t * @default null\n\t\t */\n\t\tthis.scaleNode = null;\n\n\t\t/**\n\t\t * In Sprites, the transparent property is enabled by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\tthis.setDefaultValues( _defaultValues$2 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the position node in view space. This method implements\n\t * the sprite specific vertex shader.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node<vec3>} The position in view space.\n\t */\n\tsetupPositionView( builder ) {\n\n\t\tconst { object, camera } = builder;\n\n\t\tconst sizeAttenuation = this.sizeAttenuation;\n\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\n\n\t\tconst mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\n\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tscale = scale.mul( vec2( scaleNode ) );\n\n\t\t}\n\n\t\tif ( sizeAttenuation === false ) {\n\n\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\tscale = scale.mul( mvPosition.z.negate() );\n\n\t\t\t} else {\n\n\t\t\t\tconst orthoScale = float( 2.0 ).div( cameraProjectionMatrix.element( 1 ).element( 1 ) );\n\t\t\t\tscale = scale.mul( orthoScale.mul( 2 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet alignedPosition = positionGeometry.xy;\n\n\t\tif ( object.center && object.center.isVector2 === true ) {\n\n\t\t\tconst center = reference$1( 'center', 'vec2', object );\n\n\t\t\talignedPosition = alignedPosition.sub( center.sub( 0.5 ) );\n\n\t\t}\n\n\t\talignedPosition = alignedPosition.mul( scale );\n\n\t\tconst rotation = float( rotationNode || materialRotation );\n\n\t\tconst rotatedPosition = rotate( alignedPosition, rotation );\n\n\t\treturn vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.positionNode = source.positionNode;\n\t\tthis.rotationNode = source.rotationNode;\n\t\tthis.scaleNode = source.scaleNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n\t/**\n\t * Whether to use size attenuation or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget sizeAttenuation() {\n\n\t\treturn this._useSizeAttenuation;\n\n\t}\n\n\tset sizeAttenuation( value ) {\n\n\t\tif ( this._useSizeAttenuation !== value ) {\n\n\t\t\tthis._useSizeAttenuation = value;\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nconst _defaultValues$1 = /*@__PURE__*/ new PointsMaterial();\n\n/**\n * Node material version of {@link PointsMaterial}.\n *\n * @augments SpriteNodeMaterial\n */\nclass PointsNodeMaterial extends SpriteNodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'PointsNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new points node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This node property provides an additional way to set the point size.\n\t\t *\n\t\t * @type {?Node<vec2>}\n\t\t * @default null\n\t\t */\n\t\tthis.sizeNode = null;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointsNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues$1 );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupPositionView() {\n\n\t\tconst { positionNode } = this;\n\n\t\treturn modelViewMatrix.mul( vec3( positionNode || positionLocal ) ).xyz;\n\n\t}\n\n\tsetupVertex( builder ) {\n\n\t\tconst mvp = super.setupVertex( builder );\n\n\t\t// skip further processing if the material is not a node material\n\n\t\tif ( builder.material.isNodeMaterial !== true ) {\n\n\t\t\treturn mvp;\n\n\t\t}\n\n\t\t// ndc space\n\n\t\tconst { rotationNode, scaleNode, sizeNode } = this;\n\n\t\tconst alignedPosition = positionGeometry.xy.toVar();\n\t\tconst aspect = viewport.z.div( viewport.w );\n\n\t\t// rotation\n\n\t\tif ( rotationNode && rotationNode.isNode ) {\n\n\t\t\tconst rotation = float( rotationNode );\n\n\t\t\talignedPosition.assign( rotate( alignedPosition, rotation ) );\n\n\t\t}\n\n\t\t// point size\n\n\t\tlet pointSize = sizeNode !== null ? vec2( sizeNode ) : materialPointSize;\n\n\t\tif ( this.sizeAttenuation === true ) {\n\n\t\t\tpointSize = pointSize.mul( pointSize.div( positionView.z.negate() ) );\n\n\t\t}\n\n\t\t// scale\n\n\t\tif ( scaleNode && scaleNode.isNode ) {\n\n\t\t\tpointSize = pointSize.mul( vec2( scaleNode ) );\n\n\t\t}\n\n\t\talignedPosition.mulAssign( pointSize.mul( 2 ) );\n\n\t\talignedPosition.assign( alignedPosition.div( viewport.z ) );\n\t\talignedPosition.y.assign( alignedPosition.y.mul( aspect ) );\n\n\t\t// back to clip space\n\t\talignedPosition.assign( alignedPosition.mul( mvp.w ) );\n\n\t\t//clipPos.xy += offset;\n\t\tmvp.addAssign( vec4( alignedPosition, 0, 0 ) );\n\n\t\treturn mvp;\n\n\t}\n\n\t/**\n\t * Whether alpha to coverage should be used or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget alphaToCoverage() {\n\n\t\treturn this._useAlphaToCoverage;\n\n\t}\n\n\tset alphaToCoverage( value ) {\n\n\t\tif ( this._useAlphaToCoverage !== value ) {\n\n\t\t\tthis._useAlphaToCoverage = value;\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Represents lighting model for a shadow material. Used in {@link ShadowNodeMaterial}.\n *\n * @augments LightingModel\n */\nclass ShadowMaskModel extends LightingModel {\n\n\t/**\n\t * Constructs a new shadow mask model.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The shadow mask node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.shadowNode = float( 1 ).toVar( 'shadowMask' );\n\n\t}\n\n\t/**\n\t * Only used to save the shadow mask.\n\t *\n\t * @param {Object} input - The input data.\n\t */\n\tdirect( { lightNode } ) {\n\n\t\tthis.shadowNode.mulAssign( lightNode.shadowNode );\n\n\t}\n\n\t/**\n\t * Uses the shadow mask to produce the final color.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tfinish( { context } ) {\n\n\t\tdiffuseColor.a.mulAssign( this.shadowNode.oneMinus() );\n\n\t\tcontext.outgoingLight.rgb.assign( diffuseColor.rgb ); // TODO: Optimize LightsNode to avoid this assignment\n\n\t}\n\n}\n\nconst _defaultValues = /*@__PURE__*/ new ShadowMaterial();\n\n/**\n * Node material version of {@link ShadowMaterial}.\n *\n * @augments NodeMaterial\n */\nclass ShadowNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'ShadowNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new shadow node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShadowNodeMaterial = true;\n\n\t\t/**\n\t\t * Set to `true` because so it's possible to implement\n\t\t * the shadow mask effect.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\t/**\n\t\t * Overwritten since shadow materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {ShadowMaskModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new ShadowMaskModel();\n\n\t}\n\n}\n\nconst scatteringDensity = property( 'vec3' );\nconst linearDepthRay = property( 'vec3' );\nconst outgoingRayLight = property( 'vec3' );\n\n/**\n * VolumetricLightingModel class extends the LightingModel to implement volumetric lighting effects.\n * This model calculates the scattering and transmittance of light through a volumetric medium.\n * It dynamically adjusts the direction of the ray based on the camera and object positions.\n * The model supports custom scattering and depth nodes to enhance the lighting effects.\n *\n * @augments LightingModel\n */\nclass VolumetricLightingModel extends LightingModel {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t}\n\n\tstart( builder ) {\n\n\t\tconst { material, context } = builder;\n\n\t\tconst startPos = property( 'vec3' );\n\t\tconst endPos = property( 'vec3' );\n\n\t\t// This approach dynamically changes the direction of the ray,\n\t\t// prioritizing the ray from the camera to the object if it is inside the mesh, and from the object to the camera if it is far away.\n\n\t\tIf( cameraPosition.sub( positionWorld ).length().greaterThan( modelRadius.mul( 2 ) ), () => {\n\n\t\t\tstartPos.assign( cameraPosition );\n\t\t\tendPos.assign( positionWorld );\n\n\t\t} ).Else( () => {\n\n\t\t\tstartPos.assign( positionWorld );\n\t\t\tendPos.assign( cameraPosition );\n\n\t\t} );\n\n\t\t//\n\n\t\tconst viewVector = endPos.sub( startPos );\n\n\t\tconst steps = uniform( 'int' ).onRenderUpdate( ( { material } ) => material.steps );\n\t\tconst stepSize = viewVector.length().div( steps ).toVar();\n\n\t\tconst rayDir = viewVector.normalize().toVar(); // TODO: toVar() should be automatic here ( in loop )\n\n\t\tconst distTravelled = float( 0.0 ).toVar();\n\t\tconst transmittance = vec3( 1 ).toVar();\n\n\t\tif ( material.offsetNode ) {\n\n\t\t\t// reduce banding\n\n\t\t\tdistTravelled.addAssign( material.offsetNode.mul( stepSize ) );\n\n\t\t}\n\n\t\tLoop( steps, () => {\n\n\t\t\tconst positionRay = startPos.add( rayDir.mul( distTravelled ) );\n\t\t\tconst positionViewRay = cameraViewMatrix.mul( vec4( positionRay, 1 ) ).xyz;\n\n\t\t\tif ( material.depthNode !== null ) {\n\n\t\t\t\tlinearDepthRay.assign( linearDepth( viewZToPerspectiveDepth( positionViewRay.z, cameraNear, cameraFar ) ) );\n\n\t\t\t\tcontext.sceneDepthNode = linearDepth( material.depthNode ).toVar();\n\n\t\t\t}\n\n\t\t\tcontext.positionWorld = positionRay;\n\t\t\tcontext.shadowPositionWorld = positionRay;\n\t\t\tcontext.positionView = positionViewRay;\n\n\t\t\tscatteringDensity.assign( 0 );\n\n\t\t\tlet scatteringNode;\n\n\t\t\tif ( material.scatteringNode ) {\n\n\t\t\t\tscatteringNode = material.scatteringNode( {\n\t\t\t\t\tpositionRay\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tsuper.start( builder );\n\n\t\t\tif ( scatteringNode ) {\n\n\t\t\t\tscatteringDensity.mulAssign( scatteringNode );\n\n\t\t\t}\n\n\t\t\t// beer's law\n\n\t\t\tconst falloff = scatteringDensity.mul( .01 ).negate().mul( stepSize ).exp();\n\t\t\ttransmittance.mulAssign( falloff );\n\n\t\t\t// move along the ray\n\n\t\t\tdistTravelled.addAssign( stepSize );\n\n\t\t} );\n\n\t\toutgoingRayLight.addAssign( transmittance.saturate().oneMinus() );\n\n\t}\n\n\tscatteringLight( lightColor, builder ) {\n\n\t\tconst sceneDepthNode = builder.context.sceneDepthNode;\n\n\t\tif ( sceneDepthNode ) {\n\n\t\t\tIf( sceneDepthNode.greaterThanEqual( linearDepthRay ), () => {\n\n\t\t\t\tscatteringDensity.addAssign( lightColor );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\tscatteringDensity.addAssign( lightColor );\n\n\t\t}\n\n\t}\n\n\tdirect( { lightNode, lightColor }, builder ) {\n\n\t\t// Ignore lights with infinite distance\n\n\t\tif ( lightNode.light.distance === undefined ) return;\n\n\t\t// TODO: We need a viewportOpaque*() ( output, depth ) to fit with modern rendering approaches\n\n\t\tconst directLight = lightColor.xyz.toVar();\n\t\tdirectLight.mulAssign( lightNode.shadowNode ); // it no should be necessary if used in the same render pass\n\n\t\tthis.scatteringLight( directLight, builder );\n\n\t}\n\n\tdirectRectArea( { lightColor, lightPosition, halfWidth, halfHeight }, builder ) {\n\n\t\tconst p0 = lightPosition.add( halfWidth ).sub( halfHeight ); // counterclockwise; light shines in local neg z direction\n\t\tconst p1 = lightPosition.sub( halfWidth ).sub( halfHeight );\n\t\tconst p2 = lightPosition.sub( halfWidth ).add( halfHeight );\n\t\tconst p3 = lightPosition.add( halfWidth ).add( halfHeight );\n\n\t\tconst P = builder.context.positionView;\n\n\t\tconst directLight = lightColor.xyz.mul( LTC_Evaluate_Volume( { P, p0, p1, p2, p3 } ) ).pow( 1.5 );\n\n\t\tthis.scatteringLight( directLight, builder );\n\n\t}\n\n\tfinish( builder ) {\n\n\t\tbuilder.context.outgoingLight.assign( outgoingRayLight );\n\n\t}\n\n}\n\n/**\n * Volume node material.\n *\n * @augments NodeMaterial\n */\nclass VolumeNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'VolumeNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new volume node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVolumeNodeMaterial = true;\n\n\t\t/**\n\t\t * Number of steps used for raymarching.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 25\n\t\t */\n\t\tthis.steps = 25;\n\n\t\t/**\n\t\t * Offsets the distance a ray has been traveled through a volume.\n\t\t * Can be used to implement dithering to reduce banding.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.offsetNode = null;\n\n\t\t/**\n\t\t * Node used for scattering calculations.\n\t\t *\n\t\t * @type {Function|FunctionNode<vec4>}\n\t\t * @default null\n\t\t */\n\t\tthis.scatteringNode = null;\n\n\t\tthis.lights = true;\n\n\t\tthis.transparent = true;\n\t\tthis.side = BackSide;\n\n\t\tthis.depthTest = false;\n\t\tthis.depthWrite = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupLightingModel() {\n\n\t\treturn new VolumetricLightingModel();\n\n\t}\n\n}\n\n/**\n * This module manages the internal animation loop of the renderer.\n *\n * @private\n */\nclass Animation {\n\n\t/**\n\t * Constructs a new animation loop management component.\n\t *\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Info} info - Renderer component for managing metrics and monitoring data.\n\t */\n\tconstructor( nodes, info ) {\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t\t/**\n\t\t * Renderer component for managing metrics and monitoring data.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = info;\n\n\t\t/**\n\t\t * A reference to the context from `requestAnimationFrame()` can\n\t\t * be called (usually `window`).\n\t\t *\n\t\t * @type {?(Window|XRSession)}\n\t\t */\n\t\tthis._context = typeof self !== 'undefined' ? self : null;\n\n\t\t/**\n\t\t * The user-defined animation loop.\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._animationLoop = null;\n\n\t\t/**\n\t\t * The requestId which is returned from the `requestAnimationFrame()` call.\n\t\t * Can be used to cancel the stop the animation loop.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._requestId = null;\n\n\t}\n\n\t/**\n\t * Starts the internal animation loop.\n\t */\n\tstart() {\n\n\t\tconst update = ( time, xrFrame ) => {\n\n\t\t\tthis._requestId = this._context.requestAnimationFrame( update );\n\n\t\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t\tthis.nodes.nodeFrame.update();\n\n\t\t\tthis.info.frame = this.nodes.nodeFrame.frameId;\n\n\t\t\tif ( this._animationLoop !== null ) this._animationLoop( time, xrFrame );\n\n\t\t};\n\n\t\tupdate();\n\n\t}\n\n\t/**\n\t * Stops the internal animation loop.\n\t */\n\tstop() {\n\n\t\tthis._context.cancelAnimationFrame( this._requestId );\n\n\t\tthis._requestId = null;\n\n\t}\n\n\t/**\n\t * Returns the user-level animation loop.\n\t *\n\t * @return {?Function} The animation loop.\n\t */\n\tgetAnimationLoop() {\n\n\t\treturn this._animationLoop;\n\n\t}\n\n\t/**\n\t * Defines the user-level animation loop.\n\t *\n\t * @param {?Function} callback - The animation loop.\n\t */\n\tsetAnimationLoop( callback ) {\n\n\t\tthis._animationLoop = callback;\n\n\t}\n\n\t/**\n\t * Returns the animation context.\n\t *\n\t * @return {Window|XRSession} The animation context.\n\t */\n\tgetContext() {\n\n\t\treturn this._context;\n\n\t}\n\n\t/**\n\t * Defines the context in which `requestAnimationFrame()` is executed.\n\t *\n\t * @param {Window|XRSession} context - The context to set.\n\t */\n\tsetContext( context ) {\n\n\t\tthis._context = context;\n\n\t}\n\n\t/**\n\t * Frees all internal resources and stops the animation loop.\n\t */\n\tdispose() {\n\n\t\tthis.stop();\n\n\t}\n\n}\n\n/**\n * Data structure for the renderer. It allows defining values\n * with chained, hierarchical keys. Keys are meant to be\n * objects since the module internally works with Weak Maps\n * for performance reasons.\n *\n * @private\n */\nclass ChainMap {\n\n\t/**\n\t * Constructs a new Chain Map.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The root Weak Map.\n\t\t *\n\t\t * @type {WeakMap}\n\t\t */\n\t\tthis.weakMap = new WeakMap();\n\n\t}\n\n\t/**\n\t * Returns the value for the given array of keys.\n\t *\n\t * @param {Array<Object>} keys - List of keys.\n\t * @return {any} The value. Returns `undefined` if no value was found.\n\t */\n\tget( keys ) {\n\n\t\tlet map = this.weakMap;\n\n\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\n\n\t\t\tmap = map.get( keys[ i ] );\n\n\t\t\tif ( map === undefined ) return undefined;\n\n\t\t}\n\n\t\treturn map.get( keys[ keys.length - 1 ] );\n\n\t}\n\n\t/**\n\t * Sets the value for the given keys.\n\t *\n\t * @param {Array<Object>} keys - List of keys.\n\t * @param {any} value - The value to set.\n\t * @return {ChainMap} A reference to this Chain Map.\n\t */\n\tset( keys, value ) {\n\n\t\tlet map = this.weakMap;\n\n\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\n\n\t\t\tconst key = keys[ i ];\n\n\t\t\tif ( map.has( key ) === false ) map.set( key, new WeakMap() );\n\n\t\t\tmap = map.get( key );\n\n\t\t}\n\n\t\tmap.set( keys[ keys.length - 1 ], value );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes a value for the given keys.\n\t *\n\t * @param {Array<Object>} keys - The keys.\n\t * @return {boolean} Returns `true` if the value has been removed successfully and `false` if the value has not be found.\n\t */\n\tdelete( keys ) {\n\n\t\tlet map = this.weakMap;\n\n\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\n\n\t\t\tmap = map.get( keys[ i ] );\n\n\t\t\tif ( map === undefined ) return false;\n\n\t\t}\n\n\t\treturn map.delete( keys[ keys.length - 1 ] );\n\n\t}\n\n}\n\nlet _id$9 = 0;\n\nfunction getKeys( obj ) {\n\n\tconst keys = Object.keys( obj );\n\n\tlet proto = Object.getPrototypeOf( obj );\n\n\twhile ( proto ) {\n\n\t\tconst descriptors = Object.getOwnPropertyDescriptors( proto );\n\n\t\tfor ( const key in descriptors ) {\n\n\t\t\tif ( descriptors[ key ] !== undefined ) {\n\n\t\t\t\tconst descriptor = descriptors[ key ];\n\n\t\t\t\tif ( descriptor && typeof descriptor.get === 'function' ) {\n\n\t\t\t\t\tkeys.push( key );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tproto = Object.getPrototypeOf( proto );\n\n\t}\n\n\treturn keys;\n\n}\n\n/**\n * A render object is the renderer's representation of single entity that gets drawn\n * with a draw command. There is no unique mapping of render objects to 3D objects in the\n * scene since render objects also depend from the used material, the current render context\n * and the current scene's lighting.\n *\n * In general, the basic process of the renderer is:\n *\n * - Analyze the 3D objects in the scene and generate render lists containing render items.\n * - Process the render lists by calling one or more render commands for each render item.\n * - For each render command, request a render object and perform the draw.\n *\n * The module provides an interface to get data required for the draw command like the actual\n * draw parameters or vertex buffers. It also holds a series of caching related methods since\n * creating render objects should only be done when necessary.\n *\n * @private\n */\nclass RenderObject {\n\n\t/**\n\t * Constructs a new render object.\n\t *\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Geometries} geometries - Renderer component for managing geometries.\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the object should be rendered with.\n\t * @param {LightsNode} lightsNode - The lights node.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t */\n\tconstructor( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext ) {\n\n\t\tthis.id = _id$9 ++;\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t * @private\n\t\t */\n\t\tthis._nodes = nodes;\n\n\t\t/**\n\t\t * Renderer component for managing geometries.\n\t\t *\n\t\t * @type {Geometries}\n\t\t * @private\n\t\t */\n\t\tthis._geometries = geometries;\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * The 3D object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The 3D object's material.\n\t\t *\n\t\t * @type {Material}\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * The scene the 3D object belongs to.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera the 3D object should be rendered with.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The lights node.\n\t\t *\n\t\t * @type {LightsNode}\n\t\t */\n\t\tthis.lightsNode = lightsNode;\n\n\t\t/**\n\t\t * The render context.\n\t\t *\n\t\t * @type {RenderContext}\n\t\t */\n\t\tthis.context = renderContext;\n\n\t\t/**\n\t\t * The 3D object's geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = object.geometry;\n\n\t\t/**\n\t\t * The render object's version.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = material.version;\n\n\t\t/**\n\t\t * The draw range of the geometry.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.drawRange = null;\n\n\t\t/**\n\t\t * An array holding the buffer attributes\n\t\t * of the render object. This entails attribute\n\t\t * definitions on geometry and node level.\n\t\t *\n\t\t * @type {?Array<BufferAttribute>}\n\t\t * @default null\n\t\t */\n\t\tthis.attributes = null;\n\n\t\t/**\n\t\t * A reference to a render pipeline the render\n\t\t * object is processed with.\n\t\t *\n\t\t * @type {RenderPipeline}\n\t\t * @default null\n\t\t */\n\t\tthis.pipeline = null;\n\n\t\t/**\n\t\t * Only relevant for objects using\n\t\t * multiple materials. This represents a group entry\n\t\t * from the respective `BufferGeometry`.\n\t\t *\n\t\t * @type {?{start: number, count: number}}\n\t\t * @default null\n\t\t */\n\t\tthis.group = null;\n\n\t\t/**\n\t\t * An array holding the vertex buffers which can\n\t\t * be buffer attributes but also interleaved buffers.\n\t\t *\n\t\t * @type {?Array<BufferAttribute|InterleavedBuffer>}\n\t\t * @default null\n\t\t */\n\t\tthis.vertexBuffers = null;\n\n\t\t/**\n\t\t * The parameters for the draw command.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.drawParams = null;\n\n\t\t/**\n\t\t * If this render object is used inside a render bundle,\n\t\t * this property points to the respective bundle group.\n\t\t *\n\t\t * @type {?BundleGroup}\n\t\t * @default null\n\t\t */\n\t\tthis.bundle = null;\n\n\t\t/**\n\t\t * The clipping context.\n\t\t *\n\t\t * @type {ClippingContext}\n\t\t */\n\t\tthis.clippingContext = clippingContext;\n\n\t\t/**\n\t\t * The clipping context's cache key.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.clippingContextCacheKey = clippingContext !== null ? clippingContext.cacheKey : '';\n\n\t\t/**\n\t\t * The initial node cache key.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.initialNodesCacheKey = this.getDynamicCacheKey();\n\n\t\t/**\n\t\t * The initial cache key.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.initialCacheKey = this.getCacheKey();\n\n\t\t/**\n\t\t * The node builder state.\n\t\t *\n\t\t * @type {?NodeBuilderState}\n\t\t * @private\n\t\t * @default null\n\t\t */\n\t\tthis._nodeBuilderState = null;\n\n\t\t/**\n\t\t * An array of bindings.\n\t\t *\n\t\t * @type {?Array<BindGroup>}\n\t\t * @private\n\t\t * @default null\n\t\t */\n\t\tthis._bindings = null;\n\n\t\t/**\n\t\t * Reference to the node material observer.\n\t\t *\n\t\t * @type {?NodeMaterialObserver}\n\t\t * @private\n\t\t * @default null\n\t\t */\n\t\tthis._monitor = null;\n\n\t\t/**\n\t\t * An event listener which is defined by `RenderObjects`. It performs\n\t\t * clean up tasks when `dispose()` on this render object.\n\t\t *\n\t\t * @method\n\t\t */\n\t\tthis.onDispose = null;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderObject = true;\n\n\t\t/**\n\t\t * An event listener which is executed when `dispose()` is called on\n\t\t * the render object's material.\n\t\t *\n\t\t * @method\n\t\t */\n\t\tthis.onMaterialDispose = () => {\n\n\t\t\tthis.dispose();\n\n\t\t};\n\n\t\tthis.material.addEventListener( 'dispose', this.onMaterialDispose );\n\n\t}\n\n\t/**\n\t * Updates the clipping context.\n\t *\n\t * @param {ClippingContext} context - The clipping context to set.\n\t */\n\tupdateClipping( context ) {\n\n\t\tthis.clippingContext = context;\n\n\t}\n\n\t/**\n\t * Whether the clipping requires an update or not.\n\t *\n\t * @type {boolean}\n\t * @readonly\n\t */\n\tget clippingNeedsUpdate() {\n\n\t\tif ( this.clippingContext === null || this.clippingContext.cacheKey === this.clippingContextCacheKey ) return false;\n\n\t\tthis.clippingContextCacheKey = this.clippingContext.cacheKey;\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * The number of clipping planes defined in context of hardware clipping.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget hardwareClippingPlanes() {\n\n\t\treturn this.material.hardwareClipping === true ? this.clippingContext.unionClippingCount : 0;\n\n\t}\n\n\t/**\n\t * Returns the node builder state of this render object.\n\t *\n\t * @return {NodeBuilderState} The node builder state.\n\t */\n\tgetNodeBuilderState() {\n\n\t\treturn this._nodeBuilderState || ( this._nodeBuilderState = this._nodes.getForRender( this ) );\n\n\t}\n\n\t/**\n\t * Returns the node material observer of this render object.\n\t *\n\t * @return {NodeMaterialObserver} The node material observer.\n\t */\n\tgetMonitor() {\n\n\t\treturn this._monitor || ( this._monitor = this.getNodeBuilderState().observer );\n\n\t}\n\n\t/**\n\t * Returns an array of bind groups of this render object.\n\t *\n\t * @return {Array<BindGroup>} The bindings.\n\t */\n\tgetBindings() {\n\n\t\treturn this._bindings || ( this._bindings = this.getNodeBuilderState().createBindings() );\n\n\t}\n\n\t/**\n\t * Returns a binding group by group name of this render object.\n\t *\n\t * @param {string} name - The name of the binding group.\n\t * @return {?BindGroup} The bindings.\n\t */\n\tgetBindingGroup( name ) {\n\n\t\tfor ( const bindingGroup of this.getBindings() ) {\n\n\t\t\tif ( bindingGroup.name === name ) {\n\n\t\t\t\treturn bindingGroup;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the index of the render object's geometry.\n\t *\n\t * @return {?BufferAttribute} The index. Returns `null` for non-indexed geometries.\n\t */\n\tgetIndex() {\n\n\t\treturn this._geometries.getIndex( this );\n\n\t}\n\n\t/**\n\t * Returns the indirect buffer attribute.\n\t *\n\t * @return {?BufferAttribute} The indirect attribute. `null` if no indirect drawing is used.\n\t */\n\tgetIndirect() {\n\n\t\treturn this._geometries.getIndirect( this );\n\n\t}\n\n\t/**\n\t * Returns an array that acts as a key for identifying the render object in a chain map.\n\t *\n\t * @return {Array<Object>} An array with object references.\n\t */\n\tgetChainArray() {\n\n\t\treturn [ this.object, this.material, this.context, this.lightsNode ];\n\n\t}\n\n\t/**\n\t * This method is used when the geometry of a 3D object has been exchanged and the\n\t * respective render object now requires an update.\n\t *\n\t * @param {BufferGeometry} geometry - The geometry to set.\n\t */\n\tsetGeometry( geometry ) {\n\n\t\tthis.geometry = geometry;\n\t\tthis.attributes = null;\n\n\t}\n\n\t/**\n\t * Returns the buffer attributes of the render object. The returned array holds\n\t * attribute definitions on geometry and node level.\n\t *\n\t * @return {Array<BufferAttribute>} An array with buffer attributes.\n\t */\n\tgetAttributes() {\n\n\t\tif ( this.attributes !== null ) return this.attributes;\n\n\t\tconst nodeAttributes = this.getNodeBuilderState().nodeAttributes;\n\t\tconst geometry = this.geometry;\n\n\t\tconst attributes = [];\n\t\tconst vertexBuffers = new Set();\n\n\t\tfor ( const nodeAttribute of nodeAttributes ) {\n\n\t\t\tconst attribute = nodeAttribute.node && nodeAttribute.node.attribute ? nodeAttribute.node.attribute : geometry.getAttribute( nodeAttribute.name );\n\n\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\tattributes.push( attribute );\n\n\t\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\t\tvertexBuffers.add( bufferAttribute );\n\n\t\t}\n\n\t\tthis.attributes = attributes;\n\t\tthis.vertexBuffers = Array.from( vertexBuffers.values() );\n\n\t\treturn attributes;\n\n\t}\n\n\t/**\n\t * Returns the vertex buffers of the render object.\n\t *\n\t * @return {Array<BufferAttribute|InterleavedBuffer>} An array with buffer attribute or interleaved buffers.\n\t */\n\tgetVertexBuffers() {\n\n\t\tif ( this.vertexBuffers === null ) this.getAttributes();\n\n\t\treturn this.vertexBuffers;\n\n\t}\n\n\t/**\n\t * Returns the draw parameters for the render object.\n\t *\n\t * @return {?{vertexCount: number, firstVertex: number, instanceCount: number, firstInstance: number}} The draw parameters.\n\t */\n\tgetDrawParameters() {\n\n\t\tconst { object, material, geometry, group, drawRange } = this;\n\n\t\tconst drawParams = this.drawParams || ( this.drawParams = {\n\t\t\tvertexCount: 0,\n\t\t\tfirstVertex: 0,\n\t\t\tinstanceCount: 0,\n\t\t\tfirstInstance: 0\n\t\t} );\n\n\t\tconst index = this.getIndex();\n\t\tconst hasIndex = ( index !== null );\n\n\t\tlet instanceCount = 1;\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tinstanceCount = geometry.instanceCount;\n\n\t\t} else if ( object.count !== undefined ) {\n\n\t\t\tinstanceCount = Math.max( 0, object.count );\n\n\t\t}\n\n\t\tif ( instanceCount === 0 ) return null;\n\n\t\tdrawParams.instanceCount = instanceCount;\n\n\t\tif ( object.isBatchedMesh === true ) return drawParams;\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true && ! object.isPoints && ! object.isLineSegments && ! object.isLine && ! object.isLineLoop ) {\n\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tlet firstVertex = drawRange.start * rangeFactor;\n\t\tlet lastVertex = ( drawRange.start + drawRange.count ) * rangeFactor;\n\n\t\tif ( group !== null ) {\n\n\t\t\tfirstVertex = Math.max( firstVertex, group.start * rangeFactor );\n\t\t\tlastVertex = Math.min( lastVertex, ( group.start + group.count ) * rangeFactor );\n\n\t\t}\n\n\t\tconst position = geometry.attributes.position;\n\t\tlet itemCount = Infinity;\n\n\t\tif ( hasIndex ) {\n\n\t\t\titemCount = index.count;\n\n\t\t} else if ( position !== undefined && position !== null ) {\n\n\t\t\titemCount = position.count;\n\n\t\t}\n\n\t\tfirstVertex = Math.max( firstVertex, 0 );\n\t\tlastVertex = Math.min( lastVertex, itemCount );\n\n\t\tconst count = lastVertex - firstVertex;\n\n\t\tif ( count < 0 || count === Infinity ) return null;\n\n\t\tdrawParams.vertexCount = count;\n\t\tdrawParams.firstVertex = firstVertex;\n\n\t\treturn drawParams;\n\n\t}\n\n\t/**\n\t * Returns the render object's geometry cache key.\n\t *\n\t * The geometry cache key is part of the material cache key.\n\t *\n\t * @return {string} The geometry cache key.\n\t */\n\tgetGeometryCacheKey() {\n\n\t\tconst { geometry } = this;\n\n\t\tlet cacheKey = '';\n\n\t\tfor ( const name of Object.keys( geometry.attributes ).sort() ) {\n\n\t\t\tconst attribute = geometry.attributes[ name ];\n\n\t\t\tcacheKey += name + ',';\n\n\t\t\tif ( attribute.data ) cacheKey += attribute.data.stride + ',';\n\t\t\tif ( attribute.offset ) cacheKey += attribute.offset + ',';\n\t\t\tif ( attribute.itemSize ) cacheKey += attribute.itemSize + ',';\n\t\t\tif ( attribute.normalized ) cacheKey += 'n,';\n\n\t\t}\n\n\t\t// structural equality isn't sufficient for morph targets since the\n\t\t// data are maintained in textures. only if the targets are all equal\n\t\t// the texture and thus the instance of `MorphNode` can be shared.\n\n\t\tfor ( const name of Object.keys( geometry.morphAttributes ).sort() ) {\n\n\t\t\tconst targets = geometry.morphAttributes[ name ];\n\n\t\t\tcacheKey += 'morph-' + name + ',';\n\n\t\t\tfor ( let i = 0, l = targets.length; i < l; i ++ ) {\n\n\t\t\t\tconst attribute = targets[ i ];\n\n\t\t\t\tcacheKey += attribute.id + ',';\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( geometry.index ) {\n\n\t\t\tcacheKey += 'index,';\n\n\t\t}\n\n\t\treturn cacheKey;\n\n\t}\n\n\t/**\n\t * Returns the render object's material cache key.\n\t *\n\t * The material cache key is part of the render object cache key.\n\t *\n\t * @return {number} The material cache key.\n\t */\n\tgetMaterialCacheKey() {\n\n\t\tconst { object, material } = this;\n\n\t\tlet cacheKey = material.customProgramCacheKey();\n\n\t\tfor ( const property of getKeys( material ) ) {\n\n\t\t\tif ( /^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test( property ) ) continue;\n\n\t\t\tconst value = material[ property ];\n\n\t\t\tlet valueKey;\n\n\t\t\tif ( value !== null ) {\n\n\t\t\t\t// some material values require a formatting\n\n\t\t\t\tconst type = typeof value;\n\n\t\t\t\tif ( type === 'number' ) {\n\n\t\t\t\t\tvalueKey = value !== 0 ? '1' : '0'; // Convert to on/off, important for clearcoat, transmission, etc\n\n\t\t\t\t} else if ( type === 'object' ) {\n\n\t\t\t\t\tvalueKey = '{';\n\n\t\t\t\t\tif ( value.isTexture ) {\n\n\t\t\t\t\t\tvalueKey += value.mapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvalueKey += '}';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalueKey = String( value );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvalueKey = String( value );\n\n\t\t\t}\n\n\t\t\tcacheKey += /*property + ':' +*/ valueKey + ',';\n\n\t\t}\n\n\t\tcacheKey += this.clippingContextCacheKey + ',';\n\n\t\tif ( object.geometry ) {\n\n\t\t\tcacheKey += this.getGeometryCacheKey();\n\n\t\t}\n\n\t\tif ( object.skeleton ) {\n\n\t\t\tcacheKey += object.skeleton.bones.length + ',';\n\n\t\t}\n\n\t\tif ( object.isBatchedMesh ) {\n\n\t\t\tcacheKey += object._matricesTexture.uuid + ',';\n\n\t\t\tif ( object._colorsTexture !== null ) {\n\n\t\t\t\tcacheKey += object._colorsTexture.uuid + ',';\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.count > 1 ) {\n\n\t\t\t// TODO: https://github.com/mrdoob/three.js/pull/29066#issuecomment-2269400850\n\n\t\t\tcacheKey += object.uuid + ',';\n\n\t\t}\n\n\t\tcacheKey += object.receiveShadow + ',';\n\n\t\treturn hashString( cacheKey );\n\n\t}\n\n\t/**\n\t * Whether the geometry requires an update or not.\n\t *\n\t * @type {boolean}\n\t * @readonly\n\t */\n\tget needsGeometryUpdate() {\n\n\t\treturn this.geometry.id !== this.object.geometry.id;\n\n\t}\n\n\t/**\n\t * Whether the render object requires an update or not.\n\t *\n\t * Note: There are two distinct places where render objects are checked for an update.\n\t *\n\t * 1. In `RenderObjects.get()` which is executed when the render object is request. This\n\t * method checks the `needsUpdate` flag and recreates the render object if necessary.\n\t * 2. In `Renderer._renderObjectDirect()` right after getting the render object via\n\t * `RenderObjects.get()`. The render object's NodeMaterialObserver is then used to detect\n\t * a need for a refresh due to material, geometry or object related value changes.\n\t *\n\t * TODO: Investigate if it's possible to merge both steps so there is only a single place\n\t * that performs the 'needsUpdate' check.\n\t *\n\t * @type {boolean}\n\t * @readonly\n\t */\n\tget needsUpdate() {\n\n\t\treturn /*this.object.static !== true &&*/ ( this.initialNodesCacheKey !== this.getDynamicCacheKey() || this.clippingNeedsUpdate );\n\n\t}\n\n\t/**\n\t * Returns the dynamic cache key which represents a key that is computed per draw command.\n\t *\n\t * @return {number} The cache key.\n\t */\n\tgetDynamicCacheKey() {\n\n\t\tlet cacheKey = 0;\n\n\t\t// `Nodes.getCacheKey()` returns an environment cache key which is not relevant when\n\t\t// the renderer is inside a shadow pass.\n\n\t\tif ( this.material.isShadowPassMaterial !== true ) {\n\n\t\t\tcacheKey = this._nodes.getCacheKey( this.scene, this.lightsNode );\n\n\t\t}\n\n\t\tif ( this.camera.isArrayCamera ) {\n\n\t\t\tcacheKey = hash$1( cacheKey, this.camera.cameras.length );\n\n\t\t}\n\n\t\tif ( this.object.receiveShadow ) {\n\n\t\t\tcacheKey = hash$1( cacheKey, 1 );\n\n\t\t}\n\n\t\treturn cacheKey;\n\n\t}\n\n\t/**\n\t * Returns the render object's cache key.\n\t *\n\t * @return {number} The cache key.\n\t */\n\tgetCacheKey() {\n\n\t\treturn this.getMaterialCacheKey() + this.getDynamicCacheKey();\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tthis.material.removeEventListener( 'dispose', this.onMaterialDispose );\n\n\t\tthis.onDispose();\n\n\t}\n\n}\n\nconst _chainKeys$5 = [];\n\n/**\n * This module manages the render objects of the renderer.\n *\n * @private\n */\nclass RenderObjects {\n\n\t/**\n\t * Constructs a new render object management component.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Geometries} geometries - Renderer component for managing geometries.\n\t * @param {Pipelines} pipelines - Renderer component for managing pipelines.\n\t * @param {Bindings} bindings - Renderer component for managing bindings.\n\t * @param {Info} info - Renderer component for managing metrics and monitoring data.\n\t */\n\tconstructor( renderer, nodes, geometries, pipelines, bindings, info ) {\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t\t/**\n\t\t * Renderer component for managing geometries.\n\t\t *\n\t\t * @type {Geometries}\n\t\t */\n\t\tthis.geometries = geometries;\n\n\t\t/**\n\t\t * Renderer component for managing pipelines.\n\t\t *\n\t\t * @type {Pipelines}\n\t\t */\n\t\tthis.pipelines = pipelines;\n\n\t\t/**\n\t\t * Renderer component for managing bindings.\n\t\t *\n\t\t * @type {Bindings}\n\t\t */\n\t\tthis.bindings = bindings;\n\n\t\t/**\n\t\t * Renderer component for managing metrics and monitoring data.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = info;\n\n\t\t/**\n\t\t * A dictionary that manages render contexts in chain maps\n\t\t * for each pass ID.\n\t\t *\n\t\t * @type {Object<string,ChainMap>}\n\t\t */\n\t\tthis.chainMaps = {};\n\n\t}\n\n\t/**\n\t * Returns a render object for the given object and state data.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the 3D object should be rendered with.\n\t * @param {LightsNode} lightsNode - The lights node.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t * @param {string} [passId] - An optional ID for identifying the pass.\n\t * @return {RenderObject} The render object.\n\t */\n\tget( object, material, scene, camera, lightsNode, renderContext, clippingContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\n\t\t// reuse chainArray\n\t\t_chainKeys$5[ 0 ] = object;\n\t\t_chainKeys$5[ 1 ] = material;\n\t\t_chainKeys$5[ 2 ] = renderContext;\n\t\t_chainKeys$5[ 3 ] = lightsNode;\n\n\t\tlet renderObject = chainMap.get( _chainKeys$5 );\n\n\t\tif ( renderObject === undefined ) {\n\n\t\t\trenderObject = this.createRenderObject( this.nodes, this.geometries, this.renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext, passId );\n\n\t\t\tchainMap.set( _chainKeys$5, renderObject );\n\n\t\t} else {\n\n\t\t\trenderObject.updateClipping( clippingContext );\n\n\t\t\tif ( renderObject.needsGeometryUpdate ) {\n\n\t\t\t\trenderObject.setGeometry( object.geometry );\n\n\t\t\t}\n\n\t\t\tif ( renderObject.version !== material.version || renderObject.needsUpdate ) {\n\n\t\t\t\tif ( renderObject.initialCacheKey !== renderObject.getCacheKey() ) {\n\n\t\t\t\t\trenderObject.dispose();\n\n\t\t\t\t\trenderObject = this.get( object, material, scene, camera, lightsNode, renderContext, clippingContext, passId );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderObject.version = material.version;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_chainKeys$5.length = 0;\n\n\t\treturn renderObject;\n\n\t}\n\n\t/**\n\t * Returns a chain map for the given pass ID.\n\t *\n\t * @param {string} [passId='default'] - The pass ID.\n\t * @return {ChainMap} The chain map.\n\t */\n\tgetChainMap( passId = 'default' ) {\n\n\t\treturn this.chainMaps[ passId ] || ( this.chainMaps[ passId ] = new ChainMap() );\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\t/**\n\t * Factory method for creating render objects with the given list of parameters.\n\t *\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Geometries} geometries - Renderer component for managing geometries.\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The object's material.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the object should be rendered with.\n\t * @param {LightsNode} lightsNode - The lights node.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t * @param {string} [passId] - An optional ID for identifying the pass.\n\t * @return {RenderObject} The render object.\n\t */\n\tcreateRenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\n\t\tconst renderObject = new RenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext );\n\n\t\trenderObject.onDispose = () => {\n\n\t\t\tthis.pipelines.delete( renderObject );\n\t\t\tthis.bindings.delete( renderObject );\n\t\t\tthis.nodes.delete( renderObject );\n\n\t\t\tchainMap.delete( renderObject.getChainArray() );\n\n\t\t};\n\n\t\treturn renderObject;\n\n\t}\n\n\n}\n\n/**\n * Data structure for the renderer. It is intended to manage\n * data of objects in dictionaries.\n *\n * @private\n */\nclass DataMap {\n\n\t/**\n\t * Constructs a new data map.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * `DataMap` internally uses a weak map\n\t\t * to manage its data.\n\t\t *\n\t\t * @type {WeakMap}\n\t\t */\n\t\tthis.data = new WeakMap();\n\n\t}\n\n\t/**\n\t * Returns the dictionary for the given object.\n\t *\n\t * @param {Object} object - The object.\n\t * @return {Object} The dictionary.\n\t */\n\tget( object ) {\n\n\t\tlet map = this.data.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.data.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\t/**\n\t * Deletes the dictionary for the given object.\n\t *\n\t * @param {Object} object - The object.\n\t * @return {?Object} The deleted dictionary.\n\t */\n\tdelete( object ) {\n\n\t\tlet map = null;\n\n\t\tif ( this.data.has( object ) ) {\n\n\t\t\tmap = this.data.get( object );\n\n\t\t\tthis.data.delete( object );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given object has a dictionary defined.\n\t *\n\t * @param {Object} object - The object to test.\n\t * @return {boolean} Whether a dictionary is defined or not.\n\t */\n\thas( object ) {\n\n\t\treturn this.data.has( object );\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tthis.data = new WeakMap();\n\n\t}\n\n}\n\nconst AttributeType = {\n\tVERTEX: 1,\n\tINDEX: 2,\n\tSTORAGE: 3,\n\tINDIRECT: 4\n};\n\n// size of a chunk in bytes (STD140 layout)\n\nconst GPU_CHUNK_BYTES = 16;\n\n// @TODO: Move to src/constants.js\n\nconst BlendColorFactor = 211;\nconst OneMinusBlendColorFactor = 212;\n\n/**\n * This renderer module manages geometry attributes.\n *\n * @private\n * @augments DataMap\n */\nclass Attributes extends DataMap {\n\n\t/**\n\t * Constructs a new attribute management component.\n\t *\n\t * @param {Backend} backend - The renderer's backend.\n\t */\n\tconstructor( backend ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The renderer's backend.\n\t\t *\n\t\t * @type {Backend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t}\n\n\t/**\n\t * Deletes the data for the given attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The attribute.\n\t * @return {Object|null} The deleted attribute data.\n\t */\n\tdelete( attribute ) {\n\n\t\tconst attributeData = super.delete( attribute );\n\n\t\tif ( attributeData !== null ) {\n\n\t\t\tthis.backend.destroyAttribute( attribute );\n\n\t\t}\n\n\t\treturn attributeData;\n\n\t}\n\n\t/**\n\t * Updates the given attribute. This method creates attribute buffers\n\t * for new attributes and updates data for existing ones.\n\t *\n\t * @param {BufferAttribute} attribute - The attribute to update.\n\t * @param {number} type - The attribute type.\n\t */\n\tupdate( attribute, type ) {\n\n\t\tconst data = this.get( attribute );\n\n\t\tif ( data.version === undefined ) {\n\n\t\t\tif ( type === AttributeType.VERTEX ) {\n\n\t\t\t\tthis.backend.createAttribute( attribute );\n\n\t\t\t} else if ( type === AttributeType.INDEX ) {\n\n\t\t\t\tthis.backend.createIndexAttribute( attribute );\n\n\t\t\t} else if ( type === AttributeType.STORAGE ) {\n\n\t\t\t\tthis.backend.createStorageAttribute( attribute );\n\n\t\t\t} else if ( type === AttributeType.INDIRECT ) {\n\n\t\t\t\tthis.backend.createIndirectStorageAttribute( attribute );\n\n\t\t\t}\n\n\t\t\tdata.version = this._getBufferAttribute( attribute ).version;\n\n\t\t} else {\n\n\t\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\t\tif ( data.version < bufferAttribute.version || bufferAttribute.usage === DynamicDrawUsage ) {\n\n\t\t\t\tthis.backend.updateAttribute( attribute );\n\n\t\t\t\tdata.version = bufferAttribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Utility method for handling interleaved buffer attributes correctly.\n\t * To process them, their `InterleavedBuffer` is returned.\n\t *\n\t * @param {BufferAttribute} attribute - The attribute.\n\t * @return {BufferAttribute|InterleavedBuffer}\n\t */\n\t_getBufferAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn attribute;\n\n\t}\n\n}\n\n/**\n * Returns the wireframe version for the given geometry.\n *\n * @private\n * @function\n * @param {BufferGeometry} geometry - The geometry.\n * @return {number} The version.\n */\nfunction getWireframeVersion( geometry ) {\n\n\treturn ( geometry.index !== null ) ? geometry.index.version : geometry.attributes.position.version;\n\n}\n\n/**\n * Returns a wireframe index attribute for the given geometry.\n *\n * @private\n * @function\n * @param {BufferGeometry} geometry - The geometry.\n * @return {BufferAttribute} The wireframe index attribute.\n */\nfunction getWireframeIndex( geometry ) {\n\n\tconst indices = [];\n\n\tconst geometryIndex = geometry.index;\n\tconst geometryPosition = geometry.attributes.position;\n\n\tif ( geometryIndex !== null ) {\n\n\t\tconst array = geometryIndex.array;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst a = array[ i + 0 ];\n\t\t\tconst b = array[ i + 1 ];\n\t\t\tconst c = array[ i + 2 ];\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t} else {\n\n\t\tconst array = geometryPosition.array;\n\n\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\tconst a = i + 0;\n\t\t\tconst b = i + 1;\n\t\t\tconst c = i + 2;\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t}\n\n\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\tattribute.version = getWireframeVersion( geometry );\n\n\treturn attribute;\n\n}\n\n/**\n * This renderer module manages geometries.\n *\n * @private\n * @augments DataMap\n */\nclass Geometries extends DataMap {\n\n\t/**\n\t * Constructs a new geometry management component.\n\t *\n\t * @param {Attributes} attributes - Renderer component for managing attributes.\n\t * @param {Info} info - Renderer component for managing metrics and monitoring data.\n\t */\n\tconstructor( attributes, info ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Renderer component for managing attributes.\n\t\t *\n\t\t * @type {Attributes}\n\t\t */\n\t\tthis.attributes = attributes;\n\n\t\t/**\n\t\t * Renderer component for managing metrics and monitoring data.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = info;\n\n\t\t/**\n\t\t * Weak Map for managing attributes for wireframe rendering.\n\t\t *\n\t\t * @type {WeakMap<BufferGeometry,BufferAttribute>}\n\t\t */\n\t\tthis.wireframes = new WeakMap();\n\n\t\t/**\n\t\t * This Weak Map is used to make sure buffer attributes are\n\t\t * updated only once per render call.\n\t\t *\n\t\t * @type {WeakMap<BufferAttribute,number>}\n\t\t */\n\t\tthis.attributeCall = new WeakMap();\n\n\t}\n\n\t/**\n\t * Returns `true` if the given render object has an initialized geometry.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether if the given render object has an initialized geometry or not.\n\t */\n\thas( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\n\t\treturn super.has( geometry ) && this.get( geometry ).initialized === true;\n\n\t}\n\n\t/**\n\t * Prepares the geometry of the given render object for rendering.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tupdateForRender( renderObject ) {\n\n\t\tif ( this.has( renderObject ) === false ) this.initGeometry( renderObject );\n\n\t\tthis.updateAttributes( renderObject );\n\n\t}\n\n\t/**\n\t * Initializes the geometry of the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tinitGeometry( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\t\tconst geometryData = this.get( geometry );\n\n\t\tgeometryData.initialized = true;\n\n\t\tthis.info.memory.geometries ++;\n\n\t\tconst onDispose = () => {\n\n\t\t\tthis.info.memory.geometries --;\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst geometryAttributes = renderObject.getAttributes();\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.attributes.delete( index );\n\n\t\t\t}\n\n\t\t\tfor ( const geometryAttribute of geometryAttributes ) {\n\n\t\t\t\tthis.attributes.delete( geometryAttribute );\n\n\t\t\t}\n\n\t\t\tconst wireframeAttribute = this.wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute !== undefined ) {\n\n\t\t\t\tthis.attributes.delete( wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onDispose );\n\n\t\t};\n\n\t\tgeometry.addEventListener( 'dispose', onDispose );\n\n\t}\n\n\t/**\n\t * Updates the geometry attributes of the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tupdateAttributes( renderObject ) {\n\n\t\t// attributes\n\n\t\tconst attributes = renderObject.getAttributes();\n\n\t\tfor ( const attribute of attributes ) {\n\n\t\t\tif ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) {\n\n\t\t\t\tthis.updateAttribute( attribute, AttributeType.STORAGE );\n\n\t\t\t} else {\n\n\t\t\t\tthis.updateAttribute( attribute, AttributeType.VERTEX );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indexes\n\n\t\tconst index = this.getIndex( renderObject );\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.updateAttribute( index, AttributeType.INDEX );\n\n\t\t}\n\n\t\t// indirect\n\n\t\tconst indirect = renderObject.geometry.indirect;\n\n\t\tif ( indirect !== null ) {\n\n\t\t\tthis.updateAttribute( indirect, AttributeType.INDIRECT );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the given attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The attribute to update.\n\t * @param {number} type - The attribute type.\n\t */\n\tupdateAttribute( attribute, type ) {\n\n\t\tconst callId = this.info.render.calls;\n\n\t\tif ( ! attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( this.attributeCall.get( attribute ) !== callId ) {\n\n\t\t\t\tthis.attributes.update( attribute, type );\n\n\t\t\t\tthis.attributeCall.set( attribute, callId );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.attributeCall.get( attribute ) === undefined ) {\n\n\t\t\t\tthis.attributes.update( attribute, type );\n\n\t\t\t\tthis.attributeCall.set( attribute, callId );\n\n\t\t\t} else if ( this.attributeCall.get( attribute.data ) !== callId ) {\n\n\t\t\t\tthis.attributes.update( attribute, type );\n\n\t\t\t\tthis.attributeCall.set( attribute.data, callId );\n\n\t\t\t\tthis.attributeCall.set( attribute, callId );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the indirect buffer attribute of the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {?BufferAttribute} The indirect attribute. `null` if no indirect drawing is used.\n\t */\n\tgetIndirect( renderObject ) {\n\n\t\treturn renderObject.geometry.indirect;\n\n\t}\n\n\t/**\n\t * Returns the index of the given render object's geometry. This is implemented\n\t * in a method to return a wireframe index if necessary.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {?BufferAttribute} The index. Returns `null` for non-indexed geometries.\n\t */\n\tgetIndex( renderObject ) {\n\n\t\tconst { geometry, material } = renderObject;\n\n\t\tlet index = geometry.index;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tconst wireframes = this.wireframes;\n\n\t\t\tlet wireframeAttribute = wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute === undefined ) {\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t} else if ( wireframeAttribute.version !== getWireframeVersion( geometry ) ) {\n\n\t\t\t\tthis.attributes.delete( wireframeAttribute );\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tindex = wireframeAttribute;\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n}\n\n/**\n * This renderer module provides a series of statistical information\n * about the GPU memory and the rendering process. Useful for debugging\n * and monitoring.\n */\nclass Info {\n\n\t/**\n\t * Constructs a new info component.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * Whether frame related metrics should automatically\n\t\t * be resetted or not. This property should be set to `false`\n\t\t * by apps which manage their own animation loop. They must\n\t\t * then call `renderer.info.reset()` once per frame manually.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoReset = true;\n\n\t\t/**\n\t\t * The current frame ID. This ID is managed\n\t\t * by `NodeFrame`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.frame = 0;\n\n\t\t/**\n\t\t * The number of render calls since the\n\t\t * app has been started.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.calls = 0;\n\n\t\t/**\n\t\t * Render related metrics.\n\t\t *\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t * @property {number} calls - The number of render calls since the app has been started.\n\t\t * @property {number} frameCalls - The number of render calls of the current frame.\n\t\t * @property {number} drawCalls - The number of draw calls of the current frame.\n\t\t * @property {number} triangles - The number of rendered triangle primitives of the current frame.\n\t\t * @property {number} points - The number of rendered point primitives of the current frame.\n\t\t * @property {number} lines - The number of rendered line primitives of the current frame.\n\t\t * @property {number} timestamp - The timestamp of the frame when using `renderer.renderAsync()`.\n\t\t */\n\t\tthis.render = {\n\t\t\tcalls: 0,\n\t\t\tframeCalls: 0,\n\t\t\tdrawCalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0,\n\t\t\ttimestamp: 0,\n\t\t};\n\n\t\t/**\n\t\t * Compute related metrics.\n\t\t *\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t * @property {number} calls - The number of compute calls since the app has been started.\n\t\t * @property {number} frameCalls - The number of compute calls of the current frame.\n\t\t * @property {number} timestamp - The timestamp of the frame when using `renderer.computeAsync()`.\n\t\t */\n\t\tthis.compute = {\n\t\t\tcalls: 0,\n\t\t\tframeCalls: 0,\n\t\t\ttimestamp: 0\n\t\t};\n\n\t\t/**\n\t\t * Memory related metrics.\n\t\t *\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t * @property {number} geometries - The number of active geometries.\n\t\t * @property {number} frameCalls - The number of active textures.\n\t\t */\n\t\tthis.memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t}\n\n\t/**\n\t * This method should be executed per draw call and updates the corresponding metrics.\n\t *\n\t * @param {Object3D} object - The 3D object that is going to be rendered.\n\t * @param {number} count - The vertex or index count.\n\t * @param {number} instanceCount - The instance count.\n\t */\n\tupdate( object, count, instanceCount ) {\n\n\t\tthis.render.drawCalls ++;\n\n\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\tthis.render.triangles += instanceCount * ( count / 3 );\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\tthis.render.points += instanceCount * count;\n\n\t\t} else if ( object.isLineSegments ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count / 2 );\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count - 1 );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPUInfo: Unknown object type.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets frame related metrics.\n\t */\n\treset() {\n\n\t\tthis.render.drawCalls = 0;\n\t\tthis.render.frameCalls = 0;\n\t\tthis.compute.frameCalls = 0;\n\n\t\tthis.render.triangles = 0;\n\t\tthis.render.points = 0;\n\t\tthis.render.lines = 0;\n\n\n\t}\n\n\t/**\n\t * Performs a complete reset of the object.\n\t */\n\tdispose() {\n\n\t\tthis.reset();\n\n\t\tthis.calls = 0;\n\n\t\tthis.render.calls = 0;\n\t\tthis.compute.calls = 0;\n\n\t\tthis.render.timestamp = 0;\n\t\tthis.compute.timestamp = 0;\n\t\tthis.memory.geometries = 0;\n\t\tthis.memory.textures = 0;\n\n\t}\n\n}\n\n/**\n * Abstract class for representing pipelines.\n *\n * @private\n * @abstract\n */\nclass Pipeline {\n\n\t/**\n\t * Constructs a new pipeline.\n\t *\n\t * @param {string} cacheKey - The pipeline's cache key.\n\t */\n\tconstructor( cacheKey ) {\n\n\t\t/**\n\t\t * The pipeline's cache key.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.cacheKey = cacheKey;\n\n\t\t/**\n\t\t * How often the pipeline is currently in use.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\n/**\n * Class for representing render pipelines.\n *\n * @private\n * @augments Pipeline\n */\nclass RenderPipeline extends Pipeline {\n\n\t/**\n\t * Constructs a new render pipeline.\n\t *\n\t * @param {string} cacheKey - The pipeline's cache key.\n\t * @param {ProgrammableStage} vertexProgram - The pipeline's vertex shader.\n\t * @param {ProgrammableStage} fragmentProgram - The pipeline's fragment shader.\n\t */\n\tconstructor( cacheKey, vertexProgram, fragmentProgram ) {\n\n\t\tsuper( cacheKey );\n\n\t\t/**\n\t\t * The pipeline's vertex shader.\n\t\t *\n\t\t * @type {ProgrammableStage}\n\t\t */\n\t\tthis.vertexProgram = vertexProgram;\n\n\t\t/**\n\t\t * The pipeline's fragment shader.\n\t\t *\n\t\t * @type {ProgrammableStage}\n\t\t */\n\t\tthis.fragmentProgram = fragmentProgram;\n\n\t}\n\n}\n\n/**\n * Class for representing compute pipelines.\n *\n * @private\n * @augments Pipeline\n */\nclass ComputePipeline extends Pipeline {\n\n\t/**\n\t * Constructs a new render pipeline.\n\t *\n\t * @param {string} cacheKey - The pipeline's cache key.\n\t * @param {ProgrammableStage} computeProgram - The pipeline's compute shader.\n\t */\n\tconstructor( cacheKey, computeProgram ) {\n\n\t\tsuper( cacheKey );\n\n\t\t/**\n\t\t * The pipeline's compute shader.\n\t\t *\n\t\t * @type {ProgrammableStage}\n\t\t */\n\t\tthis.computeProgram = computeProgram;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isComputePipeline = true;\n\n\t}\n\n}\n\nlet _id$8 = 0;\n\n/**\n * Class for representing programmable stages which are vertex,\n * fragment or compute shaders. Unlike fixed-function states (like blending),\n * they represent the programmable part of a pipeline.\n *\n * @private\n */\nclass ProgrammableStage {\n\n\t/**\n\t * Constructs a new programmable stage.\n\t *\n\t * @param {string} code - The shader code.\n\t * @param {('vertex'|'fragment'|'compute')} stage - The type of stage.\n\t * @param {string} name - The name of the shader.\n\t * @param {?Array<Object>} [transforms=null] - The transforms (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n\t * @param {?Array<Object>} [attributes=null] - The attributes (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n\t */\n\tconstructor( code, stage, name, transforms = null, attributes = null ) {\n\n\t\t/**\n\t\t * The id of the programmable stage.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.id = _id$8 ++;\n\n\t\t/**\n\t\t * The shader code.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.code = code;\n\n\t\t/**\n\t\t * The type of stage.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.stage = stage;\n\n\t\t/**\n\t\t * The name of the stage.\n\t\t * This is used for debugging purposes.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The transforms (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n\t\t *\n\t\t * @type {?Array<Object>}\n\t\t */\n\t\tthis.transforms = transforms;\n\n\t\t/**\n\t\t * The attributes (only relevant for compute stages with WebGL 2 which uses Transform Feedback).\n\t\t *\n\t\t * @type {?Array<Object>}\n\t\t */\n\t\tthis.attributes = attributes;\n\n\t\t/**\n\t\t * How often the programmable stage is currently in use.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\n/**\n * This renderer module manages the pipelines of the renderer.\n *\n * @private\n * @augments DataMap\n */\nclass Pipelines extends DataMap {\n\n\t/**\n\t * Constructs a new pipeline management component.\n\t *\n\t * @param {Backend} backend - The renderer's backend.\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t */\n\tconstructor( backend, nodes ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The renderer's backend.\n\t\t *\n\t\t * @type {Backend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t\t/**\n\t\t * A references to the bindings management component.\n\t\t * This reference will be set inside the `Bindings`\n\t\t * constructor.\n\t\t *\n\t\t * @type {?Bindings}\n\t\t * @default null\n\t\t */\n\t\tthis.bindings = null;\n\n\t\t/**\n\t\t * Internal cache for maintaining pipelines.\n\t\t * The key of the map is a cache key, the value the pipeline.\n\t\t *\n\t\t * @type {Map<string,Pipeline>}\n\t\t */\n\t\tthis.caches = new Map();\n\n\t\t/**\n\t\t * This dictionary maintains for each shader stage type (vertex,\n\t\t * fragment and compute) the programmable stage objects which\n\t\t * represent the actual shader code.\n\t\t *\n\t\t * @type {Object<string,Map>}\n\t\t */\n\t\tthis.programs = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map(),\n\t\t\tcompute: new Map()\n\t\t};\n\n\t}\n\n\t/**\n\t * Returns a compute pipeline for the given compute node.\n\t *\n\t * @param {Node} computeNode - The compute node.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t * @return {ComputePipeline} The compute pipeline.\n\t */\n\tgetForCompute( computeNode, bindings ) {\n\n\t\tconst { backend } = this;\n\n\t\tconst data = this.get( computeNode );\n\n\t\tif ( this._needsComputeUpdate( computeNode ) ) {\n\n\t\t\tconst previousPipeline = data.pipeline;\n\n\t\t\tif ( previousPipeline ) {\n\n\t\t\t\tpreviousPipeline.usedTimes --;\n\t\t\t\tpreviousPipeline.computeProgram.usedTimes --;\n\n\t\t\t}\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilderState = this.nodes.getForCompute( computeNode );\n\n\t\t\t// programmable stage\n\n\t\t\tlet stageCompute = this.programs.compute.get( nodeBuilderState.computeShader );\n\n\t\t\tif ( stageCompute === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.computeProgram );\n\n\t\t\t\tstageCompute = new ProgrammableStage( nodeBuilderState.computeShader, 'compute', computeNode.name, nodeBuilderState.transforms, nodeBuilderState.nodeAttributes );\n\t\t\t\tthis.programs.compute.set( nodeBuilderState.computeShader, stageCompute );\n\n\t\t\t\tbackend.createProgram( stageCompute );\n\n\t\t\t}\n\n\t\t\t// determine compute pipeline\n\n\t\t\tconst cacheKey = this._getComputeCacheKey( computeNode, stageCompute );\n\n\t\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\t\tif ( pipeline === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( previousPipeline );\n\n\t\t\t\tpipeline = this._getComputePipeline( computeNode, stageCompute, cacheKey, bindings );\n\n\t\t\t}\n\n\t\t\t// keep track of all used times\n\n\t\t\tpipeline.usedTimes ++;\n\t\t\tstageCompute.usedTimes ++;\n\n\t\t\t//\n\n\t\t\tdata.version = computeNode.version;\n\t\t\tdata.pipeline = pipeline;\n\n\t\t}\n\n\t\treturn data.pipeline;\n\n\t}\n\n\t/**\n\t * Returns a render pipeline for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {?Array<Promise>} [promises=null] - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.\n\t * @return {RenderPipeline} The render pipeline.\n\t */\n\tgetForRender( renderObject, promises = null ) {\n\n\t\tconst { backend } = this;\n\n\t\tconst data = this.get( renderObject );\n\n\t\tif ( this._needsRenderUpdate( renderObject ) ) {\n\n\t\t\tconst previousPipeline = data.pipeline;\n\n\t\t\tif ( previousPipeline ) {\n\n\t\t\t\tpreviousPipeline.usedTimes --;\n\t\t\t\tpreviousPipeline.vertexProgram.usedTimes --;\n\t\t\t\tpreviousPipeline.fragmentProgram.usedTimes --;\n\n\t\t\t}\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilderState = renderObject.getNodeBuilderState();\n\n\t\t\tconst name = renderObject.material ? renderObject.material.name : '';\n\n\t\t\t// programmable stages\n\n\t\t\tlet stageVertex = this.programs.vertex.get( nodeBuilderState.vertexShader );\n\n\t\t\tif ( stageVertex === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.vertexProgram );\n\n\t\t\t\tstageVertex = new ProgrammableStage( nodeBuilderState.vertexShader, 'vertex', name );\n\t\t\t\tthis.programs.vertex.set( nodeBuilderState.vertexShader, stageVertex );\n\n\t\t\t\tbackend.createProgram( stageVertex );\n\n\t\t\t}\n\n\t\t\tlet stageFragment = this.programs.fragment.get( nodeBuilderState.fragmentShader );\n\n\t\t\tif ( stageFragment === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.fragmentProgram );\n\n\t\t\t\tstageFragment = new ProgrammableStage( nodeBuilderState.fragmentShader, 'fragment', name );\n\t\t\t\tthis.programs.fragment.set( nodeBuilderState.fragmentShader, stageFragment );\n\n\t\t\t\tbackend.createProgram( stageFragment );\n\n\t\t\t}\n\n\t\t\t// determine render pipeline\n\n\t\t\tconst cacheKey = this._getRenderCacheKey( renderObject, stageVertex, stageFragment );\n\n\t\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\t\tif ( pipeline === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( previousPipeline );\n\n\t\t\t\tpipeline = this._getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey, promises );\n\n\t\t\t} else {\n\n\t\t\t\trenderObject.pipeline = pipeline;\n\n\t\t\t}\n\n\t\t\t// keep track of all used times\n\n\t\t\tpipeline.usedTimes ++;\n\t\t\tstageVertex.usedTimes ++;\n\t\t\tstageFragment.usedTimes ++;\n\n\t\t\t//\n\n\t\t\tdata.pipeline = pipeline;\n\n\t\t}\n\n\t\treturn data.pipeline;\n\n\t}\n\n\t/**\n\t * Deletes the pipeline for the given render object.\n\t *\n\t * @param {RenderObject} object - The render object.\n\t * @return {?Object} The deleted dictionary.\n\t */\n\tdelete( object ) {\n\n\t\tconst pipeline = this.get( object ).pipeline;\n\n\t\tif ( pipeline ) {\n\n\t\t\t// pipeline\n\n\t\t\tpipeline.usedTimes --;\n\n\t\t\tif ( pipeline.usedTimes === 0 ) this._releasePipeline( pipeline );\n\n\t\t\t// programs\n\n\t\t\tif ( pipeline.isComputePipeline ) {\n\n\t\t\t\tpipeline.computeProgram.usedTimes --;\n\n\t\t\t\tif ( pipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( pipeline.computeProgram );\n\n\t\t\t} else {\n\n\t\t\t\tpipeline.fragmentProgram.usedTimes --;\n\t\t\t\tpipeline.vertexProgram.usedTimes --;\n\n\t\t\t\tif ( pipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( pipeline.vertexProgram );\n\t\t\t\tif ( pipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( pipeline.fragmentProgram );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.delete( object );\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis.caches = new Map();\n\t\tthis.programs = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map(),\n\t\t\tcompute: new Map()\n\t\t};\n\n\t}\n\n\t/**\n\t * Updates the pipeline for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tupdateForRender( renderObject ) {\n\n\t\tthis.getForRender( renderObject );\n\n\t}\n\n\t/**\n\t * Returns a compute pipeline for the given parameters.\n\t *\n\t * @private\n\t * @param {Node} computeNode - The compute node.\n\t * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.\n\t * @param {string} cacheKey - The cache key.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t * @return {ComputePipeline} The compute pipeline.\n\t */\n\t_getComputePipeline( computeNode, stageCompute, cacheKey, bindings ) {\n\n\t\t// check for existing pipeline\n\n\t\tcacheKey = cacheKey || this._getComputeCacheKey( computeNode, stageCompute );\n\n\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = new ComputePipeline( cacheKey, stageCompute );\n\n\t\t\tthis.caches.set( cacheKey, pipeline );\n\n\t\t\tthis.backend.createComputePipeline( pipeline, bindings );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t/**\n\t * Returns a render pipeline for the given parameters.\n\t *\n\t * @private\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.\n\t * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.\n\t * @param {string} cacheKey - The cache key.\n\t * @param {?Array<Promise>} promises - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.\n\t * @return {ComputePipeline} The compute pipeline.\n\t */\n\t_getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey, promises ) {\n\n\t\t// check for existing pipeline\n\n\t\tcacheKey = cacheKey || this._getRenderCacheKey( renderObject, stageVertex, stageFragment );\n\n\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = new RenderPipeline( cacheKey, stageVertex, stageFragment );\n\n\t\t\tthis.caches.set( cacheKey, pipeline );\n\n\t\t\trenderObject.pipeline = pipeline;\n\n\t\t\t// The `promises` array is `null` by default and only set to an empty array when\n\t\t\t// `Renderer.compileAsync()` is used. The next call actually fills the array with\n\t\t\t// pending promises that resolve when the render pipelines are ready for rendering.\n\n\t\t\tthis.backend.createRenderPipeline( renderObject, promises );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t/**\n\t * Computes a cache key representing a compute pipeline.\n\t *\n\t * @private\n\t * @param {Node} computeNode - The compute node.\n\t * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.\n\t * @return {string} The cache key.\n\t */\n\t_getComputeCacheKey( computeNode, stageCompute ) {\n\n\t\treturn computeNode.id + ',' + stageCompute.id;\n\n\t}\n\n\t/**\n\t * Computes a cache key representing a render pipeline.\n\t *\n\t * @private\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.\n\t * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.\n\t * @return {string} The cache key.\n\t */\n\t_getRenderCacheKey( renderObject, stageVertex, stageFragment ) {\n\n\t\treturn stageVertex.id + ',' + stageFragment.id + ',' + this.backend.getRenderCacheKey( renderObject );\n\n\t}\n\n\t/**\n\t * Releases the given pipeline.\n\t *\n\t * @private\n\t * @param {Pipeline} pipeline - The pipeline to release.\n\t */\n\t_releasePipeline( pipeline ) {\n\n\t\tthis.caches.delete( pipeline.cacheKey );\n\n\t}\n\n\t/**\n\t * Releases the shader program.\n\t *\n\t * @private\n\t * @param {Object} program - The shader program to release.\n\t */\n\t_releaseProgram( program ) {\n\n\t\tconst code = program.code;\n\t\tconst stage = program.stage;\n\n\t\tthis.programs[ stage ].delete( code );\n\n\t}\n\n\t/**\n\t * Returns `true` if the compute pipeline for the given compute node requires an update.\n\t *\n\t * @private\n\t * @param {Node} computeNode - The compute node.\n\t * @return {boolean} Whether the compute pipeline for the given compute node requires an update or not.\n\t */\n\t_needsComputeUpdate( computeNode ) {\n\n\t\tconst data = this.get( computeNode );\n\n\t\treturn data.pipeline === undefined || data.version !== computeNode.version;\n\n\t}\n\n\t/**\n\t * Returns `true` if the render pipeline for the given render object requires an update.\n\t *\n\t * @private\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether the render object for the given render object requires an update or not.\n\t */\n\t_needsRenderUpdate( renderObject ) {\n\n\t\tconst data = this.get( renderObject );\n\n\t\treturn data.pipeline === undefined || this.backend.needsRenderUpdate( renderObject );\n\n\t}\n\n}\n\n/**\n * This renderer module manages the bindings of the renderer.\n *\n * @private\n * @augments DataMap\n */\nclass Bindings extends DataMap {\n\n\t/**\n\t * Constructs a new bindings management component.\n\t *\n\t * @param {Backend} backend - The renderer's backend.\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Textures} textures - Renderer component for managing textures.\n\t * @param {Attributes} attributes - Renderer component for managing attributes.\n\t * @param {Pipelines} pipelines - Renderer component for managing pipelines.\n\t * @param {Info} info - Renderer component for managing metrics and monitoring data.\n\t */\n\tconstructor( backend, nodes, textures, attributes, pipelines, info ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The renderer's backend.\n\t\t *\n\t\t * @type {Backend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * Renderer component for managing textures.\n\t\t *\n\t\t * @type {Textures}\n\t\t */\n\t\tthis.textures = textures;\n\n\t\t/**\n\t\t * Renderer component for managing pipelines.\n\t\t *\n\t\t * @type {Pipelines}\n\t\t */\n\t\tthis.pipelines = pipelines;\n\n\t\t/**\n\t\t * Renderer component for managing attributes.\n\t\t *\n\t\t * @type {Attributes}\n\t\t */\n\t\tthis.attributes = attributes;\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t\t/**\n\t\t * Renderer component for managing metrics and monitoring data.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = info;\n\n\t\tthis.pipelines.bindings = this; // assign bindings to pipelines\n\n\t}\n\n\t/**\n\t * Returns the bind groups for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {Array<BindGroup>} The bind groups.\n\t */\n\tgetForRender( renderObject ) {\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tconst groupData = this.get( bindGroup );\n\n\t\t\tif ( groupData.bindGroup === undefined ) {\n\n\t\t\t\t// each object defines an array of bindings (ubos, textures, samplers etc.)\n\n\t\t\t\tthis._init( bindGroup );\n\n\t\t\t\tthis.backend.createBindings( bindGroup, bindings, 0 );\n\n\t\t\t\tgroupData.bindGroup = bindGroup;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindings;\n\n\t}\n\n\t/**\n\t * Returns the bind groups for the given compute node.\n\t *\n\t * @param {Node} computeNode - The compute node.\n\t * @return {Array<BindGroup>} The bind groups.\n\t */\n\tgetForCompute( computeNode ) {\n\n\t\tconst bindings = this.nodes.getForCompute( computeNode ).bindings;\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tconst groupData = this.get( bindGroup );\n\n\t\t\tif ( groupData.bindGroup === undefined ) {\n\n\t\t\t\tthis._init( bindGroup );\n\n\t\t\t\tthis.backend.createBindings( bindGroup, bindings, 0 );\n\n\t\t\t\tgroupData.bindGroup = bindGroup;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindings;\n\n\t}\n\n\t/**\n\t * Updates the bindings for the given compute node.\n\t *\n\t * @param {Node} computeNode - The compute node.\n\t */\n\tupdateForCompute( computeNode ) {\n\n\t\tthis._updateBindings( this.getForCompute( computeNode ) );\n\n\t}\n\n\t/**\n\t * Updates the bindings for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tupdateForRender( renderObject ) {\n\n\t\tthis._updateBindings( this.getForRender( renderObject ) );\n\n\t}\n\n\t/**\n\t * Updates the given array of bindings.\n\t *\n\t * @param {Array<BindGroup>} bindings - The bind groups.\n\t */\n\t_updateBindings( bindings ) {\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tthis._update( bindGroup, bindings );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Initializes the given bind group.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group to initialize.\n\t */\n\t_init( bindGroup ) {\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isSampledTexture ) {\n\n\t\t\t\tthis.textures.updateTexture( binding.texture );\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst attribute = binding.attribute;\n\t\t\t\tconst attributeType = attribute.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;\n\n\t\t\t\tthis.attributes.update( attribute, attributeType );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the given bind group.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group to update.\n\t * @param {Array<BindGroup>} bindings - The bind groups.\n\t */\n\t_update( bindGroup, bindings ) {\n\n\t\tconst { backend } = this;\n\n\t\tlet needsBindingsUpdate = false;\n\t\tlet cacheBindings = true;\n\t\tlet cacheIndex = 0;\n\t\tlet version = 0;\n\n\t\t// iterate over all bindings and check if buffer updates or a new binding group is required\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isNodeUniformsGroup ) {\n\n\t\t\t\tconst updated = this.nodes.updateGroup( binding );\n\n\t\t\t\t// every uniforms group is a uniform buffer. So if no update is required,\n\t\t\t\t// we move one with the next binding. Otherwise the next if block will update the group.\n\n\t\t\t\tif ( updated === false ) continue;\n\n\t\t\t}\n\n\t\t\tif ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst attribute = binding.attribute;\n\t\t\t\tconst attributeType = attribute.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;\n\n\t\t\t\tthis.attributes.update( attribute, attributeType );\n\n\n\t\t\t}\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tconst updated = binding.update();\n\n\t\t\t\tif ( updated ) {\n\n\t\t\t\t\tbackend.updateBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tbinding.update();\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst texturesTextureData = this.textures.get( binding.texture );\n\n\t\t\t\tif ( binding.needsBindingsUpdate( texturesTextureData.generation ) ) needsBindingsUpdate = true;\n\n\t\t\t\tconst updated = binding.update();\n\n\t\t\t\tconst texture = binding.texture;\n\n\t\t\t\tif ( updated ) {\n\n\t\t\t\t\tthis.textures.updateTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t\tconst textureData = backend.get( texture );\n\n\t\t\t\tif ( textureData.externalTexture !== undefined || texturesTextureData.isDefaultTexture ) {\n\n\t\t\t\t\tcacheBindings = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcacheIndex = cacheIndex * 10 + texture.id;\n\t\t\t\t\tversion += texture.version;\n\n\t\t\t\t}\n\n\t\t\t\tif ( backend.isWebGPUBackend === true && textureData.texture === undefined && textureData.externalTexture === undefined ) {\n\n\t\t\t\t\t// TODO: Remove this once we found why updated === false isn't bound to a texture in the WebGPU backend\n\t\t\t\t\tconsole.error( 'Bindings._update: binding should be available:', binding, updated, texture, binding.textureNode.value, needsBindingsUpdate );\n\n\t\t\t\t\tthis.textures.updateTexture( texture );\n\t\t\t\t\tneedsBindingsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.isStorageTexture === true ) {\n\n\t\t\t\t\tconst textureData = this.get( texture );\n\n\t\t\t\t\tif ( binding.store === true ) {\n\n\t\t\t\t\t\ttextureData.needsMipmap = true;\n\n\t\t\t\t\t} else if ( this.textures.needsMipmaps( texture ) && textureData.needsMipmap === true ) {\n\n\t\t\t\t\t\tthis.backend.generateMipmaps( texture );\n\n\t\t\t\t\t\ttextureData.needsMipmap = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsBindingsUpdate === true ) {\n\n\t\t\tthis.backend.updateBindings( bindGroup, bindings, cacheBindings ? cacheIndex : 0, version );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Default sorting function for opaque render items.\n *\n * @private\n * @function\n * @param {Object} a - The first render item.\n * @param {Object} b - The second render item.\n * @return {number} A numeric value which defines the sort order.\n */\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n/**\n * Default sorting function for transparent render items.\n *\n * @private\n * @function\n * @param {Object} a - The first render item.\n * @param {Object} b - The second render item.\n * @return {number} A numeric value which defines the sort order.\n */\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n/**\n * Returns `true` if the given transparent material requires a double pass.\n *\n * @private\n * @function\n * @param {Material} material - The transparent material.\n * @return {boolean} Whether the given material requires a double pass or not.\n */\nfunction needsDoublePass( material ) {\n\n\tconst hasTransmission = material.transmission > 0 || material.transmissionNode;\n\n\treturn hasTransmission && material.side === DoubleSide && material.forceSinglePass === false;\n\n}\n\n/**\n * When the renderer analyzes the scene at the beginning of a render call,\n * it stores 3D object for further processing in render lists. Depending on the\n * properties of a 3D objects (like their transformation or material state), the\n * objects are maintained in ordered lists for the actual rendering.\n *\n * Render lists are unique per scene and camera combination.\n *\n * @private\n * @augments Pipeline\n */\nclass RenderList {\n\n\t/**\n\t * Constructs a render list.\n\t *\n\t * @param {Lighting} lighting - The lighting management component.\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera the scene is rendered with.\n\t */\n\tconstructor( lighting, scene, camera ) {\n\n\t\t/**\n\t\t * 3D objects are transformed into render items and stored in this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.renderItems = [];\n\n\t\t/**\n\t\t * The current render items index.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.renderItemsIndex = 0;\n\n\t\t/**\n\t\t * A list with opaque render items.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.opaque = [];\n\n\t\t/**\n\t\t * A list with transparent render items which require\n\t\t * double pass rendering (e.g. transmissive objects).\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.transparentDoublePass = [];\n\n\t\t/**\n\t\t * A list with transparent render items.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.transparent = [];\n\n\t\t/**\n\t\t * A list with transparent render bundle data.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.bundles = [];\n\n\t\t/**\n\t\t * The render list's lights node. This node is later\n\t\t * relevant for the actual analytical light nodes which\n\t\t * compute the scene's lighting in the shader.\n\t\t *\n\t\t * @type {LightsNode}\n\t\t */\n\t\tthis.lightsNode = lighting.getNode( scene, camera );\n\n\t\t/**\n\t\t * The scene's lights stored in an array. This array\n\t\t * is used to setup the lights node.\n\t\t *\n\t\t * @type {Array<Light>}\n\t\t */\n\t\tthis.lightsArray = [];\n\n\t\t/**\n\t\t * The scene.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera the scene is rendered with.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * How many objects perform occlusion query tests.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.occlusionQueryCount = 0;\n\n\t}\n\n\t/**\n\t * This method is called right at the beginning of a render call\n\t * before the scene is analyzed. It prepares the internal data\n\t * structures for the upcoming render lists generation.\n\t *\n\t * @return {RenderList} A reference to this render list.\n\t */\n\tbegin() {\n\n\t\tthis.renderItemsIndex = 0;\n\n\t\tthis.opaque.length = 0;\n\t\tthis.transparentDoublePass.length = 0;\n\t\tthis.transparent.length = 0;\n\t\tthis.bundles.length = 0;\n\n\t\tthis.lightsArray.length = 0;\n\n\t\tthis.occlusionQueryCount = 0;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a render item for the giving render item state. The state is defined\n\t * by a series of object-related parameters.\n\t *\n\t * The method avoids object creation by holding render items and reusing them in\n\t * subsequent render calls (just with different property values).\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {number} groupOrder - The current group order.\n\t * @param {number} z - Th 3D object's depth value (z value in clip space).\n\t * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n\t * @param {ClippingContext} clippingContext - The current clipping context.\n\t * @return {Object} The render item.\n\t */\n\tgetNextRenderItem( object, geometry, material, groupOrder, z, group, clippingContext ) {\n\n\t\tlet renderItem = this.renderItems[ this.renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group,\n\t\t\t\tclippingContext: clippingContext\n\t\t\t};\n\n\t\t\tthis.renderItems[ this.renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\t\t\trenderItem.clippingContext = clippingContext;\n\n\t\t}\n\n\t\tthis.renderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\t/**\n\t * Pushes the given object as a render item to the internal render lists.\n\t * The selected lists depend on the object properties.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {number} groupOrder - The current group order.\n\t * @param {number} z - Th 3D object's depth value (z value in clip space).\n\t * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n\t * @param {ClippingContext} clippingContext - The current clipping context.\n\t */\n\tpush( object, geometry, material, groupOrder, z, group, clippingContext ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group, clippingContext );\n\n\t\tif ( object.occlusionTest === true ) this.occlusionQueryCount ++;\n\n\t\tif ( material.transparent === true || material.transmission > 0 ) {\n\n\t\t\tif ( needsDoublePass( material ) ) this.transparentDoublePass.push( renderItem );\n\n\t\t\tthis.transparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\tthis.opaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Inserts the given object as a render item at the start of the internal render lists.\n\t * The selected lists depend on the object properties.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {number} groupOrder - The current group order.\n\t * @param {number} z - Th 3D object's depth value (z value in clip space).\n\t * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n\t * @param {ClippingContext} clippingContext - The current clipping context.\n\t */\n\tunshift( object, geometry, material, groupOrder, z, group, clippingContext ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group, clippingContext );\n\n\t\tif ( material.transparent === true || material.transmission > 0 ) {\n\n\t\t\tif ( needsDoublePass( material ) ) this.transparentDoublePass.unshift( renderItem );\n\n\t\t\tthis.transparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\tthis.opaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pushes render bundle group data into the render list.\n\t *\n\t * @param {Object} group - Bundle group data.\n\t */\n\tpushBundle( group ) {\n\n\t\tthis.bundles.push( group );\n\n\t}\n\n\t/**\n\t * Pushes a light into the render list.\n\t *\n\t * @param {Light} light - The light.\n\t */\n\tpushLight( light ) {\n\n\t\tthis.lightsArray.push( light );\n\n\t}\n\n\t/**\n\t * Sorts the internal render lists.\n\t *\n\t * @param {?function(any, any): number} customOpaqueSort - A custom sort function for opaque objects.\n\t * @param {?function(any, any): number} customTransparentSort -  A custom sort function for transparent objects.\n\t */\n\tsort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( this.opaque.length > 1 ) this.opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( this.transparentDoublePass.length > 1 ) this.transparentDoublePass.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( this.transparent.length > 1 ) this.transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\t/**\n\t * This method performs finalizing tasks right after the render lists\n\t * have been generated.\n\t */\n\tfinish() {\n\n\t\t// update lights\n\n\t\tthis.lightsNode.setLights( this.lightsArray );\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = this.renderItemsIndex, il = this.renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = this.renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.groupOrder = null;\n\t\t\trenderItem.renderOrder = null;\n\t\t\trenderItem.z = null;\n\t\t\trenderItem.group = null;\n\t\t\trenderItem.clippingContext = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _chainKeys$4 = [];\n\n/**\n * This renderer module manages the render lists which are unique\n * per scene and camera combination.\n *\n * @private\n */\nclass RenderLists {\n\n\t/**\n\t * Constructs a render lists management component.\n\t *\n\t * @param {Lighting} lighting - The lighting management component.\n\t */\n\tconstructor( lighting ) {\n\n\t\t/**\n\t\t * The lighting management component.\n\t\t *\n\t\t * @type {Lighting}\n\t\t */\n\t\tthis.lighting = lighting;\n\n\t\t/**\n\t\t * The internal chain map which holds the render lists.\n\t\t *\n\t\t * @type {ChainMap}\n\t\t */\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n\t/**\n\t * Returns a render list for the given scene and camera.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera.\n\t * @return {RenderList} The render list.\n\t */\n\tget( scene, camera ) {\n\n\t\tconst lists = this.lists;\n\n\t\t_chainKeys$4[ 0 ] = scene;\n\t\t_chainKeys$4[ 1 ] = camera;\n\n\t\tlet list = lists.get( _chainKeys$4 );\n\n\t\tif ( list === undefined ) {\n\n\t\t\tlist = new RenderList( this.lighting, scene, camera );\n\t\t\tlists.set( _chainKeys$4, list );\n\n\t\t}\n\n\t\t_chainKeys$4.length = 0;\n\n\t\treturn list;\n\n\t}\n\n\t/**\n\t * Frees all internal resources.\n\t */\n\tdispose() {\n\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n}\n\nlet _id$7 = 0;\n\n/**\n * Any render or compute command is executed in a specific context that defines\n * the state of the renderer and its backend. Typical examples for such context\n * data are the current clear values or data from the active framebuffer. This\n * module is used to represent these contexts as objects.\n *\n * @private\n */\nclass RenderContext {\n\n\t/**\n\t * Constructs a new render context.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The context's ID.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.id = _id$7 ++;\n\n\t\t/**\n\t\t * Whether the current active framebuffer has a color attachment.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.color = true;\n\n\t\t/**\n\t\t * Whether the color attachment should be cleared or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clearColor = true;\n\n\t\t/**\n\t\t * The clear color value.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default true\n\t\t */\n\t\tthis.clearColorValue = { r: 0, g: 0, b: 0, a: 1 };\n\n\t\t/**\n\t\t * Whether the current active framebuffer has a depth attachment.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depth = true;\n\n\t\t/**\n\t\t * Whether the depth attachment should be cleared or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clearDepth = true;\n\n\t\t/**\n\t\t * The clear depth value.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.clearDepthValue = 1;\n\n\t\t/**\n\t\t * Whether the current active framebuffer has a stencil attachment.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencil = false;\n\n\t\t/**\n\t\t * Whether the stencil attachment should be cleared or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clearStencil = true;\n\n\t\t/**\n\t\t * The clear stencil value.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.clearStencilValue = 1;\n\n\t\t/**\n\t\t * By default the viewport encloses the entire framebuffer If a smaller\n\t\t * viewport is manually defined, this property is to `true` by the renderer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.viewport = false;\n\n\t\t/**\n\t\t * The viewport value. This value is in physical pixels meaning it incorporates\n\t\t * the renderer's pixel ratio. The viewport property of render targets or\n\t\t * the renderer is in logical pixels.\n\t\t *\n\t\t * @type {Vector4}\n\t\t */\n\t\tthis.viewportValue = new Vector4();\n\n\t\t/**\n\t\t * When the scissor test is active and scissor rectangle smaller than the\n\t\t * framebuffers dimensions, this property is to `true` by the renderer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.scissor = false;\n\n\t\t/**\n\t\t * The scissor rectangle.\n\t\t *\n\t\t * @type {Vector4}\n\t\t */\n\t\tthis.scissorValue = new Vector4();\n\n\t\t/**\n\t\t * The active render target.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.renderTarget = null;\n\n\t\t/**\n\t\t * The textures of the active render target.\n\t\t * `null` when no render target is set.\n\t\t *\n\t\t * @type {?Array<Texture>}\n\t\t * @default null\n\t\t */\n\t\tthis.textures = null;\n\n\t\t/**\n\t\t * The depth texture of the active render target.\n\t\t * `null` when no render target is set.\n\t\t *\n\t\t * @type {?DepthTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.depthTexture = null;\n\n\t\t/**\n\t\t * The active cube face.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.activeCubeFace = 0;\n\n\t\t/**\n\t\t * The active mipmap level.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.activeMipmapLevel = 0;\n\n\t\t/**\n\t\t * The number of MSAA samples. This value is always `1` when\n\t\t * MSAA isn't used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.sampleCount = 1;\n\n\t\t/**\n\t\t * The active render target's width in physical pixels.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.width = 0;\n\n\t\t/**\n\t\t * The active render target's height in physical pixels.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.height = 0;\n\n\t\t/**\n\t\t * The occlusion query count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.occlusionQueryCount = 0;\n\n\t\t/**\n\t\t * The current clipping context.\n\t\t *\n\t\t * @type {?ClippingContext}\n\t\t * @default null\n\t\t */\n\t\tthis.clippingContext = null;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderContext = true;\n\n\t}\n\n\t/**\n\t * Returns the cache key of this render context.\n\t *\n\t * @return {number} The cache key.\n\t */\n\tgetCacheKey() {\n\n\t\treturn getCacheKey( this );\n\n\t}\n\n}\n\n/**\n * Computes a cache key for the given render context. This key\n * should identify the render target state so it is possible to\n * configure the correct attachments in the respective backend.\n *\n * @param {RenderContext} renderContext - The render context.\n * @return {number} The cache key.\n */\nfunction getCacheKey( renderContext ) {\n\n\tconst { textures, activeCubeFace } = renderContext;\n\n\tconst values = [ activeCubeFace ];\n\n\tfor ( const texture of textures ) {\n\n\t\tvalues.push( texture.id );\n\n\t}\n\n\treturn hashArray( values );\n\n}\n\nconst _chainKeys$3 = [];\nconst _defaultScene = /*@__PURE__*/ new Scene();\nconst _defaultCamera = /*@__PURE__*/ new Camera();\n\n/**\n * This module manages the render contexts of the renderer.\n *\n * @private\n */\nclass RenderContexts {\n\n\t/**\n\t * Constructs a new render context management component.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A dictionary that manages render contexts in chain maps\n\t\t * for each attachment state.\n\t\t *\n\t\t * @type {Object<string,ChainMap>}\n\t\t */\n\t\tthis.chainMaps = {};\n\n\t}\n\n\t/**\n\t * Returns a render context for the given scene, camera and render target.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {?RenderTarget} [renderTarget=null] - The active render target.\n\t * @return {RenderContext} The render context.\n\t */\n\tget( scene, camera, renderTarget = null ) {\n\n\t\t_chainKeys$3[ 0 ] = scene;\n\t\t_chainKeys$3[ 1 ] = camera;\n\n\t\tlet attachmentState;\n\n\t\tif ( renderTarget === null ) {\n\n\t\t\tattachmentState = 'default';\n\n\t\t} else {\n\n\t\t\tconst format = renderTarget.texture.format;\n\t\t\tconst count = renderTarget.textures.length;\n\n\t\t\tattachmentState = `${ count }:${ format }:${ renderTarget.samples }:${ renderTarget.depthBuffer }:${ renderTarget.stencilBuffer }`;\n\n\t\t}\n\n\t\tconst chainMap = this._getChainMap( attachmentState );\n\n\t\tlet renderState = chainMap.get( _chainKeys$3 );\n\n\t\tif ( renderState === undefined ) {\n\n\t\t\trenderState = new RenderContext();\n\n\t\t\tchainMap.set( _chainKeys$3, renderState );\n\n\t\t}\n\n\t\t_chainKeys$3.length = 0;\n\n\t\tif ( renderTarget !== null ) renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n\n\t\treturn renderState;\n\n\t}\n\n\t/**\n\t * Returns a render context intended for clear operations.\n\t *\n\t * @param {?RenderTarget} [renderTarget=null] - The active render target.\n\t * @return {RenderContext} The render context.\n\t */\n\tgetForClear( renderTarget = null ) {\n\n\t\treturn this.get( _defaultScene, _defaultCamera, renderTarget );\n\n\t}\n\n\t/**\n\t * Returns a chain map for the given attachment state.\n\t *\n\t * @private\n\t * @param {string} attachmentState - The attachment state.\n\t * @return {ChainMap} The chain map.\n\t */\n\t_getChainMap( attachmentState ) {\n\n\t\treturn this.chainMaps[ attachmentState ] || ( this.chainMaps[ attachmentState ] = new ChainMap() );\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n}\n\nconst _size$3 = /*@__PURE__*/ new Vector3();\n\n/**\n * This module manages the textures of the renderer.\n *\n * @private\n * @augments DataMap\n */\nclass Textures extends DataMap {\n\n\t/**\n\t * Constructs a new texture management component.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Backend} backend - The renderer's backend.\n\t * @param {Info} info - Renderer component for managing metrics and monitoring data.\n\t */\n\tconstructor( renderer, backend, info ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * The backend.\n\t\t *\n\t\t * @type {Backend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * Renderer component for managing metrics and monitoring data.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = info;\n\n\t}\n\n\t/**\n\t * Updates the given render target. Based on the given render target configuration,\n\t * it updates the texture states representing the attachments of the framebuffer.\n\t *\n\t * @param {RenderTarget} renderTarget - The render target to update.\n\t * @param {number} [activeMipmapLevel=0] - The active mipmap level.\n\t */\n\tupdateRenderTarget( renderTarget, activeMipmapLevel = 0 ) {\n\n\t\tconst renderTargetData = this.get( renderTarget );\n\n\t\tconst sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n\t\tconst depthTextureMips = renderTargetData.depthTextureMips || ( renderTargetData.depthTextureMips = {} );\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tconst size = this.getSize( textures[ 0 ] );\n\n\t\tconst mipWidth = size.width >> activeMipmapLevel;\n\t\tconst mipHeight = size.height >> activeMipmapLevel;\n\n\t\tlet depthTexture = renderTarget.depthTexture || depthTextureMips[ activeMipmapLevel ];\n\t\tconst useDepthTexture = renderTarget.depthBuffer === true || renderTarget.stencilBuffer === true;\n\n\t\tlet textureNeedsUpdate = false;\n\n\t\tif ( depthTexture === undefined && useDepthTexture ) {\n\n\t\t\tif ( renderTarget.multiview === true && size.depth > 1 ) {\n\n\t\t\t\tdepthTexture = new DepthArrayTexture();\n\n\t\t\t} else {\n\n\t\t\t\tdepthTexture = new DepthTexture();\n\n\t\t\t}\n\n\t\t\tdepthTexture.format = renderTarget.stencilBuffer ? DepthStencilFormat : DepthFormat;\n\t\t\tdepthTexture.type = renderTarget.stencilBuffer ? UnsignedInt248Type : UnsignedIntType; // FloatType\n\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\tdepthTexture.image.height = mipHeight;\n\t\t\tdepthTexture.image.depth = size.depth;\n\n\t\t\tdepthTextureMips[ activeMipmapLevel ] = depthTexture;\n\n\t\t}\n\n\t\tif ( renderTargetData.width !== size.width || size.height !== renderTargetData.height ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\n\t\t\tif ( depthTexture ) {\n\n\t\t\t\tdepthTexture.needsUpdate = true;\n\t\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\t\tdepthTexture.image.height = mipHeight;\n\t\t\t\tdepthTexture.image.depth = depthTexture.isDepthArrayTexture ? depthTexture.image.depth : 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\trenderTargetData.width = size.width;\n\t\trenderTargetData.height = size.height;\n\t\trenderTargetData.textures = textures;\n\t\trenderTargetData.depthTexture = depthTexture || null;\n\t\trenderTargetData.depth = renderTarget.depthBuffer;\n\t\trenderTargetData.stencil = renderTarget.stencilBuffer;\n\t\trenderTargetData.renderTarget = renderTarget;\n\n\t\tif ( renderTargetData.sampleCount !== sampleCount ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\n\t\t\tif ( depthTexture ) {\n\n\t\t\t\tdepthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\trenderTargetData.sampleCount = sampleCount;\n\n\t\t}\n\n\t\t//\n\n\n\t\tconst options = { sampleCount };\n\n\t\t// XR render targets require no texture updates\n\n\t\tif ( renderTarget.isXRRenderTarget !== true ) {\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\ttexture.isTextureArray = renderTarget.multiview === true && size.depth > 1;\n\t\t\t\tif ( textureNeedsUpdate ) texture.needsUpdate = true;\n\n\t\t\t\tthis.updateTexture( texture, options );\n\n\t\t\t}\n\n\t\t\tif ( depthTexture ) {\n\n\t\t\t\tthis.updateTexture( depthTexture, options );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// dispose handler\n\n\t\tif ( renderTargetData.initialized !== true ) {\n\n\t\t\trenderTargetData.initialized = true;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tthis._destroyTexture( textures[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( depthTexture ) {\n\n\t\t\t\t\tthis._destroyTexture( depthTexture );\n\n\t\t\t\t}\n\n\t\t\t\tthis.delete( renderTarget );\n\n\t\t\t};\n\n\t\t\trenderTarget.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the given texture. Depending on the texture state, this method\n\t * triggers the upload of texture data to the GPU memory. If the texture data are\n\t * not yet ready for the upload, it uses default texture data for as a placeholder.\n\t *\n\t * @param {Texture} texture - The texture to update.\n\t * @param {Object} [options={}] - The options.\n\t */\n\tupdateTexture( texture, options = {} ) {\n\n\t\tconst textureData = this.get( texture );\n\t\tif ( textureData.initialized === true && textureData.version === texture.version ) return;\n\n\t\tconst isRenderTarget = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\n\t\tconst backend = this.backend;\n\n\t\tif ( isRenderTarget && textureData.initialized === true ) {\n\n\t\t\t// it's an update\n\n\t\t\tbackend.destroySampler( texture );\n\t\t\tbackend.destroyTexture( texture );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( texture.isFramebufferTexture ) {\n\n\t\t\tconst renderTarget = this.renderer.getRenderTarget();\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttexture.type = renderTarget.texture.type;\n\n\t\t\t} else {\n\n\t\t\t\ttexture.type = UnsignedByteType;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst { width, height, depth } = this.getSize( texture );\n\n\t\toptions.width = width;\n\t\toptions.height = height;\n\t\toptions.depth = depth;\n\t\toptions.needsMipmaps = this.needsMipmaps( texture );\n\t\toptions.levels = options.needsMipmaps ? this.getMipLevels( texture, width, height ) : 1;\n\n\t\t//\n\n\t\tif ( isRenderTarget || texture.isStorageTexture === true ) {\n\n\t\t\tbackend.createSampler( texture );\n\t\t\tbackend.createTexture( texture, options );\n\n\t\t\ttextureData.generation = texture.version;\n\n\t\t} else {\n\n\t\t\tconst needsCreate = textureData.initialized !== true;\n\n\t\t\tif ( needsCreate ) backend.createSampler( texture );\n\n\t\t\tif ( texture.version > 0 ) {\n\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is undefined.' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is incomplete.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.images ) {\n\n\t\t\t\t\t\tconst images = [];\n\n\t\t\t\t\t\tfor ( const image of texture.images ) {\n\n\t\t\t\t\t\t\timages.push( image );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toptions.images = images;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\toptions.image = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true ) {\n\n\t\t\t\t\t\tbackend.createTexture( texture, options );\n\n\t\t\t\t\t\ttextureData.isDefaultTexture = false;\n\t\t\t\t\t\ttextureData.generation = texture.version;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texture.source.dataReady === true ) backend.updateTexture( texture, options );\n\n\t\t\t\t\tif ( options.needsMipmaps && texture.mipmaps.length === 0 ) backend.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// async update\n\n\t\t\t\tbackend.createDefaultTexture( texture );\n\n\t\t\t\ttextureData.isDefaultTexture = true;\n\t\t\t\ttextureData.generation = texture.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// dispose handler\n\n\t\tif ( textureData.initialized !== true ) {\n\n\t\t\ttextureData.initialized = true;\n\t\t\ttextureData.generation = texture.version;\n\n\t\t\t//\n\n\t\t\tthis.info.memory.textures ++;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\ttexture.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tthis._destroyTexture( texture );\n\n\t\t\t};\n\n\t\t\ttexture.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureData.version = texture.version;\n\n\t}\n\n\t/**\n\t * Computes the size of the given texture and writes the result\n\t * into the target vector. This vector is also returned by the\n\t * method.\n\t *\n\t * If no texture data are available for the compute yet, the method\n\t * returns default size values.\n\t *\n\t * @param {Texture} texture - The texture to compute the size for.\n\t * @param {Vector3} target - The target vector.\n\t * @return {Vector3} The target vector.\n\t */\n\tgetSize( texture, target = _size$3 ) {\n\n\t\tlet image = texture.images ? texture.images[ 0 ] : texture.image;\n\n\t\tif ( image ) {\n\n\t\t\tif ( image.image !== undefined ) image = image.image;\n\n\t\t\ttarget.width = image.width || 1;\n\t\t\ttarget.height = image.height || 1;\n\t\t\ttarget.depth = texture.isCubeTexture ? 6 : ( image.depth || 1 );\n\n\t\t} else {\n\n\t\t\ttarget.width = target.height = target.depth = 1;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes the number of mipmap levels for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} width - The texture's width.\n\t * @param {number} height - The texture's height.\n\t * @return {number} The number of mipmap levels.\n\t */\n\tgetMipLevels( texture, width, height ) {\n\n\t\tlet mipLevelCount;\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tif ( texture.mipmaps ) {\n\n\t\t\t\tmipLevelCount = texture.mipmaps.length;\n\n\t\t\t} else {\n\n\t\t\t\tmipLevelCount = 1;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tmipLevelCount = Math.floor( Math.log2( Math.max( width, height ) ) ) + 1;\n\n\t\t}\n\n\t\treturn mipLevelCount;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given texture requires mipmaps.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {boolean} Whether mipmaps are required or not.\n\t */\n\tneedsMipmaps( texture ) {\n\n\t\treturn texture.isCompressedTexture === true || texture.generateMipmaps;\n\n\t}\n\n\t/**\n\t * Frees internal resource when the given texture isn't\n\t * required anymore.\n\t *\n\t * @param {Texture} texture - The texture to destroy.\n\t */\n\t_destroyTexture( texture ) {\n\n\t\tif ( this.has( texture ) === true ) {\n\n\t\t\tthis.backend.destroySampler( texture );\n\t\t\tthis.backend.destroyTexture( texture );\n\n\t\t\tthis.delete( texture );\n\n\t\t\tthis.info.memory.textures --;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * A four-component version of {@link Color} which is internally\n * used by the renderer to represents clear color with alpha as\n * one object.\n *\n * @private\n * @augments Color\n */\nclass Color4 extends Color {\n\n\t/**\n\t * Constructs a new four-component color.\n\t * You can also pass a single THREE.Color, hex or\n\t * string argument to this constructor.\n\t *\n\t * @param {number|string} [r=1] - The red value.\n\t * @param {number} [g=1] - The green value.\n\t * @param {number} [b=1] - The blue value.\n\t * @param {number} [a=1] - The alpha value.\n\t */\n\tconstructor( r, g, b, a = 1 ) {\n\n\t\tsuper( r, g, b );\n\n\t\tthis.a = a;\n\n\t}\n\n\t/**\n\t * Overwrites the default to honor alpha.\n\t * You can also pass a single THREE.Color, hex or\n\t * string argument to this method.\n\t *\n\t * @param {number|string|Color} r - The red value.\n\t * @param {number} g - The green value.\n\t * @param {number} b - The blue value.\n\t * @param {number} [a=1] - The alpha value.\n\t * @return {Color4} A reference to this object.\n\t */\n\tset( r, g, b, a = 1 ) {\n\n\t\tthis.a = a;\n\n\t\treturn super.set( r, g, b );\n\n\t}\n\n\t/**\n\t * Overwrites the default to honor alpha.\n\t *\n\t * @param {Color4} color - The color to copy.\n\t * @return {Color4} A reference to this object.\n\t */\n\tcopy( color ) {\n\n\t\tif ( color.a !== undefined ) this.a = color.a;\n\n\t\treturn super.copy( color );\n\n\t}\n\n\t/**\n\t * Overwrites the default to honor alpha.\n\t *\n\t * @return {Color4} The cloned color.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b, this.a );\n\n\t}\n\n}\n\n/**\n * Special version of {@link PropertyNode} which is used for parameters.\n *\n * @augments PropertyNode\n */\nclass ParameterNode extends PropertyNode {\n\n\tstatic get type() {\n\n\t\treturn 'ParameterNode';\n\n\t}\n\n\t/**\n\t * Constructs a new parameter node.\n\t *\n\t * @param {string} nodeType - The type of the node.\n\t * @param {?string} [name=null] - The name of the parameter in the shader.\n\t */\n\tconstructor( nodeType, name = null ) {\n\n\t\tsuper( nodeType, name );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isParameterNode = true;\n\n\t}\n\n\tgetHash() {\n\n\t\treturn this.uuid;\n\n\t}\n\n\tgenerate() {\n\n\t\treturn this.name;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a parameter node.\n *\n * @tsl\n * @function\n * @param {string} type - The type of the node.\n * @param {?string} name - The name of the parameter in the shader.\n * @returns {ParameterNode}\n */\nconst parameter = ( type, name ) => nodeObject( new ParameterNode( type, name ) );\n\n/**\n * Stack is a helper for Nodes that need to produce stack-based code instead of continuous flow.\n * They are usually needed in cases like `If`, `Else`.\n *\n * @augments Node\n */\nclass StackNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'StackNode';\n\n\t}\n\n\t/**\n\t * Constructs a new stack node.\n\t *\n\t * @param {?StackNode} [parent=null] - The parent stack node.\n\t */\n\tconstructor( parent = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * List of nodes.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.nodes = [];\n\n\t\t/**\n\t\t * The output node.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.outputNode = null;\n\n\t\t/**\n\t\t * The parent stack node.\n\t\t *\n\t\t * @type {?StackNode}\n\t\t * @default null\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The current conditional node.\n\t\t *\n\t\t * @private\n\t\t * @type {ConditionalNode}\n\t\t * @default null\n\t\t */\n\t\tthis._currentCond = null;\n\n\t\t/**\n\t\t * The expression node. Only\n\t\t * relevant for Switch/Case.\n\t\t *\n\t\t * @private\n\t\t * @type {Node}\n\t\t * @default null\n\t\t */\n\t\tthis._expressionNode = null;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStackNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.outputNode ? this.outputNode.getNodeType( builder ) : 'void';\n\n\t}\n\n\tgetMemberType( builder, name ) {\n\n\t\treturn this.outputNode ? this.outputNode.getMemberType( builder, name ) : 'void';\n\n\t}\n\n\t/**\n\t * Adds a node to this stack.\n\t *\n\t * @param {Node} node - The node to add.\n\t * @return {StackNode} A reference to this stack node.\n\t */\n\tadd( node ) {\n\n\t\tthis.nodes.push( node );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Represent an `if` statement in TSL.\n\t *\n\t * @param {Node} boolNode - Represents the condition.\n\t * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\n\t * @return {StackNode} A reference to this stack node.\n\t */\n\tIf( boolNode, method ) {\n\n\t\tconst methodNode = new ShaderNode( method );\n\t\tthis._currentCond = select( boolNode, methodNode );\n\n\t\treturn this.add( this._currentCond );\n\n\t}\n\n\t/**\n\t * Represent an `elseif` statement in TSL.\n\t *\n\t * @param {Node} boolNode - Represents the condition.\n\t * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\n\t * @return {StackNode} A reference to this stack node.\n\t */\n\tElseIf( boolNode, method ) {\n\n\t\tconst methodNode = new ShaderNode( method );\n\t\tconst ifNode = select( boolNode, methodNode );\n\n\t\tthis._currentCond.elseNode = ifNode;\n\t\tthis._currentCond = ifNode;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Represent an `else` statement in TSL.\n\t *\n\t * @param {Function} method - TSL code which is executed in the `else` case.\n\t * @return {StackNode} A reference to this stack node.\n\t */\n\tElse( method ) {\n\n\t\tthis._currentCond.elseNode = new ShaderNode( method );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Represents a `switch` statement in TSL.\n\t *\n\t * @param {any} expression - Represents the expression.\n\t * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\n\t * @return {StackNode} A reference to this stack node.\n\t */\n\tSwitch( expression ) {\n\n\t\tthis._expressionNode = nodeObject( expression );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Represents a `case` statement in TSL. The TSL version accepts an arbitrary numbers of values.\n\t * The last parameter must be the callback method that should be executed in the `true` case.\n\t *\n\t * @param {...any} params - The values of the `Case()` statement as well as the callback method.\n\t * @return {StackNode} A reference to this stack node.\n\t */\n\tCase( ...params ) {\n\n\t\tconst caseNodes = [];\n\n\t\t// extract case nodes from the parameter list\n\n\t\tif ( params.length >= 2 ) {\n\n\t\t\tfor ( let i = 0; i < params.length - 1; i ++ ) {\n\n\t\t\t\tcaseNodes.push( this._expressionNode.equal( nodeObject( params[ i ] ) ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'TSL: Invalid parameter length. Case() requires at least two parameters.' );\n\n\t\t}\n\n\t\t// extract method\n\n\t\tconst method = params[ params.length - 1 ];\n\t\tconst methodNode = new ShaderNode( method );\n\n\t\t// chain multiple cases when using Case( 1, 2, 3, () => {} )\n\n\t\tlet caseNode = caseNodes[ 0 ];\n\n\t\tfor ( let i = 1; i < caseNodes.length; i ++ ) {\n\n\t\t\tcaseNode = caseNode.or( caseNodes[ i ] );\n\n\t\t}\n\n\t\t// build condition\n\n\t\tconst condNode = select( caseNode, methodNode );\n\n\t\tif ( this._currentCond === null ) {\n\n\t\t\tthis._currentCond = condNode;\n\n\t\t\treturn this.add( this._currentCond );\n\n\t\t} else {\n\n\t\t\tthis._currentCond.elseNode = condNode;\n\t\t\tthis._currentCond = condNode;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Represents the default code block of a Switch/Case statement.\n\t *\n\t * @param {Function} method - TSL code which is executed in the `else` case.\n\t * @return {StackNode} A reference to this stack node.\n\t */\n\tDefault( method ) {\n\n\t\tthis.Else( method );\n\n\t\treturn this;\n\n\t}\n\n\tbuild( builder, ...params ) {\n\n\t\tconst previousStack = getCurrentStack();\n\n\t\tsetCurrentStack( this );\n\n\t\tfor ( const node of this.nodes ) {\n\n\t\t\tnode.build( builder, 'void' );\n\n\t\t}\n\n\t\tsetCurrentStack( previousStack );\n\n\t\treturn this.outputNode ? this.outputNode.build( builder, ...params ) : super.build( builder, ...params );\n\n\t}\n\n\t// Deprecated\n\n\t/**\n\t * @function\n\t * @deprecated since r168. Use {@link StackNode#Else} instead.\n\t *\n\t * @param {...any} params\n\t * @returns {StackNode}\n\t */\n\telse( ...params ) { // @deprecated, r168\n\n\t\tconsole.warn( 'THREE.TSL: .else() has been renamed to .Else().' );\n\t\treturn this.Else( ...params );\n\n\t}\n\n\t/**\n\t * @deprecated since r168. Use {@link StackNode#ElseIf} instead.\n\t *\n\t * @param {...any} params\n\t * @returns {StackNode}\n\t */\n\telseif( ...params ) { // @deprecated, r168\n\n\t\tconsole.warn( 'THREE.TSL: .elseif() has been renamed to .ElseIf().' );\n\t\treturn this.ElseIf( ...params );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a stack node.\n *\n * @tsl\n * @function\n * @param {?StackNode} [parent=null] - The parent stack node.\n * @returns {StackNode}\n */\nconst stack = /*@__PURE__*/ nodeProxy( StackNode ).setParameterLength( 0, 1 );\n\n/**\n * Generates a layout for struct members.\n * This function takes an object representing struct members and returns an array of member layouts.\n * Each member layout includes the member's name, type, and whether it is atomic.\n *\n * @param {Object.<string, string|Object>} members - An object where keys are member names and values are either types (as strings) or objects with type and atomic properties.\n * @returns {Array.<{name: string, type: string, atomic: boolean}>} An array of member layouts.\n */\nfunction getMembersLayout( members ) {\n\n\treturn Object.entries( members ).map( ( [ name, value ] ) => {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\treturn { name, type: value, atomic: false };\n\n\t\t}\n\n\t\treturn { name, type: value.type, atomic: value.atomic || false };\n\n\t} );\n\n}\n\n/**\n * Represents a struct type node in the node-based system.\n * This class is used to define and manage the layout and types of struct members.\n * It extends the base Node class and provides methods to get the length of the struct,\n * retrieve member types, and generate the struct type for a builder.\n *\n * @augments Node\n */\nclass StructTypeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'StructTypeNode';\n\n\t}\n\n\t/**\n\t * Creates an instance of StructTypeNode.\n\t *\n\t * @param {Object} membersLayout - The layout of the members for the struct.\n\t * @param {?string} [name=null] - The optional name of the struct.\n\t */\n\tconstructor( membersLayout, name = null ) {\n\n\t\tsuper( 'struct' );\n\n\t\t/**\n\t\t * The layout of the members for the struct\n\t\t *\n\t\t * @type {Array.<{name: string, type: string, atomic: boolean}>}\n\t\t */\n\t\tthis.membersLayout = getMembersLayout( membersLayout );\n\n\t\t/**\n\t\t * The name of the struct.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStructLayoutNode = true;\n\n\t}\n\n\t/**\n\t * Returns the length of the struct.\n\t * The length is calculated by summing the lengths of the struct's members.\n\t *\n\t * @returns {number} The length of the struct.\n\t */\n\tgetLength() {\n\n\t\tlet length = 0;\n\n\t\tfor ( const member of this.membersLayout ) {\n\n\t\t\tlength += getLengthFromType( member.type );\n\n\t\t}\n\n\t\treturn length;\n\n\t}\n\n\tgetMemberType( builder, name ) {\n\n\t\tconst member = this.membersLayout.find( m => m.name === name );\n\n\t\treturn member ? member.type : 'void';\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst structType = builder.getStructTypeFromNode( this, this.membersLayout, this.name );\n\n\t\treturn structType.name;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.addInclude( this );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\treturn this.getNodeType( builder );\n\n\t}\n\n}\n\n/**\n * StructNode allows to create custom structures with multiple members.\n * This can also be used to define structures in attribute and uniform data.\n *\n * ```js\n * // Define a custom struct\n * const BoundingBox = struct( { min: 'vec3', max: 'vec3' } );\n *\n * // Create a new instance of the struct\n * const bb = BoundingBox( vec3( 0 ), vec3( 1 ) ); // style 1\n * const bb = BoundingBox( { min: vec3( 0 ), max: vec3( 1 ) } ); // style 2\n *\n * // Access the struct members\n * const min = bb.get( 'min' );\n *\n * // Assign a new value to a member\n * min.assign( vec3() );\n * ```\n * @augments Node\n */\nclass StructNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'StructNode';\n\n\t}\n\n\tconstructor( structLayoutNode, values ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.structLayoutNode = structLayoutNode;\n\t\tthis.values = values;\n\n\t\tthis.isStructNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.structLayoutNode.getNodeType( builder );\n\n\t}\n\n\tgetMemberType( builder, name ) {\n\n\t\treturn this.structLayoutNode.getMemberType( builder, name );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst nodeVar = builder.getVarFromNode( this );\n\t\tconst structType = nodeVar.type;\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\tbuilder.addLineFlowCode( `${ propertyName } = ${ builder.generateStruct( structType, this.structLayoutNode.membersLayout, this.values ) }`, this );\n\n\t\treturn nodeVar.name;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a struct node.\n *\n * @tsl\n * @function\n * @param {Object} membersLayout - The layout of the struct members.\n * @param {?string} [name=null] - The name of the struct.\n * @returns {Function} The struct function.\n */\nconst struct = ( membersLayout, name = null ) => {\n\n\tconst structLayout = new StructTypeNode( membersLayout, name );\n\n\tconst struct = ( ...params ) => {\n\n\t\tlet values = null;\n\n\t\tif ( params.length > 0 ) {\n\n\t\t\tif ( params[ 0 ].isNode ) {\n\n\t\t\t\tvalues = {};\n\n\t\t\t\tconst names = Object.keys( membersLayout );\n\n\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\n\n\t\t\t\t\tvalues[ names[ i ] ] = params[ i ];\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvalues = params[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeObject( new StructNode( structLayout, values ) );\n\n\t};\n\n\tstruct.layout = structLayout;\n\tstruct.isStruct = true;\n\n\treturn struct;\n\n};\n\n/**\n * This node can be used to define multiple outputs in a shader programs.\n *\n * @augments Node\n */\nclass OutputStructNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'OutputStructNode';\n\n\t}\n\n\t/**\n\t * Constructs a new output struct node. The constructor can be invoked with an\n\t * arbitrary number of nodes representing the members.\n\t *\n\t * @param {...Node} members - A parameter list of nodes.\n\t */\n\tconstructor( ...members ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * An array of nodes which defines the output.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.members = members;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isOutputStructNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tif ( properties.membersLayout === undefined ) {\n\n\t\t\tconst members = this.members;\n\t\t\tconst membersLayout = [];\n\n\t\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\t\tconst name = 'm' + i;\n\t\t\t\tconst type = members[ i ].getNodeType( builder );\n\n\t\t\t\tmembersLayout.push( { name, type, index: i } );\n\n\t\t\t}\n\n\t\t\tproperties.membersLayout = membersLayout;\n\t\t\tproperties.structType = builder.getOutputStructTypeFromNode( this, properties.membersLayout );\n\n\t\t}\n\n\t\treturn properties.structType.name;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst propertyName = builder.getOutputStructName();\n\t\tconst members = this.members;\n\n\t\tconst structPrefix = propertyName !== '' ? propertyName + '.' : '';\n\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\tconst snippet = members[ i ].build( builder );\n\n\t\t\tbuilder.addLineFlowCode( `${ structPrefix }m${ i } = ${ snippet }`, this );\n\n\t\t}\n\n\t\treturn propertyName;\n\n\t}\n\n}\n\n/**\n * TSL function for creating an output struct node.\n *\n * @tsl\n * @function\n * @param {...Node} members - A parameter list of nodes.\n * @returns {OutputStructNode}\n */\nconst outputStruct = /*@__PURE__*/ nodeProxy( OutputStructNode );\n\n/**\n * Returns the MRT texture index for the given name.\n *\n * @param {Array<Texture>} textures - The textures of a MRT-configured render target.\n * @param {string} name - The name of the MRT texture which index is requested.\n * @return {number} The texture index.\n */\nfunction getTextureIndex( textures, name ) {\n\n\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\tif ( textures[ i ].name === name ) {\n\n\t\t\treturn i;\n\n\t\t}\n\n\t}\n\n\treturn -1;\n\n}\n\n/**\n * This node can be used setup a MRT context for rendering. A typical MRT setup for\n * post-processing is shown below:\n * ```js\n * const mrtNode = mrt( {\n *   output: output,\n *   normal: normalView\n * } ) );\n * ```\n * The MRT output is defined as a dictionary.\n *\n * @augments OutputStructNode\n */\nclass MRTNode extends OutputStructNode {\n\n\tstatic get type() {\n\n\t\treturn 'MRTNode';\n\n\t}\n\n\t/**\n\t * Constructs a new output struct node.\n\t *\n\t * @param {Object<string, Node>} outputNodes - The MRT outputs.\n\t */\n\tconstructor( outputNodes ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * A dictionary representing the MRT outputs. The key\n\t\t * is the name of the output, the value the node which produces\n\t\t * the output result.\n\t\t *\n\t\t * @type {Object<string, Node>}\n\t\t */\n\t\tthis.outputNodes = outputNodes;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMRTNode = true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the MRT node has an output with the given name.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @return {NodeBuilder} Whether the MRT node has an output for the given name or not.\n\t */\n\thas( name ) {\n\n\t\treturn this.outputNodes[ name ] !== undefined;\n\n\t}\n\n\t/**\n\t * Returns the output node for the given name.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @return {Node} The output node.\n\t */\n\tget( name ) {\n\n\t\treturn this.outputNodes[ name ];\n\n\t}\n\n\t/**\n\t * Merges the outputs of the given MRT node with the outputs of this node.\n\t *\n\t * @param {MRTNode} mrtNode - The MRT to merge.\n\t * @return {MRTNode} A new MRT node with merged outputs..\n\t */\n\tmerge( mrtNode ) {\n\n\t\tconst outputs = { ...this.outputNodes, ...mrtNode.outputNodes };\n\n\t\treturn mrt( outputs );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst outputNodes = this.outputNodes;\n\t\tconst mrt = builder.renderer.getRenderTarget();\n\n\t\tconst members = [];\n\n\t\tconst textures = mrt.textures;\n\n\t\tfor ( const name in outputNodes ) {\n\n\t\t\tconst index = getTextureIndex( textures, name );\n\n\t\t\tmembers[ index ] = vec4( outputNodes[ name ] );\n\n\t\t}\n\n\t\tthis.members = members;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a MRT node.\n *\n * @tsl\n * @function\n * @param {Object<string, Node>} outputNodes - The MRT outputs.\n * @returns {MRTNode}\n */\nconst mrt = /*@__PURE__*/ nodeProxy( MRTNode );\n\n/**\n * Generates a hash value in the range `[0, 1]` from the given seed.\n *\n * @tsl\n * @function\n * @param {Node<float>} seed - The seed.\n * @return {Node<float>} The hash value.\n */\nconst hash = /*@__PURE__*/ Fn( ( [ seed ] ) => {\n\n\t// Taken from https://www.shadertoy.com/view/XlGcRh, originally from pcg-random.org\n\n\tconst state = seed.toUint().mul( 747796405 ).add( 2891336453 );\n\tconst word = state.shiftRight( state.shiftRight( 28 ).add( 4 ) ).bitXor( state ).mul( 277803737 );\n\tconst result = word.shiftRight( 22 ).bitXor( word );\n\n\treturn result.toFloat().mul( 1 / 2 ** 32 ); // Convert to range [0, 1)\n\n} );\n\n/**\n * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n * The corners are mapped to `0` and the center to `1`.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to remap.\n * @param {Node<float>} k - Allows to control the remapping functions shape by rising the parabola to a power `k`.\n * @return {Node<float>} The remapped value.\n */\nconst parabola = ( x, k ) => pow( mul( 4.0, x.mul( sub( 1.0, x ) ) ), k );\n\n/**\n * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n * Expands the sides and compresses the center, and keeps `0.5` mapped to `0.5`.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to remap.\n * @param {Node<float>} k - `k=1` is the identity curve,`k<1` produces the classic `gain()` shape, and `k>1` produces \"s\" shaped curves.\n * @return {Node<float>} The remapped value.\n */\nconst gain = ( x, k ) => x.lessThan( 0.5 ) ? parabola( x.mul( 2.0 ), k ).div( 2.0 ) : sub( 1.0, parabola( mul( sub( 1.0, x ), 2.0 ), k ).div( 2.0 ) );\n\n/**\n * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n * A generalization of the `parabola()`. Keeps the corners mapped to 0 but allows the control of the shape one either side of the curve.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to remap.\n * @param {Node<float>} a - First control parameter.\n * @param {Node<float>} b - Second control parameter.\n * @return {Node<float>} The remapped value.\n */\nconst pcurve = ( x, a, b ) => pow( div( pow( x, a ), add( pow( x, a ), pow( sub( 1.0, x ), b ) ) ), 1.0 / a );\n\n/**\n * A phase shifted sinus curve that starts at zero and ends at zero, with bouncing behavior.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to compute the sin for.\n * @param {Node<float>} k - Controls the amount of bounces.\n * @return {Node<float>} The result value.\n */\nconst sinc = ( x, k ) => sin( PI.mul( k.mul( x ).sub( 1.0 ) ) ).div( PI.mul( k.mul( x ).sub( 1.0 ) ) );\n\n// https://github.com/cabbibo/glsl-tri-noise-3d\n\n\nconst tri = /*@__PURE__*/ Fn( ( [ x ] ) => {\n\n\treturn x.fract().sub( .5 ).abs();\n\n} ).setLayout( {\n\tname: 'tri',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'x', type: 'float' }\n\t]\n} );\n\nconst tri3 = /*@__PURE__*/ Fn( ( [ p ] ) => {\n\n\treturn vec3( tri( p.z.add( tri( p.y.mul( 1. ) ) ) ), tri( p.z.add( tri( p.x.mul( 1. ) ) ) ), tri( p.y.add( tri( p.x.mul( 1. ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'tri3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\n/**\n * Generates a noise value from the given position, speed and time parameters.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} position - The position.\n * @param {Node<float>} speed - The speed.\n * @param {Node<float>} time - The time.\n * @return {Node<float>} The generated noise.\n */\nconst triNoise3D = /*@__PURE__*/ Fn( ( [ position, speed, time ] ) => {\n\n\tconst p = vec3( position ).toVar();\n\tconst z = float( 1.4 ).toVar();\n\tconst rz = float( 0.0 ).toVar();\n\tconst bp = vec3( p ).toVar();\n\n\tLoop( { start: float( 0.0 ), end: float( 3.0 ), type: 'float', condition: '<=' }, () => {\n\n\t\tconst dg = vec3( tri3( bp.mul( 2.0 ) ) ).toVar();\n\t\tp.addAssign( dg.add( time.mul( float( 0.1 ).mul( speed ) ) ) );\n\t\tbp.mulAssign( 1.8 );\n\t\tz.mulAssign( 1.5 );\n\t\tp.mulAssign( 1.2 );\n\n\t\tconst t = float( tri( p.z.add( tri( p.x.add( tri( p.y ) ) ) ) ) ).toVar();\n\t\trz.addAssign( t.div( z ) );\n\t\tbp.addAssign( 0.14 );\n\n\t} );\n\n\treturn rz;\n\n} ).setLayout( {\n\tname: 'triNoise3D',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'position', type: 'vec3' },\n\t\t{ name: 'speed', type: 'float' },\n\t\t{ name: 'time', type: 'float' }\n\t]\n} );\n\n/**\n * This class allows to define multiple overloaded versions\n * of the same function. Depending on the parameters of the function\n * call, the node picks the best-fit overloaded version.\n *\n * @augments Node\n */\nclass FunctionOverloadingNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'FunctionOverloadingNode';\n\n\t}\n\n\t/**\n\t * Constructs a new function overloading node.\n\t *\n\t * @param {Array<Function>} functionNodes - Array of `Fn` function definitions.\n\t * @param {...Node} parametersNodes - A list of parameter nodes.\n\t */\n\tconstructor( functionNodes = [], ...parametersNodes ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Array of `Fn` function definitions.\n\t\t *\n\t\t * @type {Array<Function>}\n\t\t */\n\t\tthis.functionNodes = functionNodes;\n\n\t\t/**\n\t\t * A list of parameter nodes.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.parametersNodes = parametersNodes;\n\n\t\t/**\n\t\t * The selected overloaded function call.\n\t\t *\n\t\t * @private\n\t\t * @type {ShaderCallNodeInternal}\n\t\t */\n\t\tthis._candidateFnCall = null;\n\n\t\t/**\n\t\t * This node is marked as global.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.global = true;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from\n\t * the function's return type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType() {\n\n\t\treturn this.functionNodes[ 0 ].shaderNode.layout.type;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst params = this.parametersNodes;\n\n\t\tlet candidateFnCall = this._candidateFnCall;\n\n\t\tif ( candidateFnCall === null ) {\n\n\t\t\tlet candidateFn = null;\n\t\t\tlet candidateScore = -1;\n\n\t\t\tfor ( const functionNode of this.functionNodes ) {\n\n\t\t\t\tconst shaderNode = functionNode.shaderNode;\n\t\t\t\tconst layout = shaderNode.layout;\n\n\t\t\t\tif ( layout === null ) {\n\n\t\t\t\t\tthrow new Error( 'FunctionOverloadingNode: FunctionNode must be a layout.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst inputs = layout.inputs;\n\n\t\t\t\tif ( params.length === inputs.length ) {\n\n\t\t\t\t\tlet score = 0;\n\n\t\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\n\n\t\t\t\t\t\tconst param = params[ i ];\n\t\t\t\t\t\tconst input = inputs[ i ];\n\n\t\t\t\t\t\tif ( param.getNodeType( builder ) === input.type ) {\n\n\t\t\t\t\t\t\tscore ++;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tscore = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( score > candidateScore ) {\n\n\t\t\t\t\t\tcandidateFn = functionNode;\n\t\t\t\t\t\tcandidateScore = score;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._candidateFnCall = candidateFnCall = candidateFn( ...params );\n\n\t\t}\n\n\t\treturn candidateFnCall;\n\n\t}\n\n}\n\nconst overloadingBaseFn = /*@__PURE__*/ nodeProxy( FunctionOverloadingNode );\n\n/**\n * TSL function for creating a function overloading node.\n *\n * @tsl\n * @function\n * @param {Array<Function>} functionNodes - Array of `Fn` function definitions.\n * @returns {FunctionOverloadingNode}\n */\nconst overloadingFn = ( functionNodes ) => ( ...params ) => overloadingBaseFn( functionNodes, ...params );\n\n/**\n * Represents the elapsed time in seconds.\n *\n * @tsl\n * @type {UniformNode<float>}\n */\nconst time = /*@__PURE__*/ uniform( 0 ).setGroup( renderGroup ).onRenderUpdate( ( frame ) => frame.time );\n\n/**\n * Represents the delta time in seconds.\n *\n * @tsl\n * @type {UniformNode<float>}\n */\nconst deltaTime = /*@__PURE__*/ uniform( 0 ).setGroup( renderGroup ).onRenderUpdate( ( frame ) => frame.deltaTime );\n\n/**\n * Represents the current frame ID.\n *\n * @tsl\n * @type {UniformNode<uint>}\n */\nconst frameId = /*@__PURE__*/ uniform( 0, 'uint' ).setGroup( renderGroup ).onRenderUpdate( ( frame ) => frame.frameId );\n\n// Deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r170. Use {@link time} instead.\n *\n * @param {number} [timeScale=1] - The time scale.\n * @returns {UniformNode<float>}\n */\nconst timerLocal = ( timeScale = 1 ) => { // @deprecated, r170\n\n\tconsole.warn( 'TSL: timerLocal() is deprecated. Use \"time\" instead.' );\n\treturn time.mul( timeScale );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r170. Use {@link time} instead.\n *\n * @param {number} [timeScale=1] - The time scale.\n * @returns {UniformNode<float>}\n */\nconst timerGlobal = ( timeScale = 1 ) => { // @deprecated, r170\n\n\tconsole.warn( 'TSL: timerGlobal() is deprecated. Use \"time\" instead.' );\n\treturn time.mul( timeScale );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r170. Use {@link deltaTime} instead.\n *\n * @param {number} [timeScale=1] - The time scale.\n * @returns {UniformNode<float>}\n */\nconst timerDelta = ( timeScale = 1 ) => { // @deprecated, r170\n\n\tconsole.warn( 'TSL: timerDelta() is deprecated. Use \"deltaTime\" instead.' );\n\treturn deltaTime.mul( timeScale );\n\n};\n\n/**\n * Generates a sine wave oscillation based on a timer.\n *\n * @tsl\n * @function\n * @param {Node<float>} t - The timer to generate the oscillation with.\n * @return {Node<float>} The oscillation node.\n */\nconst oscSine = ( t = time ) => t.add( 0.75 ).mul( Math.PI * 2 ).sin().mul( 0.5 ).add( 0.5 );\n\n/**\n * Generates a square wave oscillation based on a timer.\n *\n * @tsl\n * @function\n * @param {Node<float>} t - The timer to generate the oscillation with.\n * @return {Node<float>} The oscillation node.\n */\nconst oscSquare = ( t = time ) => t.fract().round();\n\n/**\n * Generates a triangle wave oscillation based on a timer.\n *\n * @tsl\n * @function\n * @param {Node<float>} t - The timer to generate the oscillation with.\n * @return {Node<float>} The oscillation node.\n */\nconst oscTriangle = ( t = time ) => t.add( 0.5 ).fract().mul( 2 ).sub( 1 ).abs();\n\n/**\n * Generates a sawtooth wave oscillation based on a timer.\n *\n * @tsl\n * @function\n * @param {Node<float>} t - The timer to generate the oscillation with.\n * @return {Node<float>} The oscillation node.\n */\nconst oscSawtooth = ( t = time ) => t.fract();\n\n/**\n * Rotates the given uv coordinates around a center point\n *\n * @tsl\n * @function\n * @param {Node<vec2>} uv - The uv coordinates.\n * @param {Node<float>} rotation - The rotation defined in radians.\n * @param {Node<vec2>} center - The center of rotation\n * @return {Node<vec2>} The rotated uv coordinates.\n */\nconst rotateUV = /*@__PURE__*/ Fn( ( [ uv, rotation, center = vec2( 0.5 ) ] ) => {\n\n\treturn rotate( uv.sub( center ), rotation ).add( center );\n\n} );\n\n/**\n * Applies a spherical warping effect to the given uv coordinates.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} uv - The uv coordinates.\n * @param {Node<float>} strength - The strength of the effect.\n * @param {Node<vec2>} center - The center point\n * @return {Node<vec2>} The updated uv coordinates.\n */\nconst spherizeUV = /*@__PURE__*/ Fn( ( [ uv, strength, center = vec2( 0.5 ) ] ) => {\n\n\tconst delta = uv.sub( center );\n\tconst delta2 = delta.dot( delta );\n\tconst delta4 = delta2.mul( delta2 );\n\tconst deltaOffset = delta4.mul( strength );\n\n\treturn uv.add( delta.mul( deltaOffset ) );\n\n} );\n\n/**\n * This can be used to achieve a billboarding behavior for flat meshes. That means they are\n * oriented always towards the camera.\n *\n * ```js\n * material.vertexNode = billboarding();\n * ```\n *\n * @tsl\n * @function\n * @param {Object} config - The configuration object.\n * @param {?Node<vec3>} [config.position=null] - Can be used to define the vertex positions in world space.\n * @param {boolean} [config.horizontal=true] - Whether to follow the camera rotation horizontally or not.\n * @param {boolean} [config.vertical=false] - Whether to follow the camera rotation vertically or not.\n * @return {Node<vec3>} The updated vertex position in clip space.\n */\nconst billboarding = /*@__PURE__*/ Fn( ( { position = null, horizontal = true, vertical = false } ) => {\n\n\tlet worldMatrix;\n\n\tif ( position !== null ) {\n\n\t\tworldMatrix = modelWorldMatrix.toVar();\n\t\tworldMatrix[ 3 ][ 0 ] = position.x;\n\t\tworldMatrix[ 3 ][ 1 ] = position.y;\n\t\tworldMatrix[ 3 ][ 2 ] = position.z;\n\n\t} else {\n\n\t\tworldMatrix = modelWorldMatrix;\n\n\t}\n\n\tconst modelViewMatrix = cameraViewMatrix.mul( worldMatrix );\n\n\tif ( defined( horizontal ) ) {\n\n\t\tmodelViewMatrix[ 0 ][ 0 ] = modelWorldMatrix[ 0 ].length();\n\t\tmodelViewMatrix[ 0 ][ 1 ] = 0;\n\t\tmodelViewMatrix[ 0 ][ 2 ] = 0;\n\n\t}\n\n\tif ( defined( vertical ) ) {\n\n\t\tmodelViewMatrix[ 1 ][ 0 ] = 0;\n\t\tmodelViewMatrix[ 1 ][ 1 ] = modelWorldMatrix[ 1 ].length();\n\t\tmodelViewMatrix[ 1 ][ 2 ] = 0;\n\n\t}\n\n\tmodelViewMatrix[ 2 ][ 0 ] = 0;\n\tmodelViewMatrix[ 2 ][ 1 ] = 0;\n\tmodelViewMatrix[ 2 ][ 2 ] = 1;\n\n\treturn cameraProjectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\n\n} );\n\n/**\n * A special version of a screen uv function that involves a depth comparison\n * when computing the final uvs. The function mitigates visual errors when\n * using viewport texture nodes for refraction purposes. Without this function\n * objects in front of a refractive surface might appear on the refractive surface\n * which is incorrect.\n *\n * @tsl\n * @function\n * @param {?Node<vec2>} uv - Optional uv coordinates. By default `screenUV` is used.\n * @return {Node<vec2>} The update uv coordinates.\n */\nconst viewportSafeUV = /*@__PURE__*/ Fn( ( [ uv = null ] ) => {\n\n\tconst depth = linearDepth();\n\tconst depthDiff = linearDepth( viewportDepthTexture( uv ) ).sub( depth );\n\tconst finalUV = depthDiff.lessThan( 0 ).select( screenUV, uv );\n\n\treturn finalUV;\n\n} );\n\n/**\n * Can be used to compute texture coordinates for animated sprite sheets.\n *\n * ```js\n * const uvNode = spritesheetUV( vec2( 6, 6 ), uv(), time.mul( animationSpeed ) );\n *\n * material.colorNode = texture( spriteSheet, uvNode );\n * ```\n *\n * @augments Node\n */\nclass SpriteSheetUVNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SpriteSheetUVNode';\n\n\t}\n\n\t/**\n\t * Constructs a new sprite sheet uv node.\n\t *\n\t * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\n\t * @param {Node<vec2>} [uvNode=uv()] - The uv node.\n\t * @param {Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\n\t */\n\tconstructor( countNode, uvNode = uv(), frameNode = float( 0 ) ) {\n\n\t\tsuper( 'vec2' );\n\n\t\t/**\n\t\t * The node that defines the number of sprites in the x and y direction (e.g 6x6).\n\t\t *\n\t\t * @type {Node<vec2>}\n\t\t */\n\t\tthis.countNode = countNode;\n\n\t\t/**\n\t\t * The uv node.\n\t\t *\n\t\t * @type {Node<vec2>}\n\t\t */\n\t\tthis.uvNode = uvNode;\n\n\t\t/**\n\t\t * The node that defines the current frame/sprite.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.frameNode = frameNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { frameNode, uvNode, countNode } = this;\n\n\t\tconst { width, height } = countNode;\n\n\t\tconst frameNum = frameNode.mod( width.mul( height ) ).floor();\n\n\t\tconst column = frameNum.mod( width );\n\t\tconst row = height.sub( frameNum.add( 1 ).div( width ).ceil() );\n\n\t\tconst scale = countNode.reciprocal();\n\t\tconst uvFrameOffset = vec2( column, row );\n\n\t\treturn uvNode.add( uvFrameOffset ).mul( scale );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a sprite sheet uv node.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\n * @param {?Node<vec2>} [uvNode=uv()] - The uv node.\n * @param {?Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\n * @returns {SpriteSheetUVNode}\n */\nconst spritesheetUV = /*@__PURE__*/ nodeProxy( SpriteSheetUVNode ).setParameterLength( 3 );\n\n/**\n * Can be used for triplanar texture mapping.\n *\n * ```js\n * material.colorNode = triplanarTexture( texture( diffuseMap ) );\n * ```\n *\n * @augments Node\n */\nclass TriplanarTexturesNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'TriplanarTexturesNode';\n\n\t}\n\n\t/**\n\t * Constructs a new triplanar textures node.\n\t *\n\t * @param {Node} textureXNode - First texture node.\n\t * @param {?Node} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\n\t * @param {?Node} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\n\t * @param {?Node<float>} [scaleNode=float(1)] - The scale node.\n\t * @param {?Node<vec3>} [positionNode=positionLocal] - Vertex positions in local space.\n\t * @param {?Node<vec3>} [normalNode=normalLocal] - Normals in local space.\n\t */\n\tconstructor( textureXNode, textureYNode = null, textureZNode = null, scaleNode = float( 1 ), positionNode = positionLocal, normalNode = normalLocal ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * First texture node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.textureXNode = textureXNode;\n\n\t\t/**\n\t\t * Second texture node. When not set, the shader will sample from `textureXNode` instead.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.textureYNode = textureYNode;\n\n\t\t/**\n\t\t * Third texture node. When not set, the shader will sample from `textureXNode` instead.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.textureZNode = textureZNode;\n\n\t\t/**\n\t\t * The scale node.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t * @default float(1)\n\t\t */\n\t\tthis.scaleNode = scaleNode;\n\n\t\t/**\n\t\t * Vertex positions in local space.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t * @default positionLocal\n\t\t */\n\t\tthis.positionNode = positionNode;\n\n\t\t/**\n\t\t * Normals in local space.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t * @default normalLocal\n\t\t */\n\t\tthis.normalNode = normalNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { textureXNode, textureYNode, textureZNode, scaleNode, positionNode, normalNode } = this;\n\n\t\t// Ref: https://github.com/keijiro/StandardTriplanar\n\n\t\t// Blending factor of triplanar mapping\n\t\tlet bf = normalNode.abs().normalize();\n\t\tbf = bf.div( bf.dot( vec3( 1.0 ) ) );\n\n\t\t// Triplanar mapping\n\t\tconst tx = positionNode.yz.mul( scaleNode );\n\t\tconst ty = positionNode.zx.mul( scaleNode );\n\t\tconst tz = positionNode.xy.mul( scaleNode );\n\n\t\t// Base color\n\t\tconst textureX = textureXNode.value;\n\t\tconst textureY = textureYNode !== null ? textureYNode.value : textureX;\n\t\tconst textureZ = textureZNode !== null ? textureZNode.value : textureX;\n\n\t\tconst cx = texture( textureX, tx ).mul( bf.x );\n\t\tconst cy = texture( textureY, ty ).mul( bf.y );\n\t\tconst cz = texture( textureZ, tz ).mul( bf.z );\n\n\t\treturn add( cx, cy, cz );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a triplanar textures node.\n *\n * @tsl\n * @function\n * @param {Node} textureXNode - First texture node.\n * @param {?Node} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\n * @param {?Node} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\n * @param {?Node<float>} [scaleNode=float(1)] - The scale node.\n * @param {?Node<vec3>} [positionNode=positionLocal] - Vertex positions in local space.\n * @param {?Node<vec3>} [normalNode=normalLocal] - Normals in local space.\n * @returns {TriplanarTexturesNode}\n */\nconst triplanarTextures = /*@__PURE__*/ nodeProxy( TriplanarTexturesNode ).setParameterLength( 1, 6 );\n\n/**\n * TSL function for creating a triplanar textures node.\n *\n * @tsl\n * @function\n * @param {Node} textureXNode - First texture node.\n * @param {?Node} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\n * @param {?Node} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\n * @param {?Node<float>} [scaleNode=float(1)] - The scale node.\n * @param {?Node<vec3>} [positionNode=positionLocal] - Vertex positions in local space.\n * @param {?Node<vec3>} [normalNode=normalLocal] - Normals in local space.\n * @returns {TriplanarTexturesNode}\n */\nconst triplanarTexture = ( ...params ) => triplanarTextures( ...params );\n\nconst _reflectorPlane = new Plane();\nconst _normal = new Vector3();\nconst _reflectorWorldPosition = new Vector3();\nconst _cameraWorldPosition = new Vector3();\nconst _rotationMatrix = new Matrix4();\nconst _lookAtPosition = new Vector3( 0, 0, -1 );\nconst clipPlane = new Vector4();\n\nconst _view = new Vector3();\nconst _target = new Vector3();\nconst _q = new Vector4();\n\nconst _size$2 = new Vector2();\n\nconst _defaultRT = new RenderTarget();\nconst _defaultUV = screenUV.flipX();\n\n_defaultRT.depthTexture = new DepthTexture( 1, 1 );\n\nlet _inReflector = false;\n\n/**\n * This node can be used to implement mirror-like flat reflective surfaces.\n *\n * ```js\n * const groundReflector = reflector();\n * material.colorNode = groundReflector;\n *\n * const plane = new Mesh( geometry, material );\n * plane.add( groundReflector.target );\n * ```\n *\n * @augments TextureNode\n */\nclass ReflectorNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'ReflectorNode';\n\n\t}\n\n\t/**\n\t * Constructs a new reflector node.\n\t *\n\t * @param {Object} [parameters={}] - An object holding configuration parameters.\n\t * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\n\t * @param {number} [parameters.resolution=1] - The resolution scale.\n\t * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\n\t * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\n\t * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.\n\t * @param {TextureNode} [parameters.defaultTexture] - The default texture node.\n\t * @param {ReflectorBaseNode} [parameters.reflector] - The reflector base node.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters.defaultTexture || _defaultRT.texture, _defaultUV );\n\n\t\t/**\n\t\t * A reference to the internal reflector base node which holds the actual implementation.\n\t\t *\n\t\t * @private\n\t\t * @type {ReflectorBaseNode}\n\t\t * @default ReflectorBaseNode\n\t\t */\n\t\tthis._reflectorBaseNode = parameters.reflector || new ReflectorBaseNode( this, parameters );\n\n\t\t/**\n\t\t * A reference to the internal depth node.\n\t\t *\n\t\t * @private\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis._depthNode = null;\n\n\t\tthis.setUpdateMatrix( false );\n\n\t}\n\n\t/**\n\t * A reference to the internal reflector node.\n\t *\n\t * @type {ReflectorBaseNode}\n\t */\n\tget reflector() {\n\n\t\treturn this._reflectorBaseNode;\n\n\t}\n\n\t/**\n\t * A reference to 3D object the reflector is linked to.\n\t *\n\t * @type {Object3D}\n\t */\n\tget target() {\n\n\t\treturn this._reflectorBaseNode.target;\n\n\t}\n\n\t/**\n\t * Returns a node representing the mirror's depth. That can be used\n\t * to implement more advanced reflection effects like distance attenuation.\n\t *\n\t * @return {Node} The depth node.\n\t */\n\tgetDepthNode() {\n\n\t\tif ( this._depthNode === null ) {\n\n\t\t\tif ( this._reflectorBaseNode.depth !== true ) {\n\n\t\t\t\tthrow new Error( 'THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ' );\n\n\t\t\t}\n\n\t\t\tthis._depthNode = nodeObject( new ReflectorNode( {\n\t\t\t\tdefaultTexture: _defaultRT.depthTexture,\n\t\t\t\treflector: this._reflectorBaseNode\n\t\t\t} ) );\n\n\t\t}\n\n\t\treturn this._depthNode;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\t// ignore if used in post-processing\n\t\tif ( ! builder.object.isQuadMesh ) this._reflectorBaseNode.build( builder );\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tclone() {\n\n\t\tconst texture = new this.constructor( this.reflectorNode );\n\t\ttexture._reflectorBaseNode = this._reflectorBaseNode;\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * Frees internal resources. Should be called when the node is no longer in use.\n\t */\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis._reflectorBaseNode.dispose();\n\n\t}\n\n}\n\n/**\n * Holds the actual implementation of the reflector.\n *\n * TODO: Explain why `ReflectorBaseNode`. Originally the entire logic was implemented\n * in `ReflectorNode`, see #29619.\n *\n * @private\n * @augments Node\n */\nclass ReflectorBaseNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ReflectorBaseNode';\n\n\t}\n\n\t/**\n\t * Constructs a new reflector base node.\n\t *\n\t * @param {TextureNode} textureNode - Represents the rendered reflections as a texture node.\n\t * @param {Object} [parameters={}] - An object holding configuration parameters.\n\t * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\n\t * @param {number} [parameters.resolution=1] - The resolution scale.\n\t * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\n\t * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\n\t * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.\n\t */\n\tconstructor( textureNode, parameters = {} ) {\n\n\t\tsuper();\n\n\t\tconst {\n\t\t\ttarget = new Object3D(),\n\t\t\tresolution = 1,\n\t\t\tgenerateMipmaps = false,\n\t\t\tbounces = true,\n\t\t\tdepth = false\n\t\t} = parameters;\n\n\t\t/**\n\t\t * Represents the rendered reflections as a texture node.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * The 3D object the reflector is linked to.\n\t\t *\n\t\t * @type {Object3D}\n\t\t * @default {new Object3D()}\n\t\t */\n\t\tthis.target = target;\n\n\t\t/**\n\t\t * The resolution scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default {1}\n\t\t */\n\t\tthis.resolution = resolution;\n\n\t\t/**\n\t\t * Whether mipmaps should be generated or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default {false}\n\t\t */\n\t\tthis.generateMipmaps = generateMipmaps;\n\n\t\t/**\n\t\t * Whether reflectors can render other reflector nodes or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default {true}\n\t\t */\n\t\tthis.bounces = bounces;\n\n\t\t/**\n\t\t * Whether depth data should be generated or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default {false}\n\t\t */\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.RENDER` when {@link ReflectorBaseNode#bounces}\n\t\t * is `true`. Otherwise it's `NodeUpdateType.FRAME`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;\n\n\t\t/**\n\t\t * Weak map for managing virtual cameras.\n\t\t *\n\t\t * @type {WeakMap<Camera, Camera>}\n\t\t */\n\t\tthis.virtualCameras = new WeakMap();\n\n\t\t/**\n\t\t * Weak map for managing render targets.\n\t\t *\n\t\t * @type {Map<Camera, RenderTarget>}\n\t\t */\n\t\tthis.renderTargets = new Map();\n\n\t\t/**\n\t\t * Force render even if reflector is facing away from camera.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default {false}\n\t\t */\n\t\tthis.forceUpdate = false;\n\n\t}\n\n\t/**\n\t * Updates the resolution of the internal render target.\n\t *\n\t * @private\n\t * @param {RenderTarget} renderTarget - The render target to resize.\n\t * @param {Renderer} renderer - The renderer that is used to determine the new size.\n\t */\n\t_updateResolution( renderTarget, renderer ) {\n\n\t\tconst resolution = this.resolution;\n\n\t\trenderer.getDrawingBufferSize( _size$2 );\n\n\t\trenderTarget.setSize( Math.round( _size$2.width * resolution ), Math.round( _size$2.height * resolution ) );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis._updateResolution( _defaultRT, builder.renderer );\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\t/**\n\t * Frees internal resources. Should be called when the node is no longer in use.\n\t */\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tfor ( const renderTarget of this.renderTargets.values() ) {\n\n\t\t\trenderTarget.dispose();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a virtual camera for the given camera. The virtual camera is used to\n\t * render the scene from the reflector's view so correct reflections can be produced.\n\t *\n\t * @param {Camera} camera - The scene's camera.\n\t * @return {Camera} The corresponding virtual camera.\n\t */\n\tgetVirtualCamera( camera ) {\n\n\t\tlet virtualCamera = this.virtualCameras.get( camera );\n\n\t\tif ( virtualCamera === undefined ) {\n\n\t\t\tvirtualCamera = camera.clone();\n\n\t\t\tthis.virtualCameras.set( camera, virtualCamera );\n\n\t\t}\n\n\t\treturn virtualCamera;\n\n\t}\n\n\t/**\n\t * Returns a render target for the given camera. The reflections are rendered\n\t * into this render target.\n\t *\n\t * @param {Camera} camera - The scene's camera.\n\t * @return {RenderTarget} The render target.\n\t */\n\tgetRenderTarget( camera ) {\n\n\t\tlet renderTarget = this.renderTargets.get( camera );\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = new RenderTarget( 0, 0, { type: HalfFloatType } );\n\n\t\t\tif ( this.generateMipmaps === true ) {\n\n\t\t\t\trenderTarget.texture.minFilter = LinearMipMapLinearFilter;\n\t\t\t\trenderTarget.texture.generateMipmaps = true;\n\n\t\t\t}\n\n\t\t\tif ( this.depth === true ) {\n\n\t\t\t\trenderTarget.depthTexture = new DepthTexture();\n\n\t\t\t}\n\n\t\t\tthis.renderTargets.set( camera, renderTarget );\n\n\t\t}\n\n\t\treturn renderTarget;\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tif ( this.bounces === false && _inReflector ) return false;\n\n\t\t_inReflector = true;\n\n\t\tconst { scene, camera, renderer, material } = frame;\n\t\tconst { target } = this;\n\n\t\tconst virtualCamera = this.getVirtualCamera( camera );\n\t\tconst renderTarget = this.getRenderTarget( virtualCamera );\n\n\t\trenderer.getDrawingBufferSize( _size$2 );\n\n\t\tthis._updateResolution( renderTarget, renderer );\n\n\t\t//\n\n\t\t_reflectorWorldPosition.setFromMatrixPosition( target.matrixWorld );\n\t\t_cameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t_rotationMatrix.extractRotation( target.matrixWorld );\n\n\t\t_normal.set( 0, 0, 1 );\n\t\t_normal.applyMatrix4( _rotationMatrix );\n\n\t\t_view.subVectors( _reflectorWorldPosition, _cameraWorldPosition );\n\n\t\t// Avoid rendering when reflector is facing away unless forcing an update\n\t\tconst isFacingAway = _view.dot( _normal ) > 0;\n\n\t\tif ( isFacingAway === true && this.forceUpdate === false ) return;\n\n\t\t_view.reflect( _normal ).negate();\n\t\t_view.add( _reflectorWorldPosition );\n\n\t\t_rotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\t_lookAtPosition.set( 0, 0, -1 );\n\t\t_lookAtPosition.applyMatrix4( _rotationMatrix );\n\t\t_lookAtPosition.add( _cameraWorldPosition );\n\n\t\t_target.subVectors( _reflectorWorldPosition, _lookAtPosition );\n\t\t_target.reflect( _normal ).negate();\n\t\t_target.add( _reflectorWorldPosition );\n\n\t\t//\n\n\t\tvirtualCamera.coordinateSystem = camera.coordinateSystem;\n\t\tvirtualCamera.position.copy( _view );\n\t\tvirtualCamera.up.set( 0, 1, 0 );\n\t\tvirtualCamera.up.applyMatrix4( _rotationMatrix );\n\t\tvirtualCamera.up.reflect( _normal );\n\t\tvirtualCamera.lookAt( _target );\n\n\t\tvirtualCamera.near = camera.near;\n\t\tvirtualCamera.far = camera.far;\n\n\t\tvirtualCamera.updateMatrixWorld();\n\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\t_reflectorPlane.setFromNormalAndCoplanarPoint( _normal, _reflectorWorldPosition );\n\t\t_reflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\n\n\t\tclipPlane.set( _reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant );\n\n\t\tconst projectionMatrix = virtualCamera.projectionMatrix;\n\n\t\t_q.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\t_q.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\t_q.z = -1;\n\t\t_q.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t// Calculate the scaled plane vector\n\t\tclipPlane.multiplyScalar( 1.0 / clipPlane.dot( _q ) );\n\n\t\tconst clipBias = 0;\n\n\t\t// Replacing the third row of the projection matrix\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\tprojectionMatrix.elements[ 10 ] = ( renderer.coordinateSystem === WebGPUCoordinateSystem ) ? ( clipPlane.z - clipBias ) : ( clipPlane.z + 1.0 - clipBias );\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\t//\n\n\t\tthis.textureNode.value = renderTarget.texture;\n\n\t\tif ( this.depth === true ) {\n\n\t\t\tthis.textureNode.getDepthNode().value = renderTarget.depthTexture;\n\n\t\t}\n\n\t\tmaterial.visible = false;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\t\tconst currentAutoClear = renderer.autoClear;\n\n\t\trenderer.setMRT( null );\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = true;\n\n\t\trenderer.render( scene, virtualCamera );\n\n\t\trenderer.setMRT( currentMRT );\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.autoClear = currentAutoClear;\n\n\t\tmaterial.visible = true;\n\n\t\t_inReflector = false;\n\n\t\tthis.forceUpdate = false;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a reflector node.\n *\n * @tsl\n * @function\n * @param {Object} [parameters={}] - An object holding configuration parameters.\n * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\n * @param {number} [parameters.resolution=1] - The resolution scale.\n * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\n * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\n * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.\n * @param {TextureNode} [parameters.defaultTexture] - The default texture node.\n * @param {ReflectorBaseNode} [parameters.reflector] - The reflector base node.\n * @returns {ReflectorNode}\n */\nconst reflector = ( parameters ) => nodeObject( new ReflectorNode( parameters ) );\n\nconst _camera = /*@__PURE__*/ new OrthographicCamera( -1, 1, 1, -1, 0, 1 );\n\n/**\n * The purpose of this special geometry is to fill the entire viewport with a single triangle.\n *\n * Reference: {@link https://github.com/mrdoob/three.js/pull/21358}\n *\n * @private\n * @augments BufferGeometry\n */\nclass QuadGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new quad geometry.\n\t *\n\t * @param {boolean} [flipY=false] - Whether the uv coordinates should be flipped along the vertical axis or not.\n\t */\n\tconstructor( flipY = false ) {\n\n\t\tsuper();\n\n\t\tconst uv = flipY === false ? [ 0, -1, 0, 1, 2, 1 ] : [ 0, 2, 0, 0, 2, 0 ];\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ -1, 3, 0, -1, -1, 0, 3, -1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uv, 2 ) );\n\n\t}\n\n}\n\nconst _geometry = /*@__PURE__*/ new QuadGeometry();\n\n\n/**\n * This module is a helper for passes which need to render a full\n * screen effect which is quite common in context of post processing.\n *\n * The intended usage is to reuse a single quad mesh for rendering\n * subsequent passes by just reassigning the `material` reference.\n *\n * Note: This module can only be used with `WebGPURenderer`.\n *\n * @augments Mesh\n */\nclass QuadMesh extends Mesh {\n\n\t/**\n\t * Constructs a new quad mesh.\n\t *\n\t * @param {?Material} [material=null] - The material to render the quad mesh with.\n\t */\n\tconstructor( material = null ) {\n\n\t\tsuper( _geometry, material );\n\n\t\t/**\n\t\t * The camera to render the quad mesh with.\n\t\t *\n\t\t * @type {OrthographicCamera}\n\t\t * @readonly\n\t\t */\n\t\tthis.camera = _camera;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadMesh = true;\n\n\t}\n\n\t/**\n\t * Async version of `render()`.\n\t *\n\t * @async\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {Promise} A Promise that resolves when the render has been finished.\n\t */\n\tasync renderAsync( renderer ) {\n\n\t\treturn renderer.renderAsync( this, _camera );\n\n\t}\n\n\t/**\n\t * Renders the quad mesh\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t */\n\trender( renderer ) {\n\n\t\trenderer.render( this, _camera );\n\n\t}\n\n}\n\nconst _size$1 = /*@__PURE__*/ new Vector2();\n\n/**\n * `RTTNode` takes another node and uses it with a `QuadMesh` to render into a texture (RTT).\n * This module is especially relevant in context of post processing where certain nodes require\n * texture input for their effects. With the helper function `convertToTexture()` which is based\n * on this module, the node system can automatically ensure texture input if required.\n *\n * @augments TextureNode\n */\nclass RTTNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'RTTNode';\n\n\t}\n\n\t/**\n\t * Constructs a new RTT node.\n\t *\n\t * @param {Node} node - The node to render a texture with.\n\t * @param {?number} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\n\t * @param {?number} [height=null] - The height of the internal render target.\n\t * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\n\t */\n\tconstructor( node, width = null, height = null, options = { type: HalfFloatType } ) {\n\n\t\tconst renderTarget = new RenderTarget( width, height, options );\n\n\t\tsuper( renderTarget.texture, uv() );\n\n\t\t/**\n\t\t * The node to render a texture with.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The width of the internal render target.\n\t\t * If not width is applied, the render target is automatically resized.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the internal render target.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.height = height;\n\n\t\t/**\n\t\t * The pixel ratio\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.pixelRatio = 1;\n\n\t\t/**\n\t\t * The render target\n\t\t *\n\t\t * @type {RenderTarget}\n\t\t */\n\t\tthis.renderTarget = renderTarget;\n\n\t\t/**\n\t\t * Whether the texture requires an update or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.textureNeedsUpdate = true;\n\n\t\t/**\n\t\t * Whether the texture should automatically be updated or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t\t/**\n\t\t * The node which is used with the quad mesh for RTT.\n\t\t *\n\t\t * @private\n\t\t * @type {Node}\n\t\t * @default null\n\t\t */\n\t\tthis._rttNode = null;\n\n\t\t/**\n\t\t * The internal quad mesh for RTT.\n\t\t *\n\t\t * @private\n\t\t * @type {QuadMesh}\n\t\t */\n\t\tthis._quadMesh = new QuadMesh( new NodeMaterial() );\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.RENDER` since the node updates\n\t\t * the texture once per render in its {@link RTTNode#updateBefore} method.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t}\n\n\t/**\n\t * Whether the internal render target should automatically be resized or not.\n\t *\n\t * @type {boolean}\n\t * @readonly\n\t * @default true\n\t */\n\tget autoSize() {\n\n\t\treturn this.width === null;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis._rttNode = this.node.context( builder.getSharedContext() );\n\t\tthis._quadMesh.material.name = 'RTT';\n\t\tthis._quadMesh.material.needsUpdate = true;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\t/**\n\t * Sets the size of the internal render target\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tconst effectiveWidth = width * this.pixelRatio;\n\t\tconst effectiveHeight = height * this.pixelRatio;\n\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\n\n\t\tthis.textureNeedsUpdate = true;\n\n\t}\n\n\t/**\n\t * Sets the pixel ratio. This will also resize the render target.\n\t *\n\t * @param {number} pixelRatio - The pixel ratio to set.\n\t */\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis.pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this.width, this.height );\n\n\t}\n\n\tupdateBefore( { renderer } ) {\n\n\t\tif ( this.textureNeedsUpdate === false && this.autoUpdate === false ) return;\n\n\t\tthis.textureNeedsUpdate = false;\n\n\t\t//\n\n\t\tif ( this.autoSize === true ) {\n\n\t\t\tthis.pixelRatio = renderer.getPixelRatio();\n\n\t\t\tconst size = renderer.getSize( _size$1 );\n\n\t\t\tthis.setSize( size.width, size.height );\n\n\t\t}\n\n\t\t//\n\n\t\tthis._quadMesh.material.fragmentNode = this._rttNode;\n\n\t\t//\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\trenderer.setRenderTarget( this.renderTarget );\n\n\t\tthis._quadMesh.render( renderer );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tclone() {\n\n\t\tconst newNode = new TextureNode( this.value, this.uvNode, this.levelNode );\n\t\tnewNode.sampler = this.sampler;\n\t\tnewNode.referenceNode = this;\n\n\t\treturn newNode;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a RTT node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node to render a texture with.\n * @param {?number} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\n * @param {?number} [height=null] - The height of the internal render target.\n * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\n * @returns {RTTNode}\n */\nconst rtt = ( node, ...params ) => nodeObject( new RTTNode( nodeObject( node ), ...params ) );\n\n/**\n * TSL function for converting nodes to textures nodes.\n *\n * @tsl\n * @function\n * @param {Node} node - The node to render a texture with.\n * @param {?number} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\n * @param {?number} [height=null] - The height of the internal render target.\n * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\n * @returns {RTTNode}\n */\nconst convertToTexture = ( node, ...params ) => {\n\n\tif ( node.isTextureNode ) return node;\n\tif ( node.isPassNode ) return node.getTextureNode();\n\n\treturn rtt( node, ...params );\n\n};\n\n/**\n * Computes a position in view space based on a fragment's screen position expressed as uv coordinates, the fragments\n * depth value and the camera's inverse projection matrix.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} screenPosition - The fragment's screen position expressed as uv coordinates.\n * @param {Node<float>} depth - The fragment's depth value.\n * @param {Node<mat4>} projectionMatrixInverse - The camera's inverse projection matrix.\n * @return {Node<vec3>} The fragments position in view space.\n */\nconst getViewPosition = /*@__PURE__*/ Fn( ( [ screenPosition, depth, projectionMatrixInverse ], builder ) => {\n\n\tlet clipSpacePosition;\n\n\tif ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\tscreenPosition = vec2( screenPosition.x, screenPosition.y.oneMinus() ).mul( 2.0 ).sub( 1.0 );\n\t\tclipSpacePosition = vec4( vec3( screenPosition, depth ), 1.0 );\n\n\t} else {\n\n\t\tclipSpacePosition = vec4( vec3( screenPosition.x, screenPosition.y.oneMinus(), depth ).mul( 2.0 ).sub( 1.0 ), 1.0 );\n\n\t}\n\n\tconst viewSpacePosition = vec4( projectionMatrixInverse.mul( clipSpacePosition ) );\n\n\treturn viewSpacePosition.xyz.div( viewSpacePosition.w );\n\n} );\n\n/**\n * Computes a screen position expressed as uv coordinates based on a fragment's position in view space\n * and the camera's projection matrix\n *\n * @tsl\n * @function\n * @param {Node<vec3>} viewPosition - The fragments position in view space.\n * @param {Node<mat4>} projectionMatrix - The camera's projection matrix.\n * @return {Node<vec2>} The fragment's screen position expressed as uv coordinates.\n */\nconst getScreenPosition = /*@__PURE__*/ Fn( ( [ viewPosition, projectionMatrix ] ) => {\n\n\tconst sampleClipPos = projectionMatrix.mul( vec4( viewPosition, 1.0 ) );\n\tconst sampleUv = sampleClipPos.xy.div( sampleClipPos.w ).mul( 0.5 ).add( 0.5 ).toVar();\n\treturn vec2( sampleUv.x, sampleUv.y.oneMinus() );\n\n} );\n\n/**\n * Computes a normal vector based on depth data. Can be used as a fallback when no normal render\n * target is available or if flat surface normals are required.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} uv - The texture coordinate.\n * @param {DepthTexture} depthTexture - The depth texture.\n * @param {Node<mat4>} projectionMatrixInverse - The camera's inverse projection matrix.\n * @return {Node<vec3>} The computed normal vector.\n */\nconst getNormalFromDepth = /*@__PURE__*/ Fn( ( [ uv, depthTexture, projectionMatrixInverse ] ) => {\n\n\tconst size = textureSize( textureLoad( depthTexture ) );\n\tconst p = ivec2( uv.mul( size ) ).toVar();\n\n\tconst c0 = textureLoad( depthTexture, p ).toVar();\n\n\tconst l2 = textureLoad( depthTexture, p.sub( ivec2( 2, 0 ) ) ).toVar();\n\tconst l1 = textureLoad( depthTexture, p.sub( ivec2( 1, 0 ) ) ).toVar();\n\tconst r1 = textureLoad( depthTexture, p.add( ivec2( 1, 0 ) ) ).toVar();\n\tconst r2 = textureLoad( depthTexture, p.add( ivec2( 2, 0 ) ) ).toVar();\n\tconst b2 = textureLoad( depthTexture, p.add( ivec2( 0, 2 ) ) ).toVar();\n\tconst b1 = textureLoad( depthTexture, p.add( ivec2( 0, 1 ) ) ).toVar();\n\tconst t1 = textureLoad( depthTexture, p.sub( ivec2( 0, 1 ) ) ).toVar();\n\tconst t2 = textureLoad( depthTexture, p.sub( ivec2( 0, 2 ) ) ).toVar();\n\n\tconst dl = abs( sub( float( 2 ).mul( l1 ).sub( l2 ), c0 ) ).toVar();\n\tconst dr = abs( sub( float( 2 ).mul( r1 ).sub( r2 ), c0 ) ).toVar();\n\tconst db = abs( sub( float( 2 ).mul( b1 ).sub( b2 ), c0 ) ).toVar();\n\tconst dt = abs( sub( float( 2 ).mul( t1 ).sub( t2 ), c0 ) ).toVar();\n\n\tconst ce = getViewPosition( uv, c0, projectionMatrixInverse ).toVar();\n\n\tconst dpdx = dl.lessThan( dr ).select( ce.sub( getViewPosition( uv.sub( vec2( float( 1 ).div( size.x ), 0 ) ), l1, projectionMatrixInverse ) ), ce.negate().add( getViewPosition( uv.add( vec2( float( 1 ).div( size.x ), 0 ) ), r1, projectionMatrixInverse ) ) );\n\tconst dpdy = db.lessThan( dt ).select( ce.sub( getViewPosition( uv.add( vec2( 0, float( 1 ).div( size.y ) ) ), b1, projectionMatrixInverse ) ), ce.negate().add( getViewPosition( uv.sub( vec2( 0, float( 1 ).div( size.y ) ) ), t1, projectionMatrixInverse ) ) );\n\n\treturn normalize( cross( dpdx, dpdy ) );\n\n} );\n\n/**\n * This special type of instanced buffer attribute is intended for compute shaders.\n * In earlier three.js versions it was only possible to update attribute data\n * on the CPU via JavaScript and then upload the data to the GPU. With the\n * new material system and renderer it is now possible to use compute shaders\n * to compute the data for an attribute more efficiently on the GPU.\n *\n * The idea is to create an instance of this class and provide it as an input\n * to {@link StorageBufferNode}.\n *\n * Note: This type of buffer attribute can only be used with `WebGPURenderer`.\n *\n * @augments InstancedBufferAttribute\n */\nclass StorageInstancedBufferAttribute extends InstancedBufferAttribute {\n\n\t/**\n\t * Constructs a new storage instanced buffer attribute.\n\t *\n\t * @param {number|TypedArray} count - The item count. It is also valid to pass a typed array as an argument.\n\t * The subsequent parameters are then obsolete.\n\t * @param {number} itemSize - The item size.\n\t * @param {TypedArray.constructor} [typeClass=Float32Array] - A typed array constructor.\n\t */\n\tconstructor( count, itemSize, typeClass = Float32Array ) {\n\n\t\tconst array = ArrayBuffer.isView( count ) ? count : new typeClass( count * itemSize );\n\n\t\tsuper( array, itemSize );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageInstancedBufferAttribute = true;\n\n\t}\n\n}\n\n/**\n * This special type of buffer attribute is intended for compute shaders.\n * In earlier three.js versions it was only possible to update attribute data\n * on the CPU via JavaScript and then upload the data to the GPU. With the\n * new material system and renderer it is now possible to use compute shaders\n * to compute the data for an attribute more efficiently on the GPU.\n *\n * The idea is to create an instance of this class and provide it as an input\n * to {@link StorageBufferNode}.\n *\n * Note: This type of buffer attribute can only be used with `WebGPURenderer`.\n *\n * @augments BufferAttribute\n */\nclass StorageBufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new storage buffer attribute.\n\t *\n\t * @param {number|TypedArray} count - The item count. It is also valid to pass a typed array as an argument.\n\t * The subsequent parameters are then obsolete.\n\t * @param {number} itemSize - The item size.\n\t * @param {TypedArray.constructor} [typeClass=Float32Array] - A typed array constructor.\n\t */\n\tconstructor( count, itemSize, typeClass = Float32Array ) {\n\n\t\tconst array = ArrayBuffer.isView( count ) ? count : new typeClass( count * itemSize );\n\n\t\tsuper( array, itemSize );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageBufferAttribute = true;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a storage buffer node with a configured `StorageBufferAttribute`.\n *\n * @tsl\n * @function\n * @param {number|TypedArray} count - The data count. It is also valid to pass a typed array as an argument.\n * @param {string|Struct} [type='float'] - The data type.\n * @returns {StorageBufferNode}\n */\nconst attributeArray = ( count, type = 'float' ) => {\n\n\tlet itemSize, typedArray;\n\n\tif ( type.isStruct === true ) {\n\n\t\titemSize = type.layout.getLength();\n\t\ttypedArray = getTypedArrayFromType( 'float' );\n\n\t} else {\n\n\t\titemSize = getLengthFromType( type );\n\t\ttypedArray = getTypedArrayFromType( type );\n\n\t}\n\n\tconst buffer = new StorageBufferAttribute( count, itemSize, typedArray );\n\tconst node = storage( buffer, type, count );\n\n\treturn node;\n\n};\n\n/**\n * TSL function for creating a storage buffer node with a configured `StorageInstancedBufferAttribute`.\n *\n * @tsl\n * @function\n * @param {number|TypedArray} count - The data count. It is also valid to pass a typed array as an argument.\n * @param {string|Struct} [type='float'] - The data type.\n * @returns {StorageBufferNode}\n */\nconst instancedArray = ( count, type = 'float' ) => {\n\n\tlet itemSize, typedArray;\n\n\tif ( type.isStruct === true ) {\n\n\t\titemSize = type.layout.getLength();\n\t\ttypedArray = getTypedArrayFromType( 'float' );\n\n\t} else {\n\n\t\titemSize = getLengthFromType( type );\n\t\ttypedArray = getTypedArrayFromType( type );\n\n\t}\n\n\tconst buffer = new StorageInstancedBufferAttribute( count, itemSize, typedArray );\n\tconst node = storage( buffer, type, count );\n\n\treturn node;\n\n};\n\n/**\n * A node for representing the uv coordinates of points.\n *\n * Can only be used with a WebGL backend. In WebGPU, point\n * primitives always have the size of one pixel and can thus\n * can't be used as sprite-like objects that display textures.\n *\n * @augments Node\n */\nclass PointUVNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'PointUVNode';\n\n\t}\n\n\t/**\n\t * Constructs a new point uv node.\n\t */\n\tconstructor() {\n\n\t\tsuper( 'vec2' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointUVNode = true;\n\n\t}\n\n\tgenerate( /*builder*/ ) {\n\n\t\treturn 'vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )';\n\n\t}\n\n}\n\n/**\n * TSL object that represents the uv coordinates of points.\n *\n * @tsl\n * @type {PointUVNode}\n */\nconst pointUV = /*@__PURE__*/ nodeImmutable( PointUVNode );\n\nconst _e1 = /*@__PURE__*/ new Euler();\nconst _m1 = /*@__PURE__*/ new Matrix4();\n\n/**\n * This module allows access to a collection of scene properties. The following predefined TSL objects\n * are available for easier use:\n *\n * - `backgroundBlurriness`: A node that represents the scene's background blurriness.\n * - `backgroundIntensity`: A node that represents the scene's background intensity.\n * - `backgroundRotation`: A node that represents the scene's background rotation.\n *\n * @augments Node\n */\nclass SceneNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SceneNode';\n\n\t}\n\n\t/**\n\t * Constructs a new scene node.\n\t *\n\t * @param {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')} scope - The scope defines the type of scene property that is accessed.\n\t * @param {?Scene} [scene=null] - A reference to the scene.\n\t */\n\tconstructor( scope = SceneNode.BACKGROUND_BLURRINESS, scene = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scope defines the type of scene property that is accessed.\n\t\t *\n\t\t * @type {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * A reference to the scene that is going to be accessed.\n\t\t *\n\t\t * @type {?Scene}\n\t\t * @default null\n\t\t */\n\t\tthis.scene = scene;\n\n\t}\n\n\t/**\n\t * Depending on the scope, the method returns a different type of node that represents\n\t * the respective scene property.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The output node.\n\t */\n\tsetup( builder ) {\n\n\t\tconst scope = this.scope;\n\t\tconst scene = this.scene !== null ? this.scene : builder.scene;\n\n\t\tlet output;\n\n\t\tif ( scope === SceneNode.BACKGROUND_BLURRINESS ) {\n\n\t\t\toutput = reference( 'backgroundBlurriness', 'float', scene );\n\n\t\t} else if ( scope === SceneNode.BACKGROUND_INTENSITY ) {\n\n\t\t\toutput = reference( 'backgroundIntensity', 'float', scene );\n\n\t\t} else if ( scope === SceneNode.BACKGROUND_ROTATION ) {\n\n\t\t\toutput = uniform( 'mat4' ).label( 'backgroundRotation' ).setGroup( renderGroup ).onRenderUpdate( () => {\n\n\t\t\t\tconst background = scene.background;\n\n\t\t\t\tif ( background !== null && background.isTexture && background.mapping !== UVMapping ) {\n\n\t\t\t\t\t_e1.copy( scene.backgroundRotation );\n\n\t\t\t\t\t// accommodate left-handed frame\n\t\t\t\t\t_e1.x *= -1; _e1.y *= -1; _e1.z *= -1;\n\n\t\t\t\t\t_m1.makeRotationFromEuler( _e1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_m1.identity();\n\n\t\t\t\t}\n\n\t\t\t\treturn _m1;\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.SceneNode: Unknown scope:', scope );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nSceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';\nSceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';\nSceneNode.BACKGROUND_ROTATION = 'backgroundRotation';\n\n/**\n * TSL object that represents the scene's background blurriness.\n *\n * @tsl\n * @type {SceneNode}\n */\nconst backgroundBlurriness = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_BLURRINESS );\n\n/**\n * TSL object that represents the scene's background intensity.\n *\n * @tsl\n * @type {SceneNode}\n */\nconst backgroundIntensity = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_INTENSITY );\n\n/**\n * TSL object that represents the scene's background rotation.\n *\n * @tsl\n * @type {SceneNode}\n */\nconst backgroundRotation = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_ROTATION );\n\n/**\n * This special version of a texture node can be used to\n * write data into a storage texture with a compute shader.\n *\n * ```js\n * const storageTexture = new THREE.StorageTexture( width, height );\n *\n * const computeTexture = Fn( ( { storageTexture } ) => {\n *\n * \tconst posX = instanceIndex.mod( width );\n * \tconst posY = instanceIndex.div( width );\n * \tconst indexUV = uvec2( posX, posY );\n *\n * \t// generate RGB values\n *\n * \tconst r = 1;\n * \tconst g = 1;\n * \tconst b = 1;\n *\n * \ttextureStore( storageTexture, indexUV, vec4( r, g, b, 1 ) ).toWriteOnly();\n *\n * } );\n *\n * const computeNode = computeTexture( { storageTexture } ).compute( width * height );\n * renderer.computeAsync( computeNode );\n * ```\n *\n * This node can only be used with a WebGPU backend.\n *\n * @augments TextureNode\n */\nclass StorageTextureNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'StorageTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new storage texture node.\n\t *\n\t * @param {StorageTexture} value - The storage texture.\n\t * @param {Node<vec2|vec3>} uvNode - The uv node.\n\t * @param {?Node} [storeNode=null] - The value node that should be stored in the texture.\n\t */\n\tconstructor( value, uvNode, storeNode = null ) {\n\n\t\tsuper( value, uvNode );\n\n\t\t/**\n\t\t * The value node that should be stored in the texture.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.storeNode = storeNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageTextureNode = true;\n\n\t\t/**\n\t\t * The access type of the texture node.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'writeOnly'\n\t\t */\n\t\tthis.access = NodeAccess.WRITE_ONLY;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'storageTexture'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'storageTexture';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.storeNode = this.storeNode;\n\n\t}\n\n\t/**\n\t * Defines the node access.\n\t *\n\t * @param {string} value - The node access.\n\t * @return {StorageTextureNode} A reference to this node.\n\t */\n\tsetAccess( value ) {\n\n\t\tthis.access = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the storage node. If no `storeNode`\n\t * is defined, the texture node is generated as normal texture.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} output - The current output.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( builder, output ) {\n\n\t\tlet snippet;\n\n\t\tif ( this.storeNode !== null ) {\n\n\t\t\tsnippet = this.generateStore( builder );\n\n\t\t} else {\n\n\t\t\tsnippet = super.generate( builder, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Convenience method for configuring a read/write node access.\n\t *\n\t * @return {StorageTextureNode} A reference to this node.\n\t */\n\ttoReadWrite() {\n\n\t\treturn this.setAccess( NodeAccess.READ_WRITE );\n\n\t}\n\n\t/**\n\t * Convenience method for configuring a read-only node access.\n\t *\n\t * @return {StorageTextureNode} A reference to this node.\n\t */\n\ttoReadOnly() {\n\n\t\treturn this.setAccess( NodeAccess.READ_ONLY );\n\n\t}\n\n\t/**\n\t * Convenience method for configuring a write-only node access.\n\t *\n\t * @return {StorageTextureNode} A reference to this node.\n\t */\n\ttoWriteOnly() {\n\n\t\treturn this.setAccess( NodeAccess.WRITE_ONLY );\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the storage texture node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tgenerateStore( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\tconst { uvNode, storeNode } = properties;\n\n\t\tconst textureProperty = super.generate( builder, 'property' );\n\t\tconst uvSnippet = uvNode.build( builder, 'uvec2' );\n\t\tconst storeSnippet = storeNode.build( builder, 'vec4' );\n\n\t\tconst snippet = builder.generateTextureStore( builder, textureProperty, uvSnippet, storeSnippet );\n\n\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a storage texture node.\n *\n * @tsl\n * @function\n * @param {StorageTexture} value - The storage texture.\n * @param {?Node<vec2|vec3>} uvNode - The uv node.\n * @param {?Node} [storeNode=null] - The value node that should be stored in the texture.\n * @returns {StorageTextureNode}\n */\nconst storageTexture = /*@__PURE__*/ nodeProxy( StorageTextureNode ).setParameterLength( 1, 3 );\n\n\n/**\n * TODO: Explain difference to `storageTexture()`.\n *\n * @tsl\n * @function\n * @param {StorageTexture} value - The storage texture.\n * @param {Node<vec2|vec3>} uvNode - The uv node.\n * @param {?Node} [storeNode=null] - The value node that should be stored in the texture.\n * @returns {StorageTextureNode}\n */\nconst textureStore = ( value, uvNode, storeNode ) => {\n\n\tconst node = storageTexture( value, uvNode, storeNode );\n\n\tif ( storeNode !== null ) node.toStack();\n\n\treturn node;\n\n};\n\nconst normal = Fn( ( { texture, uv } ) => {\n\n\tconst epsilon = 0.0001;\n\n\tconst ret = vec3().toVar();\n\n\tIf( uv.x.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 1, 0, 0 ) );\n\n\t} ).ElseIf( uv.y.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 1, 0 ) );\n\n\t} ).ElseIf( uv.z.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, 1 ) );\n\n\t} ).ElseIf( uv.x.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( -1, 0, 0 ) );\n\n\t} ).ElseIf( uv.y.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, -1, 0 ) );\n\n\t} ).ElseIf( uv.z.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, -1 ) );\n\n\t} ).Else( () => {\n\n\t\tconst step = 0.01;\n\n\t\tconst x = texture.sample( uv.add( vec3( -0.01, 0.0, 0.0 ) ) ).r.sub( texture.sample( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );\n\t\tconst y = texture.sample( uv.add( vec3( 0.0, -0.01, 0.0 ) ) ).r.sub( texture.sample( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );\n\t\tconst z = texture.sample( uv.add( vec3( 0.0, 0.0, -0.01 ) ) ).r.sub( texture.sample( uv.add( vec3( 0.0, 0.0, step ) ) ).r );\n\n\t\tret.assign( vec3( x, y, z ) );\n\n\t} );\n\n\treturn ret.normalize();\n\n} );\n\n/**\n * This type of uniform node represents a 3D texture.\n *\n * @augments TextureNode\n */\nclass Texture3DNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'Texture3DNode';\n\n\t}\n\n\t/**\n\t * Constructs a new 3D texture node.\n\t *\n\t * @param {Data3DTexture} value - The 3D texture.\n\t * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\n\t * @param {?Node<int>} [levelNode=null] - The level node.\n\t */\n\tconstructor( value, uvNode = null, levelNode = null ) {\n\n\t\tsuper( value, uvNode, levelNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTexture3DNode = true;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'texture3D'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture3D';\n\n\t}\n\n\t/**\n\t * Returns a default uv node which is in context of 3D textures a three-dimensional\n\t * uv node.\n\t *\n\t * @return {Node<vec3>} The default uv node.\n\t */\n\tgetDefaultUV() {\n\n\t\treturn vec3( 0.5, 0.5, 0.5 );\n\n\t}\n\n\t/**\n\t * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\n\t * for 3D textures. The uv transformation matrix is not applied to 3D textures.\n\t *\n\t * @param {boolean} value - The update toggle.\n\t */\n\tsetUpdateMatrix( /*value*/ ) { } // Ignore .updateMatrix for 3d TextureNode\n\n\t/**\n\t * Overwrites the default implementation to return the unmodified uv node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to setup.\n\t * @return {Node} The unmodified uv node.\n\t */\n\tsetupUV( builder, uvNode ) {\n\n\t\tconst texture = this.value;\n\n\t\tif ( builder.isFlipY() && ( texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true ) ) {\n\n\t\t\tif ( this.sampler ) {\n\n\t\t\t\tuvNode = uvNode.flipY();\n\n\t\t\t} else {\n\n\t\t\t\tuvNode = uvNode.setY( int( textureSize( this, this.levelNode ).y ).sub( uvNode.y ).sub( 1 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uvNode;\n\n\t}\n\n\t/**\n\t * Generates the uv code snippet.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to generate code for.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerateUV( builder, uvNode ) {\n\n\t\treturn uvNode.build( builder, 'vec3' );\n\n\t}\n\n\t/**\n\t * TODO.\n\t *\n\t * @param {Node<vec3>} uvNode - The uv node .\n\t * @return {Node<vec3>} TODO.\n\t */\n\tnormal( uvNode ) {\n\n\t\treturn normal( { texture: this, uv: uvNode } );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a 3D texture node.\n *\n * @tsl\n * @function\n * @param {Data3DTexture} value - The 3D texture.\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\n * @param {?Node<int>} [levelNode=null] - The level node.\n * @returns {Texture3DNode}\n */\nconst texture3D = /*@__PURE__*/ nodeProxy( Texture3DNode ).setParameterLength( 1, 3 );\n\n/**\n * A special type of reference node that allows to link values in\n * `userData` fields to node objects.\n * ```js\n * sprite.userData.rotation = 1; // stores individual rotation per sprite\n *\n * const material = new THREE.SpriteNodeMaterial();\n * material.rotationNode = userData( 'rotation', 'float' );\n * ```\n * Since `UserDataNode` is extended from {@link ReferenceNode}, the node value\n * will automatically be updated when the `rotation` user data field changes.\n *\n * @augments ReferenceNode\n */\nclass UserDataNode extends ReferenceNode {\n\n\tstatic get type() {\n\n\t\treturn 'UserDataNode';\n\n\t}\n\n\t/**\n\t * Constructs a new user data node.\n\t *\n\t * @param {string} property - The property name that should be referenced by the node.\n\t * @param {string} inputType - The node data type of the reference.\n\t * @param {?Object} [userData=null] - A reference to the `userData` object. If not provided, the `userData` property of the 3D object that uses the node material is evaluated.\n\t */\n\tconstructor( property, inputType, userData = null ) {\n\n\t\tsuper( property, inputType, userData );\n\n\t\t/**\n\t\t * A reference to the `userData` object. If not provided, the `userData`\n\t\t * property of the 3D object that uses the node material is evaluated.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.userData = userData;\n\n\t}\n\n\t/**\n\t * Overwritten to make sure {@link ReferenceNode#reference} points to the correct\n\t * `userData` field.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state to evaluate.\n\t * @return {Object} A reference to the `userData` field.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.userData !== null ? this.userData : state.object.userData;\n\n\t\treturn this.reference;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a user data node.\n *\n * @tsl\n * @function\n * @param {string} name - The property name that should be referenced by the node.\n * @param {string} inputType - The node data type of the reference.\n * @param {?Object} userData - A reference to the `userData` object. If not provided, the `userData` property of the 3D object that uses the node material is evaluated.\n * @returns {UserDataNode}\n */\nconst userData = ( name, inputType, userData ) => nodeObject( new UserDataNode( name, inputType, userData ) );\n\nconst _objectData = new WeakMap();\n\n/**\n * A node for representing motion or velocity vectors. Foundation\n * for advanced post processing effects like motion blur or TRAA.\n *\n * The node keeps track of the model, view and projection matrices\n * of the previous frame and uses them to compute offsets in NDC space.\n * These offsets represent the final velocity.\n *\n * @augments TempNode\n */\nclass VelocityNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'VelocityNode';\n\n\t}\n\n\t/**\n\t * Constructs a new vertex color node.\n\t */\n\tconstructor() {\n\n\t\tsuper( 'vec2' );\n\n\t\t/**\n\t\t * The current projection matrix.\n\t\t *\n\t\t * @type {?Matrix4}\n\t\t * @default null\n\t\t */\n\t\tthis.projectionMatrix = null;\n\n\t\t/**\n\t\t * Overwritten since velocity nodes are updated per object.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\t/**\n\t\t * Overwritten since velocity nodes save data after the update.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateAfterType = NodeUpdateType.OBJECT;\n\n\t\t/**\n\t\t * Uniform node representing the previous model matrix in world space.\n\t\t *\n\t\t * @type {UniformNode<mat4>}\n\t\t * @default null\n\t\t */\n\t\tthis.previousModelWorldMatrix = uniform( new Matrix4() );\n\n\t\t/**\n\t\t * Uniform node representing the previous projection matrix.\n\t\t *\n\t\t * @type {UniformNode<mat4>}\n\t\t * @default null\n\t\t */\n\t\tthis.previousProjectionMatrix = uniform( new Matrix4() ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the previous view matrix.\n\t\t *\n\t\t * @type {UniformNode<mat4>}\n\t\t * @default null\n\t\t */\n\t\tthis.previousCameraViewMatrix = uniform( new Matrix4() );\n\n\t}\n\n\t/**\n\t * Sets the given projection matrix.\n\t *\n\t * @param {Matrix4} projectionMatrix - The projection matrix to set.\n\t */\n\tsetProjectionMatrix( projectionMatrix ) {\n\n\t\tthis.projectionMatrix = projectionMatrix;\n\n\t}\n\n\t/**\n\t * Updates velocity specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( { frameId, camera, object } ) {\n\n\t\tconst previousModelMatrix = getPreviousMatrix( object );\n\n\t\tthis.previousModelWorldMatrix.value.copy( previousModelMatrix );\n\n\t\t//\n\n\t\tconst cameraData = getData( camera );\n\n\t\tif ( cameraData.frameId !== frameId ) {\n\n\t\t\tcameraData.frameId = frameId;\n\n\t\t\tif ( cameraData.previousProjectionMatrix === undefined ) {\n\n\t\t\t\tcameraData.previousProjectionMatrix = new Matrix4();\n\t\t\t\tcameraData.previousCameraViewMatrix = new Matrix4();\n\n\t\t\t\tcameraData.currentProjectionMatrix = new Matrix4();\n\t\t\t\tcameraData.currentCameraViewMatrix = new Matrix4();\n\n\t\t\t\tcameraData.previousProjectionMatrix.copy( this.projectionMatrix || camera.projectionMatrix );\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( camera.matrixWorldInverse );\n\n\t\t\t} else {\n\n\t\t\t\tcameraData.previousProjectionMatrix.copy( cameraData.currentProjectionMatrix );\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( cameraData.currentCameraViewMatrix );\n\n\t\t\t}\n\n\t\t\tcameraData.currentProjectionMatrix.copy( this.projectionMatrix || camera.projectionMatrix );\n\t\t\tcameraData.currentCameraViewMatrix.copy( camera.matrixWorldInverse );\n\n\t\t\tthis.previousProjectionMatrix.value.copy( cameraData.previousProjectionMatrix );\n\t\t\tthis.previousCameraViewMatrix.value.copy( cameraData.previousCameraViewMatrix );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Overwritten to updated velocity specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdateAfter( { object } ) {\n\n\t\tgetPreviousMatrix( object ).copy( object.matrixWorld );\n\n\t}\n\n\t/**\n\t * Implements the velocity computation based on the previous and current vertex data.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @return {Node<vec2>} The motion vector.\n\t */\n\tsetup( /*builder*/ ) {\n\n\t\tconst projectionMatrix = ( this.projectionMatrix === null ) ? cameraProjectionMatrix : uniform( this.projectionMatrix );\n\n\t\tconst previousModelViewMatrix = this.previousCameraViewMatrix.mul( this.previousModelWorldMatrix );\n\n\t\tconst clipPositionCurrent = projectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\n\t\tconst clipPositionPrevious = this.previousProjectionMatrix.mul( previousModelViewMatrix ).mul( positionPrevious );\n\n\t\tconst ndcPositionCurrent = clipPositionCurrent.xy.div( clipPositionCurrent.w );\n\t\tconst ndcPositionPrevious = clipPositionPrevious.xy.div( clipPositionPrevious.w );\n\n\t\tconst velocity = sub( ndcPositionCurrent, ndcPositionPrevious );\n\n\t\treturn velocity;\n\n\t}\n\n}\n\nfunction getData( object ) {\n\n\tlet objectData = _objectData.get( object );\n\n\tif ( objectData === undefined ) {\n\n\t\tobjectData = {};\n\t\t_objectData.set( object, objectData );\n\n\t}\n\n\treturn objectData;\n\n}\n\nfunction getPreviousMatrix( object, index = 0 ) {\n\n\tconst objectData = getData( object );\n\n\tlet matrix = objectData[ index ];\n\n\tif ( matrix === undefined ) {\n\n\t\tobjectData[ index ] = matrix = new Matrix4();\n\t\tobjectData[ index ].copy( object.matrixWorld );\n\n\t}\n\n\treturn matrix;\n\n}\n\n/**\n * TSL object that represents the velocity of a render pass.\n *\n * @tsl\n * @type {VelocityNode}\n */\nconst velocity = /*@__PURE__*/ nodeImmutable( VelocityNode );\n\n/**\n * Represents a \"Color Burn\" blend mode.\n *\n * It's designed to darken the base layer's colors based on the color of the blend layer.\n * It significantly increases the contrast of the base layer, making the colors more vibrant and saturated.\n * The darker the color in the blend layer, the stronger the darkening and contrast effect on the base layer.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color. A white (#ffffff) blend color does not alter the base color.\n * @return {Node<vec3>} The result.\n */\nconst blendBurn = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn min$1( 1.0, base.oneMinus().div( blend ) ).oneMinus();\n\n} ).setLayout( {\n\tname: 'blendBurn',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * Represents a \"Color Dodge\" blend mode.\n *\n * It's designed to lighten the base layer's colors based on the color of the blend layer.\n * It significantly increases the brightness of the base layer, making the colors lighter and more vibrant.\n * The brighter the color in the blend layer, the stronger the lightening and contrast effect on the base layer.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color. A black (#000000) blend color does not alter the base color.\n * @return {Node<vec3>} The result.\n */\nconst blendDodge = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn min$1( base.div( blend.oneMinus() ), 1.0 );\n\n} ).setLayout( {\n\tname: 'blendDodge',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * Represents a \"Screen\" blend mode.\n *\n * Similar to `blendDodge()`, this mode also lightens the base layer's colors based on the color of the blend layer.\n * The \"Screen\" blend mode is better for general brightening whereas the \"Dodge\" results in more subtle and nuanced\n * effects.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color. A black (#000000) blend color does not alter the base color.\n * @return {Node<vec3>} The result.\n */\nconst blendScreen = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn base.oneMinus().mul( blend.oneMinus() ).oneMinus();\n\n} ).setLayout( {\n\tname: 'blendScreen',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * Represents a \"Overlay\" blend mode.\n *\n * It's designed to increase the contrast of the base layer based on the color of the blend layer.\n * It amplifies the existing colors and contrast in the base layer, making lighter areas lighter and darker areas darker.\n * The color of the blend layer significantly influences the resulting contrast and color shift in the base layer.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color\n * @return {Node<vec3>} The result.\n */\nconst blendOverlay = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn mix( base.mul( 2.0 ).mul( blend ), base.oneMinus().mul( 2.0 ).mul( blend.oneMinus() ).oneMinus(), step( 0.5, base ) );\n\n} ).setLayout( {\n\tname: 'blendOverlay',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * This function blends two color based on their alpha values by replicating the behavior of `THREE.NormalBlending`.\n * It assumes both input colors have non-premultiplied alpha.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} base - The base color.\n * @param {Node<vec4>} blend - The blend color\n * @return {Node<vec4>} The result.\n */\nconst blendColor = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\tconst outAlpha = blend.a.add( base.a.mul( blend.a.oneMinus() ) );\n\n\treturn vec4( blend.rgb.mul( blend.a ).add( base.rgb.mul( base.a ).mul( blend.a.oneMinus() ) ).div( outAlpha ), outAlpha );\n\n} ).setLayout( {\n\tname: 'blendColor',\n\ttype: 'vec4',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec4' },\n\t\t{ name: 'blend', type: 'vec4' }\n\t]\n} );\n\n// Deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendBurn} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nconst burn = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"burn\" has been renamed. Use \"blendBurn\" instead.' );\n\treturn blendBurn( params );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendDodge} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nconst dodge = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"dodge\" has been renamed. Use \"blendDodge\" instead.' );\n\treturn blendDodge( params );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendScreen} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nconst screen = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"screen\" has been renamed. Use \"blendScreen\" instead.' );\n\treturn blendScreen( params );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendOverlay} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nconst overlay = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"overlay\" has been renamed. Use \"blendOverlay\" instead.' );\n\treturn blendOverlay( params );\n\n};\n\n/**\n * Computes a grayscale value for the given RGB color value.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color value to compute the grayscale for.\n * @return {Node<vec3>} The grayscale color.\n */\nconst grayscale = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\treturn luminance( color.rgb );\n\n} );\n\n/**\n * Super-saturates or desaturates the given RGB color.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The input color.\n * @param {Node<float>} [adjustment=1] - Specifies the amount of the conversion. A value under `1` desaturates the color, a value over `1` super-saturates it.\n * @return {Node<vec3>} The saturated color.\n */\nconst saturation = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\treturn adjustment.mix( luminance( color.rgb ), color.rgb );\n\n} );\n\n/**\n * Selectively enhance the intensity of less saturated RGB colors. Can result\n * in a more natural and visually appealing image with enhanced color depth\n * compared to {@link ColorAdjustment#saturation}.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The input color.\n * @param {Node<float>} [adjustment=1] - Controls the intensity of the vibrance effect.\n * @return {Node<vec3>} The updated color.\n */\nconst vibrance = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\tconst average = add( color.r, color.g, color.b ).div( 3.0 );\n\n\tconst mx = color.r.max( color.g.max( color.b ) );\n\tconst amt = mx.sub( average ).mul( adjustment ).mul( -3 );\n\n\treturn mix( color.rgb, mx, amt );\n\n} );\n\n/**\n * Updates the hue component of the given RGB color while preserving its luminance and saturation.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The input color.\n * @param {Node<float>} [adjustment=1] - Defines the degree of hue rotation in radians. A positive value rotates the hue clockwise, while a negative value rotates it counterclockwise.\n * @return {Node<vec3>} The updated color.\n */\nconst hue = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\tconst k = vec3( 0.57735, 0.57735, 0.57735 );\n\n\tconst cosAngle = adjustment.cos();\n\n\treturn vec3( color.rgb.mul( cosAngle ).add( k.cross( color.rgb ).mul( adjustment.sin() ).add( k.mul( dot( k, color.rgb ).mul( cosAngle.oneMinus() ) ) ) ) );\n\n} );\n\n/**\n * Computes the luminance for the given RGB color value.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color value to compute the luminance for.\n * @param {?Node<vec3>} luminanceCoefficients - The luminance coefficients. By default predefined values of the current working color space are used.\n * @return {Node<vec3>} The luminance.\n */\nconst luminance = (\n\tcolor,\n\tluminanceCoefficients = vec3( ColorManagement.getLuminanceCoefficients( new Vector3() ) )\n) => dot( color, luminanceCoefficients );\n\n/**\n * Color Decision List (CDL) v1.2\n *\n * Compact representation of color grading information, defined by slope, offset, power, and\n * saturation. The CDL should be typically be given input in a log space (such as LogC, ACEScc,\n * or AgX Log), and will return output in the same space. Output may require clamping >=0.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} color Input (-Infinity < input < +Infinity)\n * @param {Node<vec3>} slope Slope (0 ≤ slope < +Infinity)\n * @param {Node<vec3>} offset Offset (-Infinity < offset < +Infinity; typically -1 < offset < 1)\n * @param {Node<vec3>} power Power (0 < power < +Infinity)\n * @param {Node<float>} saturation Saturation (0 ≤ saturation < +Infinity; typically 0 ≤ saturation < 4)\n * @param {Node<vec3>} luminanceCoefficients Luminance coefficients for saturation term, typically Rec. 709\n * @return {Node<vec4>} Output, -Infinity < output < +Infinity\n *\n * References:\n * - ASC CDL v1.2\n * - {@link https://blender.stackexchange.com/a/55239/43930}\n * - {@link https://docs.acescentral.com/specifications/acescc/}\n */\nconst cdl = /*@__PURE__*/ Fn( ( [\n\tcolor,\n\tslope = vec3( 1 ),\n\toffset = vec3( 0 ),\n\tpower = vec3( 1 ),\n\tsaturation = float( 1 ),\n\t// ASC CDL v1.2 explicitly requires Rec. 709 luminance coefficients.\n\tluminanceCoefficients = vec3( ColorManagement.getLuminanceCoefficients( new Vector3(), LinearSRGBColorSpace ) )\n] ) => {\n\n\t// NOTE: The ASC CDL v1.2 defines a [0, 1] clamp on the slope+offset term, and another on the\n\t// saturation term. Per the ACEScc specification and Filament, limits may be omitted to support\n\t// values outside [0, 1], requiring a workaround for negative values in the power expression.\n\n\tconst luma = color.rgb.dot( vec3( luminanceCoefficients ) );\n\n\tconst v = max$1( color.rgb.mul( slope ).add( offset ), 0.0 ).toVar();\n\tconst pv = v.pow( power ).toVar();\n\n\tIf( v.r.greaterThan( 0.0 ), () => { v.r.assign( pv.r ); } ); // eslint-disable-line\n\tIf( v.g.greaterThan( 0.0 ), () => { v.g.assign( pv.g ); } ); // eslint-disable-line\n\tIf( v.b.greaterThan( 0.0 ), () => { v.b.assign( pv.b ); } ); // eslint-disable-line\n\n\tv.assign( luma.add( v.sub( luma ).mul( saturation ) ) );\n\n\treturn vec4( v.rgb, color.a );\n\n} );\n\n/**\n * Represents a posterize effect which reduces the number of colors\n * in an image, resulting in a more blocky and stylized appearance.\n *\n * @augments TempNode\n */\nclass PosterizeNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'PosterizeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new posterize node.\n\t *\n\t * @param {Node} sourceNode - The input color.\n\t * @param {Node} stepsNode - Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\n\t */\n\tconstructor( sourceNode, stepsNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The input color.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.sourceNode = sourceNode;\n\n\t\t/**\n\t\t * Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.stepsNode = stepsNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { sourceNode, stepsNode } = this;\n\n\t\treturn sourceNode.mul( stepsNode ).floor().div( stepsNode );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a posterize node.\n *\n * @tsl\n * @function\n * @param {Node} sourceNode - The input color.\n * @param {Node} stepsNode - Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\n * @returns {PosterizeNode}\n */\nconst posterize = /*@__PURE__*/ nodeProxy( PosterizeNode ).setParameterLength( 2 );\n\nconst _size = /*@__PURE__*/ new Vector2();\n\n/**\n * Represents the texture of a pass node.\n *\n * @augments TextureNode\n */\nclass PassTextureNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'PassTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new pass texture node.\n\t *\n\t * @param {PassNode} passNode - The pass node.\n\t * @param {Texture} texture - The output texture.\n\t */\n\tconstructor( passNode, texture ) {\n\n\t\tsuper( texture );\n\n\t\t/**\n\t\t * A reference to the pass node.\n\t\t *\n\t\t * @type {PassNode}\n\t\t */\n\t\tthis.passNode = passNode;\n\n\t\tthis.setUpdateMatrix( false );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tif ( builder.object.isQuadMesh ) this.passNode.build( builder );\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.passNode, this.value );\n\n\t}\n\n}\n\n/**\n * An extension of `PassTextureNode` which allows to manage more than one\n * internal texture. Relevant for the `getPreviousTexture()` related API.\n *\n * @augments PassTextureNode\n */\nclass PassMultipleTextureNode extends PassTextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'PassMultipleTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new pass texture node.\n\t *\n\t * @param {PassNode} passNode - The pass node.\n\t * @param {string} textureName - The output texture name.\n\t * @param {boolean} [previousTexture=false] - Whether previous frame data should be used or not.\n\t */\n\tconstructor( passNode, textureName, previousTexture = false ) {\n\n\t\t// null is passed to the super call since this class does not\n\t\t// use an external texture for rendering pass data into. Instead\n\t\t// the texture is managed by the pass node itself\n\n\t\tsuper( passNode, null );\n\n\t\t/**\n\t\t * The output texture name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.textureName = textureName;\n\n\t\t/**\n\t\t * Whether previous frame data should be used or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.previousTexture = previousTexture;\n\n\t}\n\n\t/**\n\t * Updates the texture reference of this node.\n\t */\n\tupdateTexture() {\n\n\t\tthis.value = this.previousTexture ? this.passNode.getPreviousTexture( this.textureName ) : this.passNode.getTexture( this.textureName );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tthis.updateTexture();\n\n\t\treturn super.setup( builder );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.passNode, this.textureName, this.previousTexture );\n\n\t}\n\n}\n\n/**\n * Represents a render pass (sometimes called beauty pass) in context of post processing.\n * This pass produces a render for the given scene and camera and can provide multiple outputs\n * via MRT for further processing.\n *\n * ```js\n * const postProcessing = new PostProcessing( renderer );\n *\n * const scenePass = pass( scene, camera );\n *\n * postProcessing.outputNode = scenePass;\n * ```\n *\n * @augments TempNode\n */\nclass PassNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'PassNode';\n\n\t}\n\n\t/**\n\t * Constructs a new pass node.\n\t *\n\t * @param {('color'|'depth')} scope - The scope of the pass. The scope determines whether the node outputs color or depth.\n\t * @param {Scene} scene - A reference to the scene.\n\t * @param {Camera} camera - A reference to the camera.\n\t * @param {Object} options - Options for the internal render target.\n\t */\n\tconstructor( scope, scene, camera, options = {} ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * The scope of the pass. The scope determines whether the node outputs color or depth.\n\t\t *\n\t\t * @type {('color'|'depth')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * A reference to the scene.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * A reference to the camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * Options for the internal render target.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.options = options;\n\n\t\t/**\n\t\t * The pass's pixel ratio. Will be kept automatically kept in sync with the renderer's pixel ratio.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._pixelRatio = 1;\n\n\t\t/**\n\t\t * The pass's pixel width. Will be kept automatically kept in sync with the renderer's width.\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._width = 1;\n\n\t\t/**\n\t\t * The pass's pixel height. Will be kept automatically kept in sync with the renderer's height.\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._height = 1;\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.isRenderTargetTexture = true;\n\t\t//depthTexture.type = FloatType;\n\t\tdepthTexture.name = 'depth';\n\n\t\tconst renderTarget = new RenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options, } );\n\t\trenderTarget.texture.name = 'output';\n\t\trenderTarget.depthTexture = depthTexture;\n\n\t\t/**\n\t\t * The pass's render target.\n\t\t *\n\t\t * @type {RenderTarget}\n\t\t */\n\t\tthis.renderTarget = renderTarget;\n\n\t\t/**\n\t\t * A dictionary holding the internal result textures.\n\t\t *\n\t\t * @private\n\t\t * @type {Object<string, Texture>}\n\t\t */\n\t\tthis._textures = {\n\t\t\toutput: renderTarget.texture,\n\t\t\tdepth: depthTexture\n\t\t};\n\n\t\t/**\n\t\t * A dictionary holding the internal texture nodes.\n\t\t *\n\t\t * @private\n\t\t * @type {Object<string, TextureNode>}\n\t\t */\n\t\tthis._textureNodes = {};\n\n\t\t/**\n\t\t * A dictionary holding the internal depth nodes.\n\t\t *\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._linearDepthNodes = {};\n\n\t\t/**\n\t\t * A dictionary holding the internal viewZ nodes.\n\t\t *\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._viewZNodes = {};\n\n\t\t/**\n\t\t * A dictionary holding the texture data of the previous frame.\n\t\t * Used for computing velocity/motion vectors.\n\t\t *\n\t\t * @private\n\t\t * @type {Object<string, Texture>}\n\t\t */\n\t\tthis._previousTextures = {};\n\n\t\t/**\n\t\t * A dictionary holding the texture nodes of the previous frame.\n\t\t * Used for computing velocity/motion vectors.\n\t\t *\n\t\t * @private\n\t\t * @type {Object<string, TextureNode>}\n\t\t */\n\t\tthis._previousTextureNodes = {};\n\n\t\t/**\n\t\t * The `near` property of the camera as a uniform.\n\t\t *\n\t\t * @private\n\t\t * @type {UniformNode}\n\t\t */\n\t\tthis._cameraNear = uniform( 0 );\n\n\t\t/**\n\t\t * The `far` property of the camera as a uniform.\n\t\t *\n\t\t * @private\n\t\t * @type {UniformNode}\n\t\t */\n\t\tthis._cameraFar = uniform( 0 );\n\n\t\t/**\n\t\t * A MRT node configuring the MRT settings.\n\t\t *\n\t\t * @private\n\t\t * @type {?MRTNode}\n\t\t * @default null\n\t\t */\n\t\tthis._mrt = null;\n\n\t\tthis._layers = null;\n\n\t\tthis._resolution = 1;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPassNode = true;\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node renders the\n\t\t * scene once per frame in its {@link PassNode#updateBefore} method.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t}\n\n\t/**\n\t * Sets the resolution for the pass.\n\t * The resolution is a factor that is multiplied with the renderer's width and height.\n\t *\n\t * @param {number} resolution - The resolution to set. A value of `1` means full resolution.\n\t * @return {PassNode} A reference to this pass.\n\t */\n\tsetResolution( resolution ) {\n\n\t\tthis._resolution = resolution;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the current resolution of the pass.\n\t *\n\t * @return {number} The current resolution. A value of `1` means full resolution.\n\t * @default 1\n\t */\n\tgetResolution() {\n\n\t\treturn this._resolution;\n\n\t}\n\n\tsetLayers( layers ) {\n\n\t\tthis._layers = layers;\n\n\t\treturn this;\n\n\t}\n\n\tgetLayers() {\n\n\t\treturn this._layers;\n\n\t}\n\n\t/**\n\t * Sets the given MRT node to setup MRT for this pass.\n\t *\n\t * @param {MRTNode} mrt - The MRT object.\n\t * @return {PassNode} A reference to this pass.\n\t */\n\tsetMRT( mrt ) {\n\n\t\tthis._mrt = mrt;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current MRT node.\n\t *\n\t * @return {MRTNode} The current MRT node.\n\t */\n\tgetMRT() {\n\n\t\treturn this._mrt;\n\n\t}\n\n\t/**\n\t * The method is overwritten so it always returns `true`.\n\t *\n\t * @return {boolean} Whether this node is global or not.\n\t */\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns the texture for the given output name.\n\t *\n\t * @param {string} name - The output name to get the texture for.\n\t * @return {Texture} The texture.\n\t */\n\tgetTexture( name ) {\n\n\t\tlet texture = this._textures[ name ];\n\n\t\tif ( texture === undefined ) {\n\n\t\t\tconst refTexture = this.renderTarget.texture;\n\n\t\t\ttexture = refTexture.clone();\n\t\t\ttexture.name = name;\n\n\t\t\tthis._textures[ name ] = texture;\n\n\t\t\tthis.renderTarget.textures.push( texture );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * Returns the texture holding the data of the previous frame for the given output name.\n\t *\n\t * @param {string} name - The output name to get the texture for.\n\t * @return {Texture} The texture holding the data of the previous frame.\n\t */\n\tgetPreviousTexture( name ) {\n\n\t\tlet texture = this._previousTextures[ name ];\n\n\t\tif ( texture === undefined ) {\n\n\t\t\ttexture = this.getTexture( name ).clone();\n\n\t\t\tthis._previousTextures[ name ] = texture;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * Switches current and previous textures for the given output name.\n\t *\n\t * @param {string} name - The output name.\n\t */\n\ttoggleTexture( name ) {\n\n\t\tconst prevTexture = this._previousTextures[ name ];\n\n\t\tif ( prevTexture !== undefined ) {\n\n\t\t\tconst texture = this._textures[ name ];\n\n\t\t\tconst index = this.renderTarget.textures.indexOf( texture );\n\t\t\tthis.renderTarget.textures[ index ] = prevTexture;\n\n\t\t\tthis._textures[ name ] = prevTexture;\n\t\t\tthis._previousTextures[ name ] = texture;\n\n\t\t\tthis._textureNodes[ name ].updateTexture();\n\t\t\tthis._previousTextureNodes[ name ].updateTexture();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the texture node for the given output name.\n\t *\n\t * @param {string} [name='output'] - The output name to get the texture node for.\n\t * @return {TextureNode} The texture node.\n\t */\n\tgetTextureNode( name = 'output' ) {\n\n\t\tlet textureNode = this._textureNodes[ name ];\n\n\t\tif ( textureNode === undefined ) {\n\n\t\t\ttextureNode = nodeObject( new PassMultipleTextureNode( this, name ) );\n\t\t\ttextureNode.updateTexture();\n\t\t\tthis._textureNodes[ name ] = textureNode;\n\n\t\t}\n\n\t\treturn textureNode;\n\n\t}\n\n\t/**\n\t * Returns the previous texture node for the given output name.\n\t *\n\t * @param {string} [name='output'] - The output name to get the previous texture node for.\n\t * @return {TextureNode} The previous texture node.\n\t */\n\tgetPreviousTextureNode( name = 'output' ) {\n\n\t\tlet textureNode = this._previousTextureNodes[ name ];\n\n\t\tif ( textureNode === undefined ) {\n\n\t\t\tif ( this._textureNodes[ name ] === undefined ) this.getTextureNode( name );\n\n\t\t\ttextureNode = nodeObject( new PassMultipleTextureNode( this, name, true ) );\n\t\t\ttextureNode.updateTexture();\n\t\t\tthis._previousTextureNodes[ name ] = textureNode;\n\n\t\t}\n\n\t\treturn textureNode;\n\n\t}\n\n\t/**\n\t * Returns a viewZ node of this pass.\n\t *\n\t * @param {string} [name='depth'] - The output name to get the viewZ node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.\n\t * @return {Node} The viewZ node.\n\t */\n\tgetViewZNode( name = 'depth' ) {\n\n\t\tlet viewZNode = this._viewZNodes[ name ];\n\n\t\tif ( viewZNode === undefined ) {\n\n\t\t\tconst cameraNear = this._cameraNear;\n\t\t\tconst cameraFar = this._cameraFar;\n\n\t\t\tthis._viewZNodes[ name ] = viewZNode = perspectiveDepthToViewZ( this.getTextureNode( name ), cameraNear, cameraFar );\n\n\t\t}\n\n\t\treturn viewZNode;\n\n\t}\n\n\t/**\n\t * Returns a linear depth node of this pass.\n\t *\n\t * @param {string} [name='depth'] - The output name to get the linear depth node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.\n\t * @return {Node} The linear depth node.\n\t */\n\tgetLinearDepthNode( name = 'depth' ) {\n\n\t\tlet linearDepthNode = this._linearDepthNodes[ name ];\n\n\t\tif ( linearDepthNode === undefined ) {\n\n\t\t\tconst cameraNear = this._cameraNear;\n\t\t\tconst cameraFar = this._cameraFar;\n\t\t\tconst viewZNode = this.getViewZNode( name );\n\n\t\t\t// TODO: just if ( builder.camera.isPerspectiveCamera )\n\n\t\t\tthis._linearDepthNodes[ name ] = linearDepthNode = viewZToOrthographicDepth( viewZNode, cameraNear, cameraFar );\n\n\t\t}\n\n\t\treturn linearDepthNode;\n\n\t}\n\n\tsetup( { renderer } ) {\n\n\t\tthis.renderTarget.samples = this.options.samples === undefined ? renderer.samples : this.options.samples;\n\n\t\t// TODO: Disable MSAA for WebGL backend for now\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\n\n\t\t\tthis.renderTarget.samples = 0;\n\n\t\t}\n\n\t\tthis.renderTarget.texture.type = renderer.getColorBufferType();\n\n\t\treturn this.scope === PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\t\tconst { scene } = this;\n\n\t\tlet camera;\n\t\tlet pixelRatio;\n\n\t\tconst outputRenderTarget = renderer.getOutputRenderTarget();\n\n\t\tif ( outputRenderTarget && outputRenderTarget.isXRRenderTarget === true ) {\n\n\t\t\tpixelRatio = 1;\n\t\t\tcamera = renderer.xr.getCamera();\n\n\t\t\trenderer.xr.updateCamera( camera );\n\n\t\t\t_size.set( outputRenderTarget.width, outputRenderTarget.height );\n\n\t\t} else {\n\n\t\t\tcamera = this.camera;\n\t\t\tpixelRatio = renderer.getPixelRatio();\n\n\t\t\trenderer.getSize( _size );\n\n\t\t}\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( _size.width, _size.height );\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentMRT = renderer.getMRT();\n\t\tconst currentMask = camera.layers.mask;\n\n\t\tthis._cameraNear.value = camera.near;\n\t\tthis._cameraFar.value = camera.far;\n\n\t\tif ( this._layers !== null ) {\n\n\t\t\tcamera.layers.mask = this._layers.mask;\n\n\t\t}\n\n\t\tfor ( const name in this._previousTextures ) {\n\n\t\t\tthis.toggleTexture( name );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderTarget );\n\t\trenderer.setMRT( this._mrt );\n\n\t\trenderer.render( scene, camera );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\trenderer.setMRT( currentMRT );\n\n\t\tcamera.layers.mask = currentMask;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass's render target. Honors the pixel ratio.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio * this._resolution;\n\t\tconst effectiveHeight = this._height * this._pixelRatio * this._resolution;\n\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\n\n\t}\n\n\t/**\n\t * Sets the pixel ratio the pass's render target and updates the size.\n\t *\n\t * @param {number} pixelRatio - The pixel ratio to set.\n\t */\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\t/**\n\t * Frees internal resources. Should be called when the node is no longer in use.\n\t */\n\tdispose() {\n\n\t\tthis.renderTarget.dispose();\n\n\t}\n\n\n}\n\n/**\n * @static\n * @type {'color'}\n * @default 'color'\n */\nPassNode.COLOR = 'color';\n\n/**\n * @static\n * @type {'depth'}\n * @default 'depth'\n */\nPassNode.DEPTH = 'depth';\n\n/**\n * TSL function for creating a pass node.\n *\n * @tsl\n * @function\n * @param {Scene} scene - A reference to the scene.\n * @param {Camera} camera - A reference to the camera.\n * @param {Object} options - Options for the internal render target.\n * @returns {PassNode}\n */\nconst pass = ( scene, camera, options ) => nodeObject( new PassNode( PassNode.COLOR, scene, camera, options ) );\n\n/**\n * TSL function for creating a pass texture node.\n *\n * @tsl\n * @function\n * @param {PassNode} pass - The pass node.\n * @param {Texture} texture - The output texture.\n * @returns {PassTextureNode}\n */\nconst passTexture = ( pass, texture ) => nodeObject( new PassTextureNode( pass, texture ) );\n\n/**\n * TSL function for creating a depth pass node.\n *\n * @tsl\n * @function\n * @param {Scene} scene - A reference to the scene.\n * @param {Camera} camera - A reference to the camera.\n * @param {Object} options - Options for the internal render target.\n * @returns {PassNode}\n */\nconst depthPass = ( scene, camera, options ) => nodeObject( new PassNode( PassNode.DEPTH, scene, camera, options ) );\n\n/**\n * Represents a render pass for producing a toon outline effect on compatible objects.\n * Only 3D objects with materials of type `MeshToonMaterial` and `MeshToonNodeMaterial`\n * will receive the outline.\n *\n * ```js\n * const postProcessing = new PostProcessing( renderer );\n *\n * const scenePass = toonOutlinePass( scene, camera );\n *\n * postProcessing.outputNode = scenePass;\n * ```\n * @augments PassNode\n */\nclass ToonOutlinePassNode extends PassNode {\n\n\tstatic get type() {\n\n\t\treturn 'ToonOutlinePassNode';\n\n\t}\n\n\t/**\n\t * Constructs a new outline pass node.\n\t *\n\t * @param {Scene} scene - A reference to the scene.\n\t * @param {Camera} camera - A reference to the camera.\n\t * @param {Node} colorNode - Defines the outline's color.\n\t * @param {Node} thicknessNode - Defines the outline's thickness.\n\t * @param {Node} alphaNode - Defines the outline's alpha.\n\t */\n\tconstructor( scene, camera, colorNode, thicknessNode, alphaNode ) {\n\n\t\tsuper( PassNode.COLOR, scene, camera );\n\n\t\t/**\n\t\t * Defines the outline's color.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.colorNode = colorNode;\n\n\t\t/**\n\t\t * Defines the outline's thickness.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.thicknessNode = thicknessNode;\n\n\t\t/**\n\t\t * Defines the outline's alpha.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.alphaNode = alphaNode;\n\n\t\t/**\n\t\t * An internal material cache.\n\t\t *\n\t\t * @private\n\t\t * @type {WeakMap<Material, NodeMaterial>}\n\t\t */\n\t\tthis._materialCache = new WeakMap();\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\n\n\t\trenderer.setRenderObjectFunction( ( object, scene, camera, geometry, material, group, lightsNode, clippingContext ) => {\n\n\t\t\t// only render outline for supported materials\n\n\t\t\tif ( material.isMeshToonMaterial || material.isMeshToonNodeMaterial ) {\n\n\t\t\t\tif ( material.wireframe === false ) {\n\n\t\t\t\t\tconst outlineMaterial = this._getOutlineMaterial( material );\n\t\t\t\t\trenderer.renderObject( object, scene, camera, geometry, outlineMaterial, group, lightsNode, clippingContext );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// default\n\n\t\t\trenderer.renderObject( object, scene, camera, geometry, material, group, lightsNode, clippingContext );\n\n\t\t} );\n\n\t\tsuper.updateBefore( frame );\n\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\n\n\t}\n\n\t/**\n\t * Creates the material used for outline rendering.\n\t *\n\t * @private\n\t * @return {NodeMaterial} The outline material.\n\t */\n\t_createMaterial() {\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.isMeshToonOutlineMaterial = true;\n\t\tmaterial.name = 'Toon_Outline';\n\t\tmaterial.side = BackSide;\n\n\t\t// vertex node\n\n\t\tconst outlineNormal = normalLocal.negate();\n\t\tconst mvp = cameraProjectionMatrix.mul( modelViewMatrix );\n\n\t\tconst ratio = float( 1.0 ); // TODO: support outline thickness ratio for each vertex\n\t\tconst pos = mvp.mul( vec4( positionLocal, 1.0 ) );\n\t\tconst pos2 = mvp.mul( vec4( positionLocal.add( outlineNormal ), 1.0 ) );\n\t\tconst norm = normalize( pos.sub( pos2 ) ); // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n\n\t\tmaterial.vertexNode = pos.add( norm.mul( this.thicknessNode ).mul( pos.w ).mul( ratio ) );\n\n\t\t// color node\n\n\t\tmaterial.colorNode = vec4( this.colorNode, this.alphaNode );\n\n\t\treturn material;\n\n\t}\n\n\t/**\n\t * For the given toon material, this method returns a corresponding\n\t * outline material.\n\t *\n\t * @private\n\t * @param {(MeshToonMaterial|MeshToonNodeMaterial)} originalMaterial - The toon material.\n\t * @return {NodeMaterial} The outline material.\n\t */\n\t_getOutlineMaterial( originalMaterial ) {\n\n\t\tlet outlineMaterial = this._materialCache.get( originalMaterial );\n\n\t\tif ( outlineMaterial === undefined ) {\n\n\t\t\toutlineMaterial = this._createMaterial();\n\n\t\t\tthis._materialCache.set( originalMaterial, outlineMaterial );\n\n\t\t}\n\n\t\treturn outlineMaterial;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a toon outline pass node.\n *\n * @tsl\n * @function\n * @param {Scene} scene - A reference to the scene.\n * @param {Camera} camera - A reference to the camera.\n * @param {Color} color - Defines the outline's color.\n * @param {number} [thickness=0.003] - Defines the outline's thickness.\n * @param {number} [alpha=1] - Defines the outline's alpha.\n * @returns {ToonOutlinePassNode}\n */\nconst toonOutlinePass = ( scene, camera, color = new Color( 0, 0, 0 ), thickness = 0.003, alpha = 1 ) => nodeObject( new ToonOutlinePassNode( scene, camera, nodeObject( color ), nodeObject( thickness ), nodeObject( alpha ) ) );\n\n/**\n * Linear tone mapping, exposure only.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nconst linearToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\treturn color.mul( exposure ).clamp();\n\n} ).setLayout( {\n\tname: 'linearToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n/**\n * Reinhard tone mapping.\n *\n * Reference: {@link https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nconst reinhardToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tcolor = color.mul( exposure );\n\n\treturn color.div( color.add( 1.0 ) ).clamp();\n\n} ).setLayout( {\n\tname: 'reinhardToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n/**\n * Cineon tone mapping.\n *\n * Reference: {@link http://filmicworlds.com/blog/filmic-tonemapping-operators/}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nconst cineonToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\t// filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor = color.mul( exposure );\n\tcolor = color.sub( 0.004 ).max( 0.0 );\n\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\n\n\treturn a.div( b ).pow( 2.2 );\n\n} ).setLayout( {\n\tname: 'cineonToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\n\nconst RRTAndODTFit = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\n\n\treturn a.div( b );\n\n} );\n\n/**\n * ACESFilmic tone mapping.\n *\n * Reference: {@link https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nconst acesFilmicToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst ACESInputMat = mat3(\n\t\t0.59719, 0.35458, 0.04823,\n\t\t0.07600, 0.90834, 0.01566,\n\t\t0.02840, 0.13383, 0.83777\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst ACESOutputMat = mat3(\n\t\t1.60475, -0.53108, -0.07367,\n\t\t-0.10208, 1.10813, -605e-5,\n\t\t-327e-5, -0.07276, 1.07602\n\t);\n\n\tcolor = color.mul( exposure ).div( 0.6 );\n\n\tcolor = ACESInputMat.mul( color );\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat.mul( color );\n\n\t// Clamp to [0, 1]\n\treturn color.clamp();\n\n} ).setLayout( {\n\tname: 'acesFilmicToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\nconst LINEAR_REC2020_TO_LINEAR_SRGB = /*@__PURE__*/ mat3( vec3( 1.6605, -0.1246, -0.0182 ), vec3( -0.5876, 1.1329, -0.1006 ), vec3( -0.0728, -83e-4, 1.1187 ) );\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = /*@__PURE__*/ mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );\n\nconst agxDefaultContrastApprox = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = vec3( x_immutable ).toVar();\n\tconst x2 = vec3( x.mul( x ) ).toVar();\n\tconst x4 = vec3( x2.mul( x2 ) ).toVar();\n\n\treturn float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );\n\n} );\n\n/**\n * AgX tone mapping.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nconst agxToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tconst colortone = vec3( color ).toVar();\n\tconst AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );\n\tconst AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, -0.1413297634984383, -0.14132976349843826 ), vec3( -0.11060664309660323, 1.157823702216272, -0.11060664309660294 ), vec3( -0.016493938717834573, -0.016493938717834257, 1.2519364065950405 ) );\n\tconst AgxMinEv = float( -12.47393 );\n\tconst AgxMaxEv = float( 4.026069 );\n\tcolortone.mulAssign( exposure );\n\tcolortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );\n\tcolortone.assign( AgXInsetMatrix.mul( colortone ) );\n\tcolortone.assign( max$1( colortone, 1e-10 ) );\n\tcolortone.assign( log2( colortone ) );\n\tcolortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\tcolortone.assign( agxDefaultContrastApprox( colortone ) );\n\tcolortone.assign( AgXOutsetMatrix.mul( colortone ) );\n\tcolortone.assign( pow( max$1( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );\n\tcolortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\n\treturn colortone;\n\n} ).setLayout( {\n\tname: 'agxToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n/**\n * Neutral tone mapping.\n *\n * Reference: {@link https://modelviewer.dev/examples/tone-mapping}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nconst neutralToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tconst StartCompression = float( 0.8 - 0.04 );\n\tconst Desaturation = float( 0.15 );\n\n\tcolor = color.mul( exposure );\n\n\tconst x = min$1( color.r, min$1( color.g, color.b ) );\n\tconst offset = select( x.lessThan( 0.08 ), x.sub( mul( 6.25, x.mul( x ) ) ), 0.04 );\n\n\tcolor.subAssign( offset );\n\n\tconst peak = max$1( color.r, max$1( color.g, color.b ) );\n\n\tIf( peak.lessThan( StartCompression ), () => {\n\n\t\treturn color;\n\n\t} );\n\n\tconst d = sub( 1, StartCompression );\n\tconst newPeak = sub( 1, d.mul( d ).div( peak.add( d.sub( StartCompression ) ) ) );\n\tcolor.mulAssign( newPeak.div( peak ) );\n\tconst g = sub( 1, div( 1, Desaturation.mul( peak.sub( newPeak ) ).add( 1 ) ) );\n\n\treturn mix( color, vec3( newPeak ), g );\n\n} ).setLayout( {\n\tname: 'neutralToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n/**\n * This class represents native code sections. It is the base\n * class for modules like {@link FunctionNode} which allows to implement\n * functions with native shader languages.\n *\n * @augments Node\n */\nclass CodeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'CodeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new code node.\n\t *\n\t * @param {string} [code=''] - The native code.\n\t * @param {Array<Node>} [includes=[]] - An array of includes.\n\t * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.\n\t */\n\tconstructor( code = '', includes = [], language = '' ) {\n\n\t\tsuper( 'code' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCodeNode = true;\n\n\t\t/**\n\t\t * The native code.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.code = code;\n\n\t\t/**\n\t\t * An array of includes\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t * @default []\n\t\t */\n\t\tthis.includes = includes;\n\n\t\t/**\n\t\t * The used language.\n\t\t *\n\t\t * @type {('js'|'wgsl'|'glsl')}\n\t\t * @default ''\n\t\t */\n\t\tthis.language = language;\n\n\t}\n\n\t/**\n\t * The method is overwritten so it always returns `true`.\n\t *\n\t * @return {boolean} Whether this node is global or not.\n\t */\n\tisGlobal() {\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the includes of this code node.\n\t *\n\t * @param {Array<Node>} includes - The includes to set.\n\t * @return {CodeNode} A reference to this node.\n\t */\n\tsetIncludes( includes ) {\n\n\t\tthis.includes = includes;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the includes of this code node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Array<Node>} The includes.\n\t */\n\tgetIncludes( /*builder*/ ) {\n\n\t\treturn this.includes;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst includes = this.getIncludes( builder );\n\n\t\tfor ( const include of includes ) {\n\n\t\t\tinclude.build( builder );\n\n\t\t}\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );\n\t\tnodeCode.code = this.code;\n\n\t\treturn nodeCode.code;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.code = this.code;\n\t\tdata.language = this.language;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.code = data.code;\n\t\tthis.language = data.language;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a code node.\n *\n * @tsl\n * @function\n * @param {string} [code] - The native code.\n * @param {?Array<Node>} [includes=[]] - An array of includes.\n * @param {?('js'|'wgsl'|'glsl')} [language=''] - The used language.\n * @returns {CodeNode}\n */\nconst code = /*@__PURE__*/ nodeProxy( CodeNode ).setParameterLength( 1, 3 );\n\n/**\n * TSL function for creating a JS code node.\n *\n * @tsl\n * @function\n * @param {string} src - The native code.\n * @param {Array<Node>} includes - An array of includes.\n * @returns {CodeNode}\n */\nconst js = ( src, includes ) => code( src, includes, 'js' );\n\n/**\n * TSL function for creating a WGSL code node.\n *\n * @tsl\n * @function\n * @param {string} src - The native code.\n * @param {Array<Node>} includes - An array of includes.\n * @returns {CodeNode}\n */\nconst wgsl = ( src, includes ) => code( src, includes, 'wgsl' );\n\n/**\n * TSL function for creating a GLSL code node.\n *\n * @tsl\n * @function\n * @param {string} src - The native code.\n * @param {Array<Node>} includes - An array of includes.\n * @returns {CodeNode}\n */\nconst glsl = ( src, includes ) => code( src, includes, 'glsl' );\n\n/**\n * This class represents a native shader function. It can be used to implement\n * certain aspects of a node material with native shader code. There are two predefined\n * TSL functions for easier usage.\n *\n * - `wgslFn`: Creates a WGSL function node.\n * - `glslFn`: Creates a GLSL function node.\n *\n * A basic example with one include looks like so:\n *\n * ```js\n * const desaturateWGSLFn = wgslFn( `\n *\tfn desaturate( color:vec3<f32> ) -> vec3<f32> {\n *\t\tlet lum = vec3<f32>( 0.299, 0.587, 0.114 );\n *\t\treturn vec3<f32>( dot( lum, color ) );\n *\t}`\n *);\n * const someWGSLFn = wgslFn( `\n *\tfn someFn( color:vec3<f32> ) -> vec3<f32> {\n * \t\treturn desaturate( color );\n * \t}\n * `, [ desaturateWGSLFn ] );\n * material.colorNode = someWGSLFn( { color: texture( map ) } );\n *```\n * @augments CodeNode\n */\nclass FunctionNode extends CodeNode {\n\n\tstatic get type() {\n\n\t\treturn 'FunctionNode';\n\n\t}\n\n\t/**\n\t * Constructs a new function node.\n\t *\n\t * @param {string} [code=''] - The native code.\n\t * @param {Array<Node>} [includes=[]] - An array of includes.\n\t * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.\n\t */\n\tconstructor( code = '', includes = [], language = '' ) {\n\n\t\tsuper( code, includes, language );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).type;\n\n\t}\n\n\t/**\n\t * Returns the inputs of this function node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Array<NodeFunctionInput>} The inputs.\n\t */\n\tgetInputs( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).inputs;\n\n\t}\n\n\t/**\n\t * Returns the node function for this function node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {NodeFunction} The node function.\n\t */\n\tgetNodeFunction( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\tlet nodeFunction = nodeData.nodeFunction;\n\n\t\tif ( nodeFunction === undefined ) {\n\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\n\n\t\t\tnodeData.nodeFunction = nodeFunction;\n\n\t\t}\n\n\t\treturn nodeFunction;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tsuper.generate( builder );\n\n\t\tconst nodeFunction = this.getNodeFunction( builder );\n\n\t\tconst name = nodeFunction.name;\n\t\tconst type = nodeFunction.type;\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\n\n\t\tif ( name !== '' ) {\n\n\t\t\t// use a custom property name\n\n\t\t\tnodeCode.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\n\n\t\tconst code = this.getNodeFunction( builder ).getCode( propertyName );\n\n\t\tnodeCode.code = code + '\\n';\n\n\t\tif ( output === 'property' ) {\n\n\t\t\treturn propertyName;\n\n\t\t} else {\n\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\n\n\t\t}\n\n\t}\n\n}\n\nconst nativeFn = ( code, includes = [], language = '' ) => {\n\n\tfor ( let i = 0; i < includes.length; i ++ ) {\n\n\t\tconst include = includes[ i ];\n\n\t\t// TSL Function: glslFn, wgslFn\n\n\t\tif ( typeof include === 'function' ) {\n\n\t\t\tincludes[ i ] = include.functionNode;\n\n\t\t}\n\n\t}\n\n\tconst functionNode = nodeObject( new FunctionNode( code, includes, language ) );\n\n\tconst fn = ( ...params ) => functionNode.call( ...params );\n\tfn.functionNode = functionNode;\n\n\treturn fn;\n\n};\n\nconst glslFn = ( code, includes ) => nativeFn( code, includes, 'glsl' );\nconst wgslFn = ( code, includes ) => nativeFn( code, includes, 'wgsl' );\n\n/**\n * `ScriptableNode` uses this class to manage script inputs and outputs.\n *\n * @augments Node\n */\nclass ScriptableValueNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ScriptableValueNode';\n\n\t}\n\n\t/**\n\t * Constructs a new scriptable node.\n\t *\n\t * @param {any} [value=null] - The value.\n\t */\n\tconstructor( value = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * A reference to the value.\n\t\t *\n\t\t * @private\n\t\t * @default null\n\t\t */\n\t\tthis._value = value;\n\n\t\t/**\n\t\t * Depending on the type of `_value`, this property might cache parsed data.\n\t\t *\n\t\t * @private\n\t\t * @default null\n\t\t */\n\t\tthis._cache = null;\n\n\t\t/**\n\t\t * If this node represents an input, this property represents the input type.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.inputType = null;\n\n\t\t/**\n\t\t * If this node represents an output, this property represents the output type.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.outputType = null;\n\n\t\t/**\n\t\t * An event dispatcher for managing events.\n\t\t *\n\t\t * @type {EventDispatcher}\n\t\t */\n\t\tthis.events = new EventDispatcher();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isScriptableValueNode = true;\n\n\t}\n\n\t/**\n\t * Whether this node represents an output or not.\n\t *\n\t * @type {boolean}\n\t * @readonly\n\t * @default true\n\t */\n\tget isScriptableOutputNode() {\n\n\t\treturn this.outputType !== null;\n\n\t}\n\n\tset value( val ) {\n\n\t\tif ( this._value === val ) return;\n\n\t\tif ( this._cache && this.inputType === 'URL' && this.value.value instanceof ArrayBuffer ) {\n\n\t\t\tURL.revokeObjectURL( this._cache );\n\n\t\t\tthis._cache = null;\n\n\t\t}\n\n\t\tthis._value = val;\n\n\t\tthis.events.dispatchEvent( { type: 'change' } );\n\n\t\tthis.refresh();\n\n\t}\n\n\t/**\n\t * The node's value.\n\t *\n\t * @type {any}\n\t */\n\tget value() {\n\n\t\treturn this._value;\n\n\t}\n\n\t/**\n\t * Dispatches the `refresh` event.\n\t */\n\trefresh() {\n\n\t\tthis.events.dispatchEvent( { type: 'refresh' } );\n\n\t}\n\n\t/**\n\t * The `value` property usually represents a node or even binary data in form of array buffers.\n\t * In this case, this method tries to return the actual value behind the complex type.\n\t *\n\t * @return {any} The value.\n\t */\n\tgetValue() {\n\n\t\tconst value = this.value;\n\n\t\tif ( value && this._cache === null && this.inputType === 'URL' && value.value instanceof ArrayBuffer ) {\n\n\t\t\tthis._cache = URL.createObjectURL( new Blob( [ value.value ] ) );\n\n\t\t} else if ( value && value.value !== null && value.value !== undefined && (\n\t\t\t( ( this.inputType === 'URL' || this.inputType === 'String' ) && typeof value.value === 'string' ) ||\n\t\t\t( this.inputType === 'Number' && typeof value.value === 'number' ) ||\n\t\t\t( this.inputType === 'Vector2' && value.value.isVector2 ) ||\n\t\t\t( this.inputType === 'Vector3' && value.value.isVector3 ) ||\n\t\t\t( this.inputType === 'Vector4' && value.value.isVector4 ) ||\n\t\t\t( this.inputType === 'Color' && value.value.isColor ) ||\n\t\t\t( this.inputType === 'Matrix3' && value.value.isMatrix3 ) ||\n\t\t\t( this.inputType === 'Matrix4' && value.value.isMatrix4 )\n\t\t) ) {\n\n\t\t\treturn value.value;\n\n\t\t}\n\n\t\treturn this._cache || value;\n\n\t}\n\n\t/**\n\t * Overwritten since the node type is inferred from the value.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.value && this.value.isNode ? this.value.getNodeType( builder ) : 'float';\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.value && this.value.isNode ? this.value : float();\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tif ( this.value !== null ) {\n\n\t\t\tif ( this.inputType === 'ArrayBuffer' ) {\n\n\t\t\t\tdata.value = arrayBufferToBase64( this.value );\n\n\t\t\t} else {\n\n\t\t\t\tdata.value = this.value ? this.value.toJSON( data.meta ).uuid : null;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.value = null;\n\n\t\t}\n\n\t\tdata.inputType = this.inputType;\n\t\tdata.outputType = this.outputType;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tlet value = null;\n\n\t\tif ( data.value !== null ) {\n\n\t\t\tif ( data.inputType === 'ArrayBuffer' ) {\n\n\t\t\t\tvalue = base64ToArrayBuffer( data.value );\n\n\t\t\t} else if ( data.inputType === 'Texture' ) {\n\n\t\t\t\tvalue = data.meta.textures[ data.value ];\n\n\t\t\t} else {\n\n\t\t\t\tvalue = data.meta.nodes[ data.value ] || null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t\tthis.inputType = data.inputType;\n\t\tthis.outputType = data.outputType;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a scriptable value node.\n *\n * @tsl\n * @function\n * @param {any} [value] - The value.\n * @returns {ScriptableValueNode}\n */\nconst scriptableValue = /*@__PURE__*/ nodeProxy( ScriptableValueNode ).setParameterLength( 1 );\n\n/**\n * A Map-like data structure for managing resources of scriptable nodes.\n *\n * @augments Map\n */\nclass Resources extends Map {\n\n\tget( key, callback = null, ...params ) {\n\n\t\tif ( this.has( key ) ) return super.get( key );\n\n\t\tif ( callback !== null ) {\n\n\t\t\tconst value = callback( ...params );\n\t\t\tthis.set( key, value );\n\t\t\treturn value;\n\n\t\t}\n\n\t}\n\n}\n\nclass Parameters {\n\n\tconstructor( scriptableNode ) {\n\n\t\tthis.scriptableNode = scriptableNode;\n\n\t}\n\n\tget parameters() {\n\n\t\treturn this.scriptableNode.parameters;\n\n\t}\n\n\tget layout() {\n\n\t\treturn this.scriptableNode.getLayout();\n\n\t}\n\n\tgetInputLayout( id ) {\n\n\t\treturn this.scriptableNode.getInputLayout( id );\n\n\t}\n\n\tget( name ) {\n\n\t\tconst param = this.parameters[ name ];\n\t\tconst value = param ? param.getValue() : null;\n\n\t\treturn value;\n\n\t}\n\n}\n\n/**\n * Defines the resources (e.g. namespaces) of scriptable nodes.\n *\n * @type {Resources}\n */\nconst ScriptableNodeResources = new Resources();\n\n/**\n * This type of node allows to implement nodes with custom scripts. The script\n * section is represented as an instance of `CodeNode` written with JavaScript.\n * The script itself must adhere to a specific structure.\n *\n * - main(): Executed once by default and every time `node.needsUpdate` is set.\n * - layout: The layout object defines the script's interface (inputs and outputs).\n *\n * ```js\n * ScriptableNodeResources.set( 'TSL', TSL );\n *\n * const scriptableNode = scriptable( js( `\n * \tlayout = {\n * \t\toutputType: 'node',\n * \t\telements: [\n * \t\t\t{ name: 'source', inputType: 'node' },\n * \t\t]\n * \t};\n *\n * \tconst { mul, oscSine } = TSL;\n *\n * \tfunction main() {\n * \t\tconst source = parameters.get( 'source' ) || float();\n * \t\treturn mul( source, oscSine() ) );\n * \t}\n *\n * ` ) );\n *\n * scriptableNode.setParameter( 'source', color( 1, 0, 0 ) );\n *\n * const material = new THREE.MeshBasicNodeMaterial();\n * material.colorNode = scriptableNode;\n * ```\n *\n * @augments Node\n */\nclass ScriptableNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ScriptableNode';\n\n\t}\n\n\t/**\n\t * Constructs a new scriptable node.\n\t *\n\t * @param {?CodeNode} [codeNode=null] - The code node.\n\t * @param {Object} [parameters={}] - The parameters definition.\n\t */\n\tconstructor( codeNode = null, parameters = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The code node.\n\t\t *\n\t\t * @type {?CodeNode}\n\t\t * @default null\n\t\t */\n\t\tthis.codeNode = codeNode;\n\n\t\t/**\n\t\t * The parameters definition.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {}\n\t\t */\n\t\tthis.parameters = parameters;\n\n\t\tthis._local = new Resources();\n\t\tthis._output = scriptableValue( null );\n\t\tthis._outputs = {};\n\t\tthis._source = this.source;\n\t\tthis._method = null;\n\t\tthis._object = null;\n\t\tthis._value = null;\n\t\tthis._needsOutputUpdate = true;\n\n\t\tthis.onRefresh = this.onRefresh.bind( this );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isScriptableNode = true;\n\n\t}\n\n\t/**\n\t * The source code of the scriptable node.\n\t *\n\t * @type {string}\n\t */\n\tget source() {\n\n\t\treturn this.codeNode ? this.codeNode.code : '';\n\n\t}\n\n\t/**\n\t * Sets the reference of a local script variable.\n\t *\n\t * @param {string} name - The variable name.\n\t * @param {Object} value - The reference to set.\n\t * @return {Resources} The resource map\n\t */\n\tsetLocal( name, value ) {\n\n\t\treturn this._local.set( name, value );\n\n\t}\n\n\t/**\n\t * Gets the value of a local script variable.\n\t *\n\t * @param {string} name - The variable name.\n\t * @return {Object} The value.\n\t */\n\tgetLocal( name ) {\n\n\t\treturn this._local.get( name );\n\n\t}\n\n\t/**\n\t * Event listener for the `refresh` event.\n\t */\n\tonRefresh() {\n\n\t\tthis._refresh();\n\n\t}\n\n\t/**\n\t * Returns an input from the layout with the given id/name.\n\t *\n\t * @param {string} id - The id/name of the input.\n\t * @return {Object} The element entry.\n\t */\n\tgetInputLayout( id ) {\n\n\t\tfor ( const element of this.getLayout() ) {\n\n\t\t\tif ( element.inputType && ( element.id === id || element.name === id ) ) {\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns an output from the layout with the given id/name.\n\t *\n\t * @param {string} id - The id/name of the output.\n\t * @return {Object} The element entry.\n\t */\n\tgetOutputLayout( id ) {\n\n\t\tfor ( const element of this.getLayout() ) {\n\n\t\t\tif ( element.outputType && ( element.id === id || element.name === id ) ) {\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Defines a script output for the given name and value.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @param {Node} value - The node value.\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tsetOutput( name, value ) {\n\n\t\tconst outputs = this._outputs;\n\n\t\tif ( outputs[ name ] === undefined ) {\n\n\t\t\toutputs[ name ] = scriptableValue( value );\n\n\t\t} else {\n\n\t\t\toutputs[ name ].value = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a script output for the given name.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @return {ScriptableValueNode} The node value.\n\t */\n\tgetOutput( name ) {\n\n\t\treturn this._outputs[ name ];\n\n\t}\n\n\t/**\n\t * Returns a parameter for the given name\n\t *\n\t * @param {string} name - The name of the parameter.\n\t * @return {ScriptableValueNode} The node value.\n\t */\n\tgetParameter( name ) {\n\n\t\treturn this.parameters[ name ];\n\n\t}\n\n\t/**\n\t * Sets a value for the given parameter name.\n\t *\n\t * @param {string} name - The parameter name.\n\t * @param {any} value - The parameter value.\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tsetParameter( name, value ) {\n\n\t\tconst parameters = this.parameters;\n\n\t\tif ( value && value.isScriptableNode ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t\tparameters[ name ] = value;\n\t\t\tparameters[ name ].getDefaultOutput().events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else if ( value && value.isScriptableValueNode ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t\tparameters[ name ] = value;\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else if ( parameters[ name ] === undefined ) {\n\n\t\t\tparameters[ name ] = scriptableValue( value );\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else {\n\n\t\t\tparameters[ name ].value = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of this node which is the value of\n\t * the default output.\n\t *\n\t * @return {Node} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.getDefaultOutput().getValue();\n\n\t}\n\n\t/**\n\t * Deletes a parameter from the script.\n\t *\n\t * @param {string} name - The parameter to remove.\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tdeleteParameter( name ) {\n\n\t\tlet valueNode = this.parameters[ name ];\n\n\t\tif ( valueNode ) {\n\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\n\n\t\t\tvalueNode.events.removeEventListener( 'refresh', this.onRefresh );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes all parameters from the script.\n\t *\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tclearParameters() {\n\n\t\tfor ( const name of Object.keys( this.parameters ) ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t}\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calls a function from the script.\n\t *\n\t * @param {string} name - The function name.\n\t * @param {...any} params - A list of parameters.\n\t * @return {any} The result of the function call.\n\t */\n\tcall( name, ...params ) {\n\n\t\tconst object = this.getObject();\n\t\tconst method = object[ name ];\n\n\t\tif ( typeof method === 'function' ) {\n\n\t\t\treturn method( ...params );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Asynchronously calls a function from the script.\n\t *\n\t * @param {string} name - The function name.\n\t * @param {...any} params - A list of parameters.\n\t * @return {Promise<any>} The result of the function call.\n\t */\n\tasync callAsync( name, ...params ) {\n\n\t\tconst object = this.getObject();\n\t\tconst method = object[ name ];\n\n\t\tif ( typeof method === 'function' ) {\n\n\t\t\treturn method.constructor.name === 'AsyncFunction' ? await method( ...params ) : method( ...params );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Overwritten since the node types is inferred from the script's output.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.getDefaultOutputNode().getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Refreshes the script node.\n\t *\n\t * @param {?string} [output=null] - An optional output.\n\t */\n\trefresh( output = null ) {\n\n\t\tif ( output !== null ) {\n\n\t\t\tthis.getOutput( output ).refresh();\n\n\t\t} else {\n\n\t\t\tthis._refresh();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns an object representation of the script.\n\t *\n\t * @return {Object} The result object.\n\t */\n\tgetObject() {\n\n\t\tif ( this.needsUpdate ) this.dispose();\n\t\tif ( this._object !== null ) return this._object;\n\n\t\t//\n\n\t\tconst refresh = () => this.refresh();\n\t\tconst setOutput = ( id, value ) => this.setOutput( id, value );\n\n\t\tconst parameters = new Parameters( this );\n\n\t\tconst THREE = ScriptableNodeResources.get( 'THREE' );\n\t\tconst TSL = ScriptableNodeResources.get( 'TSL' );\n\n\t\tconst method = this.getMethod();\n\t\tconst params = [ parameters, this._local, ScriptableNodeResources, refresh, setOutput, THREE, TSL ];\n\n\t\tthis._object = method( ...params );\n\n\t\tconst layout = this._object.layout;\n\n\t\tif ( layout ) {\n\n\t\t\tif ( layout.cache === false ) {\n\n\t\t\t\tthis._local.clear();\n\n\t\t\t}\n\n\t\t\t// default output\n\t\t\tthis._output.outputType = layout.outputType || null;\n\n\t\t\tif ( Array.isArray( layout.elements ) ) {\n\n\t\t\t\tfor ( const element of layout.elements ) {\n\n\t\t\t\t\tconst id = element.id || element.name;\n\n\t\t\t\t\tif ( element.inputType ) {\n\n\t\t\t\t\t\tif ( this.getParameter( id ) === undefined ) this.setParameter( id, null );\n\n\t\t\t\t\t\tthis.getParameter( id ).inputType = element.inputType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( element.outputType ) {\n\n\t\t\t\t\t\tif ( this.getOutput( id ) === undefined ) this.setOutput( id, null );\n\n\t\t\t\t\t\tthis.getOutput( id ).outputType = element.outputType;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this._object;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tfor ( const name in this.parameters ) {\n\n\t\t\tlet valueNode = this.parameters[ name ];\n\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\n\n\t\t\tvalueNode.events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the layout of the script.\n\t *\n\t * @return {Object} The script's layout.\n\t */\n\tgetLayout() {\n\n\t\treturn this.getObject().layout;\n\n\t}\n\n\t/**\n\t * Returns default node output of the script.\n\t *\n\t * @return {Node} The default node output.\n\t */\n\tgetDefaultOutputNode() {\n\n\t\tconst output = this.getDefaultOutput().value;\n\n\t\tif ( output && output.isNode ) {\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\treturn float();\n\n\t}\n\n\t/**\n\t * Returns default output of the script.\n\t *\n\t * @return {ScriptableValueNode} The default output.\n\t */\n\tgetDefaultOutput()\t{\n\n\t\treturn this._exec()._output;\n\n\t}\n\n\t/**\n\t * Returns a function created from the node's script.\n\t *\n\t * @return {Function} The function representing the node's code.\n\t */\n\tgetMethod() {\n\n\t\tif ( this.needsUpdate ) this.dispose();\n\t\tif ( this._method !== null ) return this._method;\n\n\t\t//\n\n\t\tconst parametersProps = [ 'parameters', 'local', 'global', 'refresh', 'setOutput', 'THREE', 'TSL' ];\n\t\tconst interfaceProps = [ 'layout', 'init', 'main', 'dispose' ];\n\n\t\tconst properties = interfaceProps.join( ', ' );\n\t\tconst declarations = 'var ' + properties + '; var output = {};\\n';\n\t\tconst returns = '\\nreturn { ...output, ' + properties + ' };';\n\n\t\tconst code = declarations + this.codeNode.code + returns;\n\n\t\t//\n\n\t\tthis._method = new Function( ...parametersProps, code );\n\n\t\treturn this._method;\n\n\t}\n\n\t/**\n\t * Frees all internal resources.\n\t */\n\tdispose() {\n\n\t\tif ( this._method === null ) return;\n\n\t\tif ( this._object && typeof this._object.dispose === 'function' ) {\n\n\t\t\tthis._object.dispose();\n\n\t\t}\n\n\t\tthis._method = null;\n\t\tthis._object = null;\n\t\tthis._source = null;\n\t\tthis._value = null;\n\t\tthis._needsOutputUpdate = true;\n\t\tthis._output.value = null;\n\t\tthis._outputs = {};\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.getDefaultOutputNode();\n\n\t}\n\n\tgetCacheKey( force ) {\n\n\t\tconst values = [ hashString( this.source ), this.getDefaultOutputNode().getCacheKey( force ) ];\n\n\t\tfor ( const param in this.parameters ) {\n\n\t\t\tvalues.push( this.parameters[ param ].getCacheKey( force ) );\n\n\t\t}\n\n\t\treturn hashArray( values );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.dispose();\n\n\t}\n\n\tget needsUpdate() {\n\n\t\treturn this.source !== this._source;\n\n\t}\n\n\t/**\n\t * Executes the `main` function of the script.\n\t *\n\t * @private\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\t_exec()\t{\n\n\t\tif ( this.codeNode === null ) return this;\n\n\t\tif ( this._needsOutputUpdate === true ) {\n\n\t\t\tthis._value = this.call( 'main' );\n\n\t\t\tthis._needsOutputUpdate = false;\n\n\t\t}\n\n\t\tthis._output.value = this._value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Executes the refresh.\n\t *\n\t * @private\n\t */\n\t_refresh() {\n\n\t\tthis.needsUpdate = true;\n\n\t\tthis._exec();\n\n\t\tthis._output.refresh();\n\n\t}\n\n}\n\n/**\n * TSL function for creating a scriptable node.\n *\n * @tsl\n * @function\n * @param {CodeNode} [codeNode] - The code node.\n * @param {?Object} [parameters={}] - The parameters definition.\n * @returns {ScriptableNode}\n */\nconst scriptable = /*@__PURE__*/ nodeProxy( ScriptableNode ).setParameterLength( 1, 2 );\n\n/**\n * Returns a node that represents the `z` coordinate in view space\n * for the current fragment. It's a different representation of the\n * default depth value.\n *\n * This value can be part of a computation that defines how the fog\n * density increases when moving away from the camera.\n *\n * @param {NodeBuilder} builder - The current node builder.\n * @return {Node} The viewZ node.\n */\nfunction getViewZNode( builder ) {\n\n\tlet viewZ;\n\n\tconst getViewZ = builder.context.getViewZ;\n\n\tif ( getViewZ !== undefined ) {\n\n\t\tviewZ = getViewZ( this );\n\n\t}\n\n\treturn ( viewZ || positionView.z ).negate();\n\n}\n\n/**\n * Constructs a new range factor node.\n *\n * @tsl\n * @function\n * @param {Node} near - Defines the near value.\n * @param {Node} far - Defines the far value.\n */\nconst rangeFogFactor = Fn( ( [ near, far ], builder ) => {\n\n\tconst viewZ = getViewZNode( builder );\n\n\treturn smoothstep( near, far, viewZ );\n\n} );\n\n/**\n * Represents an exponential squared fog. This type of fog gives\n * a clear view near the camera and a faster than exponentially\n * densening fog farther from the camera.\n *\n * @tsl\n * @function\n * @param {Node} density - Defines the fog density.\n */\nconst densityFogFactor = Fn( ( [ density ], builder ) => {\n\n\tconst viewZ = getViewZNode( builder );\n\n\treturn density.mul( density, viewZ, viewZ ).negate().exp().oneMinus();\n\n} );\n\n/**\n * This class can be used to configure a fog for the scene.\n * Nodes of this type are assigned to `Scene.fogNode`.\n *\n * @tsl\n * @function\n * @param {Node} color - Defines the color of the fog.\n * @param {Node} factor - Defines how the fog is factored in the scene.\n */\nconst fog = Fn( ( [ color, factor ] ) => {\n\n\treturn vec4( factor.toFloat().mix( output.rgb, color.toVec3() ), output.a );\n\n} );\n\n// Deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use `fog( color, rangeFogFactor( near, far ) )` instead.\n *\n * @param {Node} color\n * @param {Node} near\n * @param {Node} far\n * @returns {Function}\n */\nfunction rangeFog( color, near, far ) { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"rangeFog( color, near, far )\" is deprecated. Use \"fog( color, rangeFogFactor( near, far ) )\" instead.' );\n\treturn fog( color, rangeFogFactor( near, far ) );\n\n}\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use `fog( color, densityFogFactor( density ) )` instead.\n *\n * @param {Node} color\n * @param {Node} density\n * @returns {Function}\n */\nfunction densityFog( color, density ) { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"densityFog( color, density )\" is deprecated. Use \"fog( color, densityFogFactor( density ) )\" instead.' );\n\treturn fog( color, densityFogFactor( density ) );\n\n}\n\nlet min = null;\nlet max = null;\n\n/**\n * `RangeNode` generates random instanced attribute data in a defined range.\n * An exemplary use case for this utility node is to generate random per-instance\n * colors:\n * ```js\n * const material = new MeshBasicNodeMaterial();\n * material.colorNode = range( new Color( 0x000000 ), new Color( 0xFFFFFF ) );\n * const mesh = new InstancedMesh( geometry, material, count );\n * ```\n * @augments Node\n */\nclass RangeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'RangeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new range node.\n\t *\n\t * @param {Node<any>} [minNode=float()] - A node defining the lower bound of the range.\n\t * @param {Node<any>} [maxNode=float()] - A node defining the upper bound of the range.\n\t */\n\tconstructor( minNode = float(), maxNode = float() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t *  A node defining the lower bound of the range.\n\t\t *\n\t\t * @type {Node<any>}\n\t\t * @default float()\n\t\t */\n\t\tthis.minNode = minNode;\n\n\t\t/**\n\t\t *  A node defining the upper bound of the range.\n\t\t *\n\t\t * @type {Node<any>}\n\t\t * @default float()\n\t\t */\n\t\tthis.maxNode = maxNode;\n\n\t}\n\n\t/**\n\t * Returns the vector length which is computed based on the range definition.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {number} The vector length.\n\t */\n\tgetVectorLength( builder ) {\n\n\t\tconst minLength = builder.getTypeLength( getValueType( this.minNode.value ) );\n\t\tconst maxLength = builder.getTypeLength( getValueType( this.maxNode.value ) );\n\n\t\treturn minLength > maxLength ? minLength : maxLength;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from range definition.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn builder.object.count > 1 ? builder.getTypeFromLength( this.getVectorLength( builder ) ) : 'float';\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst object = builder.object;\n\n\t\tlet output = null;\n\n\t\tif ( object.count > 1 ) {\n\n\t\t\tconst minValue = this.minNode.value;\n\t\t\tconst maxValue = this.maxNode.value;\n\n\t\t\tconst minLength = builder.getTypeLength( getValueType( minValue ) );\n\t\t\tconst maxLength = builder.getTypeLength( getValueType( maxValue ) );\n\n\t\t\tmin = min || new Vector4();\n\t\t\tmax = max || new Vector4();\n\n\t\t\tmin.setScalar( 0 );\n\t\t\tmax.setScalar( 0 );\n\n\t\t\tif ( minLength === 1 ) min.setScalar( minValue );\n\t\t\telse if ( minValue.isColor ) min.set( minValue.r, minValue.g, minValue.b, 1 );\n\t\t\telse min.set( minValue.x, minValue.y, minValue.z || 0, minValue.w || 0 );\n\n\t\t\tif ( maxLength === 1 ) max.setScalar( maxValue );\n\t\t\telse if ( maxValue.isColor ) max.set( maxValue.r, maxValue.g, maxValue.b, 1 );\n\t\t\telse max.set( maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0 );\n\n\t\t\tconst stride = 4;\n\n\t\t\tconst length = stride * object.count;\n\t\t\tconst array = new Float32Array( length );\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst index = i % stride;\n\n\t\t\t\tconst minElementValue = min.getComponent( index );\n\t\t\t\tconst maxElementValue = max.getComponent( index );\n\n\t\t\t\tarray[ i ] = MathUtils.lerp( minElementValue, maxElementValue, Math.random() );\n\n\t\t\t}\n\n\t\t\tconst nodeType = this.getNodeType( builder );\n\n\t\t\tif ( object.count <= 4096 ) {\n\n\t\t\t\toutput = buffer( array, 'vec4', object.count ).element( instanceIndex ).convert( nodeType );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: Improve anonymous buffer attribute creation removing this part\n\t\t\t\tconst bufferAttribute = new InstancedBufferAttribute( array, 4 );\n\t\t\t\tbuilder.geometry.setAttribute( '__range' + this.id, bufferAttribute );\n\n\t\t\t\toutput = instancedBufferAttribute( bufferAttribute ).convert( nodeType );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\toutput = float( 0 );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a range node.\n *\n * @tsl\n * @function\n * @param {Node<any>} [minNode=float()] - A node defining the lower bound of the range.\n * @param {Node<any>} [maxNode=float()] - A node defining the upper bound of the range.\n * @returns {RangeNode}\n */\nconst range = /*@__PURE__*/ nodeProxy( RangeNode ).setParameterLength( 2 );\n\n/**\n * `ComputeBuiltinNode` represents a compute-scope builtin value that expose information\n * about the currently running dispatch and/or the device it is running on.\n *\n * This node can only be used with a WebGPU backend.\n *\n * @augments Node\n */\nclass ComputeBuiltinNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ComputeBuiltinNode';\n\n\t}\n\n\t/**\n\t * Constructs a new compute builtin node.\n\t *\n\t * @param {string} builtinName - The built-in name.\n\t * @param {string} nodeType - The node type.\n\t */\n\tconstructor( builtinName, nodeType ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * The built-in name.\n\t\t *\n\t\t * @private\n\t\t * @type {string}\n\t\t */\n\t\tthis._builtinName = builtinName;\n\n\t}\n\n\t/**\n\t * This method is overwritten since hash is derived from the built-in name.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The hash.\n\t */\n\tgetHash( builder ) {\n\n\t\treturn this.getBuiltinName( builder );\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is simply derived from `nodeType`..\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( /*builder*/ ) {\n\n\t\treturn this.nodeType;\n\n\t}\n\n\t/**\n\t * Sets the builtin name.\n\t *\n\t * @param {string} builtinName - The built-in name.\n\t * @return {ComputeBuiltinNode} A reference to this node.\n\t */\n\tsetBuiltinName( builtinName ) {\n\n\t\tthis._builtinName = builtinName;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the builtin name.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The builtin name.\n\t */\n\tgetBuiltinName( /*builder*/ ) {\n\n\t\treturn this._builtinName;\n\n\t}\n\n\t/**\n\t * Whether the current node builder has the builtin or not.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether the builder has the builtin or not.\n\t */\n\thasBuiltin( builder ) {\n\n\t\treturn builder.hasBuiltin( this._builtinName );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst builtinName = this.getBuiltinName( builder );\n\t\tconst nodeType = this.getNodeType( builder );\n\n\t\tif ( builder.shaderStage === 'compute' ) {\n\n\t\t\treturn builder.format( builtinName, nodeType, output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( `ComputeBuiltinNode: Compute built-in value ${builtinName} can not be accessed in the ${builder.shaderStage} stage` );\n\t\t\treturn builder.generateConst( nodeType );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.global = this.global;\n\t\tdata._builtinName = this._builtinName;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.global = data.global;\n\t\tthis._builtinName = data._builtinName;\n\n\t}\n\n}\n\n/**\n * TSL function for creating a compute builtin node.\n *\n * @tsl\n * @function\n * @param {string} name - The built-in name.\n * @param {string} nodeType - The node type.\n * @returns {ComputeBuiltinNode}\n */\nconst computeBuiltin = ( name, nodeType ) => nodeObject( new ComputeBuiltinNode( name, nodeType ) );\n\n/**\n * Represents the number of workgroups dispatched by the compute shader.\n * ```js\n * // Run 512 invocations/threads with a workgroup size of 128.\n * const computeFn = Fn(() => {\n *\n *     // numWorkgroups.x = 4\n *     storageBuffer.element(0).assign(numWorkgroups.x)\n *\n * })().compute(512, [128]);\n *\n * // Run 512 invocations/threads with the default workgroup size of 64.\n * const computeFn = Fn(() => {\n *\n *     // numWorkgroups.x = 8\n *     storageBuffer.element(0).assign(numWorkgroups.x)\n *\n * })().compute(512);\n * ```\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nconst numWorkgroups = /*@__PURE__*/ computeBuiltin( 'numWorkgroups', 'uvec3' );\n\n/**\n * Represents the 3-dimensional index of the workgroup the current compute invocation belongs to.\n * ```js\n * // Execute 12 compute threads with a workgroup size of 3.\n * const computeFn = Fn( () => {\n *\n * \tIf( workgroupId.x.mod( 2 ).equal( 0 ), () => {\n *\n * \t\tstorageBuffer.element( instanceIndex ).assign( instanceIndex );\n *\n * \t} ).Else( () => {\n *\n * \t\tstorageBuffer.element( instanceIndex ).assign( 0 );\n *\n * \t} );\n *\n * } )().compute( 12, [ 3 ] );\n *\n * // workgroupId.x =  [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3];\n * // Buffer Output =  [0, 1, 2, 0, 0, 0, 6, 7, 8, 0, 0, 0];\n * ```\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nconst workgroupId = /*@__PURE__*/ computeBuiltin( 'workgroupId', 'uvec3' );\n\n/**\n * A non-linearized 3-dimensional representation of the current invocation's position within a 3D global grid.\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nconst globalId = /*@__PURE__*/ computeBuiltin( 'globalId', 'uvec3' );\n/**\n * A non-linearized 3-dimensional representation of the current invocation's position within a 3D workgroup grid.\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nconst localId = /*@__PURE__*/ computeBuiltin( 'localId', 'uvec3' );\n\n/**\n * A device dependent variable that exposes the size of the current invocation's subgroup.\n *\n * @tsl\n * @type {ComputeBuiltinNode<uint>}\n */\nconst subgroupSize = /*@__PURE__*/ computeBuiltin( 'subgroupSize', 'uint' );\n\n/**\n * Represents a GPU control barrier that synchronizes compute operations within a given scope.\n *\n * This node can only be used with a WebGPU backend.\n *\n * @augments Node\n */\nclass BarrierNode extends Node {\n\n\t/**\n\t * Constructs a new barrier node.\n\t *\n\t * @param {string} scope - The scope defines the behavior of the node.\n\t */\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { scope } = this;\n\t\tconst { renderer } = builder;\n\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\n\n\t\t\tbuilder.addFlowCode( `\\t// ${scope}Barrier \\n` );\n\n\t\t} else {\n\n\t\t\tbuilder.addLineFlowCode( `${scope}Barrier()`, this );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating a barrier node.\n *\n * @tsl\n * @function\n * @param {string} scope - The scope defines the behavior of the node..\n * @returns {BarrierNode}\n */\nconst barrier = nodeProxy( BarrierNode );\n\n/**\n * TSL function for creating a workgroup barrier. All compute shader\n * invocations must wait for each invocation within a workgroup to\n * complete before the barrier can be surpassed.\n *\n * @tsl\n * @function\n * @returns {BarrierNode}\n */\nconst workgroupBarrier = () => barrier( 'workgroup' ).toStack();\n\n/**\n * TSL function for creating a storage barrier. All invocations must\n * wait for each access to variables within the 'storage' address space\n * to complete before the barrier can be passed.\n *\n * @tsl\n * @function\n * @returns {BarrierNode}\n */\nconst storageBarrier = () => barrier( 'storage' ).toStack();\n\n/**\n * TSL function for creating a texture barrier. All invocations must\n * wait for each access to variables within the 'texture' address space\n * to complete before the barrier can be passed.\n *\n * @tsl\n * @function\n * @returns {BarrierNode}\n */\nconst textureBarrier = () => barrier( 'texture' ).toStack();\n\n/**\n * Represents an element of a 'workgroup' scoped buffer.\n *\n * @augments ArrayElementNode\n */\nclass WorkgroupInfoElementNode extends ArrayElementNode {\n\n\t/**\n\t * Constructs a new workgroup info element node.\n\t *\n\t * @param {Node} workgroupInfoNode - The workgroup info node.\n\t * @param {Node} indexNode - The index node that defines the element access.\n\t */\n\tconstructor( workgroupInfoNode, indexNode ) {\n\n\t\tsuper( workgroupInfoNode, indexNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWorkgroupInfoElementNode = true;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet snippet;\n\n\t\tconst isAssignContext = builder.context.assign;\n\t\tsnippet = super.generate( builder );\n\n\t\tif ( isAssignContext !== true ) {\n\n\t\t\tconst type = this.getNodeType( builder );\n\n\t\t\tsnippet = builder.format( snippet, type, output );\n\n\t\t}\n\n\t\t// TODO: Possibly activate clip distance index on index access rather than from clipping context\n\n\t\treturn snippet;\n\n\t}\n\n}\n\n/**\n * A node allowing the user to create a 'workgroup' scoped buffer within the\n * context of a compute shader. Typically, workgroup scoped buffers are\n * created to hold data that is transferred from a global storage scope into\n * a local workgroup scope. For invocations within a workgroup, data\n * access speeds on 'workgroup' scoped buffers can be significantly faster\n * than similar access operations on globally accessible storage buffers.\n *\n * This node can only be used with a WebGPU backend.\n *\n * @augments Node\n */\nclass WorkgroupInfoNode extends Node {\n\n\t/**\n\t * Constructs a new buffer scoped to type scope.\n\t *\n\t * @param {string} scope - TODO.\n\t * @param {string} bufferType - The data type of a 'workgroup' scoped buffer element.\n\t * @param {number} [bufferCount=0] - The number of elements in the buffer.\n\t */\n\tconstructor( scope, bufferType, bufferCount = 0 ) {\n\n\t\tsuper( bufferType );\n\n\t\t/**\n\t\t * The buffer type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.bufferType = bufferType;\n\n\t\t/**\n\t\t * The buffer count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bufferCount = bufferCount;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWorkgroupInfoNode = true;\n\n\t\t/**\n\t\t * The data type of the array buffer.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.elementType = bufferType;\n\n\t\t/**\n\t\t * TODO.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.scope = scope;\n\n\t}\n\n\t/**\n\t * Sets the name/label of this node.\n\t *\n\t * @param {string} name - The name to set.\n\t * @return {WorkgroupInfoNode} A reference to this node.\n\t */\n\tlabel( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the scope of this node.\n\t *\n\t * @param {string} scope - The scope to set.\n\t * @return {WorkgroupInfoNode} A reference to this node.\n\t */\n\tsetScope( scope ) {\n\n\t\tthis.scope = scope;\n\n\t\treturn this;\n\n\t}\n\n\n\t/**\n\t * The data type of the array buffer.\n\t *\n\t * @return {string} The element type.\n\t */\n\tgetElementType() {\n\n\t\treturn this.elementType;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation since the input type\n\t * is inferred from the scope.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn `${this.scope}Array`;\n\n\t}\n\n\t/**\n\t * This method can be used to access elements via an index node.\n\t *\n\t * @param {IndexNode} indexNode - indexNode.\n\t * @return {WorkgroupInfoElementNode} A reference to an element.\n\t */\n\telement( indexNode ) {\n\n\t\treturn nodeObject( new WorkgroupInfoElementNode( this, indexNode ) );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\treturn builder.getScopedArray( this.name || `${this.scope}Array_${this.id}`, this.scope.toLowerCase(), this.bufferType, this.bufferCount );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a workgroup info node.\n * Creates a new 'workgroup' scoped array buffer.\n *\n * @tsl\n * @function\n * @param {string} type - The data type of a 'workgroup' scoped buffer element.\n * @param {number} [count=0] - The number of elements in the buffer.\n * @returns {WorkgroupInfoNode}\n */\nconst workgroupArray = ( type, count ) => nodeObject( new WorkgroupInfoNode( 'Workgroup', type, count ) );\n\n/**\n * `AtomicFunctionNode` represents any function that can operate on atomic variable types\n * within a shader. In an atomic function, any modification to an atomic variable will\n * occur as an indivisible step with a defined order relative to other modifications.\n * Accordingly, even if multiple atomic functions are modifying an atomic variable at once\n * atomic operations will not interfere with each other.\n *\n * This node can only be used with a WebGPU backend.\n *\n * @augments Node\n */\nclass AtomicFunctionNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'AtomicFunctionNode';\n\n\t}\n\n\t/**\n\t * Constructs a new atomic function node.\n\t *\n\t * @param {string} method - The signature of the atomic function to construct.\n\t * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n\t * @param {Node} valueNode - The value that mutates the atomic variable.\n\t */\n\tconstructor( method, pointerNode, valueNode ) {\n\n\t\tsuper( 'uint' );\n\n\t\t/**\n\t\t * The signature of the atomic function to construct.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.method = method;\n\n\t\t/**\n\t\t * An atomic variable or element of an atomic buffer.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.pointerNode = pointerNode;\n\n\t\t/**\n\t\t * A value that modifies the atomic variable.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.valueNode = valueNode;\n\n\t\t/**\n\t\t * Creates a list of the parents for this node for detecting if the node needs to return a value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.parents = true;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return the type of\n\t * the pointer node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( builder ) {\n\n\t\treturn this.pointerNode.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Overwritten since the node type is inferred from the input type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.getInputType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tconst parents = properties.parents;\n\n\t\tconst method = this.method;\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst inputType = this.getInputType( builder );\n\n\t\tconst a = this.pointerNode;\n\t\tconst b = this.valueNode;\n\n\t\tconst params = [];\n\n\t\tparams.push( `&${ a.build( builder, inputType ) }` );\n\n\t\tif ( b !== null ) {\n\n\t\t\tparams.push( b.build( builder, inputType ) );\n\n\n\t\t}\n\n\t\tconst methodSnippet = `${ builder.getMethod( method, type ) }( ${ params.join( ', ' ) } )`;\n\t\tconst isVoid = parents.length === 1 && parents[ 0 ].isStackNode === true;\n\n\t\tif ( isVoid ) {\n\n\t\t\tbuilder.addLineFlowCode( methodSnippet, this );\n\n\t\t} else {\n\n\t\t\tif ( properties.constNode === undefined ) {\n\n\t\t\t\tproperties.constNode = expression( methodSnippet, type ).toConst();\n\n\t\t\t}\n\n\t\t\treturn properties.constNode.build( builder );\n\n\t\t}\n\n\t}\n\n}\n\nAtomicFunctionNode.ATOMIC_LOAD = 'atomicLoad';\nAtomicFunctionNode.ATOMIC_STORE = 'atomicStore';\nAtomicFunctionNode.ATOMIC_ADD = 'atomicAdd';\nAtomicFunctionNode.ATOMIC_SUB = 'atomicSub';\nAtomicFunctionNode.ATOMIC_MAX = 'atomicMax';\nAtomicFunctionNode.ATOMIC_MIN = 'atomicMin';\nAtomicFunctionNode.ATOMIC_AND = 'atomicAnd';\nAtomicFunctionNode.ATOMIC_OR = 'atomicOr';\nAtomicFunctionNode.ATOMIC_XOR = 'atomicXor';\n\n/**\n * TSL function for creating an atomic function node.\n *\n * @tsl\n * @function\n * @param {string} method - The signature of the atomic function to construct.\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicNode = nodeProxy( AtomicFunctionNode );\n\n/**\n * TSL function for appending an atomic function call into the programmatic flow of a compute shader.\n *\n * @tsl\n * @function\n * @param {string} method - The signature of the atomic function to construct.\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicFunc = ( method, pointerNode, valueNode ) => {\n\n\treturn atomicNode( method, pointerNode, valueNode ).toStack();\n\n};\n\n/**\n * Loads the value stored in the atomic variable.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @returns {AtomicFunctionNode}\n */\nconst atomicLoad = ( pointerNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_LOAD, pointerNode, null );\n\n/**\n * Stores a value in the atomic variable.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicStore = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_STORE, pointerNode, valueNode );\n\n/**\n * Increments the value stored in the atomic variable.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicAdd = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_ADD, pointerNode, valueNode );\n\n/**\n * Decrements the value stored in the atomic variable.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicSub = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_SUB, pointerNode, valueNode );\n\n/**\n * Stores in an atomic variable the maximum between its current value and a parameter.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicMax = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_MAX, pointerNode, valueNode );\n\n/**\n * Stores in an atomic variable the minimum between its current value and a parameter.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicMin = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_MIN, pointerNode, valueNode );\n\n/**\n * Stores in an atomic variable the bitwise AND of its value with a parameter.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicAnd = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_AND, pointerNode, valueNode );\n\n/**\n * Stores in an atomic variable the bitwise OR of its value with a parameter.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicOr = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_OR, pointerNode, valueNode );\n\n/**\n * Stores in an atomic variable the bitwise XOR of its value with a parameter.\n *\n * @tsl\n * @function\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\n * @param {Node} valueNode - The value that mutates the atomic variable.\n * @returns {AtomicFunctionNode}\n */\nconst atomicXor = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_XOR, pointerNode, valueNode );\n\nlet uniformsLib;\n\nfunction getLightData( light ) {\n\n\tuniformsLib = uniformsLib || new WeakMap();\n\n\tlet uniforms = uniformsLib.get( light );\n\n\tif ( uniforms === undefined ) uniformsLib.set( light, uniforms = {} );\n\n\treturn uniforms;\n\n}\n\n/**\n * TSL function for getting a shadow matrix uniform node for the given light.\n *\n * @tsl\n * @function\n * @param {Light} light -The light source.\n * @returns {UniformNode<mat4>} The shadow matrix uniform node.\n */\nfunction lightShadowMatrix( light ) {\n\n\tconst data = getLightData( light );\n\n\treturn data.shadowMatrix || ( data.shadowMatrix = uniform( 'mat4' ).setGroup( renderGroup ).onRenderUpdate( () => {\n\n\t\tif ( light.castShadow !== true ) {\n\n\t\t\tlight.shadow.updateMatrices( light );\n\n\t\t}\n\n\t\treturn light.shadow.matrix;\n\n\t} ) );\n\n}\n\n/**\n * TSL function for getting projected uv coordinates for the given light.\n * Relevant when using maps with spot lights.\n *\n * @tsl\n * @function\n * @param {Light} light -The light source.\n * @param {Node<vec3>} [position=positionWorld] -The position to project.\n * @returns {Node<vec3>} The projected uvs.\n */\nfunction lightProjectionUV( light, position = positionWorld ) {\n\n\tconst spotLightCoord = lightShadowMatrix( light ).mul( position );\n\tconst projectionUV = spotLightCoord.xyz.div( spotLightCoord.w );\n\n\treturn projectionUV;\n\n}\n\n/**\n * TSL function for getting the position in world space for the given light.\n *\n * @tsl\n * @function\n * @param {Light} light -The light source.\n * @returns {UniformNode<vec3>} The light's position in world space.\n */\nfunction lightPosition( light ) {\n\n\tconst data = getLightData( light );\n\n\treturn data.position || ( data.position = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.matrixWorld ) ) );\n\n}\n\n/**\n * TSL function for getting the light target position in world space for the given light.\n *\n * @tsl\n * @function\n * @param {Light} light -The light source.\n * @returns {UniformNode<vec3>} The light target position in world space.\n */\nfunction lightTargetPosition( light ) {\n\n\tconst data = getLightData( light );\n\n\treturn data.targetPosition || ( data.targetPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( _, self ) => self.value.setFromMatrixPosition( light.target.matrixWorld ) ) );\n\n}\n\n/**\n * TSL function for getting the position in view space for the given light.\n *\n * @tsl\n * @function\n * @param {Light} light - The light source.\n * @returns {UniformNode<vec3>} The light's position in view space.\n */\nfunction lightViewPosition( light ) {\n\n\tconst data = getLightData( light );\n\n\treturn data.viewPosition || ( data.viewPosition = uniform( new Vector3() ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => {\n\n\t\tself.value = self.value || new Vector3();\n\t\tself.value.setFromMatrixPosition( light.matrixWorld );\n\n\t\tself.value.applyMatrix4( camera.matrixWorldInverse );\n\n\t} ) );\n\n}\n\n/**\n * TSL function for getting the light target direction for the given light.\n *\n * @tsl\n * @function\n * @param {Light} light -The light source.\n * @returns {Node<vec3>} The light's target direction.\n */\nconst lightTargetDirection = ( light ) => cameraViewMatrix.transformDirection( lightPosition( light ).sub( lightTargetPosition( light ) ) );\n\nconst sortLights = ( lights ) => {\n\n\treturn lights.sort( ( a, b ) => a.id - b.id );\n\n};\n\nconst getLightNodeById = ( id, lightNodes ) => {\n\n\tfor ( const lightNode of lightNodes ) {\n\n\t\tif ( lightNode.isAnalyticLightNode && lightNode.light.id === id ) {\n\n\t\t\treturn lightNode;\n\n\t\t}\n\n\t}\n\n\treturn null;\n\n};\n\nconst _lightsNodeRef = /*@__PURE__*/ new WeakMap();\n\n/**\n * This node represents the scene's lighting and manages the lighting model's life cycle\n * for the current build 3D object. It is responsible for computing the total outgoing\n * light in a given lighting context.\n *\n * @augments Node\n */\nclass LightsNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'LightsNode';\n\n\t}\n\n\t/**\n\t * Constructs a new lights node.\n\t */\n\tconstructor() {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * A node representing the total diffuse light.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.totalDiffuseNode = vec3().toVar();\n\n\t\t/**\n\t\t * A node representing the total specular light.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.totalSpecularNode = vec3().toVar();\n\n\t\t/**\n\t\t * A node representing the outgoing light.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.outgoingLightNode = vec3().toVar();\n\n\t\t/**\n\t\t * An array representing the lights in the scene.\n\t\t *\n\t\t * @private\n\t\t * @type {Array<Light>}\n\t\t */\n\t\tthis._lights = [];\n\n\t\t/**\n\t\t * For each light in the scene, this node will create a\n\t\t * corresponding light node.\n\t\t *\n\t\t * @private\n\t\t * @type {?Array<LightingNode>}\n\t\t * @default null\n\t\t */\n\t\tthis._lightNodes = null;\n\n\t\t/**\n\t\t * A hash for identifying the current light nodes setup.\n\t\t *\n\t\t * @private\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis._lightNodesHash = null;\n\n\t\t/**\n\t\t * `LightsNode` sets this property to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.global = true;\n\n\t}\n\n\t/**\n\t * Overwrites the default {@link Node#customCacheKey} implementation by including\n\t * light data into the cache key.\n\t *\n\t * @return {number} The custom cache key.\n\t */\n\tcustomCacheKey() {\n\n\t\tconst hashData = [];\n\t\tconst lights = this._lights;\n\n\t\tfor ( let i = 0; i < lights.length; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\thashData.push( light.id );\n\n\t\t\tif ( light.isSpotLight === true ) {\n\n\t\t\t\tconst hashValue = ( light.map !== null ) ? light.map.id : -1;\n\n\t\t\t\thashData.push( hashValue );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn hashArray( hashData );\n\n\t}\n\n\t/**\n\t * Computes a hash value for identifying the current light nodes setup.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @return {string} The computed hash.\n\t */\n\tgetHash( builder ) {\n\n\t\tif ( this._lightNodesHash === null ) {\n\n\t\t\tif ( this._lightNodes === null ) this.setupLightsNode( builder );\n\n\t\t\tconst hash = [];\n\n\t\t\tfor ( const lightNode of this._lightNodes ) {\n\n\t\t\t\thash.push( lightNode.getSelf().getHash() );\n\n\t\t\t}\n\n\t\t\tthis._lightNodesHash = 'lights-' + hash.join( ',' );\n\n\t\t}\n\n\t\treturn this._lightNodesHash;\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tconst properties = builder.getDataFromNode( this );\n\n\t\tfor ( const node of properties.nodes ) {\n\n\t\t\tnode.build( builder );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates lighting nodes for each scene light. This makes it possible to further\n\t * process lights in the node system.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t */\n\tsetupLightsNode( builder ) {\n\n\t\tconst lightNodes = [];\n\n\t\tconst previousLightNodes = this._lightNodes;\n\n\t\tconst lights = sortLights( this._lights );\n\t\tconst nodeLibrary = builder.renderer.library;\n\n\t\tfor ( const light of lights ) {\n\n\t\t\tif ( light.isNode ) {\n\n\t\t\t\tlightNodes.push( nodeObject( light ) );\n\n\t\t\t} else {\n\n\t\t\t\tlet lightNode = null;\n\n\t\t\t\tif ( previousLightNodes !== null ) {\n\n\t\t\t\t\tlightNode = getLightNodeById( light.id, previousLightNodes ); // reuse existing light node\n\n\t\t\t\t}\n\n\t\t\t\tif ( lightNode === null ) {\n\n\t\t\t\t\t// find the corresponding node type for a given light\n\n\t\t\t\t\tconst lightNodeClass = nodeLibrary.getLightNodeClass( light.constructor );\n\n\t\t\t\t\tif ( lightNodeClass === null ) {\n\n\t\t\t\t\t\tconsole.warn( `LightsNode.setupNodeLights: Light node not found for ${ light.constructor.name }` );\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet lightNode = null;\n\n\t\t\t\t\tif ( ! _lightsNodeRef.has( light ) ) {\n\n\t\t\t\t\t\tlightNode = nodeObject( new lightNodeClass( light ) );\n\t\t\t\t\t\t_lightsNodeRef.set( light, lightNode );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlightNode = _lightsNodeRef.get( light );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlightNodes.push( lightNode );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._lightNodes = lightNodes;\n\n\t}\n\n\t/**\n\t * Sets up a direct light in the lighting model.\n\t *\n\t * @param {Object} builder - The builder object containing the context and stack.\n\t * @param {Object} lightNode - The light node.\n\t * @param {Object} lightData - The light object containing color and direction properties.\n\t */\n\tsetupDirectLight( builder, lightNode, lightData ) {\n\n\t\tconst { lightingModel, reflectedLight } = builder.context;\n\n\t\tlightingModel.direct( {\n\t\t\t...lightData,\n\t\t\tlightNode,\n\t\t\treflectedLight\n\t\t}, builder );\n\n\t}\n\n\tsetupDirectRectAreaLight( builder, lightNode, lightData ) {\n\n\t\tconst { lightingModel, reflectedLight } = builder.context;\n\n\t\tlightingModel.directRectArea( {\n\t\t\t...lightData,\n\t\t\tlightNode,\n\t\t\treflectedLight\n\t\t}, builder );\n\n\t}\n\n\t/**\n\t * Setups the internal lights by building all respective\n\t * light nodes.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @param {Array<LightingNode>} lightNodes - An array of lighting nodes.\n\t */\n\tsetupLights( builder, lightNodes ) {\n\n\t\tfor ( const lightNode of lightNodes ) {\n\n\t\t\tlightNode.build( builder );\n\n\t\t}\n\n\t}\n\n\tgetLightNodes( builder ) {\n\n\t\tif ( this._lightNodes === null ) this.setupLightsNode( builder );\n\n\t\treturn this._lightNodes;\n\n\t}\n\n\t/**\n\t * The implementation makes sure that for each light in the scene\n\t * there is a corresponding light node. By building the light nodes\n\t * and evaluating the lighting model the outgoing light is computed.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @return {Node<vec3>} A node representing the outgoing light.\n\t */\n\tsetup( builder ) {\n\n\t\tconst currentLightsNode = builder.lightsNode;\n\n\t\tbuilder.lightsNode = this;\n\n\t\t//\n\n\t\tlet outgoingLightNode = this.outgoingLightNode;\n\n\t\tconst context = builder.context;\n\t\tconst lightingModel = context.lightingModel;\n\n\t\tconst properties = builder.getDataFromNode( this );\n\n\t\tif ( lightingModel ) {\n\n\t\t\tconst { totalDiffuseNode, totalSpecularNode } = this;\n\n\t\t\tcontext.outgoingLight = outgoingLightNode;\n\n\t\t\tconst stack = builder.addStack();\n\n\t\t\t//\n\n\t\t\tproperties.nodes = stack.nodes;\n\n\t\t\t//\n\n\t\t\tlightingModel.start( builder );\n\n\t\t\t//\n\n\t\t\tconst { backdrop, backdropAlpha } = context;\n\t\t\tconst { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context.reflectedLight;\n\n\t\t\tlet totalDiffuse = directDiffuse.add( indirectDiffuse );\n\n\t\t\tif ( backdrop !== null ) {\n\n\t\t\t\tif ( backdropAlpha !== null ) {\n\n\t\t\t\t\ttotalDiffuse = vec3( backdropAlpha.mix( totalDiffuse, backdrop ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttotalDiffuse = vec3( backdrop );\n\n\t\t\t\t}\n\n\t\t\t\tcontext.material.transparent = true;\n\n\t\t\t}\n\n\t\t\ttotalDiffuseNode.assign( totalDiffuse );\n\t\t\ttotalSpecularNode.assign( directSpecular.add( indirectSpecular ) );\n\n\t\t\toutgoingLightNode.assign( totalDiffuseNode.add( totalSpecularNode ) );\n\n\t\t\t//\n\n\t\t\tlightingModel.finish( builder );\n\n\t\t\t//\n\n\t\t\toutgoingLightNode = outgoingLightNode.bypass( builder.removeStack() );\n\n\t\t} else {\n\n\t\t\tproperties.nodes = [];\n\n\t\t}\n\n\t\t//\n\n\t\tbuilder.lightsNode = currentLightsNode;\n\n\t\treturn outgoingLightNode;\n\n\t}\n\n\t/**\n\t * Configures this node with an array of lights.\n\t *\n\t * @param {Array<Light>} lights - An array of lights.\n\t * @return {LightsNode} A reference to this node.\n\t */\n\tsetLights( lights ) {\n\n\t\tthis._lights = lights;\n\n\t\tthis._lightNodes = null;\n\t\tthis._lightNodesHash = null;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns an array of the scene's lights.\n\t *\n\t * @return {Array<Light>} The scene's lights.\n\t */\n\tgetLights() {\n\n\t\treturn this._lights;\n\n\t}\n\n\t/**\n\t * Whether the scene has lights or not.\n\t *\n\t * @type {boolean}\n\t */\n\tget hasLights() {\n\n\t\treturn this._lights.length > 0;\n\n\t}\n\n}\n\n/**\n * TSL function for creating an instance of `LightsNode` and configuring\n * it with the given array of lights.\n *\n * @tsl\n * @function\n * @param {Array<Light>} lights - An array of lights.\n * @return {LightsNode} The created lights node.\n */\nconst lights = ( lights = [] ) => nodeObject( new LightsNode() ).setLights( lights );\n\n/**\n * Base class for all shadow nodes.\n *\n * Shadow nodes encapsulate shadow related logic and are always coupled to lighting nodes.\n * Lighting nodes might share the same shadow node type or use specific ones depending on\n * their requirements.\n *\n * @augments Node\n */\nclass ShadowBaseNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ShadowBaseNode';\n\n\t}\n\n\t/**\n\t * Constructs a new shadow base node.\n\t *\n\t * @param {Light} light - The shadow casting light.\n\t */\n\tconstructor( light ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The shadow casting light.\n\t\t *\n\t\t * @type {Light}\n\t\t */\n\t\tthis.light = light;\n\n\t\t/**\n\t\t * Overwritten since shadows are updated by default per render.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShadowBaseNode = true;\n\n\t}\n\n\t/**\n\t * Setups the shadow position node which is by default the predefined TSL node object `shadowPositionWorld`.\n\t *\n\t * @param {NodeBuilder} object - A configuration object that must at least hold a material reference.\n\t */\n\tsetupShadowPosition( { context, material } ) {\n\n\t\t// Use assign inside an Fn()\n\n\t\tshadowPositionWorld.assign( material.receivedShadowPositionNode || context.shadowPositionWorld || positionWorld );\n\n\t}\n\n\t/**\n\t * Can be called when the shadow isn't required anymore. That can happen when\n\t * a lighting node stops casting shadows by setting {@link Object3D#castShadow}\n\t * to `false`.\n\t */\n\tdispose() {\n\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\n\n\t}\n\n}\n\n/**\n * TSL object that represents the vertex position in world space during the shadow pass.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nconst shadowPositionWorld = /*@__PURE__*/ property( 'vec3', 'shadowPositionWorld' );\n\n/**\n * Saves the state of the given renderer and stores it into the given state object.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nfunction saveRendererState( renderer, state = {} ) {\n\n\tstate.toneMapping = renderer.toneMapping;\n\tstate.toneMappingExposure = renderer.toneMappingExposure;\n\tstate.outputColorSpace = renderer.outputColorSpace;\n\tstate.renderTarget = renderer.getRenderTarget();\n\tstate.activeCubeFace = renderer.getActiveCubeFace();\n\tstate.activeMipmapLevel = renderer.getActiveMipmapLevel();\n\tstate.renderObjectFunction = renderer.getRenderObjectFunction();\n\tstate.pixelRatio = renderer.getPixelRatio();\n\tstate.mrt = renderer.getMRT();\n\tstate.clearColor = renderer.getClearColor( state.clearColor || new Color() );\n\tstate.clearAlpha = renderer.getClearAlpha();\n\tstate.autoClear = renderer.autoClear;\n\tstate.scissorTest = renderer.getScissorTest();\n\n\treturn state;\n\n}\n\n/**\n * Saves the state of the given renderer and stores it into the given state object.\n * Besides, the function also resets the state of the renderer to its default values.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nfunction resetRendererState( renderer, state ) {\n\n\tstate = saveRendererState( renderer, state );\n\n\trenderer.setMRT( null );\n\trenderer.setRenderObjectFunction( null );\n\trenderer.setClearColor( 0x000000, 1 );\n\trenderer.autoClear = true;\n\n\treturn state;\n\n}\n\n/**\n * Restores the state of the given renderer from the given state object.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Object} state - The state to restore.\n */\nfunction restoreRendererState( renderer, state ) {\n\n\trenderer.toneMapping = state.toneMapping;\n\trenderer.toneMappingExposure = state.toneMappingExposure;\n\trenderer.outputColorSpace = state.outputColorSpace;\n\trenderer.setRenderTarget( state.renderTarget, state.activeCubeFace, state.activeMipmapLevel );\n\trenderer.setRenderObjectFunction( state.renderObjectFunction );\n\trenderer.setPixelRatio( state.pixelRatio );\n\trenderer.setMRT( state.mrt );\n\trenderer.setClearColor( state.clearColor, state.clearAlpha );\n\trenderer.autoClear = state.autoClear;\n\trenderer.setScissorTest( state.scissorTest );\n\n}\n\n/**\n * Saves the state of the given scene and stores it into the given state object.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nfunction saveSceneState( scene, state = {} ) {\n\n\tstate.background = scene.background;\n\tstate.backgroundNode = scene.backgroundNode;\n\tstate.overrideMaterial = scene.overrideMaterial;\n\n\treturn state;\n\n}\n\n/**\n * Saves the state of the given scene and stores it into the given state object.\n * Besides, the function also resets the state of the scene to its default values.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nfunction resetSceneState( scene, state ) {\n\n\tstate = saveSceneState( scene, state );\n\n\tscene.background = null;\n\tscene.backgroundNode = null;\n\tscene.overrideMaterial = null;\n\n\treturn state;\n\n}\n\n/**\n * Restores the state of the given scene from the given state object.\n *\n * @function\n * @param {Scene} scene - The scene.\n * @param {Object} state - The state to restore.\n */\nfunction restoreSceneState( scene, state ) {\n\n\tscene.background = state.background;\n\tscene.backgroundNode = state.backgroundNode;\n\tscene.overrideMaterial = state.overrideMaterial;\n\n}\n\n/**\n * Saves the state of the given renderer and scene and stores it into the given state object.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nfunction saveRendererAndSceneState( renderer, scene, state = {} ) {\n\n\tstate = saveRendererState( renderer, state );\n\tstate = saveSceneState( scene, state );\n\n\treturn state;\n\n}\n\n/**\n * Saves the state of the given renderer and scene and stores it into the given state object.\n * Besides, the function also resets the state of the renderer and scene to its default values.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nfunction resetRendererAndSceneState( renderer, scene, state ) {\n\n\tstate = resetRendererState( renderer, state );\n\tstate = resetSceneState( scene, state );\n\n\treturn state;\n\n}\n\n/**\n * Restores the state of the given renderer and scene from the given state object.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Scene} scene - The scene.\n * @param {Object} state - The state to restore.\n */\nfunction restoreRendererAndSceneState( renderer, scene, state ) {\n\n\trestoreRendererState( renderer, state );\n\trestoreSceneState( scene, state );\n\n}\n\nvar RendererUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tresetRendererAndSceneState: resetRendererAndSceneState,\n\tresetRendererState: resetRendererState,\n\tresetSceneState: resetSceneState,\n\trestoreRendererAndSceneState: restoreRendererAndSceneState,\n\trestoreRendererState: restoreRendererState,\n\trestoreSceneState: restoreSceneState,\n\tsaveRendererAndSceneState: saveRendererAndSceneState,\n\tsaveRendererState: saveRendererState,\n\tsaveSceneState: saveSceneState\n});\n\nconst shadowMaterialLib = /*@__PURE__*/ new WeakMap();\n\n/**\n * A shadow filtering function performing basic filtering. This is in fact an unfiltered version of the shadow map\n * with a binary `[0,1]` result.\n *\n * @method\n * @param {Object} inputs - The input parameter object.\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n * @return {Node<float>} The filtering result.\n */\nconst BasicShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, depthLayer } ) => {\n\n\tlet basic = texture( depthTexture, shadowCoord.xy ).label( 't_basic' );\n\n\tif ( depthTexture.isDepthArrayTexture ) {\n\n\t\tbasic = basic.depth( depthLayer );\n\n\t}\n\n\treturn basic.compare( shadowCoord.z );\n\n} );\n\n/**\n * A shadow filtering function performing PCF filtering.\n *\n * @method\n * @param {Object} inputs - The input parameter object.\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n * @param {LightShadow} inputs.shadow - The light shadow.\n * @return {Node<float>} The filtering result.\n */\nconst PCFShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, shadow, depthLayer } ) => {\n\n\tconst depthCompare = ( uv, compare ) => {\n\n\t\tlet depth = texture( depthTexture, uv );\n\n\t\tif ( depthTexture.isDepthArrayTexture ) {\n\n\t\t\tdepth = depth.depth( depthLayer );\n\n\t\t}\n\n\t\treturn depth.compare( compare );\n\n\t};\n\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\n\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\n\n\tconst texelSize = vec2( 1 ).div( mapSize );\n\tconst dx0 = texelSize.x.negate().mul( radius );\n\tconst dy0 = texelSize.y.negate().mul( radius );\n\tconst dx1 = texelSize.x.mul( radius );\n\tconst dy1 = texelSize.y.mul( radius );\n\tconst dx2 = dx0.div( 2 );\n\tconst dy2 = dy0.div( 2 );\n\tconst dx3 = dx1.div( 2 );\n\tconst dy3 = dy1.div( 2 );\n\n\treturn add(\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy2 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy2 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy2 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy, shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy3 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy3 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy3 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy1 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy1 ) ), shadowCoord.z ),\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy1 ) ), shadowCoord.z )\n\t).mul( 1 / 17 );\n\n} );\n\n/**\n * A shadow filtering function performing PCF soft filtering.\n *\n * @method\n * @param {Object} inputs - The input parameter object.\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n * @param {LightShadow} inputs.shadow - The light shadow.\n * @return {Node<float>} The filtering result.\n */\nconst PCFSoftShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, shadow, depthLayer } ) => {\n\n\tconst depthCompare = ( uv, compare ) => {\n\n\t\tlet depth = texture( depthTexture, uv );\n\n\t\tif ( depthTexture.isDepthArrayTexture ) {\n\n\t\t\tdepth = depth.depth( depthLayer );\n\n\t\t}\n\n\t\treturn depth.compare( compare );\n\n\t};\n\n\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\n\n\tconst texelSize = vec2( 1 ).div( mapSize );\n\tconst dx = texelSize.x;\n\tconst dy = texelSize.y;\n\n\tconst uv = shadowCoord.xy;\n\tconst f = fract( uv.mul( mapSize ).add( 0.5 ) );\n\tuv.subAssign( f.mul( texelSize ) );\n\n\treturn add(\n\t\tdepthCompare( uv, shadowCoord.z ),\n\t\tdepthCompare( uv.add( vec2( dx, 0 ) ), shadowCoord.z ),\n\t\tdepthCompare( uv.add( vec2( 0, dy ) ), shadowCoord.z ),\n\t\tdepthCompare( uv.add( texelSize ), shadowCoord.z ),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), 0 ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), 0 ) ), shadowCoord.z ),\n\t\t\tf.x\n\t\t),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy ) ), shadowCoord.z ),\n\t\t\tf.x\n\t\t),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.negate() ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\tf.y\n\t\t),\n\t\tmix(\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.negate() ) ), shadowCoord.z ),\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\tf.y\n\t\t),\n\t\tmix(\n\t\t\tmix(\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.negate() ) ), shadowCoord.z ),\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.negate() ) ), shadowCoord.z ),\n\t\t\t\tf.x\n\t\t\t),\n\t\t\tmix(\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.mul( 2 ) ) ), shadowCoord.z ),\n\t\t\t\tf.x\n\t\t\t),\n\t\t\tf.y\n\t\t)\n\t).mul( 1 / 9 );\n\n} );\n\n/**\n * A shadow filtering function performing VSM filtering.\n *\n * @method\n * @param {Object} inputs - The input parameter object.\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\n * @return {Node<float>} The filtering result.\n */\nconst VSMShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, depthLayer } ) => {\n\n\tconst occlusion = float( 1 ).toVar();\n\n\tlet distribution = texture( depthTexture ).sample( shadowCoord.xy );\n\n\tif ( depthTexture.isDepthArrayTexture || depthTexture.isDataArrayTexture ) {\n\n\t\tdistribution = distribution.depth( depthLayer );\n\n\t}\n\n\tdistribution = distribution.rg;\n\n\tconst hardShadow = step( shadowCoord.z, distribution.x );\n\n\tIf( hardShadow.notEqual( float( 1.0 ) ), () => {\n\n\t\tconst distance = shadowCoord.z.sub( distribution.x );\n\t\tconst variance = max$1( 0, distribution.y.mul( distribution.y ) );\n\t\tlet softnessProbability = variance.div( variance.add( distance.mul( distance ) ) ); // Chebeyshevs inequality\n\t\tsoftnessProbability = clamp( sub( softnessProbability, 0.3 ).div( 0.95 - 0.3 ) );\n\t\tocclusion.assign( clamp( max$1( hardShadow, softnessProbability ) ) );\n\n\t} );\n\n\treturn occlusion;\n\n} );\n\n//\n\nconst linearDistance = /*@__PURE__*/ Fn( ( [ position, cameraNear, cameraFar ] ) => {\n\n\tlet dist = positionWorld.sub( position ).length();\n\tdist = dist.sub( cameraNear ).div( cameraFar.sub( cameraNear ) );\n\tdist = dist.saturate(); // clamp to [ 0, 1 ]\n\n\treturn dist;\n\n} );\n\nconst linearShadowDistance = ( light ) => {\n\n\tconst camera = light.shadow.camera;\n\n\tconst nearDistance = reference( 'near', 'float', camera ).setGroup( renderGroup );\n\tconst farDistance = reference( 'far', 'float', camera ).setGroup( renderGroup );\n\n\tconst referencePosition = objectPosition( light );\n\n\treturn linearDistance( referencePosition, nearDistance, farDistance );\n\n};\n\n/**\n * Retrieves or creates a shadow material for the given light source.\n *\n * This function checks if a shadow material already exists for the provided light.\n * If not, it creates a new `NodeMaterial` configured for shadow rendering and stores it\n * in the `shadowMaterialLib` for future use.\n *\n * @param {Light} light - The light source for which the shadow material is needed.\n *                         If the light is a point light, a depth node is calculated\n *                         using the linear shadow distance.\n * @returns {NodeMaterial} The shadow material associated with the given light.\n */\nconst getShadowMaterial = ( light ) => {\n\n\tlet material = shadowMaterialLib.get( light );\n\n\tif ( material === undefined ) {\n\n\t\tconst depthNode = light.isPointLight ? linearShadowDistance( light ) : null;\n\n\t\tmaterial = new NodeMaterial();\n\t\tmaterial.colorNode = vec4( 0, 0, 0, 1 );\n\t\tmaterial.depthNode = depthNode;\n\t\tmaterial.isShadowPassMaterial = true; // Use to avoid other overrideMaterial override material.colorNode unintentionally when using material.shadowNode\n\t\tmaterial.name = 'ShadowMaterial';\n\t\tmaterial.fog = false;\n\n\t\tshadowMaterialLib.set( light, material );\n\n\t}\n\n\treturn material;\n\n};\n\n//\n\nconst _shadowRenderObjectLibrary = /*@__PURE__*/ new ChainMap();\nconst _shadowRenderObjectKeys = [];\n\n/**\n * Creates a function to render shadow objects in a scene.\n *\n * @param {Renderer} renderer - The renderer.\n * @param {LightShadow} shadow - The light shadow object containing shadow properties.\n * @param {number} shadowType - The type of shadow map (e.g., BasicShadowMap).\n * @param {boolean} useVelocity - Whether to use velocity data for rendering.\n * @return {Function} A function that renders shadow objects.\n *\n * The returned function has the following parameters:\n * @param {Object3D} object - The 3D object to render.\n * @param {Scene} scene - The scene containing the object.\n * @param {Camera} _camera - The camera used for rendering.\n * @param {BufferGeometry} geometry - The geometry of the object.\n * @param {Material} material - The material of the object.\n * @param {Group} group - The group the object belongs to.\n * @param {...any} params - Additional parameters for rendering.\n */\nconst getShadowRenderObjectFunction = ( renderer, shadow, shadowType, useVelocity ) => {\n\n\t_shadowRenderObjectKeys[ 0 ] = renderer;\n\t_shadowRenderObjectKeys[ 1 ] = shadow;\n\n\tlet renderObjectFunction = _shadowRenderObjectLibrary.get( _shadowRenderObjectKeys );\n\n\tif ( renderObjectFunction === undefined || ( renderObjectFunction.shadowType !== shadowType || renderObjectFunction.useVelocity !== useVelocity ) ) {\n\n\t\trenderObjectFunction = ( object, scene, _camera, geometry, material, group, ...params ) => {\n\n\t\t\tif ( object.castShadow === true || ( object.receiveShadow && shadowType === VSMShadowMap ) ) {\n\n\t\t\t\tif ( useVelocity ) {\n\n\t\t\t\t\tgetDataFromObject( object ).useVelocity = true;\n\n\t\t\t\t}\n\n\t\t\t\tobject.onBeforeShadow( renderer, object, _camera, shadow.camera, geometry, scene.overrideMaterial, group );\n\n\t\t\t\trenderer.renderObject( object, scene, _camera, geometry, material, group, ...params );\n\n\t\t\t\tobject.onAfterShadow( renderer, object, _camera, shadow.camera, geometry, scene.overrideMaterial, group );\n\n\t\t\t}\n\n\t\t};\n\n\t\trenderObjectFunction.shadowType = shadowType;\n\t\trenderObjectFunction.useVelocity = useVelocity;\n\n\t\t_shadowRenderObjectLibrary.set( _shadowRenderObjectKeys, renderObjectFunction );\n\n\t}\n\n\t_shadowRenderObjectKeys[ 0 ] = null;\n\t_shadowRenderObjectKeys[ 1 ] = null;\n\n\treturn renderObjectFunction;\n\n};\n\n/**\n * Represents the shader code for the first VSM render pass.\n *\n * @method\n * @param {Object} inputs - The input parameter object.\n * @param {Node<float>} inputs.samples - The number of samples\n * @param {Node<float>} inputs.radius - The radius.\n * @param {Node<float>} inputs.size - The size.\n * @param {TextureNode} inputs.shadowPass - A reference to the render target's depth data.\n * @return {Node<vec2>} The VSM output.\n */\nconst VSMPassVertical = /*@__PURE__*/ Fn( ( { samples, radius, size, shadowPass, depthLayer } ) => {\n\n\tconst mean = float( 0 ).toVar( 'meanVertical' );\n\tconst squaredMean = float( 0 ).toVar( 'squareMeanVertical' );\n\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( -1 ) );\n\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\n\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\n\n\t\tlet depth = shadowPass.sample( add( screenCoordinate.xy, vec2( 0, uvOffset ).mul( radius ) ).div( size ) );\n\n\t\tif ( shadowPass.value.isDepthArrayTexture || shadowPass.value.isDataArrayTexture ) {\n\n\t\t\tdepth = depth.depth( depthLayer );\n\n\t\t}\n\n\t\tdepth = depth.x;\n\n\t\tmean.addAssign( depth );\n\t\tsquaredMean.addAssign( depth.mul( depth ) );\n\n\t} );\n\n\tmean.divAssign( samples );\n\tsquaredMean.divAssign( samples );\n\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\n\treturn vec2( mean, std_dev );\n\n} );\n\n/**\n * Represents the shader code for the second VSM render pass.\n *\n * @method\n * @param {Object} inputs - The input parameter object.\n * @param {Node<float>} inputs.samples - The number of samples\n * @param {Node<float>} inputs.radius - The radius.\n * @param {Node<float>} inputs.size - The size.\n * @param {TextureNode} inputs.shadowPass - The result of the first VSM render pass.\n * @return {Node<vec2>} The VSM output.\n */\nconst VSMPassHorizontal = /*@__PURE__*/ Fn( ( { samples, radius, size, shadowPass, depthLayer } ) => {\n\n\tconst mean = float( 0 ).toVar( 'meanHorizontal' );\n\tconst squaredMean = float( 0 ).toVar( 'squareMeanHorizontal' );\n\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( -1 ) );\n\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\n\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\n\n\t\tlet distribution = shadowPass.sample( add( screenCoordinate.xy, vec2( uvOffset, 0 ).mul( radius ) ).div( size ) );\n\n\t\tif ( shadowPass.value.isDepthArrayTexture || shadowPass.value.isDataArrayTexture ) {\n\n\t\t\tdistribution = distribution.depth( depthLayer );\n\n\t\t}\n\n\t\tmean.addAssign( distribution.x );\n\t\tsquaredMean.addAssign( add( distribution.y.mul( distribution.y ), distribution.x.mul( distribution.x ) ) );\n\n\t} );\n\n\tmean.divAssign( samples );\n\tsquaredMean.divAssign( samples );\n\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\n\treturn vec2( mean, std_dev );\n\n} );\n\nconst _shadowFilterLib = [ BasicShadowFilter, PCFShadowFilter, PCFSoftShadowFilter, VSMShadowFilter ];\n\n//\n\nlet _rendererState;\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\n/**\n * Represents the default shadow implementation for lighting nodes.\n *\n * @augments ShadowBaseNode\n */\nclass ShadowNode extends ShadowBaseNode {\n\n\tstatic get type() {\n\n\t\treturn 'ShadowNode';\n\n\t}\n\n\t/**\n\t * Constructs a new shadow node.\n\t *\n\t * @param {Light} light - The shadow casting light.\n\t * @param {?LightShadow} [shadow=null] - An optional light shadow.\n\t */\n\tconstructor( light, shadow = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * The light shadow which defines the properties light's\n\t\t * shadow.\n\t\t *\n\t\t * @type {?LightShadow}\n\t\t * @default null\n\t\t */\n\t\tthis.shadow = shadow || light.shadow;\n\n\t\t/**\n\t\t * A reference to the shadow map which is a render target.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.shadowMap = null;\n\n\t\t/**\n\t\t * Only relevant for VSM shadows. Render target for the\n\t\t * first VSM render pass.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.vsmShadowMapVertical = null;\n\n\t\t/**\n\t\t * Only relevant for VSM shadows. Render target for the\n\t\t * second VSM render pass.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.vsmShadowMapHorizontal = null;\n\n\t\t/**\n\t\t * Only relevant for VSM shadows. Node material which\n\t\t * is used to render the first VSM pass.\n\t\t *\n\t\t * @type {?NodeMaterial}\n\t\t * @default null\n\t\t */\n\t\tthis.vsmMaterialVertical = null;\n\n\t\t/**\n\t\t * Only relevant for VSM shadows. Node material which\n\t\t * is used to render the second VSM pass.\n\t\t *\n\t\t * @type {?NodeMaterial}\n\t\t * @default null\n\t\t */\n\t\tthis.vsmMaterialHorizontal = null;\n\n\t\t/**\n\t\t * A reference to the output node which defines the\n\t\t * final result of this shadow node.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @private\n\t\t * @default null\n\t\t */\n\t\tthis._node = null;\n\n\t\tthis._cameraFrameId = new WeakMap();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShadowNode = true;\n\n\t\t/**\n\t\t * This index can be used when overriding setupRenderTarget with a RenderTarget Array to specify the depth layer.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.depthLayer = 0;\n\n\t}\n\n\t/**\n\t * Setups the shadow filtering.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @param {Object} inputs - A configuration object that defines the shadow filtering.\n\t * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.\n\t * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n\t * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.\n\t * @param {LightShadow} inputs.shadow - The light shadow.\n\t * @return {Node<float>} The result node of the shadow filtering.\n\t */\n\tsetupShadowFilter( builder, { filterFn, depthTexture, shadowCoord, shadow, depthLayer } ) {\n\n\t\tconst frustumTest = shadowCoord.x.greaterThanEqual( 0 )\n\t\t\t.and( shadowCoord.x.lessThanEqual( 1 ) )\n\t\t\t.and( shadowCoord.y.greaterThanEqual( 0 ) )\n\t\t\t.and( shadowCoord.y.lessThanEqual( 1 ) )\n\t\t\t.and( shadowCoord.z.lessThanEqual( 1 ) );\n\n\t\tconst shadowNode = filterFn( { depthTexture, shadowCoord, shadow, depthLayer } );\n\n\t\treturn frustumTest.select( shadowNode, float( 1 ) );\n\n\t}\n\n\t/**\n\t * Setups the shadow coordinates.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @param {Node<vec3>} shadowPosition - A node representing the shadow position.\n\t * @return {Node<vec3>} The shadow coordinates.\n\t */\n\tsetupShadowCoord( builder, shadowPosition ) {\n\n\t\tconst { shadow } = this;\n\t\tconst { renderer } = builder;\n\n\t\tconst bias = reference( 'bias', 'float', shadow ).setGroup( renderGroup );\n\n\t\tlet shadowCoord = shadowPosition;\n\t\tlet coordZ;\n\n\t\tif ( shadow.camera.isOrthographicCamera || renderer.logarithmicDepthBuffer !== true ) {\n\n\t\t\tshadowCoord = shadowCoord.xyz.div( shadowCoord.w );\n\n\t\t\tcoordZ = shadowCoord.z;\n\n\t\t\tif ( renderer.coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\t\tcoordZ = coordZ.mul( 2 ).sub( 1 ); // WebGPU: Conversion [ 0, 1 ] to [ - 1, 1 ]\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst w = shadowCoord.w;\n\t\t\tshadowCoord = shadowCoord.xy.div( w ); // <-- Only divide X/Y coords since we don't need Z\n\n\t\t\t// The normally available \"cameraNear\" and \"cameraFar\" nodes cannot be used here because they do not get\n\t\t\t// updated to use the shadow camera. So, we have to declare our own \"local\" ones here.\n\t\t\t// TODO: How do we get the cameraNear/cameraFar nodes to use the shadow camera so we don't have to declare local ones here?\n\t\t\tconst cameraNearLocal = reference( 'near', 'float', shadow.camera ).setGroup( renderGroup );\n\t\t\tconst cameraFarLocal = reference( 'far', 'float', shadow.camera ).setGroup( renderGroup );\n\n\t\t\tcoordZ = viewZToLogarithmicDepth( w.negate(), cameraNearLocal, cameraFarLocal );\n\n\t\t}\n\n\t\tshadowCoord = vec3(\n\t\t\tshadowCoord.x,\n\t\t\tshadowCoord.y.oneMinus(), // follow webgpu standards\n\t\t\tcoordZ.add( bias )\n\t\t);\n\n\t\treturn shadowCoord;\n\n\t}\n\n\t/**\n\t * Returns the shadow filtering function for the given shadow type.\n\t *\n\t * @param {number} type - The shadow type.\n\t * @return {Function} The filtering function.\n\t */\n\tgetShadowFilterFn( type ) {\n\n\t\treturn _shadowFilterLib[ type ];\n\n\t}\n\n\n\tsetupRenderTarget( shadow, builder ) {\n\n\t\tconst depthTexture = new DepthTexture( shadow.mapSize.width, shadow.mapSize.height );\n\t\tdepthTexture.name = 'ShadowDepthTexture';\n\t\tdepthTexture.compareFunction = LessCompare;\n\n\t\tconst shadowMap = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height );\n\t\tshadowMap.texture.name = 'ShadowMap';\n\t\tshadowMap.texture.type = shadow.mapType;\n\t\tshadowMap.depthTexture = depthTexture;\n\n\t\treturn { shadowMap, depthTexture };\n\n\t}\n\n\t/**\n\t * Setups the shadow output node.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @return {Node<vec3>} The shadow output node.\n\t */\n\tsetupShadow( builder ) {\n\n\t\tconst { renderer } = builder;\n\n\t\tconst { light, shadow } = this;\n\n\t\tconst shadowMapType = renderer.shadowMap.type;\n\n\t\tconst { depthTexture, shadowMap } = this.setupRenderTarget( shadow, builder );\n\n\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t// VSM\n\n\t\tif ( shadowMapType === VSMShadowMap ) {\n\n\t\t\tdepthTexture.compareFunction = null; // VSM does not use textureSampleCompare()/texture2DCompare()\n\n\t\t\tif ( shadowMap.isRenderTargetArray ) {\n\n\t\t\t\tif ( ! shadowMap._vsmShadowMapVertical ) {\n\n\t\t\t\t\tshadowMap._vsmShadowMapVertical = builder.createRenderTargetArray( shadow.mapSize.width, shadow.mapSize.height, shadowMap.depth, { format: RGFormat, type: HalfFloatType, depthBuffer: false } );\n\t\t\t\t\tshadowMap._vsmShadowMapVertical.texture.name = 'VSMVertical';\n\n\t\t\t\t}\n\n\t\t\t\tthis.vsmShadowMapVertical = shadowMap._vsmShadowMapVertical;\n\n\t\t\t\tif ( ! shadowMap._vsmShadowMapHorizontal ) {\n\n\t\t\t\t\tshadowMap._vsmShadowMapHorizontal = builder.createRenderTargetArray( shadow.mapSize.width, shadow.mapSize.height, shadowMap.depth, { format: RGFormat, type: HalfFloatType, depthBuffer: false } );\n\t\t\t\t\tshadowMap._vsmShadowMapHorizontal.texture.name = 'VSMHorizontal';\n\n\t\t\t\t}\n\n\t\t\t\tthis.vsmShadowMapHorizontal = shadowMap._vsmShadowMapHorizontal;\n\n\t\t\t} else {\n\n\t\t\t\tthis.vsmShadowMapVertical = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false } );\n\t\t\t\tthis.vsmShadowMapHorizontal = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false } );\n\n\t\t\t}\n\n\n\t\t\tlet shadowPassVertical = texture( depthTexture );\n\n\t\t\tif ( depthTexture.isDepthArrayTexture ) {\n\n\t\t\t\tshadowPassVertical = shadowPassVertical.depth( this.depthLayer );\n\n\t\t\t}\n\n\t\t\tlet shadowPassHorizontal = texture( this.vsmShadowMapVertical.texture );\n\n\t\t\tif ( depthTexture.isDepthArrayTexture ) {\n\n\t\t\t\tshadowPassHorizontal = shadowPassHorizontal.depth( this.depthLayer );\n\n\t\t\t}\n\n\t\t\tconst samples = reference( 'blurSamples', 'float', shadow ).setGroup( renderGroup );\n\t\t\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\n\t\t\tconst size = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\n\n\t\t\tlet material = this.vsmMaterialVertical || ( this.vsmMaterialVertical = new NodeMaterial() );\n\t\t\tmaterial.fragmentNode = VSMPassVertical( { samples, radius, size, shadowPass: shadowPassVertical, depthLayer: this.depthLayer } ).context( builder.getSharedContext() );\n\t\t\tmaterial.name = 'VSMVertical';\n\n\t\t\tmaterial = this.vsmMaterialHorizontal || ( this.vsmMaterialHorizontal = new NodeMaterial() );\n\t\t\tmaterial.fragmentNode = VSMPassHorizontal( { samples, radius, size, shadowPass: shadowPassHorizontal, depthLayer: this.depthLayer } ).context( builder.getSharedContext() );\n\t\t\tmaterial.name = 'VSMHorizontal';\n\n\t\t}\n\n\t\t//\n\n\t\tconst shadowIntensity = reference( 'intensity', 'float', shadow ).setGroup( renderGroup );\n\t\tconst normalBias = reference( 'normalBias', 'float', shadow ).setGroup( renderGroup );\n\n\t\tconst shadowPosition = lightShadowMatrix( light ).mul( shadowPositionWorld.add( transformedNormalWorld.mul( normalBias ) ) );\n\t\tconst shadowCoord = this.setupShadowCoord( builder, shadowPosition );\n\n\t\t//\n\n\t\tconst filterFn = shadow.filterNode || this.getShadowFilterFn( renderer.shadowMap.type ) || null;\n\n\t\tif ( filterFn === null ) {\n\n\t\t\tthrow new Error( 'THREE.WebGPURenderer: Shadow map type not supported yet.' );\n\n\t\t}\n\n\t\tconst shadowDepthTexture = ( shadowMapType === VSMShadowMap ) ? this.vsmShadowMapHorizontal.texture : depthTexture;\n\n\t\tconst shadowNode = this.setupShadowFilter( builder, { filterFn, shadowTexture: shadowMap.texture, depthTexture: shadowDepthTexture, shadowCoord, shadow, depthLayer: this.depthLayer } );\n\n\t\tlet shadowColor = texture( shadowMap.texture, shadowCoord );\n\n\t\tif ( depthTexture.isDepthArrayTexture ) {\n\n\t\t\tshadowColor = shadowColor.depth( this.depthLayer );\n\n\t\t}\n\n\t\tconst shadowOutput = mix( 1, shadowNode.rgb.mix( shadowColor, 1 ), shadowIntensity.mul( shadowColor.a ) ).toVar();\n\n\t\tthis.shadowMap = shadowMap;\n\t\tthis.shadow.map = shadowMap;\n\n\t\treturn shadowOutput;\n\n\t}\n\n\t/**\n\t * The implementation performs the setup of the output node. An output is only\n\t * produces if shadow mapping is globally enabled in the renderer.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @return {ShaderCallNodeInternal} The output node.\n\t */\n\tsetup( builder ) {\n\n\t\tif ( builder.renderer.shadowMap.enabled === false ) return;\n\n\t\treturn Fn( () => {\n\n\t\t\tlet node = this._node;\n\n\t\t\tthis.setupShadowPosition( builder );\n\n\t\t\tif ( node === null ) {\n\n\t\t\t\tthis._node = node = this.setupShadow( builder );\n\n\t\t\t}\n\n\t\t\tif ( builder.material.shadowNode ) { // @deprecated, r171\n\n\t\t\t\tconsole.warn( 'THREE.NodeMaterial: \".shadowNode\" is deprecated. Use \".castShadowNode\" instead.' );\n\n\t\t\t}\n\n\t\t\tif ( builder.material.receivedShadowNode ) {\n\n\t\t\t\tnode = builder.material.receivedShadowNode( node );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * Renders the shadow. The logic of this function could be included\n\t * into {@link ShadowNode#updateShadow} however more specialized shadow\n\t * nodes might require a custom shadow map rendering. By having a\n\t * dedicated method, it's easier to overwrite the default behavior.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\trenderShadow( frame ) {\n\n\t\tconst { shadow, shadowMap, light } = this;\n\t\tconst { renderer, scene } = frame;\n\n\t\tshadow.updateMatrices( light );\n\n\t\tshadowMap.setSize( shadow.mapSize.width, shadow.mapSize.height, shadowMap.depth );\n\n\t\trenderer.render( scene, shadow.camera );\n\n\t}\n\n\t/**\n\t * Updates the shadow.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdateShadow( frame ) {\n\n\t\tconst { shadowMap, light, shadow } = this;\n\t\tconst { renderer, scene, camera } = frame;\n\n\t\tconst shadowType = renderer.shadowMap.type;\n\n\t\tconst depthVersion = shadowMap.depthTexture.version;\n\t\tthis._depthVersionCached = depthVersion;\n\n\t\tconst _shadowCameraLayer = shadow.camera.layers.mask;\n\n\t\tif ( ( shadow.camera.layers.mask & 0xFFFFFFFE ) === 0 ) {\n\n\t\t\tshadow.camera.layers.mask = camera.layers.mask;\n\n\t\t}\n\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\n\n\t\tconst currentMRT = renderer.getMRT();\n\t\tconst useVelocity = currentMRT ? currentMRT.has( 'velocity' ) : false;\n\n\t\t_rendererState = resetRendererAndSceneState( renderer, scene, _rendererState );\n\n\t\tscene.overrideMaterial = getShadowMaterial( light );\n\n\t\trenderer.setRenderObjectFunction( getShadowRenderObjectFunction( renderer, shadow, shadowType, useVelocity ) );\n\n\t\trenderer.setClearColor( 0x000000, 0 );\n\n\t\trenderer.setRenderTarget( shadowMap );\n\n\t\tthis.renderShadow( frame );\n\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\n\n\t\t// vsm blur pass\n\n\t\tif ( light.isPointLight !== true && shadowType === VSMShadowMap ) {\n\n\t\t\tthis.vsmPass( renderer );\n\n\t\t}\n\n\t\tshadow.camera.layers.mask = _shadowCameraLayer;\n\n\t\trestoreRendererAndSceneState( renderer, scene, _rendererState );\n\n\t}\n\n\t/**\n\t * For VSM additional render passes are required.\n\t *\n\t * @param {Renderer} renderer - A reference to the current renderer.\n\t */\n\tvsmPass( renderer ) {\n\n\t\tconst { shadow } = this;\n\n\t\tconst depth = this.shadowMap.depth;\n\t\tthis.vsmShadowMapVertical.setSize( shadow.mapSize.width, shadow.mapSize.height, depth );\n\t\tthis.vsmShadowMapHorizontal.setSize( shadow.mapSize.width, shadow.mapSize.height, depth );\n\n\t\trenderer.setRenderTarget( this.vsmShadowMapVertical );\n\t\t_quadMesh.material = this.vsmMaterialVertical;\n\t\t_quadMesh.render( renderer );\n\n\t\trenderer.setRenderTarget( this.vsmShadowMapHorizontal );\n\t\t_quadMesh.material = this.vsmMaterialHorizontal;\n\t\t_quadMesh.render( renderer );\n\n\t}\n\n\t/**\n\t * Frees the internal resources of this shadow node.\n\t */\n\tdispose() {\n\n\t\tthis.shadowMap.dispose();\n\t\tthis.shadowMap = null;\n\n\t\tif ( this.vsmShadowMapVertical !== null ) {\n\n\t\t\tthis.vsmShadowMapVertical.dispose();\n\t\t\tthis.vsmShadowMapVertical = null;\n\n\t\t\tthis.vsmMaterialVertical.dispose();\n\t\t\tthis.vsmMaterialVertical = null;\n\n\t\t}\n\n\t\tif ( this.vsmShadowMapHorizontal !== null ) {\n\n\t\t\tthis.vsmShadowMapHorizontal.dispose();\n\t\t\tthis.vsmShadowMapHorizontal = null;\n\n\t\t\tthis.vsmMaterialHorizontal.dispose();\n\t\t\tthis.vsmMaterialHorizontal = null;\n\n\t\t}\n\n\t\tsuper.dispose();\n\n\t}\n\n\t/**\n\t * The implementation performs the update of the shadow map if necessary.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdateBefore( frame ) {\n\n\t\tconst { shadow } = this;\n\n\t\tlet needsUpdate = shadow.needsUpdate || shadow.autoUpdate;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tif ( this._cameraFrameId[ frame.camera ] === frame.frameId ) {\n\n\t\t\t\tneedsUpdate = false;\n\n\t\t\t}\n\n\t\t\tthis._cameraFrameId[ frame.camera ] = frame.frameId;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tthis.updateShadow( frame );\n\n\t\t\tif ( this.shadowMap.depthTexture.version === this._depthVersionCached ) {\n\n\t\t\t\tshadow.needsUpdate = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * TSL function for creating an instance of `ShadowNode`.\n *\n * @tsl\n * @function\n * @param {Light} light - The shadow casting light.\n * @param {?LightShadow} [shadow] - The light shadow.\n * @return {ShadowNode} The created shadow node.\n */\nconst shadow = ( light, shadow ) => nodeObject( new ShadowNode( light, shadow ) );\n\nconst _clearColor$1 = /*@__PURE__*/ new Color();\n\n// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n// vector suitable for 2D texture mapping. This code uses the following layout for the\n// 2D texture:\n//\n// xzXZ\n//  y Y\n//\n// Y - Positive y direction\n// y - Negative y direction\n// X - Positive x direction\n// x - Negative x direction\n// Z - Positive z direction\n// z - Negative z direction\n//\n// Source and test bed:\n// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\nconst cubeToUV = /*@__PURE__*/ Fn( ( [ pos, texelSizeY ] ) => {\n\n\tconst v = pos.toVar();\n\n\t// Number of texels to avoid at the edge of each square\n\n\tconst absV = abs( v );\n\n\t// Intersect unit cube\n\n\tconst scaleToCube = div( 1.0, max$1( absV.x, max$1( absV.y, absV.z ) ) );\n\tabsV.mulAssign( scaleToCube );\n\n\t// Apply scale to avoid seams\n\n\t// two texels less per square (one texel will do for NEAREST)\n\tv.mulAssign( scaleToCube.mul( texelSizeY.mul( 2 ).oneMinus() ) );\n\n\t// Unwrap\n\n\t// space: -1 ... 1 range for each square\n\t//\n\t// #X##\t\tdim    := ( 4 , 2 )\n\t//  # #\t\tcenter := ( 1 , 1 )\n\n\tconst planar = vec2( v.xy ).toVar();\n\n\tconst almostATexel = texelSizeY.mul( 1.5 );\n\tconst almostOne = almostATexel.oneMinus();\n\n\tIf( absV.z.greaterThanEqual( almostOne ), () => {\n\n\t\tIf( v.z.greaterThan( 0.0 ), () => {\n\n\t\t\tplanar.x.assign( sub( 4.0, v.x ) );\n\n\t\t} );\n\n\t} ).ElseIf( absV.x.greaterThanEqual( almostOne ), () => {\n\n\t\tconst signX = sign( v.x );\n\t\tplanar.x.assign( v.z.mul( signX ).add( signX.mul( 2.0 ) ) );\n\n\t} ).ElseIf( absV.y.greaterThanEqual( almostOne ), () => {\n\n\t\tconst signY = sign( v.y );\n\t\tplanar.x.assign( v.x.add( signY.mul( 2.0 ) ).add( 2.0 ) );\n\t\tplanar.y.assign( v.z.mul( signY ).sub( 2.0 ) );\n\n\t} );\n\n\t// Transform to UV space\n\n\t// scale := 0.5 / dim\n\t// translate := ( center + 0.5 ) / dim\n\treturn vec2( 0.125, 0.25 ).mul( planar ).add( vec2( 0.375, 0.75 ) ).flipY();\n\n} ).setLayout( {\n\tname: 'cubeToUV',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'pos', type: 'vec3' },\n\t\t{ name: 'texelSizeY', type: 'float' }\n\t]\n} );\n\nconst BasicPointShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, bd3D, dp, texelSize } ) => {\n\n\treturn texture( depthTexture, cubeToUV( bd3D, texelSize.y ) ).compare( dp );\n\n} );\n\nconst PointShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, bd3D, dp, texelSize, shadow } ) => {\n\n\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\n\tconst offset = vec2( -1, 1.0 ).mul( radius ).mul( texelSize.y );\n\n\treturn texture( depthTexture, cubeToUV( bd3D.add( offset.xyy ), texelSize.y ) ).compare( dp )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yyy ), texelSize.y ) ).compare( dp ) )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.xyx ), texelSize.y ) ).compare( dp ) )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yyx ), texelSize.y ) ).compare( dp ) )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D, texelSize.y ) ).compare( dp ) )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.xxy ), texelSize.y ) ).compare( dp ) )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yxy ), texelSize.y ) ).compare( dp ) )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.xxx ), texelSize.y ) ).compare( dp ) )\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yxx ), texelSize.y ) ).compare( dp ) )\n\t\t.mul( 1.0 / 9.0 );\n\n} );\n\nconst pointShadowFilter = /*@__PURE__*/ Fn( ( { filterFn, depthTexture, shadowCoord, shadow } ) => {\n\n\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t// the vector from the light to the world-space position of the fragment.\n\tconst lightToPosition = shadowCoord.xyz.toVar();\n\tconst lightToPositionLength = lightToPosition.length();\n\n\tconst cameraNearLocal = uniform( 'float' ).setGroup( renderGroup ).onRenderUpdate( () => shadow.camera.near );\n\tconst cameraFarLocal = uniform( 'float' ).setGroup( renderGroup ).onRenderUpdate( () => shadow.camera.far );\n\tconst bias = reference( 'bias', 'float', shadow ).setGroup( renderGroup );\n\tconst mapSize = uniform( shadow.mapSize ).setGroup( renderGroup );\n\n\tconst result = float( 1.0 ).toVar();\n\n\tIf( lightToPositionLength.sub( cameraFarLocal ).lessThanEqual( 0.0 ).and( lightToPositionLength.sub( cameraNearLocal ).greaterThanEqual( 0.0 ) ), () => {\n\n\t\t// dp = normalized distance from light to fragment position\n\t\tconst dp = lightToPositionLength.sub( cameraNearLocal ).div( cameraFarLocal.sub( cameraNearLocal ) ).toVar(); // need to clamp?\n\t\tdp.addAssign( bias );\n\n\t\t// bd3D = base direction 3D\n\t\tconst bd3D = lightToPosition.normalize();\n\t\tconst texelSize = vec2( 1.0 ).div( mapSize.mul( vec2( 4.0, 2.0 ) ) );\n\n\t\t// percentage-closer filtering\n\t\tresult.assign( filterFn( { depthTexture, bd3D, dp, texelSize, shadow } ) );\n\n\t} );\n\n\treturn result;\n\n} );\n\nconst _viewport = /*@__PURE__*/ new Vector4();\nconst _viewportSize = /*@__PURE__*/ new Vector2();\nconst _shadowMapSize = /*@__PURE__*/ new Vector2();\n\n\n/**\n * Represents the shadow implementation for point light nodes.\n *\n * @augments ShadowNode\n */\nclass PointShadowNode extends ShadowNode {\n\n\tstatic get type() {\n\n\t\treturn 'PointShadowNode';\n\n\t}\n\n\t/**\n\t * Constructs a new point shadow node.\n\t *\n\t * @param {PointLight} light - The shadow casting point light.\n\t * @param {?PointLightShadow} [shadow=null] - An optional point light shadow.\n\t */\n\tconstructor( light, shadow = null ) {\n\n\t\tsuper( light, shadow );\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return point light shadow specific\n\t * filtering functions.\n\t *\n\t * @param {number} type - The shadow type.\n\t * @return {Function} The filtering function.\n\t */\n\tgetShadowFilterFn( type ) {\n\n\t\treturn type === BasicShadowMap ? BasicPointShadowFilter : PointShadowFilter;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation so the unaltered shadow position is used.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @param {Node<vec3>} shadowPosition - A node representing the shadow position.\n\t * @return {Node<vec3>} The shadow coordinates.\n\t */\n\tsetupShadowCoord( builder, shadowPosition ) {\n\n\t\treturn shadowPosition;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to only use point light specific\n\t * shadow filter functions.\n\t *\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\n\t * @param {Object} inputs - A configuration object that defines the shadow filtering.\n\t * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.\n\t * @param {Texture} inputs.shadowTexture - A reference to the shadow map's texture.\n\t * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\n\t * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.\n\t * @param {LightShadow} inputs.shadow - The light shadow.\n\t * @return {Node<float>} The result node of the shadow filtering.\n\t */\n\tsetupShadowFilter( builder, { filterFn, shadowTexture, depthTexture, shadowCoord, shadow } ) {\n\n\t\treturn pointShadowFilter( { filterFn, shadowTexture, depthTexture, shadowCoord, shadow } );\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation with point light specific\n\t * rendering code.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\trenderShadow( frame ) {\n\n\t\tconst { shadow, shadowMap, light } = this;\n\t\tconst { renderer, scene } = frame;\n\n\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\tshadowMap.setSize( _shadowMapSize.width, _shadowMapSize.height );\n\n\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t//\n\n\t\tconst previousAutoClear = renderer.autoClear;\n\n\t\tconst previousClearColor = renderer.getClearColor( _clearColor$1 );\n\t\tconst previousClearAlpha = renderer.getClearAlpha();\n\n\t\trenderer.autoClear = false;\n\t\trenderer.setClearColor( shadow.clearColor, shadow.clearAlpha );\n\t\trenderer.clear();\n\n\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\tconst x = _viewportSize.x * viewport.x;\n\t\t\tconst y = _shadowMapSize.y - _viewportSize.y - ( _viewportSize.y * viewport.y );\n\n\t\t\t_viewport.set(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t);\n\n\t\t\tshadowMap.viewport.copy( _viewport );\n\n\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\trenderer.render( scene, shadow.camera );\n\n\t\t}\n\n\t\t//\n\n\t\trenderer.autoClear = previousAutoClear;\n\t\trenderer.setClearColor( previousClearColor, previousClearAlpha );\n\n\t}\n\n}\n\n/**\n * TSL function for creating an instance of `PointShadowNode`.\n *\n * @tsl\n * @function\n * @param {PointLight} light - The shadow casting point light.\n * @param {?PointLightShadow} [shadow=null] - An optional point light shadow.\n * @return {PointShadowNode} The created point shadow node.\n */\nconst pointShadow = ( light, shadow ) => nodeObject( new PointShadowNode( light, shadow ) );\n\n/**\n * Base class for analytic light nodes.\n *\n * @augments LightingNode\n */\nclass AnalyticLightNode extends LightingNode {\n\n\tstatic get type() {\n\n\t\treturn 'AnalyticLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new analytic light node.\n\t *\n\t * @param {?Light} [light=null] - The light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light source.\n\t\t *\n\t\t * @type {?Light}\n\t\t * @default null\n\t\t */\n\t\tthis.light = light;\n\n\t\t/**\n\t\t * The light's color value.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color();\n\n\t\t/**\n\t\t * The light's color node. Points to `colorNode` of the light source, if set. Otherwise\n\t\t * it creates a uniform node based on {@link AnalyticLightNode#color}.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.colorNode = ( light && light.colorNode ) || uniform( this.color ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * This property is used to retain a reference to the original value of {@link AnalyticLightNode#colorNode}.\n\t\t * The final color node is represented by a different node when using shadows.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.baseColorNode = null;\n\n\t\t/**\n\t\t * Represents the light's shadow.\n\t\t *\n\t\t * @type {?ShadowNode}\n   \t\t * @default null\n\t\t */\n\t\tthis.shadowNode = null;\n\n\t\t/**\n\t\t * Represents the light's shadow color.\n\t\t *\n\t\t * @type {?Node}\n   \t\t * @default null\n\t\t */\n\t\tthis.shadowColorNode = null;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isAnalyticLightNode = true;\n\n\t\t/**\n\t\t * Overwritten since analytic light nodes are updated\n\t\t * once per frame.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.FRAME;\n\n\t}\n\n\t/**\n\t * Overwrites the default {@link Node#customCacheKey} implementation by including the\n\t * `light.id` and `light.castShadow` into the cache key.\n\t *\n\t * @return {number} The custom cache key.\n\t */\n\tcustomCacheKey() {\n\n\t\treturn hash$1( this.light.id, this.light.castShadow ? 1 : 0 );\n\n\t}\n\n\tgetHash() {\n\n\t\treturn this.light.uuid;\n\n\t}\n\n\tgetLightVector( builder ) {\n\n\t\treturn lightViewPosition( this.light ).sub( builder.context.positionView || positionView );\n\n\t}\n\n\t/**\n\t * Sets up the direct lighting for the analytic light node.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The builder object used for setting up the light.\n\t * @return {Object|undefined} The direct light data (color and direction).\n\t */\n\tsetupDirect( /*builder*/ ) { }\n\n\t/**\n\t * Sets up the direct rect area lighting for the analytic light node.\n\t *\n\t * @abstract\n\t * @param {NodeBuilder} builder - The builder object used for setting up the light.\n\t * @return {Object|undefined} The direct rect area light data.\n\t */\n\tsetupDirectRectArea( /*builder*/ ) { }\n\n\t/**\n\t * Setups the shadow node for this light. The method exists so concrete light classes\n\t * can setup different types of shadow nodes.\n\t *\n\t * @return {ShadowNode} The created shadow node.\n\t */\n\tsetupShadowNode() {\n\n\t\treturn shadow( this.light );\n\n\t}\n\n\t/**\n\t * Setups the shadow for this light. This method is only executed if the light\n\t * cast shadows and the current build object receives shadows. It incorporates\n\t * shadows into the lighting computation.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupShadow( builder ) {\n\n\t\tconst { renderer } = builder;\n\n\t\tif ( renderer.shadowMap.enabled === false ) return;\n\n\t\tlet shadowColorNode = this.shadowColorNode;\n\n\t\tif ( shadowColorNode === null ) {\n\n\t\t\tconst customShadowNode = this.light.shadow.shadowNode;\n\n\t\t\tlet shadowNode;\n\n\t\t\tif ( customShadowNode !== undefined ) {\n\n\t\t\t\tshadowNode = nodeObject( customShadowNode );\n\n\t\t\t} else {\n\n\t\t\t\tshadowNode = this.setupShadowNode();\n\n\t\t\t}\n\n\t\t\tthis.shadowNode = shadowNode;\n\n\t\t\tthis.shadowColorNode = shadowColorNode = this.colorNode.mul( shadowNode );\n\n\t\t\tthis.baseColorNode = this.colorNode;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.colorNode = shadowColorNode;\n\n\t}\n\n\t/**\n\t * Unlike most other nodes, lighting nodes do not return a output node in {@link Node#setup}.\n\t * The main purpose of lighting nodes is to configure the current {@link LightingModel} and/or\n\t * invocate the respective interface methods.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tthis.colorNode = this.baseColorNode || this.colorNode;\n\n\t\tif ( this.light.castShadow ) {\n\n\t\t\tif ( builder.object.receiveShadow ) {\n\n\t\t\t\tthis.setupShadow( builder );\n\n\t\t\t}\n\n\t\t} else if ( this.shadowNode !== null ) {\n\n\t\t\tthis.shadowNode.dispose();\n\t\t\tthis.shadowNode = null;\n\t\t\tthis.shadowColorNode = null;\n\n\t\t}\n\n\t\tconst directLightData = this.setupDirect( builder );\n\t\tconst directRectAreaLightData = this.setupDirectRectArea( builder );\n\n\t\tif ( directLightData ) {\n\n\t\t\tbuilder.lightsNode.setupDirectLight( builder, this, directLightData );\n\n\t\t}\n\n\t\tif ( directRectAreaLightData ) {\n\n\t\t\tbuilder.lightsNode.setupDirectRectAreaLight( builder, this, directRectAreaLightData );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * The update method is used to update light uniforms per frame.\n\t * Potentially overwritten in concrete light nodes to update light\n\t * specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( /*frame*/ ) {\n\n\t\tconst { light } = this;\n\n\t\tthis.color.copy( light.color ).multiplyScalar( light.intensity );\n\n\t}\n\n}\n\n/**\n * Represents a `discard` shader operation in TSL.\n *\n * @method\n * @param {Object} inputs - The input parameter object.\n * @param {Node<float>} inputs.lightDistance - The distance of the light's position to the current fragment position.\n * @param {Node<float>} inputs.cutoffDistance - The light's cutoff distance.\n * @param {Node<float>} inputs.decayExponent - The light's decay exponent.\n * @return {Node<float>} The distance falloff.\n */\nconst getDistanceAttenuation = /*@__PURE__*/ Fn( ( { lightDistance, cutoffDistance, decayExponent } ) => {\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\tconst distanceFalloff = lightDistance.pow( decayExponent ).max( 0.01 ).reciprocal();\n\n\treturn cutoffDistance.greaterThan( 0 ).select(\n\t\tdistanceFalloff.mul( lightDistance.div( cutoffDistance ).pow4().oneMinus().clamp().pow2() ),\n\t\tdistanceFalloff\n\t);\n\n} ); // validated\n\nconst directPointLight = ( { color, lightVector, cutoffDistance, decayExponent } ) => {\n\n\tconst lightDirection = lightVector.normalize();\n\tconst lightDistance = lightVector.length();\n\n\tconst attenuation = getDistanceAttenuation( {\n\t\tlightDistance,\n\t\tcutoffDistance,\n\t\tdecayExponent\n\t} );\n\n\tconst lightColor = color.mul( attenuation );\n\n\treturn { lightDirection, lightColor };\n\n};\n\n/**\n * Module for representing point lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass PointLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'PointLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new point light node.\n\t *\n\t * @param {?PointLight} [light=null] - The point light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * Uniform node representing the cutoff distance.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the decay exponent.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.decayExponentNode = uniform( 2 ).setGroup( renderGroup );\n\n\t}\n\n\t/**\n\t * Overwritten to updated point light specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\t/**\n\t * Overwritten to setup point light specific shadow.\n\t *\n\t * @return {PointShadowNode}\n\t */\n\tsetupShadowNode() {\n\n\t\treturn pointShadow( this.light );\n\n\t}\n\n\tsetupDirect( builder ) {\n\n\t\treturn directPointLight( {\n\t\t\tcolor: this.colorNode,\n\t\t\tlightVector: this.getLightVector( builder ),\n\t\t\tcutoffDistance: this.cutoffDistanceNode,\n\t\t\tdecayExponent: this.decayExponentNode\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Creates a 2x2 checkerboard pattern that can be used as procedural texture data.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} coord - The uv coordinates.\n * @return {Node<float>} The result data.\n */\nconst checker = /*@__PURE__*/ Fn( ( [ coord = uv() ] ) => {\n\n\tconst uv = coord.mul( 2.0 );\n\n\tconst cx = uv.x.floor();\n\tconst cy = uv.y.floor();\n\tconst result = cx.add( cy ).mod( 2.0 );\n\n\treturn result.sign();\n\n} );\n\n/**\n * Generates a circle based on the uv coordinates.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} coord - The uv to generate the circle.\n * @return {Node<float>} The circle shape.\n */\nconst shapeCircle = Fn( ( [ coord = uv() ], { renderer, material } ) => {\n\n\tconst alpha = float( 1 ).toVar();\n\tconst len2 = lengthSq( coord.mul( 2 ).sub( 1 ) );\n\n\tif ( material.alphaToCoverage && renderer.samples > 1 ) {\n\n\t\tconst dlen = float( len2.fwidth() ).toVar();\n\n\t\talpha.assign( smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus() );\n\n\t} else {\n\n\t\tlen2.greaterThan( 1.0 ).discard();\n\n\t}\n\n\treturn alpha;\n\n} );\n\n// Three.js Transpiler\n// https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/libraries/stdlib/genglsl/lib/mx_noise.glsl\n\n\n\nconst mx_select = /*@__PURE__*/ Fn( ( [ b_immutable, t_immutable, f_immutable ] ) => {\n\n\tconst f = float( f_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst b = bool( b_immutable ).toVar();\n\n\treturn select( b, t, f );\n\n} ).setLayout( {\n\tname: 'mx_select',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'b', type: 'bool' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'f', type: 'float' }\n\t]\n} );\n\nconst mx_negate_if = /*@__PURE__*/ Fn( ( [ val_immutable, b_immutable ] ) => {\n\n\tconst b = bool( b_immutable ).toVar();\n\tconst val = float( val_immutable ).toVar();\n\n\treturn select( b, val.negate(), val );\n\n} ).setLayout( {\n\tname: 'mx_negate_if',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'val', type: 'float' },\n\t\t{ name: 'b', type: 'bool' }\n\t]\n} );\n\nconst mx_floor = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = float( x_immutable ).toVar();\n\n\treturn int( floor( x ) );\n\n} ).setLayout( {\n\tname: 'mx_floor',\n\ttype: 'int',\n\tinputs: [\n\t\t{ name: 'x', type: 'float' }\n\t]\n} );\n\nconst mx_floorfrac = /*@__PURE__*/ Fn( ( [ x_immutable, i ] ) => {\n\n\tconst x = float( x_immutable ).toVar();\n\ti.assign( mx_floor( x ) );\n\n\treturn x.sub( float( i ) );\n\n} );\n\nconst mx_bilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v3 = float( v3_immutable ).toVar();\n\tconst v2 = float( v2_immutable ).toVar();\n\tconst v1 = float( v1_immutable ).toVar();\n\tconst v0 = float( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bilerp_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v0', type: 'float' },\n\t\t{ name: 'v1', type: 'float' },\n\t\t{ name: 'v2', type: 'float' },\n\t\t{ name: 'v3', type: 'float' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nconst mx_bilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v3 = vec3( v3_immutable ).toVar();\n\tconst v2 = vec3( v2_immutable ).toVar();\n\tconst v1 = vec3( v1_immutable ).toVar();\n\tconst v0 = vec3( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bilerp_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v0', type: 'vec3' },\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' },\n\t\t{ name: 'v3', type: 'vec3' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nconst mx_bilerp = /*@__PURE__*/ overloadingFn( [ mx_bilerp_0, mx_bilerp_1 ] );\n\nconst mx_trilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\n\n\tconst r = float( r_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v7 = float( v7_immutable ).toVar();\n\tconst v6 = float( v6_immutable ).toVar();\n\tconst v5 = float( v5_immutable ).toVar();\n\tconst v4 = float( v4_immutable ).toVar();\n\tconst v3 = float( v3_immutable ).toVar();\n\tconst v2 = float( v2_immutable ).toVar();\n\tconst v1 = float( v1_immutable ).toVar();\n\tconst v0 = float( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\n\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_trilerp_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v0', type: 'float' },\n\t\t{ name: 'v1', type: 'float' },\n\t\t{ name: 'v2', type: 'float' },\n\t\t{ name: 'v3', type: 'float' },\n\t\t{ name: 'v4', type: 'float' },\n\t\t{ name: 'v5', type: 'float' },\n\t\t{ name: 'v6', type: 'float' },\n\t\t{ name: 'v7', type: 'float' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'r', type: 'float' }\n\t]\n} );\n\nconst mx_trilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\n\n\tconst r = float( r_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v7 = vec3( v7_immutable ).toVar();\n\tconst v6 = vec3( v6_immutable ).toVar();\n\tconst v5 = vec3( v5_immutable ).toVar();\n\tconst v4 = vec3( v4_immutable ).toVar();\n\tconst v3 = vec3( v3_immutable ).toVar();\n\tconst v2 = vec3( v2_immutable ).toVar();\n\tconst v1 = vec3( v1_immutable ).toVar();\n\tconst v0 = vec3( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\n\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_trilerp_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v0', type: 'vec3' },\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' },\n\t\t{ name: 'v3', type: 'vec3' },\n\t\t{ name: 'v4', type: 'vec3' },\n\t\t{ name: 'v5', type: 'vec3' },\n\t\t{ name: 'v6', type: 'vec3' },\n\t\t{ name: 'v7', type: 'vec3' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'r', type: 'float' }\n\t]\n} );\n\nconst mx_trilerp = /*@__PURE__*/ overloadingFn( [ mx_trilerp_0, mx_trilerp_1 ] );\n\nconst mx_gradient_float_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\n\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uint( hash_immutable ).toVar();\n\tconst h = uint( hash.bitAnd( uint( 7 ) ) ).toVar();\n\tconst u = float( mx_select( h.lessThan( uint( 4 ) ), x, y ) ).toVar();\n\tconst v = float( mul( 2.0, mx_select( h.lessThan( uint( 4 ) ), y, x ) ) ).toVar();\n\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uint' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' }\n\t]\n} );\n\nconst mx_gradient_float_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = float( z_immutable ).toVar();\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uint( hash_immutable ).toVar();\n\tconst h = uint( hash.bitAnd( uint( 15 ) ) ).toVar();\n\tconst u = float( mx_select( h.lessThan( uint( 8 ) ), x, y ) ).toVar();\n\tconst v = float( mx_select( h.lessThan( uint( 4 ) ), y, mx_select( h.equal( uint( 12 ) ).or( h.equal( uint( 14 ) ) ), x, z ) ) ).toVar();\n\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uint' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' },\n\t\t{ name: 'z', type: 'float' }\n\t]\n} );\n\nconst mx_gradient_float = /*@__PURE__*/ overloadingFn( [ mx_gradient_float_0, mx_gradient_float_1 ] );\n\nconst mx_gradient_vec3_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\n\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uvec3( hash_immutable ).toVar();\n\n\treturn vec3( mx_gradient_float( hash.x, x, y ), mx_gradient_float( hash.y, x, y ), mx_gradient_float( hash.z, x, y ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uvec3' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' }\n\t]\n} );\n\nconst mx_gradient_vec3_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = float( z_immutable ).toVar();\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uvec3( hash_immutable ).toVar();\n\n\treturn vec3( mx_gradient_float( hash.x, x, y, z ), mx_gradient_float( hash.y, x, y, z ), mx_gradient_float( hash.z, x, y, z ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uvec3' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' },\n\t\t{ name: 'z', type: 'float' }\n\t]\n} );\n\nconst mx_gradient_vec3 = /*@__PURE__*/ overloadingFn( [ mx_gradient_vec3_0, mx_gradient_vec3_1 ] );\n\nconst mx_gradient_scale2d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = float( v_immutable ).toVar();\n\n\treturn mul( 0.6616, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale2d_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v', type: 'float' }\n\t]\n} );\n\nconst mx_gradient_scale3d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = float( v_immutable ).toVar();\n\n\treturn mul( 0.9820, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale3d_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v', type: 'float' }\n\t]\n} );\n\nconst mx_gradient_scale2d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = vec3( v_immutable ).toVar();\n\n\treturn mul( 0.6616, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale2d_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v', type: 'vec3' }\n\t]\n} );\n\nconst mx_gradient_scale2d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale2d_0, mx_gradient_scale2d_1 ] );\n\nconst mx_gradient_scale3d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = vec3( v_immutable ).toVar();\n\n\treturn mul( 0.9820, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale3d_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v', type: 'vec3' }\n\t]\n} );\n\nconst mx_gradient_scale3d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale3d_0, mx_gradient_scale3d_1 ] );\n\nconst mx_rotl32 = /*@__PURE__*/ Fn( ( [ x_immutable, k_immutable ] ) => {\n\n\tconst k = int( k_immutable ).toVar();\n\tconst x = uint( x_immutable ).toVar();\n\n\treturn x.shiftLeft( k ).bitOr( x.shiftRight( int( 32 ).sub( k ) ) );\n\n} ).setLayout( {\n\tname: 'mx_rotl32',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'uint' },\n\t\t{ name: 'k', type: 'int' }\n\t]\n} );\n\nconst mx_bjmix = /*@__PURE__*/ Fn( ( [ a, b, c ] ) => {\n\n\ta.subAssign( c );\n\ta.bitXorAssign( mx_rotl32( c, int( 4 ) ) );\n\tc.addAssign( b );\n\tb.subAssign( a );\n\tb.bitXorAssign( mx_rotl32( a, int( 6 ) ) );\n\ta.addAssign( c );\n\tc.subAssign( b );\n\tc.bitXorAssign( mx_rotl32( b, int( 8 ) ) );\n\tb.addAssign( a );\n\ta.subAssign( c );\n\ta.bitXorAssign( mx_rotl32( c, int( 16 ) ) );\n\tc.addAssign( b );\n\tb.subAssign( a );\n\tb.bitXorAssign( mx_rotl32( a, int( 19 ) ) );\n\ta.addAssign( c );\n\tc.subAssign( b );\n\tc.bitXorAssign( mx_rotl32( b, int( 4 ) ) );\n\tb.addAssign( a );\n\n} );\n\nconst mx_bjfinal = /*@__PURE__*/ Fn( ( [ a_immutable, b_immutable, c_immutable ] ) => {\n\n\tconst c = uint( c_immutable ).toVar();\n\tconst b = uint( b_immutable ).toVar();\n\tconst a = uint( a_immutable ).toVar();\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 14 ) ) );\n\ta.bitXorAssign( c );\n\ta.subAssign( mx_rotl32( c, int( 11 ) ) );\n\tb.bitXorAssign( a );\n\tb.subAssign( mx_rotl32( a, int( 25 ) ) );\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 16 ) ) );\n\ta.bitXorAssign( c );\n\ta.subAssign( mx_rotl32( c, int( 4 ) ) );\n\tb.bitXorAssign( a );\n\tb.subAssign( mx_rotl32( a, int( 14 ) ) );\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 24 ) ) );\n\n\treturn c;\n\n} ).setLayout( {\n\tname: 'mx_bjfinal',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'a', type: 'uint' },\n\t\t{ name: 'b', type: 'uint' },\n\t\t{ name: 'c', type: 'uint' }\n\t]\n} );\n\nconst mx_bits_to_01 = /*@__PURE__*/ Fn( ( [ bits_immutable ] ) => {\n\n\tconst bits = uint( bits_immutable ).toVar();\n\n\treturn float( bits ).div( float( uint( int( 0xffffffff ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bits_to_01',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'bits', type: 'uint' }\n\t]\n} );\n\nconst mx_fade = /*@__PURE__*/ Fn( ( [ t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\n\treturn t.mul( t ).mul( t ).mul( t.mul( t.mul( 6.0 ).sub( 15.0 ) ).add( 10.0 ) );\n\n} ).setLayout( {\n\tname: 'mx_fade',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nconst mx_hash_int_0 = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 1 ) ).toVar();\n\tconst seed = uint( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ).toVar();\n\n\treturn mx_bjfinal( seed.add( uint( x ) ), seed, seed );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_0',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' }\n\t]\n} );\n\nconst mx_hash_int_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\n\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 2 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_1',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' }\n\t]\n} );\n\nconst mx_hash_int_2 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 3 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_2',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' }\n\t]\n} );\n\nconst mx_hash_int_3 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable ] ) => {\n\n\tconst xx = int( xx_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 4 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\tmx_bjmix( a, b, c );\n\ta.addAssign( uint( xx ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_3',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xx', type: 'int' }\n\t]\n} );\n\nconst mx_hash_int_4 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable ] ) => {\n\n\tconst yy = int( yy_immutable ).toVar();\n\tconst xx = int( xx_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 5 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\tmx_bjmix( a, b, c );\n\ta.addAssign( uint( xx ) );\n\tb.addAssign( uint( yy ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_4',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xx', type: 'int' },\n\t\t{ name: 'yy', type: 'int' }\n\t]\n} );\n\nconst mx_hash_int = /*@__PURE__*/ overloadingFn( [ mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4 ] );\n\nconst mx_hash_vec3_0 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\n\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst h = uint( mx_hash_int( x, y ) ).toVar();\n\tconst result = uvec3().toVar();\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hash_vec3_0',\n\ttype: 'uvec3',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' }\n\t]\n} );\n\nconst mx_hash_vec3_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst h = uint( mx_hash_int( x, y, z ) ).toVar();\n\tconst result = uvec3().toVar();\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hash_vec3_1',\n\ttype: 'uvec3',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' }\n\t]\n} );\n\nconst mx_hash_vec3 = /*@__PURE__*/ overloadingFn( [ mx_hash_vec3_0, mx_hash_vec3_1 ] );\n\nconst mx_perlin_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst result = float( mx_bilerp( mx_gradient_float( mx_hash_int( X, Y ), fx, fy ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\n\n\treturn mx_gradient_scale2d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nconst mx_perlin_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst w = float( mx_fade( fz ) ).toVar();\n\tconst result = float( mx_trilerp( mx_gradient_float( mx_hash_int( X, Y, Z ), fx, fy, fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\n\n\treturn mx_gradient_scale3d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nconst mx_perlin_noise_float = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_float_0, mx_perlin_noise_float_1 ] );\n\nconst mx_perlin_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst result = vec3( mx_bilerp( mx_gradient_vec3( mx_hash_vec3( X, Y ), fx, fy ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\n\n\treturn mx_gradient_scale2d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nconst mx_perlin_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst w = float( mx_fade( fz ) ).toVar();\n\tconst result = vec3( mx_trilerp( mx_gradient_vec3( mx_hash_vec3( X, Y, Z ), fx, fy, fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\n\n\treturn mx_gradient_scale3d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nconst mx_perlin_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1 ] );\n\nconst mx_cell_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = float( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'float' }\n\t]\n} );\n\nconst mx_cell_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nconst mx_cell_noise_float_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_2',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nconst mx_cell_noise_float_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec4( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\tconst iw = int( mx_floor( p.w ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz, iw ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_3',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec4' }\n\t]\n} );\n\nconst mx_cell_noise_float$1 = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3 ] );\n\nconst mx_cell_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = float( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'float' }\n\t]\n} );\n\nconst mx_cell_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nconst mx_cell_noise_vec3_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_2',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nconst mx_cell_noise_vec3_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec4( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\tconst iw = int( mx_floor( p.w ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec4' }\n\t]\n} );\n\nconst mx_cell_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3 ] );\n\nconst mx_fractal_noise_float$1 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst result = float( 0.0 ).toVar();\n\tconst amplitude = float( 1.0 ).toVar();\n\n\tLoop( octaves, () => {\n\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_float( p ) ) );\n\t\tamplitude.mulAssign( diminish );\n\t\tp.mulAssign( lacunarity );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_float',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nconst mx_fractal_noise_vec3$1 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst result = vec3( 0.0 ).toVar();\n\tconst amplitude = float( 1.0 ).toVar();\n\n\tLoop( octaves, () => {\n\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_vec3( p ) ) );\n\t\tamplitude.mulAssign( diminish );\n\t\tp.mulAssign( lacunarity );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nconst mx_fractal_noise_vec2$1 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\n\treturn vec2( mx_fractal_noise_float$1( p, octaves, lacunarity, diminish ), mx_fractal_noise_float$1( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) );\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec2',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nconst mx_fractal_noise_vec4$1 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst c = vec3( mx_fractal_noise_vec3$1( p, octaves, lacunarity, diminish ) ).toVar();\n\tconst f = float( mx_fractal_noise_float$1( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) ).toVar();\n\n\treturn vec4( c, f );\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec4',\n\ttype: 'vec4',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nconst mx_worley_distance_0 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst yoff = int( yoff_immutable ).toVar();\n\tconst xoff = int( xoff_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst tmp = vec3( mx_cell_noise_vec3( vec2( x.add( xoff ), y.add( yoff ) ) ) ).toVar();\n\tconst off = vec2( tmp.x, tmp.y ).toVar();\n\toff.subAssign( 0.5 );\n\toff.mulAssign( jitter );\n\toff.addAssign( 0.5 );\n\tconst cellpos = vec2( vec2( float( x ), float( y ) ).add( off ) ).toVar();\n\tconst diff = vec2( cellpos.sub( p ) ).toVar();\n\n\tIf( metric.equal( int( 2 ) ), () => {\n\n\t\treturn abs( diff.x ).add( abs( diff.y ) );\n\n\t} );\n\n\tIf( metric.equal( int( 3 ) ), () => {\n\n\t\treturn max$1( abs( diff.x ), abs( diff.y ) );\n\n\t} );\n\n\treturn dot( diff, diff );\n\n} ).setLayout( {\n\tname: 'mx_worley_distance_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'xoff', type: 'int' },\n\t\t{ name: 'yoff', type: 'int' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_distance_1 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst zoff = int( zoff_immutable ).toVar();\n\tconst yoff = int( yoff_immutable ).toVar();\n\tconst xoff = int( xoff_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst off = vec3( mx_cell_noise_vec3( vec3( x.add( xoff ), y.add( yoff ), z.add( zoff ) ) ) ).toVar();\n\toff.subAssign( 0.5 );\n\toff.mulAssign( jitter );\n\toff.addAssign( 0.5 );\n\tconst cellpos = vec3( vec3( float( x ), float( y ), float( z ) ).add( off ) ).toVar();\n\tconst diff = vec3( cellpos.sub( p ) ).toVar();\n\n\tIf( metric.equal( int( 2 ) ), () => {\n\n\t\treturn abs( diff.x ).add( abs( diff.y ) ).add( abs( diff.z ) );\n\n\t} );\n\n\tIf( metric.equal( int( 3 ) ), () => {\n\n\t\treturn max$1( max$1( abs( diff.x ), abs( diff.y ) ), abs( diff.z ) );\n\n\t} );\n\n\treturn dot( diff, diff );\n\n} ).setLayout( {\n\tname: 'mx_worley_distance_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xoff', type: 'int' },\n\t\t{ name: 'yoff', type: 'int' },\n\t\t{ name: 'zoff', type: 'int' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_distance = /*@__PURE__*/ overloadingFn( [ mx_worley_distance_0, mx_worley_distance_1 ] );\n\nconst mx_worley_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = float( 1e6 ).toVar();\n\n\tLoop( { start: -1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: -1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\t\t\tsqdist.assign( min$1( sqdist, dist ) );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_noise_vec2_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\n\n\tLoop( { start: -1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: -1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec2_0',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\n\n\tLoop( { start: -1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: -1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\n\n\t\t\t\tsqdist.z.assign( dist );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = float( 1e6 ).toVar();\n\n\tLoop( { start: -1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: -1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: -1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\t\t\t\tsqdist.assign( min$1( sqdist, dist ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_noise_float$1 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_float_0, mx_worley_noise_float_1 ] );\n\nconst mx_worley_noise_vec2_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\n\n\tLoop( { start: -1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: -1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: -1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec2_1',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_noise_vec2$1 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec2_0, mx_worley_noise_vec2_1 ] );\n\nconst mx_worley_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\n\n\tLoop( { start: -1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: -1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: -1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\n\n\t\t\t\t\tsqdist.z.assign( dist );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nconst mx_worley_noise_vec3$1 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec3_0, mx_worley_noise_vec3_1 ] );\n\n// Three.js Transpiler\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_hsv.glsl\n\n\nconst mx_hsvtorgb = /*@__PURE__*/ Fn( ( [ hsv ] ) => {\n\n\tconst s = hsv.y;\n\tconst v = hsv.z;\n\n\tconst result = vec3().toVar();\n\n\tIf( s.lessThan( 0.0001 ), () => {\n\n\t\tresult.assign( vec3( v, v, v ) );\n\n\t} ).Else( () => {\n\n\t\tlet h = hsv.x;\n\t\th = h.sub( floor( h ) ).mul( 6.0 ).toVar(); // TODO: check what .toVar() is needed in node system cache\n\t\tconst hi = int( trunc( h ) );\n\t\tconst f = h.sub( float( hi ) );\n\t\tconst p = v.mul( s.oneMinus() );\n\t\tconst q = v.mul( s.mul( f ).oneMinus() );\n\t\tconst t = v.mul( s.mul( f.oneMinus() ).oneMinus() );\n\n\t\tIf( hi.equal( int( 0 ) ), () => {\n\n\t\t\tresult.assign( vec3( v, t, p ) );\n\n\t\t} ).ElseIf( hi.equal( int( 1 ) ), () => {\n\n\t\t\tresult.assign( vec3( q, v, p ) );\n\n\t\t} ).ElseIf( hi.equal( int( 2 ) ), () => {\n\n\t\t\tresult.assign( vec3( p, v, t ) );\n\n\t\t} ).ElseIf( hi.equal( int( 3 ) ), () => {\n\n\t\t\tresult.assign( vec3( p, q, v ) );\n\n\t\t} ).ElseIf( hi.equal( int( 4 ) ), () => {\n\n\t\t\tresult.assign( vec3( t, p, v ) );\n\n\t\t} ).Else( () => {\n\n\t\t\tresult.assign( vec3( v, p, q ) );\n\n\t\t} );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hsvtorgb',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hsv', type: 'vec3' }\n\t]\n} );\n\nconst mx_rgbtohsv = /*@__PURE__*/ Fn( ( [ c_immutable ] ) => {\n\n\tconst c = vec3( c_immutable ).toVar();\n\tconst r = float( c.x ).toVar();\n\tconst g = float( c.y ).toVar();\n\tconst b = float( c.z ).toVar();\n\tconst mincomp = float( min$1( r, min$1( g, b ) ) ).toVar();\n\tconst maxcomp = float( max$1( r, max$1( g, b ) ) ).toVar();\n\tconst delta = float( maxcomp.sub( mincomp ) ).toVar();\n\tconst h = float().toVar(), s = float().toVar(), v = float().toVar();\n\tv.assign( maxcomp );\n\n\tIf( maxcomp.greaterThan( 0.0 ), () => {\n\n\t\ts.assign( delta.div( maxcomp ) );\n\n\t} ).Else( () => {\n\n\t\ts.assign( 0.0 );\n\n\t} );\n\n\tIf( s.lessThanEqual( 0.0 ), () => {\n\n\t\th.assign( 0.0 );\n\n\t} ).Else( () => {\n\n\t\tIf( r.greaterThanEqual( maxcomp ), () => {\n\n\t\t\th.assign( g.sub( b ).div( delta ) );\n\n\t\t} ).ElseIf( g.greaterThanEqual( maxcomp ), () => {\n\n\t\t\th.assign( add( 2.0, b.sub( r ).div( delta ) ) );\n\n\t\t} ).Else( () => {\n\n\t\t\th.assign( add( 4.0, r.sub( g ).div( delta ) ) );\n\n\t\t} );\n\n\t\th.mulAssign( 1.0 / 6.0 );\n\n\t\tIf( h.lessThan( 0.0 ), () => {\n\n\t\t\th.addAssign( 1.0 );\n\n\t\t} );\n\n\t} );\n\n\treturn vec3( h, s, v );\n\n} ).setLayout( {\n\tname: 'mx_rgbtohsv',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'c', type: 'vec3' }\n\t]\n} );\n\n// Three.js Transpiler\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_transform_color.glsl\n\n\nconst mx_srgb_texture_to_lin_rec709 = /*@__PURE__*/ Fn( ( [ color_immutable ] ) => {\n\n\tconst color = vec3( color_immutable ).toVar();\n\tconst isAbove = bvec3( greaterThan( color, vec3( 0.04045 ) ) ).toVar();\n\tconst linSeg = vec3( color.div( 12.92 ) ).toVar();\n\tconst powSeg = vec3( pow( max$1( color.add( vec3( 0.055 ) ), vec3( 0.0 ) ).div( 1.055 ), vec3( 2.4 ) ) ).toVar();\n\n\treturn mix( linSeg, powSeg, isAbove );\n\n} ).setLayout( {\n\tname: 'mx_srgb_texture_to_lin_rec709',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' }\n\t]\n} );\n\nconst mx_aastep = ( threshold, value ) => {\n\n\tthreshold = float( threshold );\n\tvalue = float( value );\n\n\tconst afwidth = vec2( value.dFdx(), value.dFdy() ).length().mul( 0.70710678118654757 );\n\n\treturn smoothstep( threshold.sub( afwidth ), threshold.add( afwidth ), value );\n\n};\n\nconst _ramp = ( a, b, uv, p ) => mix( a, b, uv[ p ].clamp() );\nconst mx_ramplr = ( valuel, valuer, texcoord = uv() ) => _ramp( valuel, valuer, texcoord, 'x' );\nconst mx_ramptb = ( valuet, valueb, texcoord = uv() ) => _ramp( valuet, valueb, texcoord, 'y' );\n\nconst _split = ( a, b, center, uv, p ) => mix( a, b, mx_aastep( center, uv[ p ] ) );\nconst mx_splitlr = ( valuel, valuer, center, texcoord = uv() ) => _split( valuel, valuer, center, texcoord, 'x' );\nconst mx_splittb = ( valuet, valueb, center, texcoord = uv() ) => _split( valuet, valueb, center, texcoord, 'y' );\n\nconst mx_transform_uv = ( uv_scale = 1, uv_offset = 0, uv_geo = uv() ) => uv_geo.mul( uv_scale ).add( uv_offset );\n\nconst mx_safepower = ( in1, in2 = 1 ) => {\n\n\tin1 = float( in1 );\n\n\treturn in1.abs().pow( in2 ).mul( in1.sign() );\n\n};\n\nconst mx_contrast = ( input, amount = 1, pivot = .5 ) => float( input ).sub( pivot ).mul( amount ).add( pivot );\n\nconst mx_noise_float = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_float( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\n//export const mx_noise_vec2 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_vec3( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\nconst mx_noise_vec3 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_vec3( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\nconst mx_noise_vec4 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => {\n\n\ttexcoord = texcoord.convert( 'vec2|vec3' ); // overloading type\n\n\tconst noise_vec4 = vec4( mx_perlin_noise_vec3( texcoord ), mx_perlin_noise_float( texcoord.add( vec2( 19, 73 ) ) ) );\n\n\treturn noise_vec4.mul( amplitude ).add( pivot );\n\n};\n\nconst mx_worley_noise_float = ( texcoord = uv(), jitter = 1 ) => mx_worley_noise_float$1( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\nconst mx_worley_noise_vec2 = ( texcoord = uv(), jitter = 1 ) => mx_worley_noise_vec2$1( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\nconst mx_worley_noise_vec3 = ( texcoord = uv(), jitter = 1 ) => mx_worley_noise_vec3$1( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\n\nconst mx_cell_noise_float = ( texcoord = uv() ) => mx_cell_noise_float$1( texcoord.convert( 'vec2|vec3' ) );\n\nconst mx_fractal_noise_float = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => mx_fractal_noise_float$1( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\nconst mx_fractal_noise_vec2 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => mx_fractal_noise_vec2$1( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\nconst mx_fractal_noise_vec3 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => mx_fractal_noise_vec3$1( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\nconst mx_fractal_noise_vec4 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => mx_fractal_noise_vec4$1( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\n\n/**\n * This computes a parallax corrected normal which is used for box-projected cube mapping (BPCEM).\n *\n * Reference: {@link https://devlog-martinsh.blogspot.com/2011/09/box-projected-cube-environment-mapping.html}\n *\n * ```js\n * const uvNode = getParallaxCorrectNormal( reflectVector, vec3( 200, 100, 100 ), vec3( 0, - 50, 0 ) );\n * material.envNode = pmremTexture( renderTarget.texture, uvNode );\n * ```\n *\n * @tsl\n * @function\n * @param {Node<vec3>} normal - The normal to correct.\n * @param {Node<vec3>} cubeSize - The cube size should reflect the size of the environment (BPCEM is usually applied in closed environments like rooms).\n * @param {Node<vec3>} cubePos - The cube position.\n * @return {Node<vec3>} The parallax corrected normal.\n */\nconst getParallaxCorrectNormal = /*@__PURE__*/ Fn( ( [ normal, cubeSize, cubePos ] ) => {\n\n\tconst nDir = normalize( normal ).toVar();\n\tconst rbmax = sub( float( 0.5 ).mul( cubeSize.sub( cubePos ) ), positionWorld ).div( nDir ).toVar();\n\tconst rbmin = sub( float( -0.5 ).mul( cubeSize.sub( cubePos ) ), positionWorld ).div( nDir ).toVar();\n\tconst rbminmax = vec3().toVar();\n\trbminmax.x = nDir.x.greaterThan( float( 0 ) ).select( rbmax.x, rbmin.x );\n\trbminmax.y = nDir.y.greaterThan( float( 0 ) ).select( rbmax.y, rbmin.y );\n\trbminmax.z = nDir.z.greaterThan( float( 0 ) ).select( rbmax.z, rbmin.z );\n\n\tconst correction = min$1( min$1( rbminmax.x, rbminmax.y ), rbminmax.z ).toVar();\n\tconst boxIntersection = positionWorld.add( nDir.mul( correction ) ).toVar();\n\treturn boxIntersection.sub( cubePos );\n\n} );\n\nconst getShIrradianceAt = /*@__PURE__*/ Fn( ( [ normal, shCoefficients ] ) => {\n\n\t// normal is assumed to have unit length\n\n\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tlet result = shCoefficients.element( 0 ).mul( 0.886227 );\n\n\t// band 1\n\tresult = result.add( shCoefficients.element( 1 ).mul( 2.0 * 0.511664 ).mul( y ) );\n\tresult = result.add( shCoefficients.element( 2 ).mul( 2.0 * 0.511664 ).mul( z ) );\n\tresult = result.add( shCoefficients.element( 3 ).mul( 2.0 * 0.511664 ).mul( x ) );\n\n\t// band 2\n\tresult = result.add( shCoefficients.element( 4 ).mul( 2.0 * 0.429043 ).mul( x ).mul( y ) );\n\tresult = result.add( shCoefficients.element( 5 ).mul( 2.0 * 0.429043 ).mul( y ).mul( z ) );\n\tresult = result.add( shCoefficients.element( 6 ).mul( z.mul( z ).mul( 0.743125 ).sub( 0.247708 ) ) );\n\tresult = result.add( shCoefficients.element( 7 ).mul( 2.0 * 0.429043 ).mul( x ).mul( z ) );\n\tresult = result.add( shCoefficients.element( 8 ).mul( 0.429043 ).mul( mul( x, x ).sub( mul( y, y ) ) ) );\n\n\treturn result;\n\n} );\n\n// constants\n\nvar TSL = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBRDF_GGX: BRDF_GGX,\n\tBRDF_Lambert: BRDF_Lambert,\n\tBasicPointShadowFilter: BasicPointShadowFilter,\n\tBasicShadowFilter: BasicShadowFilter,\n\tBreak: Break,\n\tConst: Const,\n\tContinue: Continue,\n\tDFGApprox: DFGApprox,\n\tD_GGX: D_GGX,\n\tDiscard: Discard,\n\tEPSILON: EPSILON,\n\tF_Schlick: F_Schlick,\n\tFn: Fn,\n\tINFINITY: INFINITY,\n\tIf: If,\n\tLoop: Loop,\n\tNodeAccess: NodeAccess,\n\tNodeShaderStage: NodeShaderStage,\n\tNodeType: NodeType,\n\tNodeUpdateType: NodeUpdateType,\n\tPCFShadowFilter: PCFShadowFilter,\n\tPCFSoftShadowFilter: PCFSoftShadowFilter,\n\tPI: PI,\n\tPI2: PI2,\n\tPointShadowFilter: PointShadowFilter,\n\tReturn: Return,\n\tSchlick_to_F0: Schlick_to_F0,\n\tScriptableNodeResources: ScriptableNodeResources,\n\tShaderNode: ShaderNode,\n\tStack: Stack,\n\tSwitch: Switch,\n\tTBNViewMatrix: TBNViewMatrix,\n\tVSMShadowFilter: VSMShadowFilter,\n\tV_GGX_SmithCorrelated: V_GGX_SmithCorrelated,\n\tVar: Var,\n\tabs: abs,\n\tacesFilmicToneMapping: acesFilmicToneMapping,\n\tacos: acos,\n\tadd: add,\n\taddMethodChaining: addMethodChaining,\n\taddNodeElement: addNodeElement,\n\tagxToneMapping: agxToneMapping,\n\tall: all,\n\talphaT: alphaT,\n\tand: and,\n\tanisotropy: anisotropy,\n\tanisotropyB: anisotropyB,\n\tanisotropyT: anisotropyT,\n\tany: any,\n\tappend: append,\n\tarray: array,\n\tarrayBuffer: arrayBuffer,\n\tasin: asin,\n\tassign: assign,\n\tatan: atan,\n\tatan2: atan2,\n\tatomicAdd: atomicAdd,\n\tatomicAnd: atomicAnd,\n\tatomicFunc: atomicFunc,\n\tatomicLoad: atomicLoad,\n\tatomicMax: atomicMax,\n\tatomicMin: atomicMin,\n\tatomicOr: atomicOr,\n\tatomicStore: atomicStore,\n\tatomicSub: atomicSub,\n\tatomicXor: atomicXor,\n\tattenuationColor: attenuationColor,\n\tattenuationDistance: attenuationDistance,\n\tattribute: attribute,\n\tattributeArray: attributeArray,\n\tbackgroundBlurriness: backgroundBlurriness,\n\tbackgroundIntensity: backgroundIntensity,\n\tbackgroundRotation: backgroundRotation,\n\tbatch: batch,\n\tbillboarding: billboarding,\n\tbitAnd: bitAnd,\n\tbitNot: bitNot,\n\tbitOr: bitOr,\n\tbitXor: bitXor,\n\tbitangentGeometry: bitangentGeometry,\n\tbitangentLocal: bitangentLocal,\n\tbitangentView: bitangentView,\n\tbitangentWorld: bitangentWorld,\n\tbitcast: bitcast,\n\tblendBurn: blendBurn,\n\tblendColor: blendColor,\n\tblendDodge: blendDodge,\n\tblendOverlay: blendOverlay,\n\tblendScreen: blendScreen,\n\tblur: blur,\n\tbool: bool,\n\tbuffer: buffer,\n\tbufferAttribute: bufferAttribute,\n\tbumpMap: bumpMap,\n\tburn: burn,\n\tbvec2: bvec2,\n\tbvec3: bvec3,\n\tbvec4: bvec4,\n\tbypass: bypass,\n\tcache: cache,\n\tcall: call,\n\tcameraFar: cameraFar,\n\tcameraIndex: cameraIndex,\n\tcameraNear: cameraNear,\n\tcameraNormalMatrix: cameraNormalMatrix,\n\tcameraPosition: cameraPosition,\n\tcameraProjectionMatrix: cameraProjectionMatrix,\n\tcameraProjectionMatrixInverse: cameraProjectionMatrixInverse,\n\tcameraViewMatrix: cameraViewMatrix,\n\tcameraWorldMatrix: cameraWorldMatrix,\n\tcbrt: cbrt,\n\tcdl: cdl,\n\tceil: ceil,\n\tchecker: checker,\n\tcineonToneMapping: cineonToneMapping,\n\tclamp: clamp,\n\tclearcoat: clearcoat,\n\tclearcoatRoughness: clearcoatRoughness,\n\tcode: code,\n\tcolor: color,\n\tcolorSpaceToWorking: colorSpaceToWorking,\n\tcolorToDirection: colorToDirection,\n\tcompute: compute,\n\tcomputeSkinning: computeSkinning,\n\tcond: cond,\n\tcontext: context,\n\tconvert: convert,\n\tconvertColorSpace: convertColorSpace,\n\tconvertToTexture: convertToTexture,\n\tcos: cos,\n\tcross: cross,\n\tcubeTexture: cubeTexture,\n\tcubeToUV: cubeToUV,\n\tdFdx: dFdx,\n\tdFdy: dFdy,\n\tdashSize: dashSize,\n\tdebug: debug,\n\tdecrement: decrement,\n\tdecrementBefore: decrementBefore,\n\tdefaultBuildStages: defaultBuildStages,\n\tdefaultShaderStages: defaultShaderStages,\n\tdefined: defined,\n\tdegrees: degrees,\n\tdeltaTime: deltaTime,\n\tdensityFog: densityFog,\n\tdensityFogFactor: densityFogFactor,\n\tdepth: depth,\n\tdepthPass: depthPass,\n\tdifference: difference,\n\tdiffuseColor: diffuseColor,\n\tdirectPointLight: directPointLight,\n\tdirectionToColor: directionToColor,\n\tdispersion: dispersion,\n\tdistance: distance,\n\tdiv: div,\n\tdodge: dodge,\n\tdot: dot,\n\tdrawIndex: drawIndex,\n\tdynamicBufferAttribute: dynamicBufferAttribute,\n\telement: element,\n\temissive: emissive,\n\tequal: equal,\n\tequals: equals,\n\tequirectUV: equirectUV,\n\texp: exp,\n\texp2: exp2,\n\texpression: expression,\n\tfaceDirection: faceDirection,\n\tfaceForward: faceForward,\n\tfaceforward: faceforward,\n\tfloat: float,\n\tfloor: floor,\n\tfog: fog,\n\tfract: fract,\n\tframeGroup: frameGroup,\n\tframeId: frameId,\n\tfrontFacing: frontFacing,\n\tfwidth: fwidth,\n\tgain: gain,\n\tgapSize: gapSize,\n\tgetConstNodeType: getConstNodeType,\n\tgetCurrentStack: getCurrentStack,\n\tgetDirection: getDirection,\n\tgetDistanceAttenuation: getDistanceAttenuation,\n\tgetGeometryRoughness: getGeometryRoughness,\n\tgetNormalFromDepth: getNormalFromDepth,\n\tgetParallaxCorrectNormal: getParallaxCorrectNormal,\n\tgetRoughness: getRoughness,\n\tgetScreenPosition: getScreenPosition,\n\tgetShIrradianceAt: getShIrradianceAt,\n\tgetShadowMaterial: getShadowMaterial,\n\tgetShadowRenderObjectFunction: getShadowRenderObjectFunction,\n\tgetTextureIndex: getTextureIndex,\n\tgetViewPosition: getViewPosition,\n\tglobalId: globalId,\n\tglsl: glsl,\n\tglslFn: glslFn,\n\tgrayscale: grayscale,\n\tgreaterThan: greaterThan,\n\tgreaterThanEqual: greaterThanEqual,\n\thash: hash,\n\thighpModelNormalViewMatrix: highpModelNormalViewMatrix,\n\thighpModelViewMatrix: highpModelViewMatrix,\n\thue: hue,\n\tincrement: increment,\n\tincrementBefore: incrementBefore,\n\tinstance: instance,\n\tinstanceIndex: instanceIndex,\n\tinstancedArray: instancedArray,\n\tinstancedBufferAttribute: instancedBufferAttribute,\n\tinstancedDynamicBufferAttribute: instancedDynamicBufferAttribute,\n\tinstancedMesh: instancedMesh,\n\tint: int,\n\tinverseSqrt: inverseSqrt,\n\tinversesqrt: inversesqrt,\n\tinvocationLocalIndex: invocationLocalIndex,\n\tinvocationSubgroupIndex: invocationSubgroupIndex,\n\tior: ior,\n\tiridescence: iridescence,\n\tiridescenceIOR: iridescenceIOR,\n\tiridescenceThickness: iridescenceThickness,\n\tivec2: ivec2,\n\tivec3: ivec3,\n\tivec4: ivec4,\n\tjs: js,\n\tlabel: label,\n\tlength: length,\n\tlengthSq: lengthSq,\n\tlessThan: lessThan,\n\tlessThanEqual: lessThanEqual,\n\tlightPosition: lightPosition,\n\tlightProjectionUV: lightProjectionUV,\n\tlightShadowMatrix: lightShadowMatrix,\n\tlightTargetDirection: lightTargetDirection,\n\tlightTargetPosition: lightTargetPosition,\n\tlightViewPosition: lightViewPosition,\n\tlightingContext: lightingContext,\n\tlights: lights,\n\tlinearDepth: linearDepth,\n\tlinearToneMapping: linearToneMapping,\n\tlocalId: localId,\n\tlog: log,\n\tlog2: log2,\n\tlogarithmicDepthToViewZ: logarithmicDepthToViewZ,\n\tloop: loop,\n\tluminance: luminance,\n\tmat2: mat2,\n\tmat3: mat3,\n\tmat4: mat4,\n\tmatcapUV: matcapUV,\n\tmaterialAO: materialAO,\n\tmaterialAlphaTest: materialAlphaTest,\n\tmaterialAnisotropy: materialAnisotropy,\n\tmaterialAnisotropyVector: materialAnisotropyVector,\n\tmaterialAttenuationColor: materialAttenuationColor,\n\tmaterialAttenuationDistance: materialAttenuationDistance,\n\tmaterialClearcoat: materialClearcoat,\n\tmaterialClearcoatNormal: materialClearcoatNormal,\n\tmaterialClearcoatRoughness: materialClearcoatRoughness,\n\tmaterialColor: materialColor,\n\tmaterialDispersion: materialDispersion,\n\tmaterialEmissive: materialEmissive,\n\tmaterialEnvIntensity: materialEnvIntensity,\n\tmaterialEnvRotation: materialEnvRotation,\n\tmaterialIOR: materialIOR,\n\tmaterialIridescence: materialIridescence,\n\tmaterialIridescenceIOR: materialIridescenceIOR,\n\tmaterialIridescenceThickness: materialIridescenceThickness,\n\tmaterialLightMap: materialLightMap,\n\tmaterialLineDashOffset: materialLineDashOffset,\n\tmaterialLineDashSize: materialLineDashSize,\n\tmaterialLineGapSize: materialLineGapSize,\n\tmaterialLineScale: materialLineScale,\n\tmaterialLineWidth: materialLineWidth,\n\tmaterialMetalness: materialMetalness,\n\tmaterialNormal: materialNormal,\n\tmaterialOpacity: materialOpacity,\n\tmaterialPointSize: materialPointSize,\n\tmaterialReference: materialReference,\n\tmaterialReflectivity: materialReflectivity,\n\tmaterialRefractionRatio: materialRefractionRatio,\n\tmaterialRotation: materialRotation,\n\tmaterialRoughness: materialRoughness,\n\tmaterialSheen: materialSheen,\n\tmaterialSheenRoughness: materialSheenRoughness,\n\tmaterialShininess: materialShininess,\n\tmaterialSpecular: materialSpecular,\n\tmaterialSpecularColor: materialSpecularColor,\n\tmaterialSpecularIntensity: materialSpecularIntensity,\n\tmaterialSpecularStrength: materialSpecularStrength,\n\tmaterialThickness: materialThickness,\n\tmaterialTransmission: materialTransmission,\n\tmax: max$1,\n\tmaxMipLevel: maxMipLevel,\n\tmediumpModelViewMatrix: mediumpModelViewMatrix,\n\tmetalness: metalness,\n\tmin: min$1,\n\tmix: mix,\n\tmixElement: mixElement,\n\tmod: mod,\n\tmodInt: modInt,\n\tmodelDirection: modelDirection,\n\tmodelNormalMatrix: modelNormalMatrix,\n\tmodelPosition: modelPosition,\n\tmodelRadius: modelRadius,\n\tmodelScale: modelScale,\n\tmodelViewMatrix: modelViewMatrix,\n\tmodelViewPosition: modelViewPosition,\n\tmodelViewProjection: modelViewProjection,\n\tmodelWorldMatrix: modelWorldMatrix,\n\tmodelWorldMatrixInverse: modelWorldMatrixInverse,\n\tmorphReference: morphReference,\n\tmrt: mrt,\n\tmul: mul,\n\tmx_aastep: mx_aastep,\n\tmx_cell_noise_float: mx_cell_noise_float,\n\tmx_contrast: mx_contrast,\n\tmx_fractal_noise_float: mx_fractal_noise_float,\n\tmx_fractal_noise_vec2: mx_fractal_noise_vec2,\n\tmx_fractal_noise_vec3: mx_fractal_noise_vec3,\n\tmx_fractal_noise_vec4: mx_fractal_noise_vec4,\n\tmx_hsvtorgb: mx_hsvtorgb,\n\tmx_noise_float: mx_noise_float,\n\tmx_noise_vec3: mx_noise_vec3,\n\tmx_noise_vec4: mx_noise_vec4,\n\tmx_ramplr: mx_ramplr,\n\tmx_ramptb: mx_ramptb,\n\tmx_rgbtohsv: mx_rgbtohsv,\n\tmx_safepower: mx_safepower,\n\tmx_splitlr: mx_splitlr,\n\tmx_splittb: mx_splittb,\n\tmx_srgb_texture_to_lin_rec709: mx_srgb_texture_to_lin_rec709,\n\tmx_transform_uv: mx_transform_uv,\n\tmx_worley_noise_float: mx_worley_noise_float,\n\tmx_worley_noise_vec2: mx_worley_noise_vec2,\n\tmx_worley_noise_vec3: mx_worley_noise_vec3,\n\tnegate: negate,\n\tneutralToneMapping: neutralToneMapping,\n\tnodeArray: nodeArray,\n\tnodeImmutable: nodeImmutable,\n\tnodeObject: nodeObject,\n\tnodeObjects: nodeObjects,\n\tnodeProxy: nodeProxy,\n\tnormalFlat: normalFlat,\n\tnormalGeometry: normalGeometry,\n\tnormalLocal: normalLocal,\n\tnormalMap: normalMap,\n\tnormalView: normalView,\n\tnormalWorld: normalWorld,\n\tnormalize: normalize,\n\tnot: not,\n\tnotEqual: notEqual,\n\tnumWorkgroups: numWorkgroups,\n\tobjectDirection: objectDirection,\n\tobjectGroup: objectGroup,\n\tobjectPosition: objectPosition,\n\tobjectRadius: objectRadius,\n\tobjectScale: objectScale,\n\tobjectViewPosition: objectViewPosition,\n\tobjectWorldMatrix: objectWorldMatrix,\n\toneMinus: oneMinus,\n\tor: or,\n\torthographicDepthToViewZ: orthographicDepthToViewZ,\n\toscSawtooth: oscSawtooth,\n\toscSine: oscSine,\n\toscSquare: oscSquare,\n\toscTriangle: oscTriangle,\n\toutput: output,\n\toutputStruct: outputStruct,\n\toverlay: overlay,\n\toverloadingFn: overloadingFn,\n\tparabola: parabola,\n\tparallaxDirection: parallaxDirection,\n\tparallaxUV: parallaxUV,\n\tparameter: parameter,\n\tpass: pass,\n\tpassTexture: passTexture,\n\tpcurve: pcurve,\n\tperspectiveDepthToViewZ: perspectiveDepthToViewZ,\n\tpmremTexture: pmremTexture,\n\tpointShadow: pointShadow,\n\tpointUV: pointUV,\n\tpointWidth: pointWidth,\n\tpositionGeometry: positionGeometry,\n\tpositionLocal: positionLocal,\n\tpositionPrevious: positionPrevious,\n\tpositionView: positionView,\n\tpositionViewDirection: positionViewDirection,\n\tpositionWorld: positionWorld,\n\tpositionWorldDirection: positionWorldDirection,\n\tposterize: posterize,\n\tpow: pow,\n\tpow2: pow2,\n\tpow3: pow3,\n\tpow4: pow4,\n\tproperty: property,\n\tradians: radians,\n\trand: rand,\n\trange: range,\n\trangeFog: rangeFog,\n\trangeFogFactor: rangeFogFactor,\n\treciprocal: reciprocal,\n\treference: reference,\n\treferenceBuffer: referenceBuffer,\n\treflect: reflect,\n\treflectVector: reflectVector,\n\treflectView: reflectView,\n\treflector: reflector,\n\trefract: refract,\n\trefractVector: refractVector,\n\trefractView: refractView,\n\treinhardToneMapping: reinhardToneMapping,\n\tremainder: remainder,\n\tremap: remap,\n\tremapClamp: remapClamp,\n\trenderGroup: renderGroup,\n\trenderOutput: renderOutput,\n\trendererReference: rendererReference,\n\trotate: rotate,\n\trotateUV: rotateUV,\n\troughness: roughness,\n\tround: round,\n\trtt: rtt,\n\tsRGBTransferEOTF: sRGBTransferEOTF,\n\tsRGBTransferOETF: sRGBTransferOETF,\n\tsampler: sampler,\n\tsamplerComparison: samplerComparison,\n\tsaturate: saturate,\n\tsaturation: saturation,\n\tscreen: screen,\n\tscreenCoordinate: screenCoordinate,\n\tscreenSize: screenSize,\n\tscreenUV: screenUV,\n\tscriptable: scriptable,\n\tscriptableValue: scriptableValue,\n\tselect: select,\n\tsetCurrentStack: setCurrentStack,\n\tshaderStages: shaderStages,\n\tshadow: shadow,\n\tshadowPositionWorld: shadowPositionWorld,\n\tshapeCircle: shapeCircle,\n\tsharedUniformGroup: sharedUniformGroup,\n\tsheen: sheen,\n\tsheenRoughness: sheenRoughness,\n\tshiftLeft: shiftLeft,\n\tshiftRight: shiftRight,\n\tshininess: shininess,\n\tsign: sign,\n\tsin: sin,\n\tsinc: sinc,\n\tskinning: skinning,\n\tsmoothstep: smoothstep,\n\tsmoothstepElement: smoothstepElement,\n\tspecularColor: specularColor,\n\tspecularF90: specularF90,\n\tspherizeUV: spherizeUV,\n\tsplit: split,\n\tspritesheetUV: spritesheetUV,\n\tsqrt: sqrt,\n\tstack: stack,\n\tstep: step,\n\tstorage: storage,\n\tstorageBarrier: storageBarrier,\n\tstorageObject: storageObject,\n\tstorageTexture: storageTexture,\n\tstring: string,\n\tstruct: struct,\n\tsub: sub,\n\tsubgroupIndex: subgroupIndex,\n\tsubgroupSize: subgroupSize,\n\ttan: tan,\n\ttangentGeometry: tangentGeometry,\n\ttangentLocal: tangentLocal,\n\ttangentView: tangentView,\n\ttangentWorld: tangentWorld,\n\ttemp: temp,\n\ttexture: texture,\n\ttexture3D: texture3D,\n\ttextureBarrier: textureBarrier,\n\ttextureBicubic: textureBicubic,\n\ttextureCubeUV: textureCubeUV,\n\ttextureLoad: textureLoad,\n\ttextureSize: textureSize,\n\ttextureStore: textureStore,\n\tthickness: thickness,\n\ttime: time,\n\ttimerDelta: timerDelta,\n\ttimerGlobal: timerGlobal,\n\ttimerLocal: timerLocal,\n\ttoOutputColorSpace: toOutputColorSpace,\n\ttoWorkingColorSpace: toWorkingColorSpace,\n\ttoneMapping: toneMapping,\n\ttoneMappingExposure: toneMappingExposure,\n\ttoonOutlinePass: toonOutlinePass,\n\ttransformDirection: transformDirection,\n\ttransformNormal: transformNormal,\n\ttransformNormalToView: transformNormalToView,\n\ttransformedBentNormalView: transformedBentNormalView,\n\ttransformedBitangentView: transformedBitangentView,\n\ttransformedBitangentWorld: transformedBitangentWorld,\n\ttransformedClearcoatNormalView: transformedClearcoatNormalView,\n\ttransformedNormalView: transformedNormalView,\n\ttransformedNormalWorld: transformedNormalWorld,\n\ttransformedTangentView: transformedTangentView,\n\ttransformedTangentWorld: transformedTangentWorld,\n\ttransmission: transmission,\n\ttranspose: transpose,\n\ttriNoise3D: triNoise3D,\n\ttriplanarTexture: triplanarTexture,\n\ttriplanarTextures: triplanarTextures,\n\ttrunc: trunc,\n\ttslFn: tslFn,\n\tuint: uint,\n\tuniform: uniform,\n\tuniformArray: uniformArray,\n\tuniformGroup: uniformGroup,\n\tuniforms: uniforms,\n\tuserData: userData,\n\tuv: uv,\n\tuvec2: uvec2,\n\tuvec3: uvec3,\n\tuvec4: uvec4,\n\tvarying: varying,\n\tvaryingProperty: varyingProperty,\n\tvec2: vec2,\n\tvec3: vec3,\n\tvec4: vec4,\n\tvectorComponents: vectorComponents,\n\tvelocity: velocity,\n\tvertexColor: vertexColor,\n\tvertexIndex: vertexIndex,\n\tvertexStage: vertexStage,\n\tvibrance: vibrance,\n\tviewZToLogarithmicDepth: viewZToLogarithmicDepth,\n\tviewZToOrthographicDepth: viewZToOrthographicDepth,\n\tviewZToPerspectiveDepth: viewZToPerspectiveDepth,\n\tviewport: viewport,\n\tviewportBottomLeft: viewportBottomLeft,\n\tviewportCoordinate: viewportCoordinate,\n\tviewportDepthTexture: viewportDepthTexture,\n\tviewportLinearDepth: viewportLinearDepth,\n\tviewportMipTexture: viewportMipTexture,\n\tviewportResolution: viewportResolution,\n\tviewportSafeUV: viewportSafeUV,\n\tviewportSharedTexture: viewportSharedTexture,\n\tviewportSize: viewportSize,\n\tviewportTexture: viewportTexture,\n\tviewportTopLeft: viewportTopLeft,\n\tviewportUV: viewportUV,\n\twgsl: wgsl,\n\twgslFn: wgslFn,\n\tworkgroupArray: workgroupArray,\n\tworkgroupBarrier: workgroupBarrier,\n\tworkgroupId: workgroupId,\n\tworkingToColorSpace: workingToColorSpace,\n\txor: xor\n});\n\nconst _clearColor = /*@__PURE__*/ new Color4();\n\n/**\n * This renderer module manages the background.\n *\n * @private\n * @augments DataMap\n */\nclass Background extends DataMap {\n\n\t/**\n\t * Constructs a new background management component.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t */\n\tconstructor( renderer, nodes ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t}\n\n\t/**\n\t * Updates the background for the given scene. Depending on how `Scene.background`\n\t * or `Scene.backgroundNode` are configured, this method might configure a simple clear\n\t * or add a mesh to the render list for rendering the background as a textured plane\n\t * or skybox.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @param {RenderList} renderList - The current render list.\n\t * @param {RenderContext} renderContext - The current render context.\n\t */\n\tupdate( scene, renderList, renderContext ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst background = this.nodes.getBackgroundNode( scene ) || scene.background;\n\n\t\tlet forceClear = false;\n\n\t\tif ( background === null ) {\n\n\t\t\t// no background settings, use clear color configuration from the renderer\n\n\t\t\trenderer._clearColor.getRGB( _clearColor );\n\t\t\t_clearColor.a = renderer._clearColor.a;\n\n\t\t} else if ( background.isColor === true ) {\n\n\t\t\t// background is an opaque color\n\n\t\t\tbackground.getRGB( _clearColor );\n\t\t\t_clearColor.a = 1;\n\n\t\t\tforceClear = true;\n\n\t\t} else if ( background.isNode === true ) {\n\n\t\t\tconst sceneData = this.get( scene );\n\t\t\tconst backgroundNode = background;\n\n\t\t\t_clearColor.copy( renderer._clearColor );\n\n\t\t\tlet backgroundMesh = sceneData.backgroundMesh;\n\n\t\t\tif ( backgroundMesh === undefined ) {\n\n\t\t\t\tconst backgroundMeshNode = context( vec4( backgroundNode ).mul( backgroundIntensity ), {\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\n\t\t\t\t\tgetUV: () => backgroundRotation.mul( normalWorld ),\n\t\t\t\t\tgetTextureLevel: () => backgroundBlurriness\n\t\t\t\t} );\n\n\t\t\t\tlet viewProj = modelViewProjection;\n\t\t\t\tviewProj = viewProj.setZ( viewProj.w );\n\n\t\t\t\tconst nodeMaterial = new NodeMaterial();\n\t\t\t\tnodeMaterial.name = 'Background.material';\n\t\t\t\tnodeMaterial.side = BackSide;\n\t\t\t\tnodeMaterial.depthTest = false;\n\t\t\t\tnodeMaterial.depthWrite = false;\n\t\t\t\tnodeMaterial.allowOverride = false;\n\t\t\t\tnodeMaterial.fog = false;\n\t\t\t\tnodeMaterial.lights = false;\n\t\t\t\tnodeMaterial.vertexNode = viewProj;\n\t\t\t\tnodeMaterial.colorNode = backgroundMeshNode;\n\n\t\t\t\tsceneData.backgroundMeshNode = backgroundMeshNode;\n\t\t\t\tsceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );\n\t\t\t\tbackgroundMesh.frustumCulled = false;\n\t\t\t\tbackgroundMesh.name = 'Background.mesh';\n\n\t\t\t\tbackgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\tfunction onBackgroundDispose() {\n\n\t\t\t\t\tbackground.removeEventListener( 'dispose', onBackgroundDispose );\n\n\t\t\t\t\tbackgroundMesh.material.dispose();\n\t\t\t\t\tbackgroundMesh.geometry.dispose();\n\n\t\t\t\t}\n\n\t\t\t\tbackground.addEventListener( 'dispose', onBackgroundDispose );\n\n\t\t\t}\n\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\n\n\t\t\tif ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {\n\n\t\t\t\tsceneData.backgroundMeshNode.node = vec4( backgroundNode ).mul( backgroundIntensity );\n\t\t\t\tsceneData.backgroundMeshNode.needsUpdate = true;\n\n\t\t\t\tbackgroundMesh.material.needsUpdate = true;\n\n\t\t\t\tsceneData.backgroundCacheKey = backgroundCacheKey;\n\n\t\t\t}\n\n\t\t\trenderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null, null );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Renderer: Unsupported background configuration.', background );\n\n\t\t}\n\n\t\t//\n\n\t\tconst environmentBlendMode = renderer.xr.getEnvironmentBlendMode();\n\n\t\tif ( environmentBlendMode === 'additive' ) {\n\n\t\t\t_clearColor.set( 0, 0, 0, 1 );\n\n\t\t} else if ( environmentBlendMode === 'alpha-blend' ) {\n\n\t\t\t_clearColor.set( 0, 0, 0, 0 );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\n\n\t\t\tconst clearColorValue = renderContext.clearColorValue;\n\n\t\t\tclearColorValue.r = _clearColor.r;\n\t\t\tclearColorValue.g = _clearColor.g;\n\t\t\tclearColorValue.b = _clearColor.b;\n\t\t\tclearColorValue.a = _clearColor.a;\n\n\t\t\t// premultiply alpha\n\n\t\t\tif ( renderer.backend.isWebGLBackend === true || renderer.alpha === true ) {\n\n\t\t\t\tclearColorValue.r *= clearColorValue.a;\n\t\t\t\tclearColorValue.g *= clearColorValue.a;\n\t\t\t\tclearColorValue.b *= clearColorValue.a;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\trenderContext.depthClearValue = renderer._clearDepth;\n\t\t\trenderContext.stencilClearValue = renderer._clearStencil;\n\n\t\t\trenderContext.clearColor = renderer.autoClearColor === true;\n\t\t\trenderContext.clearDepth = renderer.autoClearDepth === true;\n\t\t\trenderContext.clearStencil = renderer.autoClearStencil === true;\n\n\t\t} else {\n\n\t\t\trenderContext.clearColor = false;\n\t\t\trenderContext.clearDepth = false;\n\t\t\trenderContext.clearStencil = false;\n\n\t\t}\n\n\t}\n\n}\n\nlet _id$6 = 0;\n\n/**\n * A bind group represents a collection of bindings and thus a collection\n * or resources. Bind groups are assigned to pipelines to provide them\n * with the required resources (like uniform buffers or textures).\n *\n * @private\n */\nclass BindGroup {\n\n\t/**\n\t * Constructs a new bind group.\n\t *\n\t * @param {string} name - The bind group's name.\n\t * @param {Array<Binding>} bindings - An array of bindings.\n\t * @param {number} index - The group index.\n\t * @param {Array<Binding>} bindingsReference - An array of reference bindings.\n\t */\n\tconstructor( name = '', bindings = [], index = 0, bindingsReference = [] ) {\n\n\t\t/**\n\t\t * The bind group's name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * An array of bindings.\n\t\t *\n\t\t * @type {Array<Binding>}\n\t\t */\n\t\tthis.bindings = bindings;\n\n\t\t/**\n\t\t * The group index.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.index = index;\n\n\t\t/**\n\t\t * An array of reference bindings.\n\t\t *\n\t\t * @type {Array<Binding>}\n\t\t */\n\t\tthis.bindingsReference = bindingsReference;\n\n\t\t/**\n\t\t * The group's ID.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.id = _id$6 ++;\n\n\t}\n\n}\n\n/**\n * This module represents the state of a node builder after it was\n * used to build the nodes for a render object. The state holds the\n * results of the build for further processing in the renderer.\n *\n * Render objects with identical cache keys share the same node builder state.\n *\n * @private\n */\nclass NodeBuilderState {\n\n\t/**\n\t * Constructs a new node builder state.\n\t *\n\t * @param {string} vertexShader - The native vertex shader code.\n\t * @param {string} fragmentShader - The native fragment shader code.\n\t * @param {string} computeShader - The native compute shader code.\n\t * @param {Array<NodeAttribute>} nodeAttributes - An array of node attributes.\n\t * @param {Array<BindGroup>} bindings - An array of bind groups.\n\t * @param {Array<Node>} updateNodes - An array of nodes that implement their `update()` method.\n\t * @param {Array<Node>} updateBeforeNodes - An array of nodes that implement their `updateBefore()` method.\n\t * @param {Array<Node>} updateAfterNodes - An array of nodes that implement their `updateAfter()` method.\n\t * @param {NodeMaterialObserver} observer - A node material observer.\n\t * @param {Array<Object>} transforms - An array with transform attribute objects. Only relevant when using compute shaders with WebGL 2.\n\t */\n\tconstructor( vertexShader, fragmentShader, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes, updateAfterNodes, observer, transforms = [] ) {\n\n\t\t/**\n\t\t * The native vertex shader code.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.vertexShader = vertexShader;\n\n\t\t/**\n\t\t * The native fragment shader code.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.fragmentShader = fragmentShader;\n\n\t\t/**\n\t\t * The native compute shader code.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.computeShader = computeShader;\n\n\t\t/**\n\t\t * An array with transform attribute objects.\n\t\t * Only relevant when using compute shaders with WebGL 2.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.transforms = transforms;\n\n\t\t/**\n\t\t * An array of node attributes representing\n\t\t * the attributes of the shaders.\n\t\t *\n\t\t * @type {Array<NodeAttribute>}\n\t\t */\n\t\tthis.nodeAttributes = nodeAttributes;\n\n\t\t/**\n\t\t * An array of bind groups representing the uniform or storage\n\t\t * buffers, texture or samplers of the shader.\n\t\t *\n\t\t * @type {Array<BindGroup>}\n\t\t */\n\t\tthis.bindings = bindings;\n\n\t\t/**\n\t\t * An array of nodes that implement their `update()` method.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.updateNodes = updateNodes;\n\n\t\t/**\n\t\t * An array of nodes that implement their `updateBefore()` method.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.updateBeforeNodes = updateBeforeNodes;\n\n\t\t/**\n\t\t * An array of nodes that implement their `updateAfter()` method.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.updateAfterNodes = updateAfterNodes;\n\n\t\t/**\n\t\t * A node material observer.\n\t\t *\n\t\t * @type {NodeMaterialObserver}\n\t\t */\n\t\tthis.observer = observer;\n\n\t\t/**\n\t\t * How often this state is used by render objects.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.usedTimes = 0;\n\n\t}\n\n\t/**\n\t * This method is used to create a array of bind groups based\n\t * on the existing bind groups of this state. Shared groups are\n\t * not cloned.\n\t *\n\t * @return {Array<BindGroup>} A array of bind groups.\n\t */\n\tcreateBindings() {\n\n\t\tconst bindings = [];\n\n\t\tfor ( const instanceGroup of this.bindings ) {\n\n\t\t\tconst shared = instanceGroup.bindings[ 0 ].groupNode.shared; // All bindings in the group must have the same groupNode.\n\n\t\t\tif ( shared !== true ) {\n\n\t\t\t\tconst bindingsGroup = new BindGroup( instanceGroup.name, [], instanceGroup.index, instanceGroup );\n\t\t\t\tbindings.push( bindingsGroup );\n\n\t\t\t\tfor ( const instanceBinding of instanceGroup.bindings ) {\n\n\t\t\t\t\tbindingsGroup.bindings.push( instanceBinding.clone() );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tbindings.push( instanceGroup );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindings;\n\n\t}\n\n}\n\n/**\n * {@link NodeBuilder} is going to create instances of this class during the build process\n * of nodes. They represent the final shader attributes that are going to be generated\n * by the builder. Arrays of node attributes is maintained in {@link NodeBuilder#attributes}\n * and {@link NodeBuilder#bufferAttributes} for this purpose.\n */\nclass NodeAttribute {\n\n\t/**\n\t * Constructs a new node attribute.\n\t *\n\t * @param {string} name - The name of the attribute.\n\t * @param {string} type - The type of the attribute.\n\t * @param {?Node} node - An optional reference to the node.\n\t */\n\tconstructor( name, type, node = null ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNodeAttribute = true;\n\n\t\t/**\n\t\t * The name of the attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The type of the attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * An optional reference to the node.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.node = node;\n\n\t}\n\n}\n\n/**\n * {@link NodeBuilder} is going to create instances of this class during the build process\n * of nodes. They represent the final shader uniforms that are going to be generated\n * by the builder. A dictionary of node uniforms is maintained in {@link NodeBuilder#uniforms}\n * for this purpose.\n */\nclass NodeUniform {\n\n\t/**\n\t * Constructs a new node uniform.\n\t *\n\t * @param {string} name - The name of the uniform.\n\t * @param {string} type - The type of the uniform.\n\t * @param {UniformNode} node - An reference to the node.\n\t */\n\tconstructor( name, type, node ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNodeUniform = true;\n\n\t\t/**\n\t\t * The name of the uniform.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The type of the uniform.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * An reference to the node.\n\t\t *\n\t\t * @type {UniformNode}\n\t\t */\n\t\tthis.node = node.getSelf();\n\n\t}\n\n\t/**\n\t * The value of the uniform node.\n\t *\n\t * @type {any}\n\t */\n\tget value() {\n\n\t\treturn this.node.value;\n\n\t}\n\n\tset value( val ) {\n\n\t\tthis.node.value = val;\n\n\t}\n\n\t/**\n\t * The id of the uniform node.\n\t *\n\t * @type {number}\n\t */\n\tget id() {\n\n\t\treturn this.node.id;\n\n\t}\n\n\t/**\n\t * The uniform node's group.\n\t *\n\t * @type {UniformGroupNode}\n\t */\n\tget groupNode() {\n\n\t\treturn this.node.groupNode;\n\n\t}\n\n}\n\n/**\n * {@link NodeBuilder} is going to create instances of this class during the build process\n * of nodes. They represent the final shader variables that are going to be generated\n * by the builder. A dictionary of node variables is maintained in {@link NodeBuilder#vars} for\n * this purpose.\n */\nclass NodeVar {\n\n\t/**\n\t * Constructs a new node variable.\n\t *\n\t * @param {string} name - The name of the variable.\n\t * @param {string} type - The type of the variable.\n\t * @param {boolean} [readOnly=false] - The read-only flag.\n\t * @param {?number} [count=null] - The size.\n\t */\n\tconstructor( name, type, readOnly = false, count = null ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNodeVar = true;\n\n\t\t/**\n\t\t * The name of the variable.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The type of the variable.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t *  The read-only flag.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.readOnly = readOnly;\n\n\t\t/**\n\t\t * The size.\n\t\t *\n\t\t * @type {?number}\n\t\t */\n\t\tthis.count = count;\n\n\t}\n\n}\n\n/**\n * {@link NodeBuilder} is going to create instances of this class during the build process\n * of nodes. They represent the final shader varyings that are going to be generated\n * by the builder. An array of node varyings is maintained in {@link NodeBuilder#varyings} for\n * this purpose.\n *\n * @augments NodeVar\n */\nclass NodeVarying extends NodeVar {\n\n\t/**\n\t * Constructs a new node varying.\n\t *\n\t * @param {string} name - The name of the varying.\n\t * @param {string} type - The type of the varying.\n\t * @param {?string} interpolationType - The interpolation type of the varying.\n\t * @param {?string} interpolationSampling - The interpolation sampling type of the varying.\n\t */\n\tconstructor( name, type, interpolationType = null, interpolationSampling = null ) {\n\n\t\tsuper( name, type );\n\n\t\t/**\n\t\t * Whether this varying requires interpolation or not. This property can be used\n\t\t * to check if the varying can be optimized for a variable.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsInterpolation = false;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNodeVarying = true;\n\n\t\t/**\n\t\t * The interpolation type of the varying data.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.interpolationType = interpolationType;\n\n\t\t/**\n\t\t * The interpolation sampling type of varying data.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.interpolationSampling = interpolationSampling;\n\n\t}\n\n}\n\n/**\n * {@link NodeBuilder} is going to create instances of this class during the build process\n * of nodes. They represent user-defined, native shader code portions that are going to be\n * injected by the builder. A dictionary of node codes is maintained in {@link NodeBuilder#codes}\n * for this purpose.\n */\nclass NodeCode {\n\n\t/**\n\t * Constructs a new code node.\n\t *\n\t * @param {string} name - The name of the code.\n\t * @param {string} type - The node type.\n\t * @param {string} [code=''] - The native shader code.\n\t */\n\tconstructor( name, type, code = '' ) {\n\n\t\t/**\n\t\t * The name of the code.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The node type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The native shader code.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.code = code;\n\n\t\tObject.defineProperty( this, 'isNodeCode', { value: true } );\n\n\t}\n\n}\n\nlet _id$5 = 0;\n\n/**\n * This utility class is used in {@link NodeBuilder} as an internal\n * cache data structure for node data.\n */\nclass NodeCache {\n\n\t/**\n\t * Constructs a new node cache.\n\t *\n\t * @param {?NodeCache} parent - A reference to a parent cache.\n\t */\n\tconstructor( parent = null ) {\n\n\t\t/**\n\t\t * The id of the cache.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.id = _id$5 ++;\n\n\t\t/**\n\t\t * A weak map for managing node data.\n\t\t *\n\t\t * @type {WeakMap<Node, Object>}\n\t\t */\n\t\tthis.nodesData = new WeakMap();\n\n\t\t/**\n\t\t * Reference to a parent node cache.\n\t\t *\n\t\t * @type {?NodeCache}\n\t\t * @default null\n\t\t */\n\t\tthis.parent = parent;\n\n\t}\n\n\t/**\n\t * Returns the data for the given node.\n\t *\n\t * @param {Node} node - The node.\n\t * @return {?Object} The data for the node.\n\t */\n\tgetData( node ) {\n\n\t\tlet data = this.nodesData.get( node );\n\n\t\tif ( data === undefined && this.parent !== null ) {\n\n\t\t\tdata = this.parent.getData( node );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Sets the data for a given node.\n\t *\n\t * @param {Node} node - The node.\n\t * @param {Object} data - The data that should be cached.\n\t */\n\tsetData( node, data ) {\n\n\t\tthis.nodesData.set( node, data );\n\n\t}\n\n}\n\nclass StructType {\n\n\tconstructor( name, members ) {\n\n\t\tthis.name = name;\n\t\tthis.members = members;\n\t\tthis.output = false;\n\n\t}\n\n}\n\n/**\n * Abstract base class for uniforms.\n *\n * @abstract\n * @private\n */\nclass Uniform {\n\n\t/**\n\t * Constructs a new uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {any} value - The uniform's value.\n\t */\n\tconstructor( name, value ) {\n\n\t\t/**\n\t\t * The uniform's name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The uniform's value.\n\t\t *\n\t\t * @type {any}\n\t\t */\n\t\tthis.value = value;\n\n\t\t/**\n\t\t * Used to build the uniform buffer according to the STD140 layout.\n\t\t * Derived uniforms will set this property to a data type specific\n\t\t * value.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.boundary = 0;\n\n\t\t/**\n\t\t * The item size. Derived uniforms will set this property to a data\n\t\t * type specific value.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = 0;\n\n\t\t/**\n\t\t * This property is set by {@link UniformsGroup} and marks\n\t\t * the start position in the uniform buffer.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.offset = 0;\n\n\t}\n\n\t/**\n\t * Sets the uniform's value.\n\t *\n\t * @param {any} value - The value to set.\n\t */\n\tsetValue( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\t/**\n\t * Returns the uniform's value.\n\t *\n\t * @return {any} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.value;\n\n\t}\n\n}\n\n/**\n * Represents a Number uniform.\n *\n * @private\n * @augments Uniform\n */\nclass NumberUniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {number} value - The uniform's value.\n\t */\n\tconstructor( name, value = 0 ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNumberUniform = true;\n\n\t\tthis.boundary = 4;\n\t\tthis.itemSize = 1;\n\n\t}\n\n}\n\n/**\n * Represents a Vector2 uniform.\n *\n * @private\n * @augments Uniform\n */\nclass Vector2Uniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {Vector2} value - The uniform's value.\n\t */\n\tconstructor( name, value = new Vector2() ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVector2Uniform = true;\n\n\t\tthis.boundary = 8;\n\t\tthis.itemSize = 2;\n\n\t}\n\n}\n\n/**\n * Represents a Vector3 uniform.\n *\n * @private\n * @augments Uniform\n */\nclass Vector3Uniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {Vector3} value - The uniform's value.\n\t */\n\tconstructor( name, value = new Vector3() ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVector3Uniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 3;\n\n\t}\n\n}\n\n/**\n * Represents a Vector4 uniform.\n *\n * @private\n * @augments Uniform\n */\nclass Vector4Uniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {Vector4} value - The uniform's value.\n\t */\n\tconstructor( name, value = new Vector4() ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVector4Uniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 4;\n\n\t}\n\n}\n\n/**\n * Represents a Color uniform.\n *\n * @private\n * @augments Uniform\n */\nclass ColorUniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {Color} value - The uniform's value.\n\t */\n\tconstructor( name, value = new Color() ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isColorUniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 3;\n\n\t}\n\n}\n\n/**\n * Represents a Matrix2 uniform.\n *\n * @private\n * @augments Uniform\n */\nclass Matrix2Uniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {Matrix2} value - The uniform's value.\n\t */\n\tconstructor( name, value = new Matrix2() ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMatrix2Uniform = true;\n\n\t\tthis.boundary = 16;\n\t\tthis.itemSize = 4;\n\n\t}\n\n}\n\n\n/**\n * Represents a Matrix3 uniform.\n *\n * @private\n * @augments Uniform\n */\nclass Matrix3Uniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {Matrix3} value - The uniform's value.\n\t */\n\tconstructor( name, value = new Matrix3() ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMatrix3Uniform = true;\n\n\t\tthis.boundary = 48;\n\t\tthis.itemSize = 12;\n\n\t}\n\n}\n\n/**\n * Represents a Matrix4 uniform.\n *\n * @private\n * @augments Uniform\n */\nclass Matrix4Uniform extends Uniform {\n\n\t/**\n\t * Constructs a new Number uniform.\n\t *\n\t * @param {string} name - The uniform's name.\n\t * @param {Matrix4} value - The uniform's value.\n\t */\n\tconstructor( name, value = new Matrix4() ) {\n\n\t\tsuper( name, value );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMatrix4Uniform = true;\n\n\t\tthis.boundary = 64;\n\t\tthis.itemSize = 16;\n\n\t}\n\n}\n\n/**\n * A special form of Number uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments NumberUniform\n */\nclass NumberNodeUniform extends NumberUniform {\n\n\t/**\n\t * Constructs a new node-based Number uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {number} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\n/**\n * A special form of Vector2 uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments Vector2Uniform\n */\nclass Vector2NodeUniform extends Vector2Uniform {\n\n\t/**\n\t * Constructs a new node-based Vector2 uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {Vector2} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\n/**\n * A special form of Vector3 uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments Vector3Uniform\n */\nclass Vector3NodeUniform extends Vector3Uniform {\n\n\t/**\n\t * Constructs a new node-based Vector3 uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {Vector3} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\n/**\n * A special form of Vector4 uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments Vector4Uniform\n */\nclass Vector4NodeUniform extends Vector4Uniform {\n\n\t/**\n\t * Constructs a new node-based Vector4 uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {Vector4} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\n/**\n * A special form of Color uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments ColorUniform\n */\nclass ColorNodeUniform extends ColorUniform {\n\n\t/**\n\t * Constructs a new node-based Color uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {Color} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\n\n/**\n * A special form of Matrix2 uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments Matrix2Uniform\n */\nclass Matrix2NodeUniform extends Matrix2Uniform {\n\n\t/**\n\t * Constructs a new node-based Matrix2 uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {Matrix2} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\n/**\n * A special form of Matrix3 uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments Matrix3Uniform\n */\nclass Matrix3NodeUniform extends Matrix3Uniform {\n\n\t/**\n\t * Constructs a new node-based Matrix3 uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {Matrix3} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\n/**\n * A special form of Matrix4 uniform binding type.\n * It's value is managed by a node object.\n *\n * @private\n * @augments Matrix4Uniform\n */\nclass Matrix4NodeUniform extends Matrix4Uniform {\n\n\t/**\n\t * Constructs a new node-based Matrix4 uniform.\n\t *\n\t * @param {NodeUniform} nodeUniform - The node uniform.\n\t */\n\tconstructor( nodeUniform ) {\n\n\t\tsuper( nodeUniform.name, nodeUniform.value );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {NodeUniform}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t}\n\n\t/**\n\t * Overwritten to return the value of the node uniform.\n\t *\n\t * @return {Matrix4} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n\t/**\n\t * Returns the node uniform data type.\n\t *\n\t * @return {string} The data type.\n\t */\n\tgetType() {\n\n\t\treturn this.nodeUniform.type;\n\n\t}\n\n}\n\nconst rendererCache = new WeakMap();\n\nconst typeFromArray = new Map( [\n\t[ Int8Array, 'int' ],\n\t[ Int16Array, 'int' ],\n\t[ Int32Array, 'int' ],\n\t[ Uint8Array, 'uint' ],\n\t[ Uint16Array, 'uint' ],\n\t[ Uint32Array, 'uint' ],\n\t[ Float32Array, 'float' ]\n] );\n\nconst toFloat = ( value ) => {\n\n\tif ( /e/g.test( value ) ) {\n\n\t\treturn String( value ).replace( /\\+/g, '' );\n\n\t} else {\n\n\t\tvalue = Number( value );\n\n\t\treturn value + ( value % 1 ? '' : '.0' );\n\n\t}\n\n};\n\n/**\n * Base class for builders which generate a shader program based\n * on a 3D object and its node material definition.\n */\nclass NodeBuilder {\n\n\t/**\n\t * Constructs a new node builder.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Renderer} renderer - The current renderer.\n\t * @param {NodeParser} parser - A reference to a node parser.\n\t */\n\tconstructor( object, renderer, parser ) {\n\n\t\t/**\n\t\t * The 3D object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The material of the 3D object.\n\t\t *\n\t\t * @type {?Material}\n\t\t */\n\t\tthis.material = ( object && object.material ) || null;\n\n\t\t/**\n\t\t * The geometry of the 3D object.\n\t\t *\n\t\t * @type {?BufferGeometry}\n\t\t */\n\t\tthis.geometry = ( object && object.geometry ) || null;\n\n\t\t/**\n\t\t * The current renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * A reference to a node parser.\n\t\t *\n\t\t * @type {NodeParser}\n\t\t */\n\t\tthis.parser = parser;\n\n\t\t/**\n\t\t * The scene the 3D object belongs to.\n\t\t *\n\t\t * @type {?Scene}\n\t\t * @default null\n\t\t */\n\t\tthis.scene = null;\n\n\t\t/**\n\t\t * The camera the 3D object is rendered with.\n\t\t *\n\t\t * @type {?Camera}\n\t\t * @default null\n\t\t */\n\t\tthis.camera = null;\n\n\t\t/**\n\t\t * A list of all nodes the builder is processing\n\t\t * for this 3D object.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.nodes = [];\n\n\t\t/**\n\t\t * A list of all sequential nodes.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.sequentialNodes = [];\n\n\t\t/**\n\t\t * A list of all nodes which {@link Node#update} method should be executed.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.updateNodes = [];\n\n\t\t/**\n\t\t * A list of all nodes which {@link Node#updateBefore} method should be executed.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.updateBeforeNodes = [];\n\n\t\t/**\n\t\t * A list of all nodes which {@link Node#updateAfter} method should be executed.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.updateAfterNodes = [];\n\n\t\t/**\n\t\t * A dictionary that assigns each node to a unique hash.\n\t\t *\n\t\t * @type {Object<number,Node>}\n\t\t */\n\t\tthis.hashNodes = {};\n\n\t\t/**\n\t\t * A reference to a node material observer.\n\t\t *\n\t\t * @type {?NodeMaterialObserver}\n\t\t * @default null\n\t\t */\n\t\tthis.observer = null;\n\n\t\t/**\n\t\t * A reference to the current lights node.\n\t\t *\n\t\t * @type {?LightsNode}\n\t\t * @default null\n\t\t */\n\t\tthis.lightsNode = null;\n\n\t\t/**\n\t\t * A reference to the current environment node.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.environmentNode = null;\n\n\t\t/**\n\t\t * A reference to the current fog node.\n\t\t *\n\t\t * @type {?FogNode}\n\t\t * @default null\n\t\t */\n\t\tthis.fogNode = null;\n\n\t\t/**\n\t\t * The current clipping context.\n\t\t *\n\t\t * @type {?ClippingContext}\n\t\t */\n\t\tthis.clippingContext = null;\n\n\t\t/**\n\t\t * The generated vertex shader.\n\t\t *\n\t\t * @type {?string}\n\t\t */\n\t\tthis.vertexShader = null;\n\n\t\t/**\n\t\t * The generated fragment shader.\n\t\t *\n\t\t * @type {?string}\n\t\t */\n\t\tthis.fragmentShader = null;\n\n\t\t/**\n\t\t * The generated compute shader.\n\t\t *\n\t\t * @type {?string}\n\t\t */\n\t\tthis.computeShader = null;\n\n\t\t/**\n\t\t * Nodes used in the primary flow of code generation.\n\t\t *\n\t\t * @type {Object<string,Array<Node>>}\n\t\t */\n\t\tthis.flowNodes = { vertex: [], fragment: [], compute: [] };\n\n\t\t/**\n\t\t * Nodes code from `.flowNodes`.\n\t\t *\n\t\t * @type {Object<string,string>}\n\t\t */\n\t\tthis.flowCode = { vertex: '', fragment: '', compute: '' };\n\n\t\t/**\n\t\t * This dictionary holds the node uniforms of the builder.\n\t\t * The uniforms are maintained in an array for each shader stage.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };\n\n\t\t/**\n\t\t * This dictionary holds the output structs of the builder.\n\t\t * The structs are maintained in an array for each shader stage.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.structs = { vertex: [], fragment: [], compute: [], index: 0 };\n\n\t\t/**\n\t\t * This dictionary holds the bindings for each shader stage.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.bindings = { vertex: {}, fragment: {}, compute: {} };\n\n\t\t/**\n\t\t * This dictionary maintains the binding indices per bind group.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.bindingsIndexes = {};\n\n\t\t/**\n\t\t * Reference to the array of bind groups.\n\t\t *\n\t\t * @type {?Array<BindGroup>}\n\t\t */\n\t\tthis.bindGroups = null;\n\n\t\t/**\n\t\t * This array holds the node attributes of this builder\n\t\t * created via {@link AttributeNode}.\n\t\t *\n\t\t * @type {Array<NodeAttribute>}\n\t\t */\n\t\tthis.attributes = [];\n\n\t\t/**\n\t\t * This array holds the node attributes of this builder\n\t\t * created via {@link BufferAttributeNode}.\n\t\t *\n\t\t * @type {Array<NodeAttribute>}\n\t\t */\n\t\tthis.bufferAttributes = [];\n\n\t\t/**\n\t\t * This array holds the node varyings of this builder.\n\t\t *\n\t\t * @type {Array<NodeVarying>}\n\t\t */\n\t\tthis.varyings = [];\n\n\t\t/**\n\t\t * This dictionary holds the (native) node codes of this builder.\n\t\t * The codes are maintained in an array for each shader stage.\n\t\t *\n\t\t * @type {Object<string,Array<NodeCode>>}\n\t\t */\n\t\tthis.codes = {};\n\n\t\t/**\n\t\t * This dictionary holds the node variables of this builder.\n\t\t * The variables are maintained in an array for each shader stage.\n\t\t * This dictionary is also used to count the number of variables\n\t\t * according to their type (const, vars).\n\t\t *\n\t\t * @type {Object<string,Array<NodeVar>|number>}\n\t\t */\n\t\tthis.vars = {};\n\n\t\t/**\n\t\t * This dictionary holds the declarations for each shader stage.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.declarations = {};\n\n\t\t/**\n\t\t * Current code flow.\n\t\t * All code generated in this stack will be stored in `.flow`.\n\t\t *\n\t\t * @type {{code: string}}\n\t\t */\n\t\tthis.flow = { code: '' };\n\n\t\t/**\n\t\t * A chain of nodes.\n\t\t * Used to check recursive calls in node-graph.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.chaining = [];\n\n\t\t/**\n\t\t * The current stack.\n\t\t * This reflects the current process in the code block hierarchy,\n\t\t * it is useful to know if the current process is inside a conditional for example.\n\t\t *\n\t\t * @type {StackNode}\n\t\t */\n\t\tthis.stack = stack();\n\n\t\t/**\n\t\t * List of stack nodes.\n\t\t * The current stack hierarchy is stored in an array.\n\t\t *\n\t\t * @type {Array<StackNode>}\n\t\t */\n\t\tthis.stacks = [];\n\n\t\t/**\n\t\t * A tab value. Used for shader string generation.\n\t\t *\n\t\t * @type {string}\n\t\t * @default '\\t'\n\t\t */\n\t\tthis.tab = '\\t';\n\n\t\t/**\n\t\t * Reference to the current function node.\n\t\t *\n\t\t * @type {?FunctionNode}\n\t\t * @default null\n\t\t */\n\t\tthis.currentFunctionNode = null;\n\n\t\t/**\n\t\t * The builder's context.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.context = {\n\t\t\tmaterial: this.material\n\t\t};\n\n\t\t/**\n\t\t * The builder's cache.\n\t\t *\n\t\t * @type {NodeCache}\n\t\t */\n\t\tthis.cache = new NodeCache();\n\n\t\t/**\n\t\t * Since the {@link NodeBuilder#cache} might be temporarily\n\t\t * overwritten by other caches, this member retains the reference\n\t\t * to the builder's own cache.\n\t\t *\n\t\t * @type {NodeCache}\n\t\t * @default this.cache\n\t\t */\n\t\tthis.globalCache = this.cache;\n\n\t\tthis.flowsData = new WeakMap();\n\n\t\t/**\n\t\t * The current shader stage.\n\t\t *\n\t\t * @type {?('vertex'|'fragment'|'compute'|'any')}\n\t\t */\n\t\tthis.shaderStage = null;\n\n\t\t/**\n\t\t * The current build stage.\n\t\t *\n\t\t * @type {?('setup'|'analyze'|'generate')}\n\t\t */\n\t\tthis.buildStage = null;\n\n\t}\n\n\t/**\n\t * Returns the bind groups of the current renderer.\n\t *\n\t * @return {ChainMap} The cache.\n\t */\n\tgetBindGroupsCache() {\n\n\t\tlet bindGroupsCache = rendererCache.get( this.renderer );\n\n\t\tif ( bindGroupsCache === undefined ) {\n\n\t\t\tbindGroupsCache = new ChainMap();\n\n\t\t\trendererCache.set( this.renderer, bindGroupsCache );\n\n\t\t}\n\n\t\treturn bindGroupsCache;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of {@link RenderTarget} with the given\n\t * dimensions and options.\n\t *\n\t * @param {number} width - The width of the render target.\n\t * @param {number} height - The height of the render target.\n\t * @param {Object} options - The options of the render target.\n\t * @return {RenderTarget} The render target.\n\t */\n\tcreateRenderTarget( width, height, options ) {\n\n\t\treturn new RenderTarget( width, height, options );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of {@link RenderTargetArray} with the given\n\t * dimensions and options.\n\t *\n\t * @param {number} width - The width of the render target.\n\t * @param {number} height - The height of the render target.\n\t * @param {number} depth - The depth of the render target.\n\t * @param {Object} options - The options of the render target.\n\t * @return {RenderTargetArray} The render target.\n\t */\n\tcreateRenderTargetArray( width, height, depth, options ) {\n\n\t\treturn new RenderTargetArray( width, height, depth, options );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of {@link CubeRenderTarget} with the given\n\t * dimensions and options.\n\t *\n\t * @param {number} size - The size of the cube render target.\n\t * @param {Object} options - The options of the cube render target.\n\t * @return {CubeRenderTarget} The cube render target.\n\t */\n\tcreateCubeRenderTarget( size, options ) {\n\n\t\treturn new CubeRenderTarget( size, options );\n\n\t}\n\n\t/**\n\t * Whether the given node is included in the internal array of nodes or not.\n\t *\n\t * @param {Node} node - The node to test.\n\t * @return {boolean} Whether the given node is included in the internal array of nodes or not.\n\t */\n\tincludes( node ) {\n\n\t\treturn this.nodes.includes( node );\n\n\t}\n\n\t/**\n\t * Returns the output struct name which is required by\n\t * {@link OutputStructNode}.\n\t *\n\t * @abstract\n\t * @return {string} The name of the output struct.\n\t */\n\tgetOutputStructName() {}\n\n\t/**\n\t * Returns a bind group for the given group name and binding.\n\t *\n\t * @private\n\t * @param {string} groupName - The group name.\n\t * @param {Array<NodeUniformsGroup>} bindings - List of bindings.\n\t * @return {BindGroup} The bind group\n\t */\n\t_getBindGroup( groupName, bindings ) {\n\n\t\tconst bindGroupsCache = this.getBindGroupsCache();\n\n\t\t//\n\n\t\tconst bindingsArray = [];\n\n\t\tlet sharedGroup = true;\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tbindingsArray.push( binding );\n\n\t\t\tsharedGroup = sharedGroup && binding.groupNode.shared !== true;\n\n\t\t}\n\n\t\t//\n\n\t\tlet bindGroup;\n\n\t\tif ( sharedGroup ) {\n\n\t\t\tbindGroup = bindGroupsCache.get( bindingsArray );\n\n\t\t\tif ( bindGroup === undefined ) {\n\n\t\t\t\tbindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );\n\n\t\t\t\tbindGroupsCache.set( bindingsArray, bindGroup );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbindGroup = new BindGroup( groupName, bindingsArray, this.bindingsIndexes[ groupName ].group, bindingsArray );\n\n\t\t}\n\n\t\treturn bindGroup;\n\n\t}\n\n\t/**\n\t * Returns an array of node uniform groups for the given group name and shader stage.\n\t *\n\t * @param {string} groupName - The group name.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {Array<NodeUniformsGroup>} The array of node uniform groups.\n\t */\n\tgetBindGroupArray( groupName, shaderStage ) {\n\n\t\tconst bindings = this.bindings[ shaderStage ];\n\n\t\tlet bindGroup = bindings[ groupName ];\n\n\t\tif ( bindGroup === undefined ) {\n\n\t\t\tif ( this.bindingsIndexes[ groupName ] === undefined ) {\n\n\t\t\t\tthis.bindingsIndexes[ groupName ] = { binding: 0, group: Object.keys( this.bindingsIndexes ).length };\n\n\t\t\t}\n\n\t\t\tbindings[ groupName ] = bindGroup = [];\n\n\t\t}\n\n\t\treturn bindGroup;\n\n\t}\n\n\t/**\n\t * Returns a list bindings of all shader stages separated by groups.\n\t *\n\t * @return {Array<BindGroup>} The list of bindings.\n\t */\n\tgetBindings() {\n\n\t\tlet bindingsGroups = this.bindGroups;\n\n\t\tif ( bindingsGroups === null ) {\n\n\t\t\tconst groups = {};\n\t\t\tconst bindings = this.bindings;\n\n\t\t\tfor ( const shaderStage of shaderStages ) {\n\n\t\t\t\tfor ( const groupName in bindings[ shaderStage ] ) {\n\n\t\t\t\t\tconst uniforms = bindings[ shaderStage ][ groupName ];\n\n\t\t\t\t\tconst groupUniforms = groups[ groupName ] || ( groups[ groupName ] = [] );\n\t\t\t\t\tgroupUniforms.push( ...uniforms );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingsGroups = [];\n\n\t\t\tfor ( const groupName in groups ) {\n\n\t\t\t\tconst group = groups[ groupName ];\n\n\t\t\t\tconst bindingsGroup = this._getBindGroup( groupName, group );\n\n\t\t\t\tbindingsGroups.push( bindingsGroup );\n\n\t\t\t}\n\n\t\t\tthis.bindGroups = bindingsGroups;\n\n\t\t}\n\n\t\treturn bindingsGroups;\n\n\t}\n\n\t/**\n\t * Sorts the bind groups and updates {@link NodeBuilder#bindingsIndexes}.\n\t */\n\tsortBindingGroups() {\n\n\t\tconst bindingsGroups = this.getBindings();\n\n\t\tbindingsGroups.sort( ( a, b ) => ( a.bindings[ 0 ].groupNode.order - b.bindings[ 0 ].groupNode.order ) );\n\n\t\tfor ( let i = 0; i < bindingsGroups.length; i ++ ) {\n\n\t\t\tconst bindingGroup = bindingsGroups[ i ];\n\t\t\tthis.bindingsIndexes[ bindingGroup.name ].group = i;\n\n\t\t\tbindingGroup.index = i;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * The builder maintains each node in a hash-based dictionary.\n\t * This method sets the given node (value) with the given hash (key) into this dictionary.\n\t *\n\t * @param {Node} node - The node to add.\n\t * @param {number} hash - The hash of the node.\n\t */\n\tsetHashNode( node, hash ) {\n\n\t\tthis.hashNodes[ hash ] = node;\n\n\t}\n\n\t/**\n\t * Adds a node to this builder.\n\t *\n\t * @param {Node} node - The node to add.\n\t */\n\taddNode( node ) {\n\n\t\tif ( this.nodes.includes( node ) === false ) {\n\n\t\t\tthis.nodes.push( node );\n\n\t\t\tthis.setHashNode( node, node.getHash( this ) );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * It is used to add Nodes that will be used as FRAME and RENDER events,\n\t * and need to follow a certain sequence in the calls to work correctly.\n\t * This function should be called after 'setup()' in the 'build()' process to ensure that the child nodes are processed first.\n\t *\n\t * @param {Node} node - The node to add.\n\t */\n\taddSequentialNode( node ) {\n\n\t\tif ( this.sequentialNodes.includes( node ) === false ) {\n\n\t\t\tthis.sequentialNodes.push( node );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Checks the update types of nodes\n\t */\n\tbuildUpdateNodes() {\n\n\t\tfor ( const node of this.nodes ) {\n\n\t\t\tconst updateType = node.getUpdateType();\n\n\t\t\tif ( updateType !== NodeUpdateType.NONE ) {\n\n\t\t\t\tthis.updateNodes.push( node.getSelf() );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const node of this.sequentialNodes ) {\n\n\t\t\tconst updateBeforeType = node.getUpdateBeforeType();\n\t\t\tconst updateAfterType = node.getUpdateAfterType();\n\n\t\t\tif ( updateBeforeType !== NodeUpdateType.NONE ) {\n\n\t\t\t\tthis.updateBeforeNodes.push( node.getSelf() );\n\n\t\t\t}\n\n\t\t\tif ( updateAfterType !== NodeUpdateType.NONE ) {\n\n\t\t\t\tthis.updateAfterNodes.push( node.getSelf() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * A reference the current node which is the\n\t * last node in the chain of nodes.\n\t *\n\t * @type {Node}\n\t */\n\tget currentNode() {\n\n\t\treturn this.chaining[ this.chaining.length - 1 ];\n\n\t}\n\n\t/**\n\t * Whether the given texture is filtered or not.\n\t *\n\t * @param {Texture} texture - The texture to check.\n\t * @return {boolean} Whether the given texture is filtered or not.\n\t */\n\tisFilteredTexture( texture ) {\n\n\t\treturn ( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||\n\t\t\ttexture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter );\n\n\t}\n\n\t/**\n\t * Adds the given node to the internal node chain.\n\t * This is used to check recursive calls in node-graph.\n\t *\n\t * @param {Node} node - The node to add.\n\t */\n\taddChain( node ) {\n\n\t\t/*\n\t\tif ( this.chaining.indexOf( node ) !== - 1 ) {\n\n\t\t\tconsole.warn( 'Recursive node: ', node );\n\n\t\t}\n\t\t*/\n\n\t\tthis.chaining.push( node );\n\n\t}\n\n\t/**\n\t * Removes the given node from the internal node chain.\n\t *\n\t * @param {Node} node - The node to remove.\n\t */\n\tremoveChain( node ) {\n\n\t\tconst lastChain = this.chaining.pop();\n\n\t\tif ( lastChain !== node ) {\n\n\t\t\tthrow new Error( 'NodeBuilder: Invalid node chaining!' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the native shader method name for a given generic name. E.g.\n\t * the method name `textureDimensions` matches the WGSL name but must be\n\t * resolved to `textureSize` in GLSL.\n\t *\n\t * @abstract\n\t * @param {string} method - The method name to resolve.\n\t * @return {string} The resolved method name.\n\t */\n\tgetMethod( method ) {\n\n\t\treturn method;\n\n\t}\n\n\t/**\n\t * Returns a node for the given hash, see {@link NodeBuilder#setHashNode}.\n\t *\n\t * @param {number} hash - The hash of the node.\n\t * @return {Node} The found node.\n\t */\n\tgetNodeFromHash( hash ) {\n\n\t\treturn this.hashNodes[ hash ];\n\n\t}\n\n\t/**\n\t * Adds the Node to a target flow so that it can generate code in the 'generate' process.\n\t *\n\t * @param {('vertex'|'fragment'|'compute')} shaderStage - The shader stage.\n\t * @param {Node} node - The node to add.\n\t * @return {Node} The node.\n\t */\n\taddFlow( shaderStage, node ) {\n\n\t\tthis.flowNodes[ shaderStage ].push( node );\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * Sets builder's context.\n\t *\n\t * @param {Object} context - The context to set.\n\t */\n\tsetContext( context ) {\n\n\t\tthis.context = context;\n\n\t}\n\n\t/**\n\t * Returns the builder's current context.\n\t *\n\t * @return {Object} The builder's current context.\n\t */\n\tgetContext() {\n\n\t\treturn this.context;\n\n\t}\n\n\t/**\n\t * Gets a context used in shader construction that can be shared across different materials.\n\t * This is necessary since the renderer cache can reuse shaders generated in one material and use them in another.\n\t *\n\t * @return {Object} The builder's current context without material.\n\t */\n\tgetSharedContext() {\n\n\t\t({ ...this.context });\n\n\t\treturn this.context;\n\n\t}\n\n\t/**\n\t * Sets builder's cache.\n\t *\n\t * @param {NodeCache} cache - The cache to set.\n\t */\n\tsetCache( cache ) {\n\n\t\tthis.cache = cache;\n\n\t}\n\n\t/**\n\t * Returns the builder's current cache.\n\t *\n\t * @return {NodeCache} The builder's current cache.\n\t */\n\tgetCache() {\n\n\t\treturn this.cache;\n\n\t}\n\n\t/**\n\t * Returns a cache for the given node.\n\t *\n\t * @param {Node} node - The node.\n\t * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.\n\t * @return {NodeCache} The cache.\n\t */\n\tgetCacheFromNode( node, parent = true ) {\n\n\t\tconst data = this.getDataFromNode( node );\n\t\tif ( data.cache === undefined ) data.cache = new NodeCache( parent ? this.getCache() : null );\n\n\t\treturn data.cache;\n\n\t}\n\n\t/**\n\t * Whether the requested feature is available or not.\n\t *\n\t * @abstract\n\t * @param {string} name - The requested feature.\n\t * @return {boolean} Whether the requested feature is supported or not.\n\t */\n\tisAvailable( /*name*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the vertexIndex input variable as a native shader string.\n\t *\n\t * @abstract\n\t * @return {string} The instanceIndex shader string.\n\t */\n\tgetVertexIndex() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Returns the instanceIndex input variable as a native shader string.\n\t *\n\t * @abstract\n\t * @return {string} The instanceIndex shader string.\n\t */\n\tgetInstanceIndex() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Returns the drawIndex input variable as a native shader string.\n\t * Only relevant for WebGL and its `WEBGL_multi_draw` extension.\n\t *\n\t * @abstract\n\t * @return {?string} The drawIndex shader string.\n\t */\n\tgetDrawIndex() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Returns the frontFacing input variable as a native shader string.\n\t *\n\t * @abstract\n\t * @return {string} The frontFacing shader string.\n\t */\n\tgetFrontFacing() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Returns the fragCoord input variable as a native shader string.\n\t *\n\t * @abstract\n\t * @return {string} The fragCoord shader string.\n\t */\n\tgetFragCoord() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Whether to flip texture data along its vertical axis or not. WebGL needs\n\t * this method evaluate to `true`, WebGPU to `false`.\n\t *\n\t * @abstract\n\t * @return {boolean} Whether to flip texture data along its vertical axis or not.\n\t */\n\tisFlipY() {\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Calling this method increases the usage count for the given node by one.\n\t *\n\t * @param {Node} node - The node to increase the usage count for.\n\t * @return {number} The updated usage count.\n\t */\n\tincreaseUsage( node ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\t\tnodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;\n\n\t\treturn nodeData.usageCount;\n\n\t}\n\n\t/**\n\t * Generates a texture sample shader string for the given texture data.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The texture property name.\n\t * @param {string} uvSnippet - Snippet defining the texture coordinates.\n\t * @return {string} The generated shader string.\n\t */\n\tgenerateTexture( /* texture, textureProperty, uvSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Generates a texture LOD shader string for the given texture data.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The texture property name.\n\t * @param {string} uvSnippet - Snippet defining the texture coordinates.\n\t * @param {?string} depthSnippet - Snippet defining the 0-based texture array index to sample.\n\t * @param {string} levelSnippet - Snippet defining the mip level.\n\t * @return {string} The generated shader string.\n\t */\n\tgenerateTextureLod( /* texture, textureProperty, uvSnippet, depthSnippet, levelSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Generates the array declaration string.\n\t *\n\t * @param {string} type - The type.\n\t * @param {?number} [count] - The count.\n\t * @return {string} The generated value as a shader string.\n\t */\n\tgenerateArrayDeclaration( type, count ) {\n\n\t\treturn this.getType( type ) + '[ ' + count + ' ]';\n\n\t}\n\n\t/**\n\t * Generates the array shader string for the given type and value.\n\t *\n\t * @param {string} type - The type.\n\t * @param {?number} [count] - The count.\n\t * @param {?Array<Node>} [values=null] - The default values.\n\t * @return {string} The generated value as a shader string.\n\t */\n\tgenerateArray( type, count, values = null ) {\n\n\t\tlet snippet = this.generateArrayDeclaration( type, count ) + '( ';\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tconst value = values ? values[ i ] : null;\n\n\t\t\tif ( value !== null ) {\n\n\t\t\t\tsnippet += value.build( this, type );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet += this.generateConst( type );\n\n\t\t\t}\n\n\t\t\tif ( i < count - 1 ) snippet += ', ';\n\n\t\t}\n\n\t\tsnippet += ' )';\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Generates the struct shader string.\n\t *\n\t * @param {string} type - The type.\n\t * @param {Array<Object>} [membersLayout] - The count.\n\t * @param {?Array<Node>} [values=null] - The default values.\n\t * @return {string} The generated value as a shader string.\n\t */\n\tgenerateStruct( type, membersLayout, values = null ) {\n\n\t\tconst snippets = [];\n\n\t\tfor ( const member of membersLayout ) {\n\n\t\t\tconst { name, type } = member;\n\n\t\t\tif ( values && values[ name ] && values[ name ].isNode ) {\n\n\t\t\t\tsnippets.push( values[ name ].build( this, type ) );\n\n\t\t\t} else {\n\n\t\t\t\tsnippets.push( this.generateConst( type ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn type + '( ' + snippets.join( ', ' ) + ' )';\n\n\t}\n\n\n\t/**\n\t * Generates the shader string for the given type and value.\n\t *\n\t * @param {string} type - The type.\n\t * @param {?any} [value=null] - The value.\n\t * @return {string} The generated value as a shader string.\n\t */\n\tgenerateConst( type, value = null ) {\n\n\t\tif ( value === null ) {\n\n\t\t\tif ( type === 'float' || type === 'int' || type === 'uint' ) value = 0;\n\t\t\telse if ( type === 'bool' ) value = false;\n\t\t\telse if ( type === 'color' ) value = new Color();\n\t\t\telse if ( type === 'vec2' ) value = new Vector2();\n\t\t\telse if ( type === 'vec3' ) value = new Vector3();\n\t\t\telse if ( type === 'vec4' ) value = new Vector4();\n\n\t\t}\n\n\t\tif ( type === 'float' ) return toFloat( value );\n\t\tif ( type === 'int' ) return `${ Math.round( value ) }`;\n\t\tif ( type === 'uint' ) return value >= 0 ? `${ Math.round( value ) }u` : '0u';\n\t\tif ( type === 'bool' ) return value ? 'true' : 'false';\n\t\tif ( type === 'color' ) return `${ this.getType( 'vec3' ) }( ${ toFloat( value.r ) }, ${ toFloat( value.g ) }, ${ toFloat( value.b ) } )`;\n\n\t\tconst typeLength = this.getTypeLength( type );\n\n\t\tconst componentType = this.getComponentType( type );\n\n\t\tconst generateConst = value => this.generateConst( componentType, value );\n\n\t\tif ( typeLength === 2 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) } )`;\n\n\t\t} else if ( typeLength === 3 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) } )`;\n\n\t\t} else if ( typeLength === 4 && type !== 'mat2' ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ generateConst( value.x ) }, ${ generateConst( value.y ) }, ${ generateConst( value.z ) }, ${ generateConst( value.w ) } )`;\n\n\t\t} else if ( typeLength >= 4 && value && ( value.isMatrix2 || value.isMatrix3 || value.isMatrix4 ) ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ value.elements.map( generateConst ).join( ', ' ) } )`;\n\n\t\t} else if ( typeLength > 4 ) {\n\n\t\t\treturn `${ this.getType( type ) }()`;\n\n\t\t}\n\n\t\tthrow new Error( `NodeBuilder: Type '${type}' not found in generate constant attempt.` );\n\n\t}\n\n\t/**\n\t * It might be necessary to convert certain data types to different ones\n\t * so this method can be used to hide the conversion.\n\t *\n\t * @param {string} type - The type.\n\t * @return {string} The updated type.\n\t */\n\tgetType( type ) {\n\n\t\tif ( type === 'color' ) return 'vec3';\n\n\t\treturn type;\n\n\t}\n\n\t/**\n\t * Whether the given attribute name is defined in the geometry or not.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @return {boolean} Whether the given attribute name is defined in the geometry.\n\t */\n\thasGeometryAttribute( name ) {\n\n\t\treturn this.geometry && this.geometry.getAttribute( name ) !== undefined;\n\n\t}\n\n\t/**\n\t * Returns a node attribute for the given name and type.\n\t *\n\t * @param {string} name - The attribute's name.\n\t * @param {string} type - The attribute's type.\n\t * @return {NodeAttribute} The node attribute.\n\t */\n\tgetAttribute( name, type ) {\n\n\t\tconst attributes = this.attributes;\n\n\t\t// find attribute\n\n\t\tfor ( const attribute of attributes ) {\n\n\t\t\tif ( attribute.name === name ) {\n\n\t\t\t\treturn attribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create a new if no exist\n\n\t\tconst attribute = new NodeAttribute( name, type );\n\n\t\tthis.registerDeclaration( attribute );\n\n\t\tattributes.push( attribute );\n\n\t\treturn attribute;\n\n\t}\n\n\t/**\n\t * Returns for the given node and shader stage the property name for the shader.\n\t *\n\t * @param {Node} node - The node.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {string} The property name.\n\t */\n\tgetPropertyName( node/*, shaderStage*/ ) {\n\n\t\treturn node.name;\n\n\t}\n\n\t/**\n\t * Whether the given type is a vector type or not.\n\t *\n\t * @param {string} type - The type to check.\n\t * @return {boolean} Whether the given type is a vector type or not.\n\t */\n\tisVector( type ) {\n\n\t\treturn /vec\\d/.test( type );\n\n\t}\n\n\t/**\n\t * Whether the given type is a matrix type or not.\n\t *\n\t * @param {string} type - The type to check.\n\t * @return {boolean} Whether the given type is a matrix type or not.\n\t */\n\tisMatrix( type ) {\n\n\t\treturn /mat\\d/.test( type );\n\n\t}\n\n\t/**\n\t * Whether the given type is a reference type or not.\n\t *\n\t * @param {string} type - The type to check.\n\t * @return {boolean} Whether the given type is a reference type or not.\n\t */\n\tisReference( type ) {\n\n\t\treturn type === 'void' || type === 'property' || type === 'sampler' || type === 'samplerComparison' || type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'depthTexture' || type === 'texture3D';\n\n\t}\n\n\t/**\n\t * Checks if the given texture requires a manual conversion to the working color space.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture to check.\n\t * @return {boolean} Whether the given texture requires a conversion to working color space or not.\n\t */\n\tneedsToWorkingColorSpace( /*texture*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the component type of a given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {string} The component type.\n\t */\n\tgetComponentTypeFromTexture( texture ) {\n\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isDataTexture ) {\n\n\t\t\tif ( type === IntType ) return 'int';\n\t\t\tif ( type === UnsignedIntType ) return 'uint';\n\n\t\t}\n\n\t\treturn 'float';\n\n\t}\n\n\t/**\n\t * Returns the element type for a given type.\n\t *\n\t * @param {string} type - The type.\n\t * @return {string} The element type.\n\t */\n\tgetElementType( type ) {\n\n\t\tif ( type === 'mat2' ) return 'vec2';\n\t\tif ( type === 'mat3' ) return 'vec3';\n\t\tif ( type === 'mat4' ) return 'vec4';\n\n\t\treturn this.getComponentType( type );\n\n\t}\n\n\t/**\n\t * Returns the component type for a given type.\n\t *\n\t * @param {string} type - The type.\n\t * @return {string} The component type.\n\t */\n\tgetComponentType( type ) {\n\n\t\ttype = this.getVectorType( type );\n\n\t\tif ( type === 'float' || type === 'bool' || type === 'int' || type === 'uint' ) return type;\n\n\t\tconst componentType = /(b|i|u|)(vec|mat)([2-4])/.exec( type );\n\n\t\tif ( componentType === null ) return null;\n\n\t\tif ( componentType[ 1 ] === 'b' ) return 'bool';\n\t\tif ( componentType[ 1 ] === 'i' ) return 'int';\n\t\tif ( componentType[ 1 ] === 'u' ) return 'uint';\n\n\t\treturn 'float';\n\n\t}\n\n\t/**\n\t * Returns the vector type for a given type.\n\t *\n\t * @param {string} type - The type.\n\t * @return {string} The vector type.\n\t */\n\tgetVectorType( type ) {\n\n\t\tif ( type === 'color' ) return 'vec3';\n\t\tif ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) return 'vec4';\n\n\t\treturn type;\n\n\t}\n\n\t/**\n\t * Returns the data type for the given the length and component type.\n\t *\n\t * @param {number} length - The length.\n\t * @param {string} [componentType='float'] - The component type.\n\t * @return {string} The type.\n\t */\n\tgetTypeFromLength( length, componentType = 'float' ) {\n\n\t\tif ( length === 1 ) return componentType;\n\n\t\tlet baseType = getTypeFromLength( length );\n\t\tconst prefix = componentType === 'float' ? '' : componentType[ 0 ];\n\n\t\t// fix edge case for mat2x2 being same size as vec4\n\t\tif ( /mat2/.test( componentType ) === true ) {\n\n\t\t\tbaseType = baseType.replace( 'vec', 'mat' );\n\n\t\t}\n\n\t\treturn prefix + baseType;\n\n\t}\n\n\t/**\n\t * Returns the type for a given typed array.\n\t *\n\t * @param {TypedArray} array - The typed array.\n\t * @return {string} The type.\n\t */\n\tgetTypeFromArray( array ) {\n\n\t\treturn typeFromArray.get( array.constructor );\n\n\t}\n\n\t/**\n\t * Returns the type is an integer type.\n\t *\n\t * @param {string} type - The type.\n\t * @return {boolean} Whether the type is an integer type or not.\n\t */\n\tisInteger( type ) {\n\n\t\treturn /int|uint|(i|u)vec/.test( type );\n\n\t}\n\n\t/**\n\t * Returns the type for a given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t * @return {string} The type.\n\t */\n\tgetTypeFromAttribute( attribute ) {\n\n\t\tlet dataAttribute = attribute;\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;\n\n\t\tconst array = dataAttribute.array;\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst normalized = attribute.normalized;\n\n\t\tlet arrayType;\n\n\t\tif ( ! ( attribute instanceof Float16BufferAttribute ) && normalized !== true ) {\n\n\t\t\tarrayType = this.getTypeFromArray( array );\n\n\t\t}\n\n\t\treturn this.getTypeFromLength( itemSize, arrayType );\n\n\t}\n\n\t/**\n\t * Returns the length for the given data type.\n\t *\n\t * @param {string} type - The data type.\n\t * @return {number} The length.\n\t */\n\tgetTypeLength( type ) {\n\n\t\tconst vecType = this.getVectorType( type );\n\t\tconst vecNum = /vec([2-4])/.exec( vecType );\n\n\t\tif ( vecNum !== null ) return Number( vecNum[ 1 ] );\n\t\tif ( vecType === 'float' || vecType === 'bool' || vecType === 'int' || vecType === 'uint' ) return 1;\n\t\tif ( /mat2/.test( type ) === true ) return 4;\n\t\tif ( /mat3/.test( type ) === true ) return 9;\n\t\tif ( /mat4/.test( type ) === true ) return 16;\n\n\t\treturn 0;\n\n\t}\n\n\t/**\n\t * Returns the vector type for a given matrix type.\n\t *\n\t * @param {string} type - The matrix type.\n\t * @return {string} The vector type.\n\t */\n\tgetVectorFromMatrix( type ) {\n\n\t\treturn type.replace( 'mat', 'vec' );\n\n\t}\n\n\t/**\n\t * For a given type this method changes the component type to the\n\t * given value. E.g. `vec4` should be changed to the new component type\n\t * `uint` which results in `uvec4`.\n\t *\n\t * @param {string} type - The type.\n\t * @param {string} newComponentType - The new component type.\n\t * @return {string} The new type.\n\t */\n\tchangeComponentType( type, newComponentType ) {\n\n\t\treturn this.getTypeFromLength( this.getTypeLength( type ), newComponentType );\n\n\t}\n\n\t/**\n\t * Returns the integer type pendant for the given type.\n\t *\n\t * @param {string} type - The type.\n\t * @return {string} The integer type.\n\t */\n\tgetIntegerType( type ) {\n\n\t\tconst componentType = this.getComponentType( type );\n\n\t\tif ( componentType === 'int' || componentType === 'uint' ) return type;\n\n\t\treturn this.changeComponentType( type, 'int' );\n\n\t}\n\n\t/**\n\t * Adds a stack node to the internal stack.\n\t *\n\t * @return {StackNode} The added stack node.\n\t */\n\taddStack() {\n\n\t\tthis.stack = stack( this.stack );\n\n\t\tthis.stacks.push( getCurrentStack() || this.stack );\n\t\tsetCurrentStack( this.stack );\n\n\t\treturn this.stack;\n\n\t}\n\n\t/**\n\t * Removes the last stack node from the internal stack.\n\t *\n\t * @return {StackNode} The removed stack node.\n\t */\n\tremoveStack() {\n\n\t\tconst lastStack = this.stack;\n\t\tthis.stack = lastStack.parent;\n\n\t\tsetCurrentStack( this.stacks.pop() );\n\n\t\treturn lastStack;\n\n\t}\n\n\t/**\n\t * The builder maintains (cached) data for each node during the building process. This method\n\t * can be used to get these data for a specific shader stage and cache.\n\t *\n\t * @param {Node} node - The node to get the data for.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n\t * @param {?NodeCache} cache - An optional cache.\n\t * @return {Object} The node data.\n\t */\n\tgetDataFromNode( node, shaderStage = this.shaderStage, cache = null ) {\n\n\t\tcache = cache === null ? ( node.isGlobal( this ) ? this.globalCache : this.cache ) : cache;\n\n\t\tlet nodeData = cache.getData( node );\n\n\t\tif ( nodeData === undefined ) {\n\n\t\t\tnodeData = {};\n\n\t\t\tcache.setData( node, nodeData );\n\n\t\t}\n\n\t\tif ( nodeData[ shaderStage ] === undefined ) nodeData[ shaderStage ] = {};\n\n\t\treturn nodeData[ shaderStage ];\n\n\t}\n\n\t/**\n\t * Returns the properties for the given node and shader stage.\n\t *\n\t * @param {Node} node - The node to get the properties for.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage='any'] - The shader stage.\n\t * @return {Object} The node properties.\n\t */\n\tgetNodeProperties( node, shaderStage = 'any' ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\treturn nodeData.properties || ( nodeData.properties = { outputNode: null } );\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link NodeAttribute} for the given buffer attribute node.\n\t *\n\t * @param {BufferAttributeNode} node - The buffer attribute node.\n\t * @param {string} type - The node type.\n\t * @return {NodeAttribute} The node attribute.\n\t */\n\tgetBufferAttributeFromNode( node, type ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\n\t\tlet bufferAttribute = nodeData.bufferAttribute;\n\n\t\tif ( bufferAttribute === undefined ) {\n\n\t\t\tconst index = this.uniforms.index ++;\n\n\t\t\tbufferAttribute = new NodeAttribute( 'nodeAttribute' + index, type, node );\n\n\t\t\tthis.bufferAttributes.push( bufferAttribute );\n\n\t\t\tnodeData.bufferAttribute = bufferAttribute;\n\n\t\t}\n\n\t\treturn bufferAttribute;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link StructType} for the given output struct node.\n\t *\n\t * @param {OutputStructNode} node - The output struct node.\n\t * @param {Array<Object>} membersLayout - The output struct types.\n\t * @param {?string} [name=null] - The name of the struct.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n\t * @return {StructType} The struct type attribute.\n\t */\n\tgetStructTypeFromNode( node, membersLayout, name = null, shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tlet structType = nodeData.structType;\n\n\t\tif ( structType === undefined ) {\n\n\t\t\tconst index = this.structs.index ++;\n\n\t\t\tif ( name === null ) name = 'StructType' + index;\n\n\t\t\tstructType = new StructType( name, membersLayout );\n\n\t\t\tthis.structs[ shaderStage ].push( structType );\n\n\t\t\tnodeData.structType = structType;\n\n\t\t}\n\n\t\treturn structType;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link StructType} for the given output struct node.\n\t *\n\t * @param {OutputStructNode} node - The output struct node.\n\t * @param {Array<Object>} membersLayout - The output struct types.\n\t * @return {StructType} The struct type attribute.\n\t */\n\tgetOutputStructTypeFromNode( node, membersLayout ) {\n\n\t\tconst structType = this.getStructTypeFromNode( node, membersLayout, 'OutputType', 'fragment' );\n\t\tstructType.output = true;\n\n\t\treturn structType;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link NodeUniform} for the given uniform node.\n\t *\n\t * @param {UniformNode} node - The uniform node.\n\t * @param {string} type - The uniform type.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n\t * @param {?string} name - The name of the uniform.\n\t * @return {NodeUniform} The node uniform.\n\t */\n\tgetUniformFromNode( node, type, shaderStage = this.shaderStage, name = null ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tlet nodeUniform = nodeData.uniform;\n\n\t\tif ( nodeUniform === undefined ) {\n\n\t\t\tconst index = this.uniforms.index ++;\n\n\t\t\tnodeUniform = new NodeUniform( name || ( 'nodeUniform' + index ), type, node );\n\n\t\t\tthis.uniforms[ shaderStage ].push( nodeUniform );\n\n\t\t\tthis.registerDeclaration( nodeUniform );\n\n\t\t\tnodeData.uniform = nodeUniform;\n\n\t\t}\n\n\t\treturn nodeUniform;\n\n\t}\n\n\t/**\n\t * Returns the array length.\n\t *\n\t * @param {Node} node - The node.\n\t * @return {?number} The array length.\n\t */\n\tgetArrayCount( node ) {\n\n\t\tlet count = null;\n\n\t\tif ( node.isArrayNode ) count = node.count;\n\t\telse if ( node.isVarNode && node.node.isArrayNode ) count = node.node.count;\n\n\t\treturn count;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link NodeVar} for the given variable node.\n\t *\n\t * @param {VarNode} node - The variable node.\n\t * @param {?string} name - The variable's name.\n\t * @param {string} [type=node.getNodeType( this )] - The variable's type.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n\t * @param {boolean} [readOnly=false] - Whether the variable is read-only or not.\n\t *\n\t * @return {NodeVar} The node variable.\n\t */\n\tgetVarFromNode( node, name = null, type = node.getNodeType( this ), shaderStage = this.shaderStage, readOnly = false ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\tlet nodeVar = nodeData.variable;\n\n\t\tif ( nodeVar === undefined ) {\n\n\t\t\tconst idNS = readOnly ? '_const' : '_var';\n\n\t\t\tconst vars = this.vars[ shaderStage ] || ( this.vars[ shaderStage ] = [] );\n\t\t\tconst id = this.vars[ idNS ] || ( this.vars[ idNS ] = 0 );\n\n\t\t\tif ( name === null ) {\n\n\t\t\t\tname = ( readOnly ? 'nodeConst' : 'nodeVar' ) + id;\n\n\t\t\t\tthis.vars[ idNS ] ++;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst count = this.getArrayCount( node );\n\n\t\t\tnodeVar = new NodeVar( name, type, readOnly, count );\n\n\t\t\tif ( ! readOnly ) {\n\n\t\t\t\tvars.push( nodeVar );\n\n\t\t\t}\n\n\t\t\tthis.registerDeclaration( nodeVar );\n\n\t\t\tnodeData.variable = nodeVar;\n\n\t\t}\n\n\t\treturn nodeVar;\n\n\t}\n\n\t/**\n\t * Returns whether a Node or its flow is deterministic, useful for use in `const`.\n\t *\n\t * @param {Node} node - The varying node.\n\t * @return {boolean} Returns true if deterministic.\n\t */\n\tisDeterministic( node ) {\n\n\t\tif ( node.isMathNode ) {\n\n\t\t\treturn this.isDeterministic( node.aNode ) &&\n\t\t\t\t( node.bNode ? this.isDeterministic( node.bNode ) : true ) &&\n\t\t\t\t( node.cNode ? this.isDeterministic( node.cNode ) : true );\n\n\t\t} else if ( node.isOperatorNode ) {\n\n\t\t\treturn this.isDeterministic( node.aNode ) &&\n\t\t\t\t( node.bNode ? this.isDeterministic( node.bNode ) : true );\n\n\t\t} else if ( node.isArrayNode ) {\n\n\t\t\tif ( node.values !== null ) {\n\n\t\t\t\tfor ( const n of node.values ) {\n\n\t\t\t\t\tif ( ! this.isDeterministic( n ) ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else if ( node.isConstNode ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link NodeVarying} for the given varying node.\n\t *\n\t * @param {(VaryingNode|PropertyNode)} node - The varying node.\n\t * @param {?string} name - The varying's name.\n\t * @param {string} [type=node.getNodeType( this )] - The varying's type.\n\t * @param {?string} interpolationType - The interpolation type of the varying.\n\t * @param {?string} interpolationSampling - The interpolation sampling type of the varying.\n\t * @return {NodeVar} The node varying.\n\t */\n\tgetVaryingFromNode( node, name = null, type = node.getNodeType( this ), interpolationType = null, interpolationSampling = null ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, 'any' );\n\n\t\tlet nodeVarying = nodeData.varying;\n\n\t\tif ( nodeVarying === undefined ) {\n\n\t\t\tconst varyings = this.varyings;\n\t\t\tconst index = varyings.length;\n\n\t\t\tif ( name === null ) name = 'nodeVarying' + index;\n\n\t\t\tnodeVarying = new NodeVarying( name, type, interpolationType, interpolationSampling );\n\n\t\t\tvaryings.push( nodeVarying );\n\n\t\t\tthis.registerDeclaration( nodeVarying );\n\n\t\t\tnodeData.varying = nodeVarying;\n\n\t\t}\n\n\t\treturn nodeVarying;\n\n\t}\n\n\t/**\n\t * Registers a node declaration in the current shader stage.\n\t *\n\t * @param {Object} node - The node to be registered.\n\t */\n\tregisterDeclaration( node ) {\n\n\t\tconst shaderStage = this.shaderStage;\n\t\tconst declarations = this.declarations[ shaderStage ] || ( this.declarations[ shaderStage ] = {} );\n\n\t\tconst property = this.getPropertyName( node );\n\n\t\tlet index = 1;\n\t\tlet name = property;\n\n\t\t// Automatically renames the property if the name is already in use.\n\n\t\twhile ( declarations[ name ] !== undefined ) {\n\n\t\t\tname = property + '_' + index ++;\n\n\t\t}\n\n\n\t\tif ( index > 1 ) {\n\n\t\t\tnode.name = name;\n\n\t\t\tconsole.warn( `THREE.TSL: Declaration name '${ property }' of '${ node.type }' already in use. Renamed to '${ name }'.` );\n\n\t\t}\n\n\n\t\tdeclarations[ name ] = node;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link NodeCode} for the given code node.\n\t *\n\t * @param {CodeNode} node - The code node.\n\t * @param {string} type - The node type.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.\n\t * @return {NodeCode} The node code.\n\t */\n\tgetCodeFromNode( node, type, shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\n\t\tlet nodeCode = nodeData.code;\n\n\t\tif ( nodeCode === undefined ) {\n\n\t\t\tconst codes = this.codes[ shaderStage ] || ( this.codes[ shaderStage ] = [] );\n\t\t\tconst index = codes.length;\n\n\t\t\tnodeCode = new NodeCode( 'nodeCode' + index, type );\n\n\t\t\tcodes.push( nodeCode );\n\n\t\t\tnodeData.code = nodeCode;\n\n\t\t}\n\n\t\treturn nodeCode;\n\n\t}\n\n\t/**\n\t * Adds a code flow based on the code-block hierarchy.\n\n\t * This is used so that code-blocks like If,Else create their variables locally if the Node\n\t * is only used inside one of these conditionals in the current shader stage.\n\t *\n\t * @param {Node} node - The node to add.\n\t * @param {Node} nodeBlock - Node-based code-block. Usually 'ConditionalNode'.\n\t */\n\taddFlowCodeHierarchy( node, nodeBlock ) {\n\n\t\tconst { flowCodes, flowCodeBlock } = this.getDataFromNode( node );\n\n\t\tlet needsFlowCode = true;\n\t\tlet nodeBlockHierarchy = nodeBlock;\n\n\t\twhile ( nodeBlockHierarchy ) {\n\n\t\t\tif ( flowCodeBlock.get( nodeBlockHierarchy ) === true ) {\n\n\t\t\t\tneedsFlowCode = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tnodeBlockHierarchy = this.getDataFromNode( nodeBlockHierarchy ).parentNodeBlock;\n\n\t\t}\n\n\t\tif ( needsFlowCode ) {\n\n\t\t\tfor ( const flowCode of flowCodes ) {\n\n\t\t\t\tthis.addLineFlowCode( flowCode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Add a inline-code to the current flow code-block.\n\t *\n\t * @param {Node} node - The node to add.\n\t * @param {string} code - The code to add.\n\t * @param {Node} nodeBlock - Current ConditionalNode\n\t */\n\taddLineFlowCodeBlock( node, code, nodeBlock ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\t\tconst flowCodes = nodeData.flowCodes || ( nodeData.flowCodes = [] );\n\t\tconst codeBlock = nodeData.flowCodeBlock || ( nodeData.flowCodeBlock = new WeakMap() );\n\n\t\tflowCodes.push( code );\n\t\tcodeBlock.set( nodeBlock, true );\n\n\t}\n\n\t/**\n\t * Add a inline-code to the current flow.\n\t *\n\t * @param {string} code - The code to add.\n\t * @param {?Node} [node= null] - Optional Node, can help the system understand if the Node is part of a code-block.\n\t * @return {NodeBuilder} A reference to this node builder.\n\t */\n\taddLineFlowCode( code, node = null ) {\n\n\t\tif ( code === '' ) return this;\n\n\t\tif ( node !== null && this.context.nodeBlock ) {\n\n\t\t\tthis.addLineFlowCodeBlock( node, code, this.context.nodeBlock );\n\n\t\t}\n\n\t\tcode = this.tab + code;\n\n\t\tif ( ! /;\\s*$/.test( code ) ) {\n\n\t\t\tcode = code + ';\\n';\n\n\t\t}\n\n\t\tthis.flow.code += code;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a code to the current code flow.\n\t *\n\t * @param {string} code - Shader code.\n\t * @return {NodeBuilder} A reference to this node builder.\n\t */\n\taddFlowCode( code ) {\n\n\t\tthis.flow.code += code;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Add tab in the code that will be generated so that other snippets respect the current tabulation.\n\t * Typically used in codes with If,Else.\n\t *\n\t * @return {NodeBuilder} A reference to this node builder.\n\t */\n\taddFlowTab() {\n\n\t\tthis.tab += '\\t';\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes a tab.\n\t *\n\t * @return {NodeBuilder} A reference to this node builder.\n\t */\n\tremoveFlowTab() {\n\n\t\tthis.tab = this.tab.slice( 0, -1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the current flow data based on a Node.\n\t *\n\t * @param {Node} node - Node that the flow was started.\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {Object} The flow data.\n\t */\n\tgetFlowData( node/*, shaderStage*/ ) {\n\n\t\treturn this.flowsData.get( node );\n\n\t}\n\n\t/**\n\t * Executes the node flow based on a root node to generate the final shader code.\n\t *\n\t * @param {Node} node - The node to execute.\n\t * @return {Object} The code flow.\n\t */\n\tflowNode( node ) {\n\n\t\tconst output = node.getNodeType( this );\n\n\t\tconst flowData = this.flowChildNode( node, output );\n\n\t\tthis.flowsData.set( node, flowData );\n\n\t\treturn flowData;\n\n\t}\n\n\t/**\n\t * Includes a node in the current function node.\n\t *\n\t * @param {Node} node - The node to include.\n\t * @returns {void}\n\t */\n\taddInclude( node ) {\n\n\t\tif ( this.currentFunctionNode !== null ) {\n\n\t\t\tthis.currentFunctionNode.includes.push( node );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the native shader operator name for a given generic name.\n\t * It is a similar type of method like {@link NodeBuilder#getMethod}.\n\t *\n\t * @param {ShaderNodeInternal} shaderNode - The shader node to build the function node with.\n\t * @return {FunctionNode} The build function node.\n\t */\n\tbuildFunctionNode( shaderNode ) {\n\n\t\tconst fn = new FunctionNode();\n\n\t\tconst previous = this.currentFunctionNode;\n\n\t\tthis.currentFunctionNode = fn;\n\n\t\tfn.code = this.buildFunctionCode( shaderNode );\n\n\t\tthis.currentFunctionNode = previous;\n\n\t\treturn fn;\n\n\t}\n\n\t/**\n\t * Generates a code flow based on a TSL function: Fn().\n\t *\n\t * @param {ShaderNodeInternal} shaderNode - A function code will be generated based on the input.\n\t * @return {Object}\n\t */\n\tflowShaderNode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\n\t\tconst inputs = {\n\t\t\t[ Symbol.iterator ]() {\n\n\t\t\t\tlet index = 0;\n\t\t\t\tconst values = Object.values( this );\n\t\t\t\treturn {\n\t\t\t\t\tnext: () => ( {\n\t\t\t\t\t\tvalue: values[ index ],\n\t\t\t\t\t\tdone: index ++ >= values.length\n\t\t\t\t\t} )\n\t\t\t\t};\n\n\t\t\t}\n\t\t};\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tinputs[ input.name ] = new ParameterNode( input.type, input.name );\n\n\t\t}\n\n\t\t//\n\n\t\tshaderNode.layout = null;\n\n\t\tconst callNode = shaderNode.call( inputs );\n\t\tconst flowData = this.flowStagesNode( callNode, layout.type );\n\n\t\tshaderNode.layout = layout;\n\n\t\treturn flowData;\n\n\t}\n\n\t/**\n\t * Runs the node flow through all the steps of creation, 'setup', 'analyze', 'generate'.\n\t *\n\t * @param {Node} node - The node to execute.\n\t * @param {?string} output - Expected output type. For example 'vec3'.\n\t * @return {Object}\n\t */\n\tflowStagesNode( node, output = null ) {\n\n\t\tconst previousFlow = this.flow;\n\t\tconst previousVars = this.vars;\n\t\tconst previousDeclarations = this.declarations;\n\t\tconst previousCache = this.cache;\n\t\tconst previousBuildStage = this.buildStage;\n\t\tconst previousStack = this.stack;\n\n\t\tconst flow = {\n\t\t\tcode: ''\n\t\t};\n\n\t\tthis.flow = flow;\n\t\tthis.vars = {};\n\t\tthis.declarations = {};\n\t\tthis.cache = new NodeCache();\n\t\tthis.stack = stack();\n\n\t\tfor ( const buildStage of defaultBuildStages ) {\n\n\t\t\tthis.setBuildStage( buildStage );\n\n\t\t\tflow.result = node.build( this, output );\n\n\t\t}\n\n\t\tflow.vars = this.getVars( this.shaderStage );\n\n\t\tthis.flow = previousFlow;\n\t\tthis.vars = previousVars;\n\t\tthis.declarations = previousDeclarations;\n\t\tthis.cache = previousCache;\n\t\tthis.stack = previousStack;\n\n\t\tthis.setBuildStage( previousBuildStage );\n\n\t\treturn flow;\n\n\t}\n\n\t/**\n\t * Returns the native shader operator name for a given generic name.\n\t * It is a similar type of method like {@link NodeBuilder#getMethod}.\n\t *\n\t * @abstract\n\t * @param {string} op - The operator name to resolve.\n\t * @return {?string} The resolved operator name.\n\t */\n\tgetFunctionOperator( /* op */ ) {\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Builds the given shader node.\n\t *\n\t * @abstract\n\t * @param {ShaderNodeInternal} shaderNode - The shader node.\n\t * @return {string} The function code.\n\t */\n\tbuildFunctionCode( /* shaderNode */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Generates a code flow based on a child Node.\n\t *\n\t * @param {Node} node - The node to execute.\n\t * @param {?string} output - Expected output type. For example 'vec3'.\n\t * @return {Object} The code flow.\n\t */\n\tflowChildNode( node, output = null ) {\n\n\t\tconst previousFlow = this.flow;\n\n\t\tconst flow = {\n\t\t\tcode: ''\n\t\t};\n\n\t\tthis.flow = flow;\n\n\t\tflow.result = node.build( this, output );\n\n\t\tthis.flow = previousFlow;\n\n\t\treturn flow;\n\n\t}\n\n\t/**\n\t * Executes a flow of code in a different stage.\n\t *\n\t * Some nodes like `varying()` have the ability to compute code in vertex-stage and\n\t * return the value in fragment-stage even if it is being executed in an input fragment.\n\t *\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @param {Node} node - The node to execute.\n\t * @param {?string} output - Expected output type. For example 'vec3'.\n\t * @param {?string} propertyName - The property name to assign the result.\n\t * @return {Object}\n\t */\n\tflowNodeFromShaderStage( shaderStage, node, output = null, propertyName = null ) {\n\n\t\tconst previousShaderStage = this.shaderStage;\n\n\t\tthis.setShaderStage( shaderStage );\n\n\t\tconst flowData = this.flowChildNode( node, output );\n\n\t\tif ( propertyName !== null ) {\n\n\t\t\tflowData.code += `${ this.tab + propertyName } = ${ flowData.result };\\n`;\n\n\t\t}\n\n\t\tthis.flowCode[ shaderStage ] = this.flowCode[ shaderStage ] + flowData.code;\n\n\t\tthis.setShaderStage( previousShaderStage );\n\n\t\treturn flowData;\n\n\t}\n\n\t/**\n\t * Returns an array holding all node attributes of this node builder.\n\t *\n\t * @return {Array<NodeAttribute>} The node attributes of this builder.\n\t */\n\tgetAttributesArray() {\n\n\t\treturn this.attributes.concat( this.bufferAttributes );\n\n\t}\n\n\t/**\n\t * Returns the attribute definitions as a shader string for the given shader stage.\n\t *\n\t * @abstract\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {string} The attribute code section.\n\t */\n\tgetAttributes( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Returns the varying definitions as a shader string for the given shader stage.\n\t *\n\t * @abstract\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {string} The varying code section.\n\t */\n\tgetVaryings( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Returns a single variable definition as a shader string for the given variable type and name.\n\t *\n\t * @param {string} type - The variable's type.\n\t * @param {string} name - The variable's name.\n\t * @param {?number} [count=null] - The array length.\n\t * @return {string} The shader string.\n\t */\n\tgetVar( type, name, count = null ) {\n\n\t\treturn `${ count !== null ? this.generateArrayDeclaration( type, count ) : this.getType( type ) } ${ name }`;\n\n\t}\n\n\t/**\n\t * Returns the variable definitions as a shader string for the given shader stage.\n\t *\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {string} The variable code section.\n\t */\n\tgetVars( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tsnippet += `${ this.getVar( variable.type, variable.name ) }; `;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Returns the uniform definitions as a shader string for the given shader stage.\n\t *\n\t * @abstract\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {string} The uniform code section.\n\t */\n\tgetUniforms( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Returns the native code definitions as a shader string for the given shader stage.\n\t *\n\t * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.\n\t * @return {string} The native code section.\n\t */\n\tgetCodes( shaderStage ) {\n\n\t\tconst codes = this.codes[ shaderStage ];\n\n\t\tlet code = '';\n\n\t\tif ( codes !== undefined ) {\n\n\t\t\tfor ( const nodeCode of codes ) {\n\n\t\t\t\tcode += nodeCode.code + '\\n';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\t/**\n\t * Returns the hash of this node builder.\n\t *\n\t * @return {string} The hash.\n\t */\n\tgetHash() {\n\n\t\treturn this.vertexShader + this.fragmentShader + this.computeShader;\n\n\t}\n\n\t/**\n\t * Sets the current shader stage.\n\t *\n\t * @param {?('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage to set.\n\t */\n\tsetShaderStage( shaderStage ) {\n\n\t\tthis.shaderStage = shaderStage;\n\n\t}\n\n\t/**\n\t * Returns the current shader stage.\n\t *\n\t * @return {?('vertex'|'fragment'|'compute'|'any')} The current shader stage.\n\t */\n\tgetShaderStage() {\n\n\t\treturn this.shaderStage;\n\n\t}\n\n\t/**\n\t * Sets the current build stage.\n\t *\n\t * @param {?('setup'|'analyze'|'generate')} buildStage - The build stage to set.\n\t */\n\tsetBuildStage( buildStage ) {\n\n\t\tthis.buildStage = buildStage;\n\n\t}\n\n\t/**\n\t * Returns the current build stage.\n\t *\n\t * @return {?('setup'|'analyze'|'generate')} The current build stage.\n\t */\n\tgetBuildStage() {\n\n\t\treturn this.buildStage;\n\n\t}\n\n\t/**\n\t * Controls the code build of the shader stages.\n\t *\n\t * @abstract\n\t */\n\tbuildCode() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t/**\n\t * Central build method which controls the build for the given object.\n\t *\n\t * @return {NodeBuilder} A reference to this node builder.\n\t */\n\tbuild() {\n\n\t\tconst { object, material, renderer } = this;\n\n\t\tif ( material !== null ) {\n\n\t\t\tlet nodeMaterial = renderer.library.fromMaterial( material );\n\n\t\t\tif ( nodeMaterial === null ) {\n\n\t\t\t\tconsole.error( `NodeMaterial: Material \"${ material.type }\" is not compatible.` );\n\n\t\t\t\tnodeMaterial = new NodeMaterial();\n\n\t\t\t}\n\n\t\t\tnodeMaterial.build( this );\n\n\t\t} else {\n\n\t\t\tthis.addFlow( 'compute', object );\n\n\t\t}\n\n\t\t// setup() -> stage 1: create possible new nodes and returns an output reference node\n\t\t// analyze()   -> stage 2: analyze nodes to possible optimization and validation\n\t\t// generate()  -> stage 3: generate shader\n\n\t\tfor ( const buildStage of defaultBuildStages ) {\n\n\t\t\tthis.setBuildStage( buildStage );\n\n\t\t\tif ( this.context.vertex && this.context.vertex.isNode ) {\n\n\t\t\t\tthis.flowNodeFromShaderStage( 'vertex', this.context.vertex );\n\n\t\t\t}\n\n\t\t\tfor ( const shaderStage of shaderStages ) {\n\n\t\t\t\tthis.setShaderStage( shaderStage );\n\n\t\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\n\t\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\t\tif ( buildStage === 'generate' ) {\n\n\t\t\t\t\t\tthis.flowNode( node );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode.build( this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setBuildStage( null );\n\t\tthis.setShaderStage( null );\n\n\t\t// stage 4: build code for a specific output\n\n\t\tthis.buildCode();\n\t\tthis.buildUpdateNodes();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a uniform representation which is later used for UBO generation and rendering.\n\t *\n\t * @param {NodeUniform} uniformNode - The uniform node.\n\t * @param {string} type - The requested type.\n\t * @return {Uniform} The uniform.\n\t */\n\tgetNodeUniform( uniformNode, type ) {\n\n\t\tif ( type === 'float' || type === 'int' || type === 'uint' ) return new NumberNodeUniform( uniformNode );\n\t\tif ( type === 'vec2' || type === 'ivec2' || type === 'uvec2' ) return new Vector2NodeUniform( uniformNode );\n\t\tif ( type === 'vec3' || type === 'ivec3' || type === 'uvec3' ) return new Vector3NodeUniform( uniformNode );\n\t\tif ( type === 'vec4' || type === 'ivec4' || type === 'uvec4' ) return new Vector4NodeUniform( uniformNode );\n\t\tif ( type === 'color' ) return new ColorNodeUniform( uniformNode );\n\t\tif ( type === 'mat2' ) return new Matrix2NodeUniform( uniformNode );\n\t\tif ( type === 'mat3' ) return new Matrix3NodeUniform( uniformNode );\n\t\tif ( type === 'mat4' ) return new Matrix4NodeUniform( uniformNode );\n\n\t\tthrow new Error( `Uniform \"${type}\" not declared.` );\n\n\t}\n\n\t/**\n\t * Formats the given shader snippet from a given type into another one. E.g.\n\t * this method might be used to convert a simple float string `\"1.0\"` into a\n\t * `vec3` representation: `\"vec3<f32>( 1.0 )\"`.\n\t *\n\t * @param {string} snippet - The shader snippet.\n\t * @param {string} fromType - The source type.\n\t * @param {string} toType - The target type.\n\t * @return {string} The updated shader string.\n\t */\n\tformat( snippet, fromType, toType ) {\n\n\t\tfromType = this.getVectorType( fromType );\n\t\ttoType = this.getVectorType( toType );\n\n\t\tif ( fromType === toType || toType === null || this.isReference( toType ) ) {\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tconst fromTypeLength = this.getTypeLength( fromType );\n\t\tconst toTypeLength = this.getTypeLength( toType );\n\n\t\tif ( fromTypeLength === 16 && toTypeLength === 9 ) {\n\n\t\t\treturn `${ this.getType( toType ) }( ${ snippet }[ 0 ].xyz, ${ snippet }[ 1 ].xyz, ${ snippet }[ 2 ].xyz )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength === 9 && toTypeLength === 4 ) {\n\n\t\t\treturn `${ this.getType( toType ) }( ${ snippet }[ 0 ].xy, ${ snippet }[ 1 ].xy )`;\n\n\t\t}\n\n\n\t\tif ( fromTypeLength > 4 ) { // fromType is matrix-like\n\n\t\t\t// @TODO: ignore for now\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tif ( toTypeLength > 4 || toTypeLength === 0 ) { // toType is matrix-like or unknown\n\n\t\t\t// @TODO: ignore for now\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tif ( fromTypeLength === toTypeLength ) {\n\n\t\t\treturn `${ this.getType( toType ) }( ${ snippet } )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength > toTypeLength ) {\n\n\t\t\tsnippet = toType === 'bool' ? `all( ${ snippet } )` : `${ snippet }.${ 'xyz'.slice( 0, toTypeLength ) }`;\n\n\t\t\treturn this.format( snippet, this.getTypeFromLength( toTypeLength, this.getComponentType( fromType ) ), toType );\n\n\t\t}\n\n\t\tif ( toTypeLength === 4 && fromTypeLength > 1 ) { // toType is vec4-like\n\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec3' ) }, 1.0 )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength === 2 ) { // fromType is vec2-like and toType is vec3-like\n\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec2' ) }, 0.0 )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType( toType ) ) { // fromType is float-like\n\n\t\t\t// convert a number value to vector type, e.g:\n\t\t\t// vec3( 1u ) -> vec3( float( 1u ) )\n\n\t\t\tsnippet = `${ this.getType( this.getComponentType( toType ) ) }( ${ snippet } )`;\n\n\t\t}\n\n\t\treturn `${ this.getType( toType ) }( ${ snippet } )`; // fromType is float-like\n\n\t}\n\n\t/**\n\t * Returns a signature with the engine's current revision.\n\t *\n\t * @return {string} The signature.\n\t */\n\tgetSignature() {\n\n\t\treturn `// Three.js r${ REVISION } - Node System\\n`;\n\n\t}\n\n\t/**\n\t * Prevents the node builder from being used as an iterable in TSL.Fn(), avoiding potential runtime errors.\n\t */\n\t*[ Symbol.iterator ]() { }\n\n\t// Deprecated\n\n\t/**\n\t * @function\n\t * @deprecated since r168. Use `new NodeMaterial()` instead, with targeted node material name.\n\t *\n\t * @param {string} [type='NodeMaterial'] - The node material type.\n\t * @throws {Error}\n\t */\n\tcreateNodeMaterial( type = 'NodeMaterial' ) { // @deprecated, r168\n\n\t\tthrow new Error( `THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${ type }() instead.` );\n\n\t}\n\n\n}\n\n/**\n * Management class for updating nodes. The module tracks metrics like\n * the elapsed time, delta time, the render and frame ID to correctly\n * call the node update methods {@link Node#updateBefore}, {@link Node#update}\n * and {@link Node#updateAfter} depending on the node's configuration.\n */\nclass NodeFrame {\n\n\t/**\n\t * Constructs a new node fame.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The elapsed time in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.time = 0;\n\n\t\t/**\n\t\t * The delta time in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.deltaTime = 0;\n\n\t\t/**\n\t\t * The frame ID.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.frameId = 0;\n\n\t\t/**\n\t\t * The render ID.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.renderId = 0;\n\n\t\t/**\n\t\t * Used to control the {@link Node#update} call.\n\t\t *\n\t\t * @type {WeakMap<Node, Object>}\n\t\t */\n\t\tthis.updateMap = new WeakMap();\n\n\t\t/**\n\t\t * Used to control the {@link Node#updateBefore} call.\n\t\t *\n\t\t * @type {WeakMap<Node, Object>}\n\t\t */\n\t\tthis.updateBeforeMap = new WeakMap();\n\n\t\t/**\n\t\t * Used to control the {@link Node#updateAfter} call.\n\t\t *\n\t\t * @type {WeakMap<Node, Object>}\n\t\t */\n\t\tthis.updateAfterMap = new WeakMap();\n\n\t\t/**\n\t\t * A reference to the current renderer.\n\t\t *\n\t\t * @type {?Renderer}\n\t\t * @default null\n\t\t */\n\t\tthis.renderer = null;\n\n\t\t/**\n\t\t * A reference to the current material.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.material = null;\n\n\t\t/**\n\t\t * A reference to the current camera.\n\t\t *\n\t\t * @type {?Camera}\n\t\t * @default null\n\t\t */\n\t\tthis.camera = null;\n\n\t\t/**\n\t\t * A reference to the current 3D object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */\n\t\tthis.object = null;\n\n\t\t/**\n\t\t * A reference to the current scene.\n\t\t *\n\t\t * @type {?Scene}\n\t\t * @default null\n\t\t */\n\t\tthis.scene = null;\n\n\t}\n\n\t/**\n\t * Returns a dictionary for a given node and update map which\n\t * is used to correctly call node update methods per frame or render.\n\t *\n\t * @private\n\t * @param {WeakMap<Node, Object>} referenceMap - The reference weak map.\n\t * @param {Node} nodeRef - The reference to the current node.\n\t * @return {Object<string,WeakMap>} The dictionary.\n\t */\n\t_getMaps( referenceMap, nodeRef ) {\n\n\t\tlet maps = referenceMap.get( nodeRef );\n\n\t\tif ( maps === undefined ) {\n\n\t\t\tmaps = {\n\t\t\t\trenderMap: new WeakMap(),\n\t\t\t\tframeMap: new WeakMap()\n\t\t\t};\n\n\t\t\treferenceMap.set( nodeRef, maps );\n\n\t\t}\n\n\t\treturn maps;\n\n\t}\n\n\t/**\n\t * This method executes the {@link Node#updateBefore} for the given node.\n\t * It makes sure {@link Node#updateBeforeType} is honored meaning the update\n\t * is only executed once per frame, render or object depending on the update\n\t * type.\n\t *\n\t * @param {Node} node - The node that should be updated.\n\t */\n\tupdateBeforeNode( node ) {\n\n\t\tconst updateType = node.getUpdateBeforeType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateBeforeMap, reference );\n\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\n\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( reference, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateBeforeMap, reference );\n\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\n\n\t\t\t\tif ( node.updateBefore( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( reference, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.updateBefore( this );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method executes the {@link Node#updateAfter} for the given node.\n\t * It makes sure {@link Node#updateAfterType} is honored meaning the update\n\t * is only executed once per frame, render or object depending on the update\n\t * type.\n\t *\n\t * @param {Node} node - The node that should be updated.\n\t */\n\tupdateAfterNode( node ) {\n\n\t\tconst updateType = node.getUpdateAfterType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateAfterMap, reference );\n\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\n\n\t\t\t\tif ( node.updateAfter( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( reference, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateAfterMap, reference );\n\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\n\n\t\t\t\tif ( node.updateAfter( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( reference, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.updateAfter( this );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method executes the {@link Node#update} for the given node.\n\t * It makes sure {@link Node#updateType} is honored meaning the update\n\t * is only executed once per frame, render or object depending on the update\n\t * type.\n\t *\n\t * @param {Node} node - The node that should be updated.\n\t */\n\tupdateNode( node ) {\n\n\t\tconst updateType = node.getUpdateType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tconst { frameMap } = this._getMaps( this.updateMap, reference );\n\n\t\t\tif ( frameMap.get( reference ) !== this.frameId ) {\n\n\t\t\t\tif ( node.update( this ) !== false ) {\n\n\t\t\t\t\tframeMap.set( reference, this.frameId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tconst { renderMap } = this._getMaps( this.updateMap, reference );\n\n\t\t\tif ( renderMap.get( reference ) !== this.renderId ) {\n\n\t\t\t\tif ( node.update( this ) !== false ) {\n\n\t\t\t\t\trenderMap.set( reference, this.renderId );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.update( this );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the internal state of the node frame. This method is\n\t * called by the renderer in its internal animation loop.\n\t */\n\tupdate() {\n\n\t\tthis.frameId ++;\n\n\t\tif ( this.lastTime === undefined ) this.lastTime = performance.now();\n\n\t\tthis.deltaTime = ( performance.now() - this.lastTime ) / 1000;\n\n\t\tthis.lastTime = performance.now();\n\n\t\tthis.time += this.deltaTime;\n\n\t}\n\n}\n\n/**\n * Describes the input of a {@link NodeFunction}.\n */\nclass NodeFunctionInput {\n\n\t/**\n\t * Constructs a new node function input.\n\t *\n\t * @param {string} type - The input type.\n\t * @param {string} name - The input name.\n\t * @param {?number} [count=null] - If the input is an Array, count will be the length.\n\t * @param {('in'|'out'|'inout')} [qualifier=''] - The parameter qualifier (only relevant for GLSL).\n\t * @param {boolean} [isConst=false] - Whether the input uses a const qualifier or not (only relevant for GLSL).\n\t */\n\tconstructor( type, name, count = null, qualifier = '', isConst = false ) {\n\n\t\t/**\n\t\t *  The input type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The input name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * If the input is an Array, count will be the length.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t *The parameter qualifier (only relevant for GLSL).\n\t\t *\n\t\t * @type {('in'|'out'|'inout')}\n\t\t * @default ''\n\t\t */\n\t\tthis.qualifier = qualifier;\n\n\t\t/**\n\t\t * Whether the input uses a const qualifier or not (only relevant for GLSL).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.isConst = isConst;\n\n\t}\n\n}\n\nNodeFunctionInput.isNodeFunctionInput = true;\n\n/**\n * Module for representing directional lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass DirectionalLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'DirectionalLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new directional light node.\n\t *\n\t * @param {?DirectionalLight} [light=null] - The directional light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t}\n\n\tsetupDirect() {\n\n\t\tconst lightColor = this.colorNode;\n\t\tconst lightDirection = lightTargetDirection( this.light );\n\n\t\treturn { lightDirection, lightColor };\n\n\t}\n\n}\n\nconst _matrix41 = /*@__PURE__*/ new Matrix4();\nconst _matrix42 = /*@__PURE__*/ new Matrix4();\n\nlet _ltcLib = null;\n\n/**\n * Module for representing rect area lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass RectAreaLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'RectAreaLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new rect area light node.\n\t *\n\t * @param {?RectAreaLight} [light=null] - The rect area light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * Uniform node representing the half height of the are light.\n\t\t *\n\t\t * @type {UniformNode<vec3>}\n\t\t */\n\t\tthis.halfHeight = uniform( new Vector3() ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the half width of the are light.\n\t\t *\n\t\t * @type {UniformNode<vec3>}\n\t\t */\n\t\tthis.halfWidth = uniform( new Vector3() ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * The `updateType` is set to `NodeUpdateType.RENDER` since the light\n\t\t * relies on `viewMatrix` which might vary per render call.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.RENDER;\n\n\t}\n\n\t/**\n\t * Overwritten to updated rect area light specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst { light } = this;\n\n\t\tconst viewMatrix = frame.camera.matrixWorldInverse;\n\n\t\t_matrix42.identity();\n\t\t_matrix41.copy( light.matrixWorld );\n\t\t_matrix41.premultiply( viewMatrix );\n\t\t_matrix42.extractRotation( _matrix41 );\n\n\t\tthis.halfWidth.value.set( light.width * 0.5, 0.0, 0.0 );\n\t\tthis.halfHeight.value.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\tthis.halfWidth.value.applyMatrix4( _matrix42 );\n\t\tthis.halfHeight.value.applyMatrix4( _matrix42 );\n\n\t}\n\n\tsetupDirectRectArea( builder ) {\n\n\t\tlet ltc_1, ltc_2;\n\n\t\tif ( builder.isAvailable( 'float32Filterable' ) ) {\n\n\t\t\tltc_1 = texture( _ltcLib.LTC_FLOAT_1 );\n\t\t\tltc_2 = texture( _ltcLib.LTC_FLOAT_2 );\n\n\t\t} else {\n\n\t\t\tltc_1 = texture( _ltcLib.LTC_HALF_1 );\n\t\t\tltc_2 = texture( _ltcLib.LTC_HALF_2 );\n\n\t\t}\n\n\t\tconst { colorNode, light } = this;\n\n\t\tconst lightPosition = lightViewPosition( light );\n\n\t\treturn {\n\t\t\tlightColor: colorNode,\n\t\t\tlightPosition,\n\t\t\thalfWidth: this.halfWidth,\n\t\t\thalfHeight: this.halfHeight,\n\t\t\tltc_1,\n\t\t\tltc_2\n\t\t};\n\n\t}\n\n\t/**\n\t * Used to configure the internal BRDF approximation texture data.\n\t *\n\t * @param {RectAreaLightTexturesLib} ltc - The BRDF approximation texture data.\n\t */\n\tstatic setLTC( ltc ) {\n\n\t\t_ltcLib = ltc;\n\n\t}\n\n}\n\n/**\n * Module for representing spot lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass SpotLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'SpotLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new spot light node.\n\t *\n\t * @param {?SpotLight} [light=null] - The spot light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * Uniform node representing the cone cosine.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.coneCosNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the penumbra cosine.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.penumbraCosNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the cutoff distance.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the decay exponent.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.decayExponentNode = uniform( 0 ).setGroup( renderGroup );\n\n\t}\n\n\t/**\n\t * Overwritten to updated spot light specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst { light } = this;\n\n\t\tthis.coneCosNode.value = Math.cos( light.angle );\n\t\tthis.penumbraCosNode.value = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\t/**\n\t * Computes the spot attenuation for the given angle.\n\t *\n\t * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.\n\t * @return {Node<float>} The spot attenuation.\n\t */\n\tgetSpotAttenuation( angleCosine ) {\n\n\t\tconst { coneCosNode, penumbraCosNode } = this;\n\n\t\treturn smoothstep( coneCosNode, penumbraCosNode, angleCosine );\n\n\t}\n\n\tsetupDirect( builder ) {\n\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\n\n\t\tconst lightVector = this.getLightVector( builder );\n\n\t\tconst lightDirection = lightVector.normalize();\n\t\tconst angleCos = lightDirection.dot( lightTargetDirection( light ) );\n\t\tconst spotAttenuation = this.getSpotAttenuation( angleCos );\n\n\t\tconst lightDistance = lightVector.length();\n\n\t\tconst lightAttenuation = getDistanceAttenuation( {\n\t\t\tlightDistance,\n\t\t\tcutoffDistance: cutoffDistanceNode,\n\t\t\tdecayExponent: decayExponentNode\n\t\t} );\n\n\t\tlet lightColor = colorNode.mul( spotAttenuation ).mul( lightAttenuation );\n\n\t\tif ( light.map ) {\n\n\t\t\tconst spotLightCoord = lightProjectionUV( light, builder.context.positionWorld );\n\t\t\tconst projectedTexture = texture( light.map, spotLightCoord.xy ).onRenderUpdate( () => light.map );\n\n\t\t\tconst inSpotLightMap = spotLightCoord.mul( 2. ).sub( 1. ).abs().lessThan( 1. ).all();\n\n\t\t\tlightColor = inSpotLightMap.select( lightColor.mul( projectedTexture ), lightColor );\n\n\t\t}\n\n\t\treturn { lightColor, lightDirection };\n\n\t}\n\n}\n\n/**\n * An IES version of the default spot light node.\n *\n * @augments SpotLightNode\n */\nclass IESSpotLightNode extends SpotLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'IESSpotLightNode';\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to compute an IES conform spot attenuation.\n\t *\n\t * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.\n\t * @return {Node<float>} The spot attenuation.\n\t */\n\tgetSpotAttenuation( angleCosine ) {\n\n\t\tconst iesMap = this.light.iesMap;\n\n\t\tlet spotAttenuation = null;\n\n\t\tif ( iesMap && iesMap.isTexture === true ) {\n\n\t\t\tconst angle = angleCosine.acos().mul( 1.0 / Math.PI );\n\n\t\t\tspotAttenuation = texture( iesMap, vec2( angle, 0 ), 0 ).r;\n\n\t\t} else {\n\n\t\t\tspotAttenuation = super.getSpotAttenuation( angleCosine );\n\n\t\t}\n\n\t\treturn spotAttenuation;\n\n\t}\n\n}\n\n/**\n * Module for representing ambient lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass AmbientLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'AmbientLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new ambient light node.\n\t *\n\t * @param {?AmbientLight} [light=null] - The ambient light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t}\n\n\tsetup( { context } ) {\n\n\t\tcontext.irradiance.addAssign( this.colorNode );\n\n\t}\n\n}\n\n/**\n * Module for representing hemisphere lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass HemisphereLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'HemisphereLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new hemisphere light node.\n\t *\n\t * @param {?HemisphereLight} [light=null] - The hemisphere light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * Uniform node representing the light's position.\n\t\t *\n\t\t * @type {UniformNode<vec3>}\n\t\t */\n\t\tthis.lightPositionNode = lightPosition( light );\n\n\t\t/**\n\t\t * A node representing the light's direction.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.lightDirectionNode = this.lightPositionNode.normalize();\n\n\t\t/**\n\t\t * Uniform node representing the light's ground color.\n\t\t *\n\t\t * @type {UniformNode<vec3>}\n\t\t */\n\t\tthis.groundColorNode = uniform( new Color() ).setGroup( renderGroup );\n\n\t}\n\n\t/**\n\t * Overwritten to updated hemisphere light specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\tthis.lightPositionNode.object3d = light;\n\n\t\tthis.groundColorNode.value.copy( light.groundColor ).multiplyScalar( light.intensity );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { colorNode, groundColorNode, lightDirectionNode } = this;\n\n\t\tconst dotNL = normalView.dot( lightDirectionNode );\n\t\tconst hemiDiffuseWeight = dotNL.mul( 0.5 ).add( 0.5 );\n\n\t\tconst irradiance = mix( groundColorNode, colorNode, hemiDiffuseWeight );\n\n\t\tbuilder.context.irradiance.addAssign( irradiance );\n\n\t}\n\n}\n\n/**\n * Module for representing light probes as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass LightProbeNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'LightProbeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new light probe node.\n\t *\n\t * @param {?LightProbe} [light=null] - The light probe.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\tconst array = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) array.push( new Vector3() );\n\n\t\t/**\n\t\t * Light probe represented as a uniform of spherical harmonics.\n\t\t *\n\t\t * @type {UniformArrayNode}\n\t\t */\n\t\tthis.lightProbe = uniformArray( array );\n\n\t}\n\n\t/**\n\t * Overwritten to updated light probe specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.lightProbe.array[ i ].copy( light.sh.coefficients[ i ] ).multiplyScalar( light.intensity );\n\n\t\t}\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst irradiance = getShIrradianceAt( normalWorld, this.lightProbe );\n\n\t\tbuilder.context.irradiance.addAssign( irradiance );\n\n\t}\n\n}\n\n/**\n * Base class for node parsers. A derived parser must be implemented\n * for each supported native shader language.\n */\nclass NodeParser {\n\n\t/**\n\t * The method parses the given native code an returns a node function.\n\t *\n\t * @abstract\n\t * @param {string} source - The native shader code.\n\t * @return {NodeFunction} A node function.\n\t */\n\tparseFunction( /*source*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n}\n\n/**\n * Base class for node functions. A derived module must be implemented\n * for each supported native shader language. Similar to other `Node*` modules,\n * this class is only relevant during the building process and not used\n * in user-level code.\n */\nclass NodeFunction {\n\n\t/**\n\t * Constructs a new node function.\n\t *\n\t * @param {string} type - The node type. This type is the return type of the node function.\n\t * @param {Array<NodeFunctionInput>} inputs - The function's inputs.\n\t * @param {string} [name=''] - The function's name.\n\t * @param {string} [precision=''] - The precision qualifier.\n\t */\n\tconstructor( type, inputs, name = '', precision = '' ) {\n\n\t\t/**\n\t\t * The node type. This type is the return type of the node function.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The function's inputs.\n\t\t *\n\t\t * @type {Array<NodeFunctionInput>}\n\t\t */\n\t\tthis.inputs = inputs;\n\n\t\t/**\n\t\t * The name of the uniform.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The precision qualifier.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.precision = precision;\n\n\t}\n\n\t/**\n\t * This method returns the native code of the node function.\n\t *\n\t * @abstract\n\t * @param {string} name - The function's name.\n\t * @return {string} A shader code.\n\t */\n\tgetCode( /*name = this.name*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n}\n\nNodeFunction.isNodeFunction = true;\n\nconst declarationRegexp$1 = /^\\s*(highp|mediump|lowp)?\\s*([a-z_0-9]+)\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)/i;\nconst propertiesRegexp$1 = /[a-z_0-9]+/ig;\n\nconst pragmaMain = '#pragma main';\n\nconst parse$1 = ( source ) => {\n\n\tsource = source.trim();\n\n\tconst pragmaMainIndex = source.indexOf( pragmaMain );\n\n\tconst mainCode = pragmaMainIndex !== -1 ? source.slice( pragmaMainIndex + pragmaMain.length ) : source;\n\n\tconst declaration = mainCode.match( declarationRegexp$1 );\n\n\tif ( declaration !== null && declaration.length === 5 ) {\n\n\t\t// tokenizer\n\n\t\tconst inputsCode = declaration[ 4 ];\n\t\tconst propsMatches = [];\n\n\t\tlet nameMatch = null;\n\n\t\twhile ( ( nameMatch = propertiesRegexp$1.exec( inputsCode ) ) !== null ) {\n\n\t\t\tpropsMatches.push( nameMatch );\n\n\t\t}\n\n\t\t// parser\n\n\t\tconst inputs = [];\n\n\t\tlet i = 0;\n\n\t\twhile ( i < propsMatches.length ) {\n\n\t\t\tconst isConst = propsMatches[ i ][ 0 ] === 'const';\n\n\t\t\tif ( isConst === true ) {\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\tlet qualifier = propsMatches[ i ][ 0 ];\n\n\t\t\tif ( qualifier === 'in' || qualifier === 'out' || qualifier === 'inout' ) {\n\n\t\t\t\ti ++;\n\n\t\t\t} else {\n\n\t\t\t\tqualifier = '';\n\n\t\t\t}\n\n\t\t\tconst type = propsMatches[ i ++ ][ 0 ];\n\n\t\t\tlet count = Number.parseInt( propsMatches[ i ][ 0 ] );\n\n\t\t\tif ( Number.isNaN( count ) === false ) i ++;\n\t\t\telse count = null;\n\n\t\t\tconst name = propsMatches[ i ++ ][ 0 ];\n\n\t\t\tinputs.push( new NodeFunctionInput( type, name, count, qualifier, isConst ) );\n\n\t\t}\n\n\t\t//\n\n\t\tconst blockCode = mainCode.substring( declaration[ 0 ].length );\n\n\t\tconst name = declaration[ 3 ] !== undefined ? declaration[ 3 ] : '';\n\t\tconst type = declaration[ 2 ];\n\n\t\tconst precision = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';\n\n\t\tconst headerCode = pragmaMainIndex !== -1 ? source.slice( 0, pragmaMainIndex ) : '';\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tinputs,\n\t\t\tname,\n\t\t\tprecision,\n\t\t\tinputsCode,\n\t\t\tblockCode,\n\t\t\theaderCode\n\t\t};\n\n\t} else {\n\n\t\tthrow new Error( 'FunctionNode: Function is not a GLSL code.' );\n\n\t}\n\n};\n\n/**\n * This class represents a GLSL node function.\n *\n * @augments NodeFunction\n */\nclass GLSLNodeFunction extends NodeFunction {\n\n\t/**\n\t * Constructs a new GLSL node function.\n\t *\n\t * @param {string} source - The GLSL source.\n\t */\n\tconstructor( source ) {\n\n\t\tconst { type, inputs, name, precision, inputsCode, blockCode, headerCode } = parse$1( source );\n\n\t\tsuper( type, inputs, name, precision );\n\n\t\tthis.inputsCode = inputsCode;\n\t\tthis.blockCode = blockCode;\n\t\tthis.headerCode = headerCode;\n\n\t}\n\n\t/**\n\t * This method returns the GLSL code of the node function.\n\t *\n\t * @param {string} [name=this.name] - The function's name.\n\t * @return {string} The shader code.\n\t */\n\tgetCode( name = this.name ) {\n\n\t\tlet code;\n\n\t\tconst blockCode = this.blockCode;\n\n\t\tif ( blockCode !== '' ) {\n\n\t\t\tconst { type, inputsCode, headerCode, precision } = this;\n\n\t\t\tlet declarationCode = `${ type } ${ name } ( ${ inputsCode.trim() } )`;\n\n\t\t\tif ( precision !== '' ) {\n\n\t\t\t\tdeclarationCode = `${ precision } ${ declarationCode }`;\n\n\t\t\t}\n\n\t\t\tcode = headerCode + declarationCode + blockCode;\n\n\t\t} else {\n\n\t\t\t// interface function\n\n\t\t\tcode = '';\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n}\n\n/**\n * A GLSL node parser.\n *\n * @augments NodeParser\n */\nclass GLSLNodeParser extends NodeParser {\n\n\t/**\n\t * The method parses the given GLSL code an returns a node function.\n\t *\n\t * @param {string} source - The GLSL code.\n\t * @return {GLSLNodeFunction} A node function.\n\t */\n\tparseFunction( source ) {\n\n\t\treturn new GLSLNodeFunction( source );\n\n\t}\n\n}\n\nconst _outputNodeMap = new WeakMap();\nconst _chainKeys$2 = [];\nconst _cacheKeyValues = [];\n\n/**\n * This renderer module manages node-related objects and is the\n * primary interface between the renderer and the node system.\n *\n * @private\n * @augments DataMap\n */\nclass Nodes extends DataMap {\n\n\t/**\n\t * Constructs a new nodes management component.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Backend} backend - The renderer's backend.\n\t */\n\tconstructor( renderer, backend ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * The renderer's backend.\n\t\t *\n\t\t * @type {Backend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * The node frame.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.nodeFrame = new NodeFrame();\n\n\t\t/**\n\t\t * A cache for managing node builder states.\n\t\t *\n\t\t * @type {Map<number,NodeBuilderState>}\n\t\t */\n\t\tthis.nodeBuilderCache = new Map();\n\n\t\t/**\n\t\t * A cache for managing data cache key data.\n\t\t *\n\t\t * @type {ChainMap}\n\t\t */\n\t\tthis.callHashCache = new ChainMap();\n\n\t\t/**\n\t\t * A cache for managing node uniforms group data.\n\t\t *\n\t\t * @type {ChainMap}\n\t\t */\n\t\tthis.groupsData = new ChainMap();\n\n\t\t/**\n\t\t * A cache for managing node objects of\n\t\t * scene properties like fog or environments.\n\t\t *\n\t\t * @type {Object<string,WeakMap>}\n\t\t */\n\t\tthis.cacheLib = {};\n\n\t}\n\n\t/**\n\t * Returns `true` if the given node uniforms group must be updated or not.\n\t *\n\t * @param {NodeUniformsGroup} nodeUniformsGroup - The node uniforms group.\n\t * @return {boolean} Whether the node uniforms group requires an update or not.\n\t */\n\tupdateGroup( nodeUniformsGroup ) {\n\n\t\tconst groupNode = nodeUniformsGroup.groupNode;\n\t\tconst name = groupNode.name;\n\n\t\t// objectGroup is always updated\n\n\t\tif ( name === objectGroup.name ) return true;\n\n\t\t// renderGroup is updated once per render/compute call\n\n\t\tif ( name === renderGroup.name ) {\n\n\t\t\tconst uniformsGroupData = this.get( nodeUniformsGroup );\n\t\t\tconst renderId = this.nodeFrame.renderId;\n\n\t\t\tif ( uniformsGroupData.renderId !== renderId ) {\n\n\t\t\t\tuniformsGroupData.renderId = renderId;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// frameGroup is updated once per frame\n\n\t\tif ( name === frameGroup.name ) {\n\n\t\t\tconst uniformsGroupData = this.get( nodeUniformsGroup );\n\t\t\tconst frameId = this.nodeFrame.frameId;\n\n\t\t\tif ( uniformsGroupData.frameId !== frameId ) {\n\n\t\t\t\tuniformsGroupData.frameId = frameId;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// other groups are updated just when groupNode.needsUpdate is true\n\n\t\t_chainKeys$2[ 0 ] = groupNode;\n\t\t_chainKeys$2[ 1 ] = nodeUniformsGroup;\n\n\t\tlet groupData = this.groupsData.get( _chainKeys$2 );\n\t\tif ( groupData === undefined ) this.groupsData.set( _chainKeys$2, groupData = {} );\n\n\t\t_chainKeys$2.length = 0;\n\n\t\tif ( groupData.version !== groupNode.version ) {\n\n\t\t\tgroupData.version = groupNode.version;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the cache key for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {number} The cache key.\n\t */\n\tgetForRenderCacheKey( renderObject ) {\n\n\t\treturn renderObject.initialCacheKey;\n\n\t}\n\n\t/**\n\t * Returns a node builder state for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {NodeBuilderState} The node builder state.\n\t */\n\tgetForRender( renderObject ) {\n\n\t\tconst renderObjectData = this.get( renderObject );\n\n\t\tlet nodeBuilderState = renderObjectData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst { nodeBuilderCache } = this;\n\n\t\t\tconst cacheKey = this.getForRenderCacheKey( renderObject );\n\n\t\t\tnodeBuilderState = nodeBuilderCache.get( cacheKey );\n\n\t\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( renderObject.object, this.renderer );\n\t\t\t\tnodeBuilder.scene = renderObject.scene;\n\t\t\t\tnodeBuilder.material = renderObject.material;\n\t\t\t\tnodeBuilder.camera = renderObject.camera;\n\t\t\t\tnodeBuilder.context.material = renderObject.material;\n\t\t\t\tnodeBuilder.lightsNode = renderObject.lightsNode;\n\t\t\t\tnodeBuilder.environmentNode = this.getEnvironmentNode( renderObject.scene );\n\t\t\t\tnodeBuilder.fogNode = this.getFogNode( renderObject.scene );\n\t\t\t\tnodeBuilder.clippingContext = renderObject.clippingContext;\n\t\t\t\tif ( this.renderer.getRenderTarget() ? this.renderer.getRenderTarget().multiview : false ) {\n\n\t\t\t\t\tnodeBuilder.enableMultiview();\n\n\t\t\t\t}\n\n\t\t\t\tnodeBuilder.build();\n\n\t\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\t\tnodeBuilderCache.set( cacheKey, nodeBuilderState );\n\n\t\t\t}\n\n\t\t\tnodeBuilderState.usedTimes ++;\n\n\t\t\trenderObjectData.nodeBuilderState = nodeBuilderState;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\t/**\n\t * Deletes the given object from the internal data map\n\t *\n\t * @param {any} object - The object to delete.\n\t * @return {?Object} The deleted dictionary.\n\t */\n\tdelete( object ) {\n\n\t\tif ( object.isRenderObject ) {\n\n\t\t\tconst nodeBuilderState = this.get( object ).nodeBuilderState;\n\t\t\tnodeBuilderState.usedTimes --;\n\n\t\t\tif ( nodeBuilderState.usedTimes === 0 ) {\n\n\t\t\t\tthis.nodeBuilderCache.delete( this.getForRenderCacheKey( object ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.delete( object );\n\n\t}\n\n\t/**\n\t * Returns a node builder state for the given compute node.\n\t *\n\t * @param {Node} computeNode - The compute node.\n\t * @return {NodeBuilderState} The node builder state.\n\t */\n\tgetForCompute( computeNode ) {\n\n\t\tconst computeData = this.get( computeNode );\n\n\t\tlet nodeBuilderState = computeData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( computeNode, this.renderer );\n\t\t\tnodeBuilder.build();\n\n\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\tcomputeData.nodeBuilderState = nodeBuilderState;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\t/**\n\t * Creates a node builder state for the given node builder.\n\t *\n\t * @private\n\t * @param {NodeBuilder} nodeBuilder - The node builder.\n\t * @return {NodeBuilderState} The node builder state.\n\t */\n\t_createNodeBuilderState( nodeBuilder ) {\n\n\t\treturn new NodeBuilderState(\n\t\t\tnodeBuilder.vertexShader,\n\t\t\tnodeBuilder.fragmentShader,\n\t\t\tnodeBuilder.computeShader,\n\t\t\tnodeBuilder.getAttributesArray(),\n\t\t\tnodeBuilder.getBindings(),\n\t\t\tnodeBuilder.updateNodes,\n\t\t\tnodeBuilder.updateBeforeNodes,\n\t\t\tnodeBuilder.updateAfterNodes,\n\t\t\tnodeBuilder.observer,\n\t\t\tnodeBuilder.transforms\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns an environment node for the current configured\n\t * scene environment.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @return {Node} A node representing the current scene environment.\n\t */\n\tgetEnvironmentNode( scene ) {\n\n\t\tthis.updateEnvironment( scene );\n\n\t\tlet environmentNode = null;\n\n\t\tif ( scene.environmentNode && scene.environmentNode.isNode ) {\n\n\t\t\tenvironmentNode = scene.environmentNode;\n\n\t\t} else {\n\n\t\t\tconst sceneData = this.get( scene );\n\n\t\t\tif ( sceneData.environmentNode ) {\n\n\t\t\t\tenvironmentNode = sceneData.environmentNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn environmentNode;\n\n\t}\n\n\t/**\n\t * Returns a background node for the current configured\n\t * scene background.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @return {Node} A node representing the current scene background.\n\t */\n\tgetBackgroundNode( scene ) {\n\n\t\tthis.updateBackground( scene );\n\n\t\tlet backgroundNode = null;\n\n\t\tif ( scene.backgroundNode && scene.backgroundNode.isNode ) {\n\n\t\t\tbackgroundNode = scene.backgroundNode;\n\n\t\t} else {\n\n\t\t\tconst sceneData = this.get( scene );\n\n\t\t\tif ( sceneData.backgroundNode ) {\n\n\t\t\t\tbackgroundNode = sceneData.backgroundNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn backgroundNode;\n\n\t}\n\n\t/**\n\t * Returns a fog node for the current configured scene fog.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @return {Node} A node representing the current scene fog.\n\t */\n\tgetFogNode( scene ) {\n\n\t\tthis.updateFog( scene );\n\n\t\treturn scene.fogNode || this.get( scene ).fogNode || null;\n\n\t}\n\n\t/**\n\t * Returns a cache key for the given scene and lights node.\n\t * This key is used by `RenderObject` as a part of the dynamic\n\t * cache key (a key that must be checked every time the render\n\t * objects is drawn).\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @param {LightsNode} lightsNode - The lights node.\n\t * @return {number} The cache key.\n\t */\n\tgetCacheKey( scene, lightsNode ) {\n\n\t\t_chainKeys$2[ 0 ] = scene;\n\t\t_chainKeys$2[ 1 ] = lightsNode;\n\n\t\tconst callId = this.renderer.info.calls;\n\n\t\tconst cacheKeyData = this.callHashCache.get( _chainKeys$2 ) || {};\n\n\t\tif ( cacheKeyData.callId !== callId ) {\n\n\t\t\tconst environmentNode = this.getEnvironmentNode( scene );\n\t\t\tconst fogNode = this.getFogNode( scene );\n\n\t\t\tif ( lightsNode ) _cacheKeyValues.push( lightsNode.getCacheKey( true ) );\n\t\t\tif ( environmentNode ) _cacheKeyValues.push( environmentNode.getCacheKey() );\n\t\t\tif ( fogNode ) _cacheKeyValues.push( fogNode.getCacheKey() );\n\n\t\t\t_cacheKeyValues.push( this.renderer.shadowMap.enabled ? 1 : 0 );\n\n\t\t\tcacheKeyData.callId = callId;\n\t\t\tcacheKeyData.cacheKey = hashArray( _cacheKeyValues );\n\n\t\t\tthis.callHashCache.set( _chainKeys$2, cacheKeyData );\n\n\t\t\t_cacheKeyValues.length = 0;\n\n\t\t}\n\n\t\t_chainKeys$2.length = 0;\n\n\t\treturn cacheKeyData.cacheKey;\n\n\t}\n\n\t/**\n\t * A boolean that indicates whether tone mapping should be enabled\n\t * or not.\n\t *\n\t * @type {boolean}\n\t */\n\tget isToneMappingState() {\n\n\t\treturn this.renderer.getRenderTarget() ? false : true;\n\n\t}\n\n\t/**\n\t * If a scene background is configured, this method makes sure to\n\t * represent the background with a corresponding node-based implementation.\n\t *\n\t * @param {Scene} scene - The scene.\n\t */\n\tupdateBackground( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tconst forceUpdate = ( scene.backgroundBlurriness === 0 && sceneData.backgroundBlurriness > 0 ) || ( scene.backgroundBlurriness > 0 && sceneData.backgroundBlurriness === 0 );\n\n\t\t\tif ( sceneData.background !== background || forceUpdate ) {\n\n\t\t\t\tconst backgroundNode = this.getCacheNode( 'background', background, () => {\n\n\t\t\t\t\tif ( background.isCubeTexture === true || ( background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\t\t\tif ( scene.backgroundBlurriness > 0 || background.mapping === CubeUVReflectionMapping ) {\n\n\t\t\t\t\t\t\treturn pmremTexture( background );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tlet envMap;\n\n\t\t\t\t\t\t\tif ( background.isCubeTexture === true ) {\n\n\t\t\t\t\t\t\t\tenvMap = cubeTexture( background );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tenvMap = texture( background );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn cubeMapNode( envMap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( background.isTexture === true ) {\n\n\t\t\t\t\t\treturn texture( background, screenUV.flipY() ).setUpdateMatrix( true );\n\n\t\t\t\t\t} else if ( background.isColor !== true ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported background configuration.', background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, forceUpdate );\n\n\t\t\t\tsceneData.backgroundNode = backgroundNode;\n\t\t\t\tsceneData.background = background;\n\t\t\t\tsceneData.backgroundBlurriness = scene.backgroundBlurriness;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.backgroundNode ) {\n\n\t\t\tdelete sceneData.backgroundNode;\n\t\t\tdelete sceneData.background;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is part of the caching of nodes which are used to represents the\n\t * scene's background, fog or environment.\n\t *\n\t * @param {string} type - The type of object to cache.\n\t * @param {Object} object - The object.\n\t * @param {Function} callback - A callback that produces a node representation for the given object.\n\t * @param {boolean} [forceUpdate=false] - Whether an update should be enforced or not.\n\t * @return {Node} The node representation.\n\t */\n\tgetCacheNode( type, object, callback, forceUpdate = false ) {\n\n\t\tconst nodeCache = this.cacheLib[ type ] || ( this.cacheLib[ type ] = new WeakMap() );\n\n\t\tlet node = nodeCache.get( object );\n\n\t\tif ( node === undefined || forceUpdate ) {\n\n\t\t\tnode = callback();\n\t\t\tnodeCache.set( object, node );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * If a scene fog is configured, this method makes sure to\n\t * represent the fog with a corresponding node-based implementation.\n\t *\n\t * @param {Scene} scene - The scene.\n\t */\n\tupdateFog( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst sceneFog = scene.fog;\n\n\t\tif ( sceneFog ) {\n\n\t\t\tif ( sceneData.fog !== sceneFog ) {\n\n\t\t\t\tconst fogNode = this.getCacheNode( 'fog', sceneFog, () => {\n\n\t\t\t\t\tif ( sceneFog.isFogExp2 ) {\n\n\t\t\t\t\t\tconst color = reference( 'color', 'color', sceneFog ).setGroup( renderGroup );\n\t\t\t\t\t\tconst density = reference( 'density', 'float', sceneFog ).setGroup( renderGroup );\n\n\t\t\t\t\t\treturn fog( color, densityFogFactor( density ) );\n\n\t\t\t\t\t} else if ( sceneFog.isFog ) {\n\n\t\t\t\t\t\tconst color = reference( 'color', 'color', sceneFog ).setGroup( renderGroup );\n\t\t\t\t\t\tconst near = reference( 'near', 'float', sceneFog ).setGroup( renderGroup );\n\t\t\t\t\t\tconst far = reference( 'far', 'float', sceneFog ).setGroup( renderGroup );\n\n\t\t\t\t\t\treturn fog( color, rangeFogFactor( near, far ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.Renderer: Unsupported fog configuration.', sceneFog );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tsceneData.fogNode = fogNode;\n\t\t\t\tsceneData.fog = sceneFog;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdelete sceneData.fogNode;\n\t\t\tdelete sceneData.fog;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * If a scene environment is configured, this method makes sure to\n\t * represent the environment with a corresponding node-based implementation.\n\t *\n\t * @param {Scene} scene - The scene.\n\t */\n\tupdateEnvironment( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst environment = scene.environment;\n\n\t\tif ( environment ) {\n\n\t\t\tif ( sceneData.environment !== environment ) {\n\n\t\t\t\tconst environmentNode = this.getCacheNode( 'environment', environment, () => {\n\n\t\t\t\t\tif ( environment.isCubeTexture === true ) {\n\n\t\t\t\t\t\treturn cubeTexture( environment );\n\n\t\t\t\t\t} else if ( environment.isTexture === true ) {\n\n\t\t\t\t\t\treturn texture( environment );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'Nodes: Unsupported environment configuration.', environment );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tsceneData.environmentNode = environmentNode;\n\t\t\t\tsceneData.environment = environment;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.environmentNode ) {\n\n\t\t\tdelete sceneData.environmentNode;\n\t\t\tdelete sceneData.environment;\n\n\t\t}\n\n\t}\n\n\tgetNodeFrame( renderer = this.renderer, scene = null, object = null, camera = null, material = null ) {\n\n\t\tconst nodeFrame = this.nodeFrame;\n\t\tnodeFrame.renderer = renderer;\n\t\tnodeFrame.scene = scene;\n\t\tnodeFrame.object = object;\n\t\tnodeFrame.camera = camera;\n\t\tnodeFrame.material = material;\n\n\t\treturn nodeFrame;\n\n\t}\n\n\tgetNodeFrameForRender( renderObject ) {\n\n\t\treturn this.getNodeFrame( renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material );\n\n\t}\n\n\t/**\n\t * Returns the current output cache key.\n\t *\n\t * @return {string} The output cache key.\n\t */\n\tgetOutputCacheKey() {\n\n\t\tconst renderer = this.renderer;\n\n\t\treturn renderer.toneMapping + ',' + renderer.currentColorSpace + ',' + renderer.xr.isPresenting;\n\n\t}\n\n\t/**\n\t * Checks if the output configuration (tone mapping and color space) for\n\t * the given target has changed.\n\t *\n\t * @param {Texture} outputTarget - The output target.\n\t * @return {boolean} Whether the output configuration has changed or not.\n\t */\n\thasOutputChange( outputTarget ) {\n\n\t\tconst cacheKey = _outputNodeMap.get( outputTarget );\n\n\t\treturn cacheKey !== this.getOutputCacheKey();\n\n\t}\n\n\t/**\n\t * Returns a node that represents the output configuration (tone mapping and\n\t * color space) for the current target.\n\t *\n\t * @param {Texture} outputTarget - The output target.\n\t * @return {Node} The output node.\n\t */\n\tgetOutputNode( outputTarget ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst cacheKey = this.getOutputCacheKey();\n\n\t\tconst output = outputTarget.isTextureArray ?\n\t\t\ttexture3D( outputTarget, vec3( screenUV, builtin( 'gl_ViewID_OVR' ) ) ).renderOutput( renderer.toneMapping, renderer.currentColorSpace ) :\n\t\t\ttexture( outputTarget, screenUV ).renderOutput( renderer.toneMapping, renderer.currentColorSpace );\n\n\t\t_outputNodeMap.set( outputTarget, cacheKey );\n\n\t\treturn output;\n\n\t}\n\n\t/**\n\t * Triggers the call of `updateBefore()` methods\n\t * for all nodes of the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tupdateBefore( renderObject ) {\n\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateBeforeNodes ) {\n\n\t\t\t// update frame state for each node\n\n\t\t\tthis.getNodeFrameForRender( renderObject ).updateBeforeNode( node );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Triggers the call of `updateAfter()` methods\n\t * for all nodes of the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tupdateAfter( renderObject ) {\n\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateAfterNodes ) {\n\n\t\t\t// update frame state for each node\n\n\t\t\tthis.getNodeFrameForRender( renderObject ).updateAfterNode( node );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Triggers the call of `update()` methods\n\t * for all nodes of the given compute node.\n\t *\n\t * @param {Node} computeNode - The compute node.\n\t */\n\tupdateForCompute( computeNode ) {\n\n\t\tconst nodeFrame = this.getNodeFrame();\n\t\tconst nodeBuilder = this.getForCompute( computeNode );\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Triggers the call of `update()` methods\n\t * for all nodes of the given compute node.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t */\n\tupdateForRender( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrameForRender( renderObject );\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the given render object requires a refresh.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether the given render object requires a refresh or not.\n\t */\n\tneedsRefresh( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrameForRender( renderObject );\n\t\tconst monitor = renderObject.getMonitor();\n\n\t\treturn monitor.needsRefresh( renderObject, nodeFrame );\n\n\t}\n\n\t/**\n\t * Frees the internal resources.\n\t */\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis.nodeFrame = new NodeFrame();\n\t\tthis.nodeBuilderCache = new Map();\n\t\tthis.cacheLib = {};\n\n\t}\n\n}\n\nconst _plane = /*@__PURE__*/ new Plane();\n\n/**\n * Represents the state that is used to perform clipping via clipping planes.\n * There is a default clipping context for each render context. When the\n * scene holds instances of `ClippingGroup`, there will be a context for each\n * group.\n *\n * @private\n */\nclass ClippingContext {\n\n\t/**\n\t * Constructs a new clipping context.\n\t *\n\t * @param {?ClippingContext} [parentContext=null] - A reference to the parent clipping context.\n\t */\n\tconstructor( parentContext = null ) {\n\n\t\t/**\n\t\t * The clipping context's version.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * Whether the intersection of the clipping planes is used to clip objects, rather than their union.\n\t\t *\n\t\t * @type {?boolean}\n\t\t * @default null\n\t\t */\n\t\tthis.clipIntersection = null;\n\n\t\t/**\n\t\t * The clipping context's cache key.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.cacheKey = '';\n\n\t\t/**\n\t\t * Whether the shadow pass is active or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.shadowPass = false;\n\n\t\t/**\n\t\t * The view normal matrix.\n\t\t *\n\t\t * @type {Matrix3}\n\t\t */\n\t\tthis.viewNormalMatrix = new Matrix3();\n\n\t\t/**\n\t\t * Internal cache for maintaining clipping contexts.\n\t\t *\n\t\t * @type {WeakMap<ClippingGroup,ClippingContext>}\n\t\t */\n\t\tthis.clippingGroupContexts = new WeakMap();\n\n\t\t/**\n\t\t * The intersection planes.\n\t\t *\n\t\t * @type {Array<Vector4>}\n\t\t */\n\t\tthis.intersectionPlanes = [];\n\n\t\t/**\n\t\t * The intersection planes.\n\t\t *\n\t\t * @type {Array<Vector4>}\n\t\t */\n\t\tthis.unionPlanes = [];\n\n\t\t/**\n\t\t * The version of the clipping context's parent context.\n\t\t *\n\t\t * @type {?number}\n\t\t * @readonly\n\t\t */\n\t\tthis.parentVersion = null;\n\n\t\tif ( parentContext !== null ) {\n\n\t\t\tthis.viewNormalMatrix = parentContext.viewNormalMatrix;\n\t\t\tthis.clippingGroupContexts = parentContext.clippingGroupContexts;\n\n\t\t\tthis.shadowPass = parentContext.shadowPass;\n\t\t\tthis.viewMatrix = parentContext.viewMatrix;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Projects the given source clipping planes and writes the result into the\n\t * destination array.\n\t *\n\t * @param {Array<Plane>} source - The source clipping planes.\n\t * @param {Array<Vector4>} destination - The destination.\n\t * @param {number} offset - The offset.\n\t */\n\tprojectPlanes( source, destination, offset ) {\n\n\t\tconst l = source.length;\n\n\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t_plane.copy( source[ i ] ).applyMatrix4( this.viewMatrix, this.viewNormalMatrix );\n\n\t\t\tconst v = destination[ offset + i ];\n\t\t\tconst normal = _plane.normal;\n\n\t\t\tv.x = - normal.x;\n\t\t\tv.y = - normal.y;\n\t\t\tv.z = - normal.z;\n\t\t\tv.w = _plane.constant;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the root clipping context of a scene.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t */\n\tupdateGlobal( scene, camera ) {\n\n\t\tthis.shadowPass = ( scene.overrideMaterial !== null && scene.overrideMaterial.isShadowPassMaterial );\n\t\tthis.viewMatrix = camera.matrixWorldInverse;\n\n\t\tthis.viewNormalMatrix.getNormalMatrix( this.viewMatrix );\n\n\t}\n\n\t/**\n\t * Updates the clipping context.\n\t *\n\t * @param {ClippingContext} parentContext - The parent context.\n\t * @param {ClippingGroup} clippingGroup - The clipping group this context belongs to.\n\t */\n\tupdate( parentContext, clippingGroup ) {\n\n\t\tlet update = false;\n\n\t\tif ( parentContext.version !== this.parentVersion ) {\n\n\t\t\tthis.intersectionPlanes = Array.from( parentContext.intersectionPlanes );\n\t\t\tthis.unionPlanes = Array.from( parentContext.unionPlanes );\n\t\t\tthis.parentVersion = parentContext.version;\n\n\t\t}\n\n\t\tif ( this.clipIntersection !== clippingGroup.clipIntersection ) {\n\n\t\t\tthis.clipIntersection = clippingGroup.clipIntersection;\n\n\t\t\tif ( this.clipIntersection ) {\n\n\t\t\t\tthis.unionPlanes.length = parentContext.unionPlanes.length;\n\n\t\t\t} else {\n\n\t\t\t\tthis.intersectionPlanes.length = parentContext.intersectionPlanes.length;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst srcClippingPlanes = clippingGroup.clippingPlanes;\n\t\tconst l = srcClippingPlanes.length;\n\n\t\tlet dstClippingPlanes;\n\t\tlet offset;\n\n\t\tif ( this.clipIntersection ) {\n\n\t\t\tdstClippingPlanes = this.intersectionPlanes;\n\t\t\toffset = parentContext.intersectionPlanes.length;\n\n\t\t} else {\n\n\t\t\tdstClippingPlanes = this.unionPlanes;\n\t\t\toffset = parentContext.unionPlanes.length;\n\n\t\t}\n\n\t\tif ( dstClippingPlanes.length !== offset + l ) {\n\n\t\t\tdstClippingPlanes.length = offset + l;\n\n\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\tdstClippingPlanes[ offset + i ] = new Vector4();\n\n\t\t\t}\n\n\t\t\tupdate = true;\n\n\t\t}\n\n\t\tthis.projectPlanes( srcClippingPlanes, dstClippingPlanes, offset );\n\n\t\tif ( update ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.cacheKey = `${ this.intersectionPlanes.length }:${ this.unionPlanes.length }`;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a clipping context for the given clipping group.\n\t *\n\t * @param {ClippingGroup} clippingGroup - The clipping group.\n\t * @return {ClippingContext} The clipping context.\n\t */\n\tgetGroupContext( clippingGroup ) {\n\n\t\tif ( this.shadowPass && ! clippingGroup.clipShadows ) return this;\n\n\t\tlet context = this.clippingGroupContexts.get( clippingGroup );\n\n\t\tif ( context === undefined ) {\n\n\t\t\tcontext = new ClippingContext( this );\n\t\t\tthis.clippingGroupContexts.set( clippingGroup, context );\n\n\t\t}\n\n\t\tcontext.update( this, clippingGroup );\n\n\t\treturn context;\n\n\t}\n\n\t/**\n\t * The count of union clipping planes.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget unionClippingCount() {\n\n\t\treturn this.unionPlanes.length;\n\n\t}\n\n}\n\n/**\n * This module is used to represent render bundles inside the renderer\n * for further processing.\n *\n * @private\n */\nclass RenderBundle {\n\n\t/**\n\t * Constructs a new bundle group.\n\t *\n\t * @param {BundleGroup} bundleGroup - The bundle group.\n\t * @param {Camera} camera - The camera the bundle group is rendered with.\n\t */\n\tconstructor( bundleGroup, camera ) {\n\n\t\tthis.bundleGroup = bundleGroup;\n\t\tthis.camera = camera;\n\n\t}\n\n}\n\nconst _chainKeys$1 = [];\n\n/**\n * This renderer module manages render bundles.\n *\n * @private\n */\nclass RenderBundles {\n\n\t/**\n\t * Constructs a new render bundle management component.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A chain map for maintaining the render bundles.\n\t\t *\n\t\t * @type {ChainMap}\n\t\t */\n\t\tthis.bundles = new ChainMap();\n\n\t}\n\n\t/**\n\t * Returns a render bundle for the given bundle group and camera.\n\t *\n\t * @param {BundleGroup} bundleGroup - The bundle group.\n\t * @param {Camera} camera - The camera the bundle group is rendered with.\n\t * @return {RenderBundle} The render bundle.\n\t */\n\tget( bundleGroup, camera ) {\n\n\t\tconst bundles = this.bundles;\n\n\t\t_chainKeys$1[ 0 ] = bundleGroup;\n\t\t_chainKeys$1[ 1 ] = camera;\n\n\t\tlet bundle = bundles.get( _chainKeys$1 );\n\n\t\tif ( bundle === undefined ) {\n\n\t\t\tbundle = new RenderBundle( bundleGroup, camera );\n\t\t\tbundles.set( _chainKeys$1, bundle );\n\n\t\t}\n\n\t\t_chainKeys$1.length = 0;\n\n\t\treturn bundle;\n\n\t}\n\n\t/**\n\t * Frees all internal resources.\n\t */\n\tdispose() {\n\n\t\tthis.bundles = new ChainMap();\n\n\t}\n\n}\n\n/**\n * The purpose of a node library is to assign node implementations\n * to existing library features. In `WebGPURenderer` lights, materials\n * which are not based on `NodeMaterial` as well as tone mapping techniques\n * are implemented with node-based modules.\n *\n * @private\n */\nclass NodeLibrary {\n\n\t/**\n\t * Constructs a new node library.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A weak map that maps lights to light nodes.\n\t\t *\n\t\t * @type {WeakMap<Light.constructor,AnalyticLightNode.constructor>}\n\t\t */\n\t\tthis.lightNodes = new WeakMap();\n\n\t\t/**\n\t\t * A map that maps materials to node materials.\n\t\t *\n\t\t * @type {Map<string,NodeMaterial.constructor>}\n\t\t */\n\t\tthis.materialNodes = new Map();\n\n\t\t/**\n\t\t * A map that maps tone mapping techniques (constants)\n\t\t * to tone mapping node functions.\n\t\t *\n\t\t * @type {Map<number,Function>}\n\t\t */\n\t\tthis.toneMappingNodes = new Map();\n\n\t}\n\n\t/**\n\t * Returns a matching node material instance for the given material object.\n\t *\n\t * This method also assigns/copies the properties of the given material object\n\t * to the node material. This is done to make sure the current material\n\t * configuration carries over to the node version.\n\t *\n\t * @param {Material} material - A material.\n\t * @return {NodeMaterial} The corresponding node material.\n\t */\n\tfromMaterial( material ) {\n\n\t\tif ( material.isNodeMaterial ) return material;\n\n\t\tlet nodeMaterial = null;\n\n\t\tconst nodeMaterialClass = this.getMaterialNodeClass( material.type );\n\n\t\tif ( nodeMaterialClass !== null ) {\n\n\t\t\tnodeMaterial = new nodeMaterialClass();\n\n\t\t\tfor ( const key in material ) {\n\n\t\t\t\tnodeMaterial[ key ] = material[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeMaterial;\n\n\t}\n\n\t/**\n\t * Adds a tone mapping node function for a tone mapping technique (constant).\n\t *\n\t * @param {Function} toneMappingNode - The tone mapping node function.\n\t * @param {number} toneMapping - The tone mapping.\n\t */\n\taddToneMapping( toneMappingNode, toneMapping ) {\n\n\t\tthis.addType( toneMappingNode, toneMapping, this.toneMappingNodes );\n\n\t}\n\n\t/**\n\t * Returns a tone mapping node function for a tone mapping technique (constant).\n\t *\n\t * @param {number} toneMapping - The tone mapping.\n\t * @return {?Function} The tone mapping node function. Returns `null` if no node function is found.\n\t */\n\tgetToneMappingFunction( toneMapping ) {\n\n\t\treturn this.toneMappingNodes.get( toneMapping ) || null;\n\n\t}\n\n\t/**\n\t * Returns a node material class definition for a material type.\n\t *\n\t * @param {string} materialType - The material type.\n\t * @return {?NodeMaterial.constructor} The node material class definition. Returns `null` if no node material is found.\n\t */\n\tgetMaterialNodeClass( materialType ) {\n\n\t\treturn this.materialNodes.get( materialType ) || null;\n\n\t}\n\n\t/**\n\t * Adds a node material class definition for a given material type.\n\t *\n\t * @param {NodeMaterial.constructor} materialNodeClass - The node material class definition.\n\t * @param {string} materialClassType - The material type.\n\t */\n\taddMaterial( materialNodeClass, materialClassType ) {\n\n\t\tthis.addType( materialNodeClass, materialClassType, this.materialNodes );\n\n\t}\n\n\t/**\n\t * Returns a light node class definition for a light class definition.\n\t *\n\t * @param {Light.constructor} light - The light class definition.\n\t * @return {?AnalyticLightNode.constructor} The light node class definition. Returns `null` if no light node is found.\n\t */\n\tgetLightNodeClass( light ) {\n\n\t\treturn this.lightNodes.get( light ) || null;\n\n\t}\n\n\t/**\n\t * Adds a light node class definition for a given light class definition.\n\t *\n\t * @param {AnalyticLightNode.constructor} lightNodeClass - The light node class definition.\n\t * @param {Light.constructor} lightClass - The light class definition.\n\t */\n\taddLight( lightNodeClass, lightClass ) {\n\n\t\tthis.addClass( lightNodeClass, lightClass, this.lightNodes );\n\n\t}\n\n\t/**\n\t * Adds a node class definition for the given type to the provided type library.\n\t *\n\t * @param {any} nodeClass - The node class definition.\n\t * @param {number|string} type - The object type.\n\t * @param {Map} library - The type library.\n\t */\n\taddType( nodeClass, type, library ) {\n\n\t\tif ( library.has( type ) ) {\n\n\t\t\tconsole.warn( `Redefinition of node ${ type }` );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );\n\t\tif ( typeof type === 'function' || typeof type === 'object' ) throw new Error( `Base class ${ type } is not a class.` );\n\n\t\tlibrary.set( type, nodeClass );\n\n\t}\n\n\t/**\n\t * Adds a node class definition for the given class definition to the provided type library.\n\t *\n\t * @param {any} nodeClass - The node class definition.\n\t * @param {any} baseClass - The class definition.\n\t * @param {WeakMap} library - The type library.\n\t */\n\taddClass( nodeClass, baseClass, library ) {\n\n\t\tif ( library.has( baseClass ) ) {\n\n\t\t\tconsole.warn( `Redefinition of node ${ baseClass.name }` );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof nodeClass !== 'function' ) throw new Error( `Node class ${ nodeClass.name } is not a class.` );\n\t\tif ( typeof baseClass !== 'function' ) throw new Error( `Base class ${ baseClass.name } is not a class.` );\n\n\t\tlibrary.set( baseClass, nodeClass );\n\n\t}\n\n}\n\nconst _defaultLights = /*@__PURE__*/ new LightsNode();\nconst _chainKeys = [];\n\n/**\n * This renderer module manages the lights nodes which are unique\n * per scene and camera combination.\n *\n * The lights node itself is later configured in the render list\n * with the actual lights from the scene.\n *\n * @private\n * @augments ChainMap\n */\nclass Lighting extends ChainMap {\n\n\t/**\n\t * Constructs a lighting management component.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t}\n\n\t/**\n\t * Creates a new lights node for the given array of lights.\n\t *\n\t * @param {Array<Light>} lights - The render object.\n\t * @return {LightsNode} The lights node.\n\t */\n\tcreateNode( lights = [] ) {\n\n\t\treturn new LightsNode().setLights( lights );\n\n\t}\n\n\t/**\n\t * Returns a lights node for the given scene and camera.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera.\n\t * @return {LightsNode} The lights node.\n\t */\n\tgetNode( scene, camera ) {\n\n\t\t// ignore post-processing\n\n\t\tif ( scene.isQuadMesh ) return _defaultLights;\n\n\t\t_chainKeys[ 0 ] = scene;\n\t\t_chainKeys[ 1 ] = camera;\n\n\t\tlet node = this.get( _chainKeys );\n\n\t\tif ( node === undefined ) {\n\n\t\t\tnode = this.createNode();\n\t\t\tthis.set( _chainKeys, node );\n\n\t\t}\n\n\t\t_chainKeys.length = 0;\n\n\t\treturn node;\n\n\t}\n\n}\n\n/**\n * A special type of render target that is used when rendering\n * with the WebXR Device API.\n *\n * @private\n * @augments RenderTarget\n */\nclass XRRenderTarget extends RenderTarget {\n\n\t/**\n\t * Constructs a new XR render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {Object} [options={}] - The configuration options.\n\t */\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isXRRenderTarget = true;\n\n\t\t/**\n\t\t * Whether the attachments of the render target\n\t\t * are defined by external textures. This flag is\n\t\t * set to `true` when using the WebXR Layers API.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.hasExternalTextures = false;\n\n\t\t/**\n\t\t * Whether a depth buffer should automatically be allocated\n\t\t * for this XR render target or not.\n\t\t *\n\t\t * Allocating a depth buffer is the default behavior of XR render\n\t\t * targets. However, when using the WebXR Layers API, this flag\n\t\t * must be set to `false` when the `ignoreDepthValues` property of\n\t\t * the projection layers evaluates to `false`.\n\t\t *\n\t\t * Reference: {@link https://www.w3.org/TR/webxrlayers-1/#dom-xrprojectionlayer-ignoredepthvalues}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoAllocateDepthBuffer = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.hasExternalTextures = source.hasExternalTextures;\n\t\tthis.autoAllocateDepthBuffer = source.autoAllocateDepthBuffer;\n\n\t\treturn this;\n\n\t}\n\n\n}\n\nconst _cameraLPos = /*@__PURE__*/ new Vector3();\nconst _cameraRPos = /*@__PURE__*/ new Vector3();\n\n/**\n * The XR manager is built on top of the WebXR Device API to\n * manage XR sessions with `WebGPURenderer`.\n *\n * XR is currently only supported with a WebGL 2 backend.\n *\n * @augments EventDispatcher\n */\nclass XRManager extends EventDispatcher {\n\n\t/**\n\t * Constructs a new XR manager.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {boolean} [multiview=false] - Enables multiview if the device supports it.\n\t */\n\tconstructor( renderer, multiview = false ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag globally enables XR rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.enabled = false;\n\n\t\t/**\n\t\t * Whether the XR device is currently presenting or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.isPresenting = false;\n\n\t\t/**\n\t\t * Whether the XR camera should automatically be updated or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.cameraAutoUpdate = true;\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @private\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis._renderer = renderer;\n\n\t\t// camera\n\n\t\t/**\n\t\t * Represents the camera for the left eye.\n\t\t *\n\t\t * @private\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis._cameraL = new PerspectiveCamera();\n\t\tthis._cameraL.viewport = new Vector4();\n\n\t\t/**\n\t\t * Represents the camera for the right eye.\n\t\t *\n\t\t * @private\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis._cameraR = new PerspectiveCamera();\n\t\tthis._cameraR.viewport = new Vector4();\n\n\t\t/**\n\t\t * A list of cameras used for rendering the XR views.\n\t\t *\n\t\t * @private\n\t\t * @type {Array<Camera>}\n\t\t */\n\t\tthis._cameras = [ this._cameraL, this._cameraR ];\n\n\t\t/**\n\t\t * The main XR camera.\n\t\t *\n\t\t * @private\n\t\t * @type {ArrayCamera}\n\t\t */\n\t\tthis._cameraXR = new ArrayCamera();\n\n\t\t/**\n\t\t * The current near value of the XR camera.\n\t\t *\n\t\t * @private\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._currentDepthNear = null;\n\n\t\t/**\n\t\t * The current far value of the XR camera.\n\t\t *\n\t\t * @private\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._currentDepthFar = null;\n\n\t\t/**\n\t\t * A list of WebXR controllers requested by the application.\n\t\t *\n\t\t * @private\n\t\t * @type {Array<WebXRController>}\n\t\t */\n\t\tthis._controllers = [];\n\n\t\t/**\n\t\t * A list of XR input source. Each input source belongs to\n\t\t * an instance of WebXRController.\n\t\t *\n\t\t * @private\n\t\t * @type {Array<XRInputSource?>}\n\t\t */\n\t\tthis._controllerInputSources = [];\n\n\t\t/**\n\t\t * The XR render target that represents the rendering destination\n\t\t * during an active XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis._xrRenderTarget = null;\n\n\t\t/**\n\t\t * An array holding all the non-projection layers\n\t\t *\n\t\t * @private\n\t\t * @type {Array<Object>}\n\t\t * @default []\n\t\t */\n\t\tthis._layers = [];\n\n\t\t/**\n\t\t * Whether the device has support for all layer types.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._supportsLayers = false;\n\n\t\t/**\n\t\t * Helper function to create native WebXR Layer.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._createXRLayer = createXRLayer.bind( this );\n\n\t\t/**\n\t\t* The current WebGL context.\n\t\t*\n\t\t* @private\n\t\t* @type {?WebGL2RenderingContext}\n\t\t* @default null\n\t\t*/\n\t\tthis._gl = null;\n\n\t\t/**\n\t\t * The current animation context.\n\t\t *\n\t\t * @private\n\t\t * @type {?Window}\n\t\t * @default null\n\t\t */\n\t\tthis._currentAnimationContext = null;\n\n\t\t/**\n\t\t * The current animation loop.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._currentAnimationLoop = null;\n\n\t\t/**\n\t\t * The current pixel ratio.\n\t\t *\n\t\t * @private\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._currentPixelRatio = null;\n\n\t\t/**\n\t\t * The current size of the renderer's canvas\n\t\t * in logical pixel unit.\n\t\t *\n\t\t * @private\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis._currentSize = new Vector2();\n\n\t\t/**\n\t\t * The default event listener for handling events inside a XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onSessionEvent = onSessionEvent.bind( this );\n\n\t\t/**\n\t\t * The event listener for handling the end of a XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onSessionEnd = onSessionEnd.bind( this );\n\n\t\t/**\n\t\t * The event listener for handling the `inputsourceschange` event.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onInputSourcesChange = onInputSourcesChange.bind( this );\n\n\t\t/**\n\t\t * The animation loop which is used as a replacement for the default\n\t\t * animation loop of the application. It is only used when a XR session\n\t\t * is active.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onAnimationFrame = onAnimationFrame.bind( this );\n\n\t\t/**\n\t\t * The current XR reference space.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRReferenceSpace}\n\t\t * @default null\n\t\t */\n\t\tthis._referenceSpace = null;\n\n\t\t/**\n\t\t * The current XR reference space type.\n\t\t *\n\t\t * @private\n\t\t * @type {XRReferenceSpaceType}\n\t\t * @default 'local-floor'\n\t\t */\n\t\tthis._referenceSpaceType = 'local-floor';\n\n\t\t/**\n\t\t * A custom reference space defined by the application.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRReferenceSpace}\n\t\t * @default null\n\t\t */\n\t\tthis._customReferenceSpace = null;\n\n\t\t/**\n\t\t * The framebuffer scale factor.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._framebufferScaleFactor = 1;\n\n\t\t/**\n\t\t * The foveation factor.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._foveation = 1.0;\n\n\t\t/**\n\t\t * A reference to the current XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRSession}\n\t\t * @default null\n\t\t */\n\t\tthis._session = null;\n\n\t\t/**\n\t\t * A reference to the current XR base layer.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRWebGLLayer}\n\t\t * @default null\n\t\t */\n\t\tthis._glBaseLayer = null;\n\n\t\t/**\n\t\t * A reference to the current XR binding.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRWebGLBinding}\n\t\t * @default null\n\t\t */\n\t\tthis._glBinding = null;\n\n\t\t/**\n\t\t * A reference to the current XR projection layer.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRProjectionLayer}\n\t\t * @default null\n\t\t */\n\t\tthis._glProjLayer = null;\n\n\t\t/**\n\t\t * A reference to the current XR frame.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRFrame}\n\t\t * @default null\n\t\t */\n\t\tthis._xrFrame = null;\n\n\t\t/**\n\t\t * Whether to use the WebXR Layers API or not.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t */\n\t\tthis._useLayers = ( typeof XRWebGLBinding !== 'undefined' && 'createProjectionLayer' in XRWebGLBinding.prototype ); // eslint-disable-line compat/compat\n\n\t\t/**\n\t\t * Whether the usage of multiview has been requested by the application or not.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis._useMultiviewIfPossible = multiview;\n\n\t\t/**\n\t\t * Whether the usage of multiview is actually enabled. This flag only evaluates to `true`\n\t\t * if multiview has been requested by the application and the `OVR_multiview2` is available.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t */\n\t\tthis._useMultiview = false;\n\n\t}\n\n\t/**\n\t * Returns an instance of `THREE.Group` that represents the transformation\n\t * of a XR controller in target ray space. The requested controller is defined\n\t * by the given index.\n\t *\n\t * @param {number} index - The index of the XR controller.\n\t * @return {Group} A group that represents the controller's transformation.\n\t */\n\tgetController( index ) {\n\n\t\tconst controller = this._getController( index );\n\n\t\treturn controller.getTargetRaySpace();\n\n\t}\n\n\t/**\n\t * Returns an instance of `THREE.Group` that represents the transformation\n\t * of a XR controller in grip space. The requested controller is defined\n\t * by the given index.\n\t *\n\t * @param {number} index - The index of the XR controller.\n\t * @return {Group} A group that represents the controller's transformation.\n\t */\n\tgetControllerGrip( index ) {\n\n\t\tconst controller = this._getController( index );\n\n\t\treturn controller.getGripSpace();\n\n\t}\n\n\t/**\n\t * Returns an instance of `THREE.Group` that represents the transformation\n\t * of a XR controller in hand space. The requested controller is defined\n\t * by the given index.\n\t *\n\t * @param {number} index - The index of the XR controller.\n\t * @return {Group} A group that represents the controller's transformation.\n\t */\n\tgetHand( index ) {\n\n\t\tconst controller = this._getController( index );\n\n\t\treturn controller.getHandSpace();\n\n\t}\n\n\t/**\n\t * Returns the foveation value.\n\t *\n\t * @return {number|undefined} The foveation value. Returns `undefined` if no base or projection layer is defined.\n\t */\n\tgetFoveation() {\n\n\t\tif ( this._glProjLayer === null && this._glBaseLayer === null ) {\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t\treturn this._foveation;\n\n\t}\n\n\t/**\n\t * Sets the foveation value.\n\t *\n\t * @param {number} foveation - A number in the range `[0,1]` where `0` means no foveation (full resolution)\n\t * and `1` means maximum foveation (the edges render at lower resolution).\n\t */\n\tsetFoveation( foveation ) {\n\n\t\tthis._foveation = foveation;\n\n\t\tif ( this._glProjLayer !== null ) {\n\n\t\t\tthis._glProjLayer.fixedFoveation = foveation;\n\n\t\t}\n\n\t\tif ( this._glBaseLayer !== null && this._glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\tthis._glBaseLayer.fixedFoveation = foveation;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the framebuffer scale factor.\n\t *\n\t * @return {number} The framebuffer scale factor.\n\t */\n\tgetFramebufferScaleFactor() {\n\n\t\treturn this._framebufferScaleFactor;\n\n\t}\n\n\t/**\n\t * Sets the framebuffer scale factor.\n\t *\n\t * This method can not be used during a XR session.\n\t *\n\t * @param {number} factor - The framebuffer scale factor.\n\t */\n\tsetFramebufferScaleFactor( factor ) {\n\n\t\tthis._framebufferScaleFactor = factor;\n\n\t\tif ( this.isPresenting === true ) {\n\n\t\t\tconsole.warn( 'THREE.XRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the reference space type.\n\t *\n\t * @return {XRReferenceSpaceType} The reference space type.\n\t */\n\tgetReferenceSpaceType() {\n\n\t\treturn this._referenceSpaceType;\n\n\t}\n\n\t/**\n\t * Sets the reference space type.\n\t *\n\t * This method can not be used during a XR session.\n\t *\n\t * @param {XRReferenceSpaceType} type - The reference space type.\n\t */\n\tsetReferenceSpaceType( type ) {\n\n\t\tthis._referenceSpaceType = type;\n\n\t\tif ( this.isPresenting === true ) {\n\n\t\t\tconsole.warn( 'THREE.XRManager: Cannot change reference space type while presenting.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the XR reference space.\n\t *\n\t * @return {XRReferenceSpace} The XR reference space.\n\t */\n\tgetReferenceSpace() {\n\n\t\treturn this._customReferenceSpace || this._referenceSpace;\n\n\t}\n\n\t/**\n\t * Sets a custom XR reference space.\n\t *\n\t * @param {XRReferenceSpace} space - The XR reference space.\n\t */\n\tsetReferenceSpace( space ) {\n\n\t\tthis._customReferenceSpace = space;\n\n\t}\n\n\t/**\n\t * Returns the XR camera.\n\t *\n\t * @return {ArrayCamera} The XR camera.\n\t */\n\tgetCamera() {\n\n\t\treturn this._cameraXR;\n\n\t}\n\n\t/**\n\t * Returns the environment blend mode from the current XR session.\n\t *\n\t * @return {'opaque'|'additive'|'alpha-blend'|undefined} The environment blend mode. Returns `undefined` when used outside of a XR session.\n\t */\n\tgetEnvironmentBlendMode() {\n\n\t\tif ( this._session !== null ) {\n\n\t\t\treturn this._session.environmentBlendMode;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the current XR frame.\n\t *\n\t * @return {?XRFrame} The XR frame. Returns `null` when used outside a XR session.\n\t */\n\tgetFrame() {\n\n\t\treturn this._xrFrame;\n\n\t}\n\n\t/**\n\t * Returns `true` if the engine renders to a multiview target.\n\t *\n\t * @return {boolean} Whether the engine renders to a multiview render target or not.\n\t */\n\tuseMultiview() {\n\n\t\treturn this._useMultiview;\n\n\t}\n\n\tcreateQuadLayer( width, height, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = [] ) {\n\n\t\tconst geometry = new PlaneGeometry( width, height );\n\t\tconst renderTarget = new XRRenderTarget(\n\t\t\tpixelwidth,\n\t\t\tpixelheight,\n\t\t\t{\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tdepthTexture: new DepthTexture(\n\t\t\t\t\tpixelwidth,\n\t\t\t\t\tpixelheight,\n\t\t\t\t\tattributes.stencil ? UnsignedInt248Type : UnsignedIntType,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tattributes.stencil ? DepthStencilFormat : DepthFormat\n\t\t\t\t),\n\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\tresolveDepthBuffer: false,\n\t\t\t\tresolveStencilBuffer: false\n\t\t\t} );\n\n\t\tconst material = new MeshBasicMaterial( { color: 0xffffff, side: FrontSide } );\n\t\tmaterial.map = renderTarget.texture;\n\t\tmaterial.map.offset.y = 1;\n\t\tmaterial.map.repeat.y = -1;\n\t\tconst plane = new Mesh( geometry, material );\n\t\tplane.position.copy( translation );\n\t\tplane.quaternion.copy( quaternion );\n\n\t\tconst layer = {\n\t\t\ttype: 'quad',\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\ttranslation: translation,\n\t\t\tquaternion: quaternion,\n\t\t\tpixelwidth: pixelwidth,\n\t\t\tpixelheight: pixelheight,\n\t\t\tplane: plane,\n\t\t\tmaterial: material,\n\t\t\trendercall: rendercall,\n\t\t\trenderTarget: renderTarget };\n\n\t\tthis._layers.push( layer );\n\n\t\tif ( this._session !== null ) {\n\n\t\t\tlayer.plane.material = new MeshBasicMaterial( { color: 0xffffff, side: FrontSide } );\n\t\t\tlayer.plane.material.blending = CustomBlending;\n\t\t\tlayer.plane.material.blendEquation = AddEquation;\n\t\t\tlayer.plane.material.blendSrc = ZeroFactor;\n\t\t\tlayer.plane.material.blendDst = ZeroFactor;\n\n\t\t\tlayer.xrlayer = this._createXRLayer( layer );\n\n\t\t\tconst xrlayers = this._session.renderState.layers;\n\t\t\txrlayers.unshift( layer.xrlayer );\n\t\t\tthis._session.updateRenderState( { layers: xrlayers } );\n\n\t\t} else {\n\n\t\t\trenderTarget.isXRRenderTarget = false;\n\n\t\t}\n\n\t\treturn plane;\n\n\t}\n\n\tcreateCylinderLayer( radius, centralAngle, aspectratio, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = [] ) {\n\n\t\tconst geometry = new CylinderGeometry( radius, radius, radius * centralAngle / aspectratio, 64, 64, true, Math.PI - centralAngle / 2, centralAngle );\n\t\tconst renderTarget = new XRRenderTarget(\n\t\t\tpixelwidth,\n\t\t\tpixelheight,\n\t\t\t{\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tdepthTexture: new DepthTexture(\n\t\t\t\t\tpixelwidth,\n\t\t\t\t\tpixelheight,\n\t\t\t\t\tattributes.stencil ? UnsignedInt248Type : UnsignedIntType,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tattributes.stencil ? DepthStencilFormat : DepthFormat\n\t\t\t\t),\n\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\tresolveDepthBuffer: false,\n\t\t\t\tresolveStencilBuffer: false\n\t\t\t} );\n\n\t\tconst material = new MeshBasicMaterial( { color: 0xffffff, side: BackSide } );\n\t\tmaterial.map = renderTarget.texture;\n\t\tmaterial.map.offset.y = 1;\n\t\tmaterial.map.repeat.y = -1;\n\t\tconst plane = new Mesh( geometry, material );\n\t\tplane.position.copy( translation );\n\t\tplane.quaternion.copy( quaternion );\n\n\t\tconst layer = {\n\t\t\ttype: 'cylinder',\n\t\t\tradius: radius,\n\t\t\tcentralAngle: centralAngle,\n\t\t\taspectratio: aspectratio,\n\t\t\ttranslation: translation,\n\t\t\tquaternion: quaternion,\n\t\t\tpixelwidth: pixelwidth,\n\t\t\tpixelheight: pixelheight,\n\t\t\tplane: plane,\n\t\t\tmaterial: material,\n\t\t\trendercall: rendercall,\n\t\t\trenderTarget: renderTarget };\n\n\t\tthis._layers.push( layer );\n\n\t\tif ( this._session !== null ) {\n\n\t\t\tlayer.plane.material = new MeshBasicMaterial( { color: 0xffffff, side: BackSide } );\n\t\t\tlayer.plane.material.blending = CustomBlending;\n\t\t\tlayer.plane.material.blendEquation = AddEquation;\n\t\t\tlayer.plane.material.blendSrc = ZeroFactor;\n\t\t\tlayer.plane.material.blendDst = ZeroFactor;\n\n\t\t\tlayer.xrlayer = this._createXRLayer( layer );\n\n\t\t\tconst xrlayers = this._session.renderState.layers;\n\t\t\txrlayers.unshift( layer.xrlayer );\n\t\t\tthis._session.updateRenderState( { layers: xrlayers } );\n\n\t\t} else {\n\n\t\t\trenderTarget.isXRRenderTarget = false;\n\n\t\t}\n\n\t\treturn plane;\n\n\t}\n\n\trenderLayers( ) {\n\n\t\tconst translationObject = new Vector3();\n\t\tconst quaternionObject = new Quaternion();\n\n\t\tconst wasPresenting = this.isPresenting;\n\t\tthis.isPresenting = false;\n\n\t\tfor ( const layer of this._layers ) {\n\n\t\t\tlayer.renderTarget.isXRRenderTarget = this._session !== null;\n\t\t\tlayer.renderTarget.hasExternalTextures = layer.renderTarget.isXRRenderTarget;\n\t\t\tlayer.renderTarget.autoAllocateDepthBuffer = ! layer.renderTarget.isXRRenderTarget;\n\n\t\t\tif ( layer.renderTarget.isXRRenderTarget && this._supportsLayers ) {\n\n\t\t\t\tlayer.xrlayer.transform = new XRRigidTransform( layer.plane.getWorldPosition( translationObject ), layer.plane.getWorldQuaternion( quaternionObject ) );\n\n\t\t\t\tconst glSubImage = this._glBinding.getSubImage( layer.xrlayer, this._xrFrame );\n\t\t\t\tthis._renderer.backend.setXRRenderTargetTextures(\n\t\t\t\t\tlayer.renderTarget,\n\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\tglSubImage.depthStencilTexture );\n\n\t\t\t}\n\n\t\t\tthis._renderer.setRenderTarget( layer.renderTarget );\n\t\t\tlayer.rendercall();\n\n\t\t}\n\n\t\tthis.isPresenting = wasPresenting;\n\t\tthis._renderer.setRenderTarget( null );\n\n\t}\n\n\n\t/**\n\t * Returns the current XR session.\n\t *\n\t * @return {?XRSession} The XR session. Returns `null` when used outside a XR session.\n\t */\n\tgetSession() {\n\n\t\treturn this._session;\n\n\t}\n\n\t/**\n\t * After a XR session has been requested usually with one of the `*Button` modules, it\n\t * is injected into the renderer with this method. This method triggers the start of\n\t * the actual XR rendering.\n\t *\n\t * @async\n\t * @param {XRSession} session - The XR session to set.\n\t * @return {Promise} A Promise that resolves when the session has been set.\n\t */\n\tasync setSession( session ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst backend = renderer.backend;\n\n\t\tthis._gl = renderer.getContext();\n\t\tconst gl = this._gl;\n\t\tconst attributes = gl.getContextAttributes();\n\n\t\tthis._session = session;\n\n\t\tif ( session !== null ) {\n\n\t\t\tif ( backend.isWebGPUBackend === true ) throw new Error( 'THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing \"{ forceWebGL: true }\" to the constructor of the renderer.' );\n\n\t\t\tsession.addEventListener( 'select', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'selectstart', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'selectend', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'squeeze', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezestart', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezeend', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'end', this._onSessionEnd );\n\t\t\tsession.addEventListener( 'inputsourceschange', this._onInputSourcesChange );\n\n\t\t\tawait backend.makeXRCompatible();\n\n\t\t\tthis._currentPixelRatio = renderer.getPixelRatio();\n\t\t\trenderer.getSize( this._currentSize );\n\n\t\t\tthis._currentAnimationContext = renderer._animation.getContext();\n\t\t\tthis._currentAnimationLoop = renderer._animation.getAnimationLoop();\n\t\t\trenderer._animation.stop();\n\n\t\t\t//\n\n\t\t\tif ( this._useLayers === true ) {\n\n\t\t\t\t// default path using XRWebGLBinding/XRProjectionLayer\n\n\t\t\t\tlet depthFormat = null;\n\t\t\t\tlet depthType = null;\n\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\tif ( renderer.depth ) {\n\n\t\t\t\t\tglDepthFormat = renderer.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\tdepthFormat = renderer.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\tdepthType = renderer.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t}\n\n\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\tcolorFormat: gl.RGBA8,\n\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\tscaleFactor: this._framebufferScaleFactor\n\t\t\t\t};\n\n\t\t\t\tif ( this._useMultiviewIfPossible && renderer.hasFeature( 'OVR_multiview2' ) ) {\n\n\t\t\t\t\tprojectionlayerInit.textureType = 'texture-array';\n\t\t\t\t\tthis._useMultiview = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst glBinding = new XRWebGLBinding( session, gl );\n\t\t\t\tconst glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\t\t\t\tconst layersArray = [ glProjLayer ];\n\n\t\t\t\tthis._glBinding = glBinding;\n\t\t\t\tthis._glProjLayer = glProjLayer;\n\n\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\trenderer.setSize( glProjLayer.textureWidth, glProjLayer.textureHeight, false );\n\n\t\t\t\tlet depthTexture;\n\t\t\t\tif ( this._useMultiview ) {\n\n\t\t\t\t\tdepthTexture = new DepthArrayTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, 2 );\n\t\t\t\t\tdepthTexture.type = depthType;\n\t\t\t\t\tdepthTexture.format = depthFormat;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdepthTexture = new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat );\n\n\t\t\t\t}\n\n\n\t\t\t\tthis._xrRenderTarget = new XRRenderTarget(\n\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\tdepthTexture: depthTexture,\n\t\t\t\t\t\tstencilBuffer: renderer.stencil,\n\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0,\n\t\t\t\t\t\tresolveDepthBuffer: ( glProjLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\tresolveStencilBuffer: ( glProjLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\tdepth: this._useMultiview ? 2 : 1,\n\t\t\t\t\t\tmultiview: this._useMultiview\n\t\t\t\t\t} );\n\n\t\t\t\tthis._xrRenderTarget.hasExternalTextures = true;\n\t\t\t\tthis._xrRenderTarget.depth = this._useMultiview ? 2 : 1;\n\n\t\t\t\tthis._supportsLayers = session.enabledFeatures.includes( 'layers' );\n\n\t\t\t\tthis._referenceSpace = await session.requestReferenceSpace( this.getReferenceSpaceType() );\n\n\t\t\t\tif ( this._supportsLayers ) {\n\n\t\t\t\t\t// switch layers to native\n\t\t\t\t\tfor ( const layer of this._layers ) {\n\n\t\t\t\t\t\t// change material so it \"punches\" out a hole to show the XR Layer.\n\t\t\t\t\t\tlayer.plane.material = new MeshBasicMaterial( { color: 0xffffff, side: layer.type === 'cylinder' ? BackSide : FrontSide } );\n\t\t\t\t\t\tlayer.plane.material.blending = CustomBlending;\n\t\t\t\t\t\tlayer.plane.material.blendEquation = AddEquation;\n\t\t\t\t\t\tlayer.plane.material.blendSrc = ZeroFactor;\n\t\t\t\t\t\tlayer.plane.material.blendDst = ZeroFactor;\n\n\t\t\t\t\t\tlayer.xrlayer = this._createXRLayer( layer );\n\n\t\t\t\t\t\tlayersArray.unshift( layer.xrlayer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tsession.updateRenderState( { layers: layersArray } );\n\n\t\t\t} else {\n\n\t\t\t\t// fallback to XRWebGLLayer\n\n\t\t\t\tconst layerInit = {\n\t\t\t\t\tantialias: renderer.samples > 0,\n\t\t\t\t\talpha: true,\n\t\t\t\t\tdepth: renderer.depth,\n\t\t\t\t\tstencil: renderer.stencil,\n\t\t\t\t\tframebufferScaleFactor: this.getFramebufferScaleFactor()\n\t\t\t\t};\n\n\t\t\t\tconst glBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\t\t\t\tthis._glBaseLayer = glBaseLayer;\n\n\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\trenderer.setSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false );\n\n\t\t\t\tthis._xrRenderTarget = new XRRenderTarget(\n\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\tstencilBuffer: renderer.stencil,\n\t\t\t\t\t\tresolveDepthBuffer: ( glBaseLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\tresolveStencilBuffer: ( glBaseLayer.ignoreDepthValues === false ),\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tthis._referenceSpace = await session.requestReferenceSpace( this.getReferenceSpaceType() );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tthis.setFoveation( this.getFoveation() );\n\n\t\t\trenderer._animation.setAnimationLoop( this._onAnimationFrame );\n\t\t\trenderer._animation.setContext( session );\n\t\t\trenderer._animation.start();\n\n\t\t\tthis.isPresenting = true;\n\n\t\t\tthis.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is called by the renderer per frame and updates the XR camera\n\t * and it sub cameras based on the given camera. The given camera is the \"user\"\n\t * camera created on application level and used for non-XR rendering.\n\t *\n\t * @param {PerspectiveCamera} camera - The camera.\n\t */\n\tupdateCamera( camera ) {\n\n\t\tconst session = this._session;\n\n\t\tif ( session === null ) return;\n\n\t\tconst depthNear = camera.near;\n\t\tconst depthFar = camera.far;\n\n\t\tconst cameraXR = this._cameraXR;\n\t\tconst cameraL = this._cameraL;\n\t\tconst cameraR = this._cameraR;\n\n\t\tcameraXR.near = cameraR.near = cameraL.near = depthNear;\n\t\tcameraXR.far = cameraR.far = cameraL.far = depthFar;\n\t\tcameraXR.isMultiViewCamera = this._useMultiview;\n\n\t\tif ( this._currentDepthNear !== cameraXR.near || this._currentDepthFar !== cameraXR.far ) {\n\n\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\tsession.updateRenderState( {\n\t\t\t\tdepthNear: cameraXR.near,\n\t\t\t\tdepthFar: cameraXR.far\n\t\t\t} );\n\n\t\t\tthis._currentDepthNear = cameraXR.near;\n\t\t\tthis._currentDepthFar = cameraXR.far;\n\n\t\t}\n\n\t\tcameraL.layers.mask = camera.layers.mask | 0b010;\n\t\tcameraR.layers.mask = camera.layers.mask | 0b100;\n\t\tcameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;\n\n\t\tconst parent = camera.parent;\n\t\tconst cameras = cameraXR.cameras;\n\n\t\tupdateCamera( cameraXR, parent );\n\n\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t}\n\n\t\t// update projection matrix for proper view frustum culling\n\n\t\tif ( cameras.length === 2 ) {\n\n\t\t\tsetProjectionFromUnion( cameraXR, cameraL, cameraR );\n\n\t\t} else {\n\n\t\t\t// assume single camera setup (AR)\n\n\t\t\tcameraXR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t}\n\n\t\t// update user camera and its children\n\n\t\tupdateUserCamera( camera, cameraXR, parent );\n\n\n\t}\n\n\t/**\n\t * Returns a WebXR controller for the given controller index.\n\t *\n\t * @private\n\t * @param {number} index - The controller index.\n\t * @return {WebXRController} The XR controller.\n\t */\n\t_getController( index ) {\n\n\t\tlet controller = this._controllers[ index ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new WebXRController();\n\t\t\tthis._controllers[ index ] = controller;\n\n\t\t}\n\n\t\treturn controller;\n\n\t}\n\n}\n\n/**\n * Assumes 2 cameras that are parallel and share an X-axis, and that\n * the cameras' projection and world matrices have already been set.\n * And that near and far planes are identical for both cameras.\n * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n *\n * @param {ArrayCamera} camera - The camera to update.\n * @param {PerspectiveCamera} cameraL - The left camera.\n * @param {PerspectiveCamera} cameraR - The right camera.\n */\nfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t_cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t_cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\tconst ipd = _cameraLPos.distanceTo( _cameraRPos );\n\n\tconst projL = cameraL.projectionMatrix.elements;\n\tconst projR = cameraR.projectionMatrix.elements;\n\n\t// VR systems will have identical far and near planes, and\n\t// most likely identical top and bottom frustum extents.\n\t// Use the left camera for these values.\n\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\tconst left = near * leftFov;\n\tconst right = near * rightFov;\n\n\t// Calculate the new camera's position offset from the\n\t// left camera. xOffset should be roughly half `ipd`.\n\tconst zOffset = ipd / ( - leftFov + rightFov );\n\tconst xOffset = zOffset * - leftFov;\n\n\t// TODO: Better way to apply this offset?\n\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\tcamera.translateX( xOffset );\n\tcamera.translateZ( zOffset );\n\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t// Check if the projection uses an infinite far plane.\n\tif ( projL[ 10 ] === -1 ) {\n\n\t\t// Use the projection matrix from the left eye.\n\t\t// The camera offset is sufficient to include the view volumes\n\t\t// of both eyes (assuming symmetric projections).\n\t\tcamera.projectionMatrix.copy( cameraL.projectionMatrix );\n\t\tcamera.projectionMatrixInverse.copy( cameraL.projectionMatrixInverse );\n\n\t} else {\n\n\t\t// Find the union of the frustum values of the cameras and scale\n\t\t// the values so that the near plane's position does not change in world space,\n\t\t// although must now be relative to the new union camera.\n\t\tconst near2 = near + zOffset;\n\t\tconst far2 = far + zOffset;\n\t\tconst left2 = left - xOffset;\n\t\tconst right2 = right + ( ipd - xOffset );\n\t\tconst top2 = topFov * far / far2 * near2;\n\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t}\n\n}\n\n/**\n * Updates the world matrices for the given camera based on the parent 3D object.\n *\n * @inner\n * @param {Camera} camera - The camera to update.\n * @param {Object3D} parent - The parent 3D object.\n */\nfunction updateCamera( camera, parent ) {\n\n\tif ( parent === null ) {\n\n\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t} else {\n\n\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t}\n\n\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n}\n\n/**\n * Updates the given camera with the transformation of the XR camera and parent object.\n *\n * @inner\n * @param {Camera} camera - The camera to update.\n * @param {ArrayCamera} cameraXR - The XR camera.\n * @param {Object3D} parent - The parent 3D object.\n */\nfunction updateUserCamera( camera, cameraXR, parent ) {\n\n\tif ( parent === null ) {\n\n\t\tcamera.matrix.copy( cameraXR.matrixWorld );\n\n\t} else {\n\n\t\tcamera.matrix.copy( parent.matrixWorld );\n\t\tcamera.matrix.invert();\n\t\tcamera.matrix.multiply( cameraXR.matrixWorld );\n\n\t}\n\n\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\tcamera.updateMatrixWorld( true );\n\n\tcamera.projectionMatrix.copy( cameraXR.projectionMatrix );\n\tcamera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );\n\n\tif ( camera.isPerspectiveCamera ) {\n\n\t\tcamera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );\n\t\tcamera.zoom = 1;\n\n\t}\n\n}\n\nfunction onSessionEvent( event ) {\n\n\tconst controllerIndex = this._controllerInputSources.indexOf( event.inputSource );\n\n\tif ( controllerIndex === -1 ) {\n\n\t\treturn;\n\n\t}\n\n\tconst controller = this._controllers[ controllerIndex ];\n\n\tif ( controller !== undefined ) {\n\n\t\tconst referenceSpace = this.getReferenceSpace();\n\n\t\tcontroller.update( event.inputSource, event.frame, referenceSpace );\n\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t}\n\n}\n\nfunction onSessionEnd() {\n\n\tconst session = this._session;\n\tconst renderer = this._renderer;\n\n\tsession.removeEventListener( 'select', this._onSessionEvent );\n\tsession.removeEventListener( 'selectstart', this._onSessionEvent );\n\tsession.removeEventListener( 'selectend', this._onSessionEvent );\n\tsession.removeEventListener( 'squeeze', this._onSessionEvent );\n\tsession.removeEventListener( 'squeezestart', this._onSessionEvent );\n\tsession.removeEventListener( 'squeezeend', this._onSessionEvent );\n\tsession.removeEventListener( 'end', this._onSessionEnd );\n\tsession.removeEventListener( 'inputsourceschange', this._onInputSourcesChange );\n\n\tfor ( let i = 0; i < this._controllers.length; i ++ ) {\n\n\t\tconst inputSource = this._controllerInputSources[ i ];\n\n\t\tif ( inputSource === null ) continue;\n\n\t\tthis._controllerInputSources[ i ] = null;\n\n\t\tthis._controllers[ i ].disconnect( inputSource );\n\n\t}\n\n\tthis._currentDepthNear = null;\n\tthis._currentDepthFar = null;\n\n\t// restore framebuffer/rendering state\n\n\trenderer.backend.setXRTarget( null );\n\trenderer.setOutputRenderTarget( null );\n\trenderer.setRenderTarget( null );\n\n\tthis._session = null;\n\tthis._xrRenderTarget = null;\n\n\t// switch layers back to emulated\n\tif ( this._supportsLayers === true ) {\n\n\t\tfor ( const layer of this._layers ) {\n\n\t\t\t// Recreate layer render target to reset state\n\t\t\tlayer.renderTarget = new XRRenderTarget(\n\t\t\t\tlayer.pixelwidth,\n\t\t\t\tlayer.pixelheight,\n\t\t\t\t{\n\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\tdepthTexture: new DepthTexture(\n\t\t\t\t\t\tlayer.pixelwidth,\n\t\t\t\t\t\tlayer.pixelheight,\n\t\t\t\t\t\tlayer.stencilBuffer ? UnsignedInt248Type : UnsignedIntType,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tlayer.stencilBuffer ? DepthStencilFormat : DepthFormat\n\t\t\t\t\t),\n\t\t\t\t\tstencilBuffer: layer.stencilBuffer,\n\t\t\t\t\tresolveDepthBuffer: false,\n\t\t\t\t\tresolveStencilBuffer: false\n\t\t\t\t} );\n\n\t\t\tlayer.renderTarget.isXRRenderTarget = false;\n\n\t\t\tlayer.plane.material = layer.material;\n\t\t\tlayer.material.map = layer.renderTarget.texture;\n\t\t\tdelete layer.xrlayer;\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.isPresenting = false;\n\tthis._useMultiview = false;\n\n\trenderer._animation.stop();\n\n\trenderer._animation.setAnimationLoop( this._currentAnimationLoop );\n\trenderer._animation.setContext( this._currentAnimationContext );\n\trenderer._animation.start();\n\n\trenderer.setPixelRatio( this._currentPixelRatio );\n\trenderer.setSize( this._currentSize.width, this._currentSize.height, false );\n\n\tthis.dispatchEvent( { type: 'sessionend' } );\n\n}\n\nfunction onInputSourcesChange( event ) {\n\n\tconst controllers = this._controllers;\n\tconst controllerInputSources = this._controllerInputSources;\n\n\t// Notify disconnected\n\n\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\tconst inputSource = event.removed[ i ];\n\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\tif ( index >= 0 ) {\n\n\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\tcontrollers[ index ].disconnect( inputSource );\n\n\t\t}\n\n\t}\n\n\t// Notify connected\n\n\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\tconst inputSource = event.added[ i ];\n\n\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\tif ( controllerIndex === -1 ) {\n\n\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\tif ( controllerIndex === -1 ) break;\n\n\t\t}\n\n\t\tconst controller = controllers[ controllerIndex ];\n\n\t\tif ( controller ) {\n\n\t\t\tcontroller.connect( inputSource );\n\n\t\t}\n\n\t}\n\n}\n\n// Creation method for native WebXR layers\nfunction createXRLayer( layer ) {\n\n\tif ( layer.type === 'quad' ) {\n\n\t\treturn this._glBinding.createQuadLayer( {\n\t\t\ttransform: new XRRigidTransform( layer.translation, layer.quaternion ),\n\t\t\tdepthFormat: this._gl.DEPTH_COMPONENT,\n\t\t\twidth: layer.width / 2,\n\t\t\theight: layer.height / 2,\n\t\t\tspace: this._referenceSpace,\n\t\t\tviewPixelWidth: layer.pixelwidth,\n\t\t\tviewPixelHeight: layer.pixelheight\n\t\t} );\n\n\t} else {\n\n\t\treturn this._glBinding.createCylinderLayer( {\n\t\t\ttransform: new XRRigidTransform( layer.translation, layer.quaternion ),\n\t\t\tdepthFormat: this._gl.DEPTH_COMPONENT,\n\t\t\tradius: layer.radius,\n\t\t\tcentralAngle: layer.centralAngle,\n\t\t\taspectRatio: layer.aspectRatio,\n\t\t\tspace: this._referenceSpace,\n\t\t\tviewPixelWidth: layer.pixelwidth,\n\t\t\tviewPixelHeight: layer.pixelheight\n\t\t} );\n\n\t}\n\n}\n\n// Animation Loop\n\nfunction onAnimationFrame( time, frame ) {\n\n\tif ( frame === undefined ) return;\n\n\tconst cameraXR = this._cameraXR;\n\tconst renderer = this._renderer;\n\tconst backend = renderer.backend;\n\n\tconst glBaseLayer = this._glBaseLayer;\n\n\tconst referenceSpace = this.getReferenceSpace();\n\tconst pose = frame.getViewerPose( referenceSpace );\n\n\tthis._xrFrame = frame;\n\n\tif ( pose !== null ) {\n\n\t\tconst views = pose.views;\n\n\t\tif ( this._glBaseLayer !== null ) {\n\n\t\t\tbackend.setXRTarget( glBaseLayer.framebuffer );\n\n\t\t}\n\n\t\tlet cameraXRNeedsUpdate = false;\n\n\t\t// check if it's necessary to rebuild cameraXR's camera list\n\n\t\tif ( views.length !== cameraXR.cameras.length ) {\n\n\t\t\tcameraXR.cameras.length = 0;\n\t\t\tcameraXRNeedsUpdate = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\tconst view = views[ i ];\n\n\t\t\tlet viewport;\n\n\t\t\tif ( this._useLayers === true ) {\n\n\t\t\t\tconst glSubImage = this._glBinding.getViewSubImage( this._glProjLayer, view );\n\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tbackend.setXRRenderTargetTextures(\n\t\t\t\t\t\tthis._xrRenderTarget,\n\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t( this._glProjLayer.ignoreDepthValues && ! this._useMultiview ) ? undefined : glSubImage.depthStencilTexture\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t}\n\n\t\t\tlet camera = this._cameras[ i ];\n\n\t\t\tif ( camera === undefined ) {\n\n\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\tcamera.layers.enable( i );\n\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\tthis._cameras[ i ] = camera;\n\n\t\t\t}\n\n\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tcameraXR.matrix.copy( camera.matrix );\n\t\t\t\tcameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );\n\n\t\t\t}\n\n\t\t\tif ( cameraXRNeedsUpdate === true ) {\n\n\t\t\t\tcameraXR.cameras.push( camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\trenderer.setOutputRenderTarget( this._xrRenderTarget );\n\n\t}\n\n\t//\n\n\tfor ( let i = 0; i < this._controllers.length; i ++ ) {\n\n\t\tconst inputSource = this._controllerInputSources[ i ];\n\t\tconst controller = this._controllers[ i ];\n\n\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t}\n\n\t}\n\n\tif ( this._currentAnimationLoop ) this._currentAnimationLoop( time, frame );\n\n\tif ( frame.detectedPlanes ) {\n\n\t\tthis.dispatchEvent( { type: 'planesdetected', data: frame } );\n\n\t}\n\n\tthis._xrFrame = null;\n\n}\n\nconst _scene = /*@__PURE__*/ new Scene();\nconst _drawingBufferSize = /*@__PURE__*/ new Vector2();\nconst _screen = /*@__PURE__*/ new Vector4();\nconst _frustum = /*@__PURE__*/ new Frustum();\nconst _frustumArray = /*@__PURE__*/ new FrustumArray();\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _vector4 = /*@__PURE__*/ new Vector4();\n\n/**\n * Base class for renderers.\n */\nclass Renderer {\n\n\t/**\n\t * Renderer options.\n\t *\n\t * @typedef {Object} Renderer~Options\n\t * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n\t * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n\t * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.\n\t * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n\t * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n\t * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. This parameter can set to any other integer value than 0\n\t * to overwrite the default.\n\t * @property {?Function} [getFallback=null] - This callback function can be used to provide a fallback backend, if the primary backend can't be targeted.\n\t * @property {number} [colorBufferType=HalfFloatType] - Defines the type of color buffers. The default `HalfFloatType` is recommend for best\n\t * quality. To save memory and bandwidth, `UnsignedByteType` might be used. This will reduce rendering quality though.\n\t * @property {boolean} [multiview=false] - If set to `true`, the renderer will use multiview during WebXR rendering if supported.\n\t */\n\n\t/**\n\t * Constructs a new renderer.\n\t *\n\t * @param {Backend} backend - The backend the renderer is targeting (e.g. WebGPU or WebGL 2).\n\t * @param {Renderer~Options} [parameters] - The configuration parameter.\n\n\t */\n\tconstructor( backend, parameters = {} ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderer = true;\n\n\t\t//\n\n\t\tconst {\n\t\t\tlogarithmicDepthBuffer = false,\n\t\t\talpha = true,\n\t\t\tdepth = true,\n\t\t\tstencil = false,\n\t\t\tantialias = false,\n\t\t\tsamples = 0,\n\t\t\tgetFallback = null,\n\t\t\tcolorBufferType = HalfFloatType,\n\t\t\tmultiview = false\n\t\t} = parameters;\n\n\t\t/**\n\t\t * A reference to the canvas element the renderer is drawing to.\n\t\t * This value of this property will automatically be created by\n\t\t * the renderer.\n\t\t *\n\t\t * @type {HTMLCanvasElement|OffscreenCanvas}\n\t\t */\n\t\tthis.domElement = backend.getDomElement();\n\n\t\t/**\n\t\t * A reference to the current backend.\n\t\t *\n\t\t * @type {Backend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * The number of MSAA samples.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.samples = samples || ( antialias === true ) ? 4 : 0;\n\n\t\t/**\n\t\t * Whether the renderer should automatically clear the current rendering target\n\t\t * before execute a `render()` call. The target can be the canvas (default framebuffer)\n\t\t * or the current bound render target (custom framebuffer).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoClear = true;\n\n\t\t/**\n\t\t * When `autoClear` is set to `true`, this property defines whether the renderer\n\t\t * should clear the color buffer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoClearColor = true;\n\n\t\t/**\n\t\t * When `autoClear` is set to `true`, this property defines whether the renderer\n\t\t * should clear the depth buffer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoClearDepth = true;\n\n\t\t/**\n\t\t * When `autoClear` is set to `true`, this property defines whether the renderer\n\t\t * should clear the stencil buffer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoClearStencil = true;\n\n\t\t/**\n\t\t * Whether the default framebuffer should be transparent or opaque.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.alpha = alpha;\n\n\t\t/**\n\t\t * Whether logarithmic depth buffer is enabled or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.logarithmicDepthBuffer = logarithmicDepthBuffer;\n\n\t\t/**\n\t\t * Defines the output color space of the renderer.\n\t\t *\n\t\t * @type {string}\n\t\t * @default SRGBColorSpace\n\t\t */\n\t\tthis.outputColorSpace = SRGBColorSpace;\n\n\t\t/**\n\t\t * Defines the tone mapping of the renderer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default NoToneMapping\n\t\t */\n\t\tthis.toneMapping = NoToneMapping;\n\n\t\t/**\n\t\t * Defines the tone mapping exposure.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\t/**\n\t\t * Whether the renderer should sort its render lists or not.\n\t\t *\n\t\t * Note: Sorting is used to attempt to properly render objects that have some degree of transparency.\n\t\t * By definition, sorting objects may not work in all cases. Depending on the needs of application,\n\t\t * it may be necessary to turn off sorting and use other methods to deal with transparency rendering\n\t\t * e.g. manually determining each object's rendering order.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sortObjects = true;\n\n\t\t/**\n\t\t * Whether the default framebuffer should have a depth buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Whether the default framebuffer should have a stencil buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencil = stencil;\n\n\t\t/**\n\t\t * Holds a series of statistical information about the GPU memory\n\t\t * and the rendering process. Useful for debugging and monitoring.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = new Info();\n\n\t\t/**\n\t\t * Stores override nodes for specific transformations or calculations.\n\t\t * These nodes can be used to replace default behavior in the rendering pipeline.\n\t\t *\n\t\t * @type {Object}\n\t\t * @property {?Node} modelViewMatrix - An override node for the model-view matrix.\n\t\t * @property {?Node} modelNormalViewMatrix - An override node for the model normal view matrix.\n\t\t */\n\t\tthis.overrideNodes = {\n\t\t\tmodelViewMatrix: null,\n\t\t\tmodelNormalViewMatrix: null\n\t\t};\n\n\t\t/**\n\t\t * The node library defines how certain library objects like materials, lights\n\t\t * or tone mapping functions are mapped to node types. This is required since\n\t\t * although instances of classes like `MeshBasicMaterial` or `PointLight` can\n\t\t * be part of the scene graph, they are internally represented as nodes for\n\t\t * further processing.\n\t\t *\n\t\t * @type {NodeLibrary}\n\t\t */\n\t\tthis.library = new NodeLibrary();\n\n\t\t/**\n\t\t * A map-like data structure for managing lights.\n\t\t *\n\t\t * @type {Lighting}\n\t\t */\n\t\tthis.lighting = new Lighting();\n\n\t\t// internals\n\n\t\t/**\n\t\t * This callback function can be used to provide a fallback backend, if the primary backend can't be targeted.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t */\n\t\tthis._getFallback = getFallback;\n\n\t\t/**\n\t\t * The renderer's pixel ratio.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._pixelRatio = 1;\n\n\t\t/**\n\t\t * The width of the renderer's default framebuffer in logical pixel unit.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis._width = this.domElement.width;\n\n\t\t/**\n\t\t * The height of the renderer's default framebuffer in logical pixel unit.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis._height = this.domElement.height;\n\n\t\t/**\n\t\t * The viewport of the renderer in logical pixel unit.\n\t\t *\n\t\t * @private\n\t\t * @type {Vector4}\n\t\t */\n\t\tthis._viewport = new Vector4( 0, 0, this._width, this._height );\n\n\t\t/**\n\t\t * The scissor rectangle of the renderer in logical pixel unit.\n\t\t *\n\t\t * @private\n\t\t * @type {Vector4}\n\t\t */\n\t\tthis._scissor = new Vector4( 0, 0, this._width, this._height );\n\n\t\t/**\n\t\t * Whether the scissor test should be enabled or not.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._scissorTest = false;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing shader attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {?Attributes}\n\t\t * @default null\n\t\t */\n\t\tthis._attributes = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing geometries.\n\t\t *\n\t\t * @private\n\t\t * @type {?Geometries}\n\t\t * @default null\n\t\t */\n\t\tthis._geometries = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing node related logic.\n\t\t *\n\t\t * @private\n\t\t * @type {?Nodes}\n\t\t * @default null\n\t\t */\n\t\tthis._nodes = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing the internal animation loop.\n\t\t *\n\t\t * @private\n\t\t * @type {?Animation}\n\t\t * @default null\n\t\t */\n\t\tthis._animation = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing shader program bindings.\n\t\t *\n\t\t * @private\n\t\t * @type {?Bindings}\n\t\t * @default null\n\t\t */\n\t\tthis._bindings = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing render objects.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderObjects}\n\t\t * @default null\n\t\t */\n\t\tthis._objects = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing render and compute pipelines.\n\t\t *\n\t\t * @private\n\t\t * @type {?Pipelines}\n\t\t * @default null\n\t\t */\n\t\tthis._pipelines = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing render bundles.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderBundles}\n\t\t * @default null\n\t\t */\n\t\tthis._bundles = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing render lists.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderLists}\n\t\t * @default null\n\t\t */\n\t\tthis._renderLists = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing render contexts.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderContexts}\n\t\t * @default null\n\t\t */\n\t\tthis._renderContexts = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for managing textures.\n\t\t *\n\t\t * @private\n\t\t * @type {?Textures}\n\t\t * @default null\n\t\t */\n\t\tthis._textures = null;\n\n\t\t/**\n\t\t * A reference to a renderer module for backgrounds.\n\t\t *\n\t\t * @private\n\t\t * @type {?Background}\n\t\t * @default null\n\t\t */\n\t\tthis._background = null;\n\n\t\t/**\n\t\t * This fullscreen quad is used for internal render passes\n\t\t * like the tone mapping and color space output pass.\n\t\t *\n\t\t * @private\n\t\t * @type {QuadMesh}\n\t\t */\n\t\tthis._quad = new QuadMesh( new NodeMaterial() );\n\t\tthis._quad.material.name = 'Renderer_output';\n\n\t\t/**\n\t\t * A reference to the current render context.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderContext}\n\t\t * @default null\n\t\t */\n\t\tthis._currentRenderContext = null;\n\n\t\t/**\n\t\t * A custom sort function for the opaque render list.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._opaqueSort = null;\n\n\t\t/**\n\t\t * A custom sort function for the transparent render list.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._transparentSort = null;\n\n\t\t/**\n\t\t * The framebuffer target.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis._frameBufferTarget = null;\n\n\t\tconst alphaClear = this.alpha === true ? 0 : 1;\n\n\t\t/**\n\t\t * The clear color value.\n\t\t *\n\t\t * @private\n\t\t * @type {Color4}\n\t\t */\n\t\tthis._clearColor = new Color4( 0, 0, 0, alphaClear );\n\n\t\t/**\n\t\t * The clear depth value.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._clearDepth = 1;\n\n\t\t/**\n\t\t * The clear stencil value.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._clearStencil = 0;\n\n\t\t/**\n\t\t * The current render target.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis._renderTarget = null;\n\n\t\t/**\n\t\t * The active cube face.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._activeCubeFace = 0;\n\n\t\t/**\n\t\t * The active mipmap level.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._activeMipmapLevel = 0;\n\n\t\t/**\n\t\t * The current output render target.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis._outputRenderTarget = null;\n\n\t\t/**\n\t\t * The MRT setting.\n\t\t *\n\t\t * @private\n\t\t * @type {?MRTNode}\n\t\t * @default null\n\t\t */\n\t\tthis._mrt = null;\n\n\t\t/**\n\t\t * This function defines how a render object is going\n\t\t * to be rendered.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._renderObjectFunction = null;\n\n\t\t/**\n\t\t * Used to keep track of the current render object function.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._currentRenderObjectFunction = null;\n\n\t\t/**\n\t\t * Used to keep track of the current render bundle.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderBundle}\n\t\t * @default null\n\t\t */\n\t\tthis._currentRenderBundle = null;\n\n\t\t/**\n\t\t * Next to `_renderObjectFunction()`, this function provides another hook\n\t\t * for influencing the render process of a render object. It is meant for internal\n\t\t * use and only relevant for `compileAsync()` right now. Instead of using\n\t\t * the default logic of `_renderObjectDirect()` which actually draws the render object,\n\t\t * a different function might be used which performs no draw but just the node\n\t\t * and pipeline updates.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._handleObjectFunction = this._renderObjectDirect;\n\n\t\t/**\n\t\t * Indicates whether the device has been lost or not. In WebGL terms, the device\n\t\t * lost is considered as a context lost. When this is set to `true`, rendering\n\t\t * isn't possible anymore.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._isDeviceLost = false;\n\n\t\t/**\n\t\t * A callback function that defines what should happen when a device/context lost occurs.\n\t\t *\n\t\t * @type {Function}\n\t\t */\n\t\tthis.onDeviceLost = this._onDeviceLost;\n\n\t\t/**\n\t\t * Defines the type of color buffers. The default `HalfFloatType` is recommend for\n\t\t * best quality. To save memory and bandwidth, `UnsignedByteType` might be used.\n\t\t * This will reduce rendering quality though.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default HalfFloatType\n\t\t */\n\t\tthis._colorBufferType = colorBufferType;\n\n\t\t/**\n\t\t * Whether the renderer has been initialized or not.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._initialized = false;\n\n\t\t/**\n\t\t * A reference to the promise which initializes the renderer.\n\t\t *\n\t\t * @private\n\t\t * @type {?Promise<this>}\n\t\t * @default null\n\t\t */\n\t\tthis._initPromise = null;\n\n\t\t/**\n\t\t * An array of compilation promises which are used in `compileAsync()`.\n\t\t *\n\t\t * @private\n\t\t * @type {?Array<Promise>}\n\t\t * @default null\n\t\t */\n\t\tthis._compilationPromises = null;\n\n\t\t/**\n\t\t * Whether the renderer should render transparent render objects or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\t/**\n\t\t * Whether the renderer should render opaque render objects or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.opaque = true;\n\n\t\t/**\n\t\t * Shadow map configuration\n\t\t * @typedef {Object} ShadowMapConfig\n\t\t * @property {boolean} enabled - Whether to globally enable shadows or not.\n\t\t * @property {number} type - The shadow map type.\n\t\t */\n\n\t\t/**\n\t\t * The renderer's shadow configuration.\n\t\t *\n\t\t * @type {ShadowMapConfig}\n\t\t */\n\t\tthis.shadowMap = {\n\t\t\tenabled: false,\n\t\t\ttype: PCFShadowMap\n\t\t};\n\n\t\t/**\n\t\t * XR configuration.\n\t\t * @typedef {Object} XRConfig\n\t\t * @property {boolean} enabled - Whether to globally enable XR or not.\n\t\t */\n\n\t\t/**\n\t\t * The renderer's XR manager.\n\t\t *\n\t\t * @type {XRManager}\n\t\t */\n\t\tthis.xr = new XRManager( this, multiview );\n\n\t\t/**\n\t\t * Debug configuration.\n\t\t * @typedef {Object} DebugConfig\n\t\t * @property {boolean} checkShaderErrors - Whether shader errors should be checked or not.\n\t\t * @property {?Function} onShaderError - A callback function that is executed when a shader error happens. Only supported with WebGL 2 right now.\n\t\t * @property {Function} getShaderAsync - Allows the get the raw shader code for the given scene, camera and 3D object.\n\t\t */\n\n\t\t/**\n\t\t * The renderer's debug configuration.\n\t\t *\n\t\t * @type {DebugConfig}\n\t\t */\n\t\tthis.debug = {\n\t\t\tcheckShaderErrors: true,\n\t\t\tonShaderError: null,\n\t\t\tgetShaderAsync: async ( scene, camera, object ) => {\n\n\t\t\t\tawait this.compileAsync( scene, camera );\n\n\t\t\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\t\t\tconst renderContext = this._renderContexts.get( scene, camera, this._renderTarget );\n\n\t\t\t\tconst material = scene.overrideMaterial || object.material;\n\n\t\t\t\tconst renderObject = this._objects.get( object, material, scene, camera, renderList.lightsNode, renderContext, renderContext.clippingContext );\n\n\t\t\t\tconst { fragmentShader, vertexShader } = renderObject.getNodeBuilderState();\n\n\t\t\t\treturn { fragmentShader, vertexShader };\n\n\t\t\t}\n\t\t};\n\n\t}\n\n\t/**\n\t * Initializes the renderer so it is ready for usage.\n\t *\n\t * @async\n\t * @return {Promise<this>} A Promise that resolves when the renderer has been initialized.\n\t */\n\tasync init() {\n\n\t\tif ( this._initialized ) {\n\n\t\t\tthrow new Error( 'Renderer: Backend has already been initialized.' );\n\n\t\t}\n\n\t\tif ( this._initPromise !== null ) {\n\n\t\t\treturn this._initPromise;\n\n\t\t}\n\n\t\tthis._initPromise = new Promise( async ( resolve, reject ) => {\n\n\t\t\tlet backend = this.backend;\n\n\t\t\ttry {\n\n\t\t\t\tawait backend.init( this );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( this._getFallback !== null ) {\n\n\t\t\t\t\t// try the fallback\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tthis.backend = backend = this._getFallback( error );\n\t\t\t\t\t\tawait backend.init( this );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\treject( error );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\treject( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._nodes = new Nodes( this, backend );\n\t\t\tthis._animation = new Animation( this._nodes, this.info );\n\t\t\tthis._attributes = new Attributes( backend );\n\t\t\tthis._background = new Background( this, this._nodes );\n\t\t\tthis._geometries = new Geometries( this._attributes, this.info );\n\t\t\tthis._textures = new Textures( this, backend, this.info );\n\t\t\tthis._pipelines = new Pipelines( backend, this._nodes );\n\t\t\tthis._bindings = new Bindings( backend, this._nodes, this._textures, this._attributes, this._pipelines, this.info );\n\t\t\tthis._objects = new RenderObjects( this, this._nodes, this._geometries, this._pipelines, this._bindings, this.info );\n\t\t\tthis._renderLists = new RenderLists( this.lighting );\n\t\t\tthis._bundles = new RenderBundles();\n\t\t\tthis._renderContexts = new RenderContexts();\n\n\t\t\t//\n\n\t\t\tthis._animation.start();\n\t\t\tthis._initialized = true;\n\n\t\t\tresolve( this );\n\n\t\t} );\n\n\t\treturn this._initPromise;\n\n\t}\n\n\t/**\n\t * The coordinate system of the renderer. The value of this property\n\t * depends on the selected backend. Either `THREE.WebGLCoordinateSystem` or\n\t * `THREE.WebGPUCoordinateSystem`.\n\t *\n\t * @readonly\n\t * @type {number}\n\t */\n\tget coordinateSystem() {\n\n\t\treturn this.backend.coordinateSystem;\n\n\t}\n\n\t/**\n\t * Compiles all materials in the given scene. This can be useful to avoid a\n\t * phenomenon which is called \"shader compilation stutter\", which occurs when\n\t * rendering an object with a new shader for the first time.\n\t *\n\t * If you want to add a 3D object to an existing scene, use the third optional\n\t * parameter for applying the target scene. Note that the (target) scene's lighting\n\t * and environment must be configured before calling this method.\n\t *\n\t * @async\n\t * @param {Object3D} scene - The scene or 3D object to precompile.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {?Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.\n\t * @return {Promise<Array|undefined>} A Promise that resolves when the compile has been finished.\n\t */\n\tasync compileAsync( scene, camera, targetScene = null ) {\n\n\t\tif ( this._isDeviceLost === true ) return;\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\t// preserve render tree\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\t\tconst previousRenderContext = this._currentRenderContext;\n\t\tconst previousRenderObjectFunction = this._currentRenderObjectFunction;\n\t\tconst previousCompilationPromises = this._compilationPromises;\n\n\t\t//\n\n\t\tconst sceneRef = ( scene.isScene === true ) ? scene : _scene;\n\n\t\tif ( targetScene === null ) targetScene = scene;\n\n\t\tconst renderTarget = this._renderTarget;\n\t\tconst renderContext = this._renderContexts.get( targetScene, camera, renderTarget );\n\t\tconst activeMipmapLevel = this._activeMipmapLevel;\n\n\t\tconst compilationPromises = [];\n\n\t\tthis._currentRenderContext = renderContext;\n\t\tthis._currentRenderObjectFunction = this.renderObject;\n\n\t\tthis._handleObjectFunction = this._createObjectPipeline;\n\n\t\tthis._compilationPromises = compilationPromises;\n\n\t\tnodeFrame.renderId ++;\n\n\t\t//\n\n\t\tnodeFrame.update();\n\n\t\t//\n\n\t\trenderContext.depth = this.depth;\n\t\trenderContext.stencil = this.stencil;\n\n\t\tif ( ! renderContext.clippingContext ) renderContext.clippingContext = new ClippingContext();\n\t\trenderContext.clippingContext.updateGlobal( sceneRef, camera );\n\n\t\t//\n\n\t\tsceneRef.onBeforeRender( this, scene, camera, renderTarget );\n\n\t\t//\n\n\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\trenderList.begin();\n\n\t\tthis._projectObject( scene, camera, 0, renderList, renderContext.clippingContext );\n\n\t\t// include lights from target scene\n\t\tif ( targetScene !== scene ) {\n\n\t\t\ttargetScene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\trenderList.pushLight( object );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\trenderList.finish();\n\n\t\t//\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget, activeMipmapLevel );\n\n\t\t\tconst renderTargetData = this._textures.get( renderTarget );\n\n\t\t\trenderContext.textures = renderTargetData.textures;\n\t\t\trenderContext.depthTexture = renderTargetData.depthTexture;\n\n\t\t} else {\n\n\t\t\trenderContext.textures = null;\n\t\t\trenderContext.depthTexture = null;\n\n\t\t}\n\n\t\t//\n\n\t\tthis._background.update( sceneRef, renderList, renderContext );\n\n\t\t// process render lists\n\n\t\tconst opaqueObjects = renderList.opaque;\n\t\tconst transparentObjects = renderList.transparent;\n\t\tconst transparentDoublePassObjects = renderList.transparentDoublePass;\n\t\tconst lightsNode = renderList.lightsNode;\n\n\t\tif ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );\n\t\tif ( this.transparent === true && transparentObjects.length > 0 ) this._renderTransparents( transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode );\n\n\t\t// restore render tree\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t\tthis._currentRenderContext = previousRenderContext;\n\t\tthis._currentRenderObjectFunction = previousRenderObjectFunction;\n\t\tthis._compilationPromises = previousCompilationPromises;\n\n\t\tthis._handleObjectFunction = this._renderObjectDirect;\n\n\t\t// wait for all promises setup by backends awaiting compilation/linking/pipeline creation to complete\n\n\t\tawait Promise.all( compilationPromises );\n\n\t}\n\n\t/**\n\t * Renders the scene in an async fashion.\n\t *\n\t * @async\n\t * @param {Object3D} scene - The scene or 3D object to render.\n\t * @param {Camera} camera - The camera.\n\t * @return {Promise} A Promise that resolves when the render has been finished.\n\t */\n\tasync renderAsync( scene, camera ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis._renderScene( scene, camera );\n\n\t}\n\n\t/**\n\t * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n\t * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when synchronization has been finished.\n\t */\n\tasync waitForGPU() {\n\n\t\tawait this.backend.waitForGPU();\n\n\t}\n\n\t/**\n\t * Enables or disables high precision for model-view and normal-view matrices.\n\t * When enabled, will use CPU 64-bit precision for higher precision instead of GPU 32-bit for higher performance.\n\t *\n\t * NOTE: 64-bit precision is not compatible with `InstancedMesh` and `SkinnedMesh`.\n\t *\n\t * @param {boolean} value - Whether to enable or disable high precision.\n\t * @type {boolean}\n\t */\n\tset highPrecision( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.overrideNodes.modelViewMatrix = highpModelViewMatrix;\n\t\t\tthis.overrideNodes.modelNormalViewMatrix = highpModelNormalViewMatrix;\n\n\t\t} else if ( this.highPrecision ) {\n\n\t\t\tthis.overrideNodes.modelViewMatrix = null;\n\t\t\tthis.overrideNodes.modelNormalViewMatrix = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns whether high precision is enabled or not.\n\t *\n\t * @return {boolean} Whether high precision is enabled or not.\n\t * @type {boolean}\n\t */\n\tget highPrecision() {\n\n\t\treturn this.overrideNodes.modelViewMatrix === highpModelViewMatrix && this.overrideNodes.modelNormalViewMatrix === highpModelNormalViewMatrix;\n\n\t}\n\n\t/**\n\t * Sets the given MRT configuration.\n\t *\n\t * @param {MRTNode} mrt - The MRT node to set.\n\t * @return {Renderer} A reference to this renderer.\n\t */\n\tsetMRT( mrt ) {\n\n\t\tthis._mrt = mrt;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the MRT configuration.\n\t *\n\t * @return {MRTNode} The MRT configuration.\n\t */\n\tgetMRT() {\n\n\t\treturn this._mrt;\n\n\t}\n\n\t/**\n\t * Returns the color buffer type.\n\t *\n\t * @return {number} The color buffer type.\n\t */\n\tgetColorBufferType() {\n\n\t\treturn this._colorBufferType;\n\n\t}\n\n\t/**\n\t * Default implementation of the device lost callback.\n\t *\n\t * @private\n\t * @param {Object} info - Information about the context lost.\n\t */\n\t_onDeviceLost( info ) {\n\n\t\tlet errorMessage = `THREE.WebGPURenderer: ${info.api} Device Lost:\\n\\nMessage: ${info.message}`;\n\n\t\tif ( info.reason ) {\n\n\t\t\terrorMessage += `\\nReason: ${info.reason}`;\n\n\t\t}\n\n\t\tconsole.error( errorMessage );\n\n\t\tthis._isDeviceLost = true;\n\n\t}\n\n\t/**\n\t * Renders the given render bundle.\n\t *\n\t * @private\n\t * @param {Object} bundle - Render bundle data.\n\t * @param {Scene} sceneRef - The scene the render bundle belongs to.\n\t * @param {LightsNode} lightsNode - The lights node.\n\t */\n\t_renderBundle( bundle, sceneRef, lightsNode ) {\n\n\t\tconst { bundleGroup, camera, renderList } = bundle;\n\n\t\tconst renderContext = this._currentRenderContext;\n\n\t\t//\n\n\t\tconst renderBundle = this._bundles.get( bundleGroup, camera );\n\t\tconst renderBundleData = this.backend.get( renderBundle );\n\n\t\tif ( renderBundleData.renderContexts === undefined ) renderBundleData.renderContexts = new Set();\n\n\t\t//\n\n\t\tconst needsUpdate = bundleGroup.version !== renderBundleData.version;\n\t\tconst renderBundleNeedsUpdate = renderBundleData.renderContexts.has( renderContext ) === false || needsUpdate;\n\n\t\trenderBundleData.renderContexts.add( renderContext );\n\n\t\tif ( renderBundleNeedsUpdate ) {\n\n\t\t\tthis.backend.beginBundle( renderContext );\n\n\t\t\tif ( renderBundleData.renderObjects === undefined || needsUpdate ) {\n\n\t\t\t\trenderBundleData.renderObjects = [];\n\n\t\t\t}\n\n\t\t\tthis._currentRenderBundle = renderBundle;\n\n\t\t\tconst {\n\t\t\t\ttransparentDoublePass: transparentDoublePassObjects,\n\t\t\t\ttransparent: transparentObjects,\n\t\t\t\topaque: opaqueObjects\n\t\t\t} = renderList;\n\n\t\t\tif ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );\n\t\t\tif ( this.transparent === true && transparentObjects.length > 0 ) this._renderTransparents( transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode );\n\n\t\t\tthis._currentRenderBundle = null;\n\n\t\t\t//\n\n\t\t\tthis.backend.finishBundle( renderContext, renderBundle );\n\n\t\t\trenderBundleData.version = bundleGroup.version;\n\n\t\t} else {\n\n\t\t\tconst { renderObjects } = renderBundleData;\n\n\t\t\tfor ( let i = 0, l = renderObjects.length; i < l; i ++ ) {\n\n\t\t\t\tconst renderObject = renderObjects[ i ];\n\n\t\t\t\tif ( this._nodes.needsRefresh( renderObject ) ) {\n\n\t\t\t\t\tthis._nodes.updateBefore( renderObject );\n\n\t\t\t\t\tthis._nodes.updateForRender( renderObject );\n\t\t\t\t\tthis._bindings.updateForRender( renderObject );\n\n\t\t\t\t\tthis._nodes.updateAfter( renderObject );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.backend.addBundle( renderContext, renderBundle );\n\n\t}\n\n\t/**\n\t * Renders the scene or 3D object with the given camera. This method can only be called\n\t * if the renderer has been initialized.\n\t *\n\t * The target of the method is the default framebuffer (meaning the canvas)\n\t * or alternatively a render target when specified via `setRenderTarget()`.\n\t *\n\t * @param {Object3D} scene - The scene or 3D object to render.\n\t * @param {Camera} camera - The camera to render the scene with.\n\t * @return {?Promise} A Promise that resolve when the scene has been rendered.\n\t * Only returned when the renderer has not been initialized.\n\t */\n\trender( scene, camera ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead.' );\n\n\t\t\treturn this.renderAsync( scene, camera );\n\n\t\t}\n\n\t\tthis._renderScene( scene, camera );\n\n\t}\n\n\t/**\n\t * Returns an internal render target which is used when computing the output tone mapping\n\t * and color space conversion. Unlike in `WebGLRenderer`, this is done in a separate render\n\t * pass and not inline to achieve more correct results.\n\t *\n\t * @private\n\t * @return {?RenderTarget} The render target. The method returns `null` if no output conversion should be applied.\n\t */\n\t_getFrameBufferTarget() {\n\n\t\tconst { currentToneMapping, currentColorSpace } = this;\n\n\t\tconst useToneMapping = currentToneMapping !== NoToneMapping;\n\t\tconst useColorSpace = currentColorSpace !== LinearSRGBColorSpace;\n\n\t\tif ( useToneMapping === false && useColorSpace === false ) return null;\n\n\t\tconst { width, height } = this.getDrawingBufferSize( _drawingBufferSize );\n\t\tconst { depth, stencil } = this;\n\n\t\tlet frameBufferTarget = this._frameBufferTarget;\n\n\t\tif ( frameBufferTarget === null ) {\n\n\t\t\tframeBufferTarget = new RenderTarget( width, height, {\n\t\t\t\tdepthBuffer: depth,\n\t\t\t\tstencilBuffer: stencil,\n\t\t\t\ttype: this._colorBufferType,\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tsamples: this.samples\n\t\t\t} );\n\n\t\t\tframeBufferTarget.isPostProcessingRenderTarget = true;\n\n\t\t\tthis._frameBufferTarget = frameBufferTarget;\n\n\t\t}\n\n\t\tconst outputRenderTarget = this.getOutputRenderTarget();\n\n\t\tframeBufferTarget.depthBuffer = depth;\n\t\tframeBufferTarget.stencilBuffer = stencil;\n\t\tframeBufferTarget.setSize( width, height, outputRenderTarget !== null ? outputRenderTarget.depth : 1 );\n\t\tframeBufferTarget.viewport.copy( this._viewport );\n\t\tframeBufferTarget.scissor.copy( this._scissor );\n\t\tframeBufferTarget.viewport.multiplyScalar( this._pixelRatio );\n\t\tframeBufferTarget.scissor.multiplyScalar( this._pixelRatio );\n\t\tframeBufferTarget.scissorTest = this._scissorTest;\n\t\tframeBufferTarget.multiview = outputRenderTarget !== null ? outputRenderTarget.multiview : false;\n\n\t\treturn frameBufferTarget;\n\n\t}\n\n\t/**\n\t * Renders the scene or 3D object with the given camera.\n\t *\n\t * @private\n\t * @param {Object3D} scene - The scene or 3D object to render.\n\t * @param {Camera} camera - The camera to render the scene with.\n\t * @param {boolean} [useFrameBufferTarget=true] - Whether to use a framebuffer target or not.\n\t * @return {RenderContext} The current render context.\n\t */\n\t_renderScene( scene, camera, useFrameBufferTarget = true ) {\n\n\t\tif ( this._isDeviceLost === true ) return;\n\n\t\tconst frameBufferTarget = useFrameBufferTarget ? this._getFrameBufferTarget() : null;\n\n\t\t// preserve render tree\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\t\tconst previousRenderContext = this._currentRenderContext;\n\t\tconst previousRenderObjectFunction = this._currentRenderObjectFunction;\n\n\t\t//\n\n\t\tconst sceneRef = ( scene.isScene === true ) ? scene : _scene;\n\n\t\tconst outputRenderTarget = this._renderTarget || this._outputRenderTarget;\n\n\t\tconst activeCubeFace = this._activeCubeFace;\n\t\tconst activeMipmapLevel = this._activeMipmapLevel;\n\n\t\t//\n\n\t\tlet renderTarget;\n\n\t\tif ( frameBufferTarget !== null ) {\n\n\t\t\trenderTarget = frameBufferTarget;\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t} else {\n\n\t\t\trenderTarget = outputRenderTarget;\n\n\t\t}\n\n\t\t//\n\n\t\tconst renderContext = this._renderContexts.get( scene, camera, renderTarget );\n\n\t\tthis._currentRenderContext = renderContext;\n\t\tthis._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;\n\n\t\t//\n\n\t\tthis.info.calls ++;\n\t\tthis.info.render.calls ++;\n\t\tthis.info.render.frameCalls ++;\n\n\t\tnodeFrame.renderId = this.info.calls;\n\n\t\t//\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\t\tconst xr = this.xr;\n\n\t\tif ( camera.coordinateSystem !== coordinateSystem && xr.isPresenting === false ) {\n\n\t\t\tcamera.coordinateSystem = coordinateSystem;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tfor ( const subCamera of camera.cameras ) {\n\n\t\t\t\t\tsubCamera.coordinateSystem = coordinateSystem;\n\t\t\t\t\tsubCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t}\n\n\t\t//\n\n\t\tlet viewport = this._viewport;\n\t\tlet scissor = this._scissor;\n\t\tlet pixelRatio = this._pixelRatio;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tviewport = renderTarget.viewport;\n\t\t\tscissor = renderTarget.scissor;\n\t\t\tpixelRatio = 1;\n\n\t\t}\n\n\t\tthis.getDrawingBufferSize( _drawingBufferSize );\n\n\t\t_screen.set( 0, 0, _drawingBufferSize.width, _drawingBufferSize.height );\n\n\t\tconst minDepth = ( viewport.minDepth === undefined ) ? 0 : viewport.minDepth;\n\t\tconst maxDepth = ( viewport.maxDepth === undefined ) ? 1 : viewport.maxDepth;\n\n\t\trenderContext.viewportValue.copy( viewport ).multiplyScalar( pixelRatio ).floor();\n\t\trenderContext.viewportValue.width >>= activeMipmapLevel;\n\t\trenderContext.viewportValue.height >>= activeMipmapLevel;\n\t\trenderContext.viewportValue.minDepth = minDepth;\n\t\trenderContext.viewportValue.maxDepth = maxDepth;\n\t\trenderContext.viewport = renderContext.viewportValue.equals( _screen ) === false;\n\n\t\trenderContext.scissorValue.copy( scissor ).multiplyScalar( pixelRatio ).floor();\n\t\trenderContext.scissor = this._scissorTest && renderContext.scissorValue.equals( _screen ) === false;\n\t\trenderContext.scissorValue.width >>= activeMipmapLevel;\n\t\trenderContext.scissorValue.height >>= activeMipmapLevel;\n\n\t\tif ( ! renderContext.clippingContext ) renderContext.clippingContext = new ClippingContext();\n\t\trenderContext.clippingContext.updateGlobal( sceneRef, camera );\n\n\t\t//\n\n\t\tsceneRef.onBeforeRender( this, scene, camera, renderTarget );\n\n\t\t//\n\n\t\tconst frustum = camera.isArrayCamera ? _frustumArray : _frustum;\n\n\t\tif ( ! camera.isArrayCamera ) {\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tfrustum.setFromProjectionMatrix( _projScreenMatrix, coordinateSystem );\n\n\t\t}\n\n\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\trenderList.begin();\n\n\t\tthis._projectObject( scene, camera, 0, renderList, renderContext.clippingContext );\n\n\t\trenderList.finish();\n\n\t\tif ( this.sortObjects === true ) {\n\n\t\t\trenderList.sort( this._opaqueSort, this._transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget, activeMipmapLevel );\n\n\t\t\tconst renderTargetData = this._textures.get( renderTarget );\n\n\t\t\trenderContext.textures = renderTargetData.textures;\n\t\t\trenderContext.depthTexture = renderTargetData.depthTexture;\n\t\t\trenderContext.width = renderTargetData.width;\n\t\t\trenderContext.height = renderTargetData.height;\n\t\t\trenderContext.renderTarget = renderTarget;\n\t\t\trenderContext.depth = renderTarget.depthBuffer;\n\t\t\trenderContext.stencil = renderTarget.stencilBuffer;\n\n\t\t} else {\n\n\t\t\trenderContext.textures = null;\n\t\t\trenderContext.depthTexture = null;\n\t\t\trenderContext.width = this.domElement.width;\n\t\t\trenderContext.height = this.domElement.height;\n\t\t\trenderContext.depth = this.depth;\n\t\t\trenderContext.stencil = this.stencil;\n\n\t\t}\n\n\t\trenderContext.width >>= activeMipmapLevel;\n\t\trenderContext.height >>= activeMipmapLevel;\n\t\trenderContext.activeCubeFace = activeCubeFace;\n\t\trenderContext.activeMipmapLevel = activeMipmapLevel;\n\t\trenderContext.occlusionQueryCount = renderList.occlusionQueryCount;\n\n\t\t//\n\n\t\tthis._background.update( sceneRef, renderList, renderContext );\n\n\t\t//\n\n\t\trenderContext.camera = camera;\n\t\tthis.backend.beginRender( renderContext );\n\n\t\t// process render lists\n\n\t\tconst {\n\t\t\tbundles,\n\t\t\tlightsNode,\n\t\t\ttransparentDoublePass: transparentDoublePassObjects,\n\t\t\ttransparent: transparentObjects,\n\t\t\topaque: opaqueObjects\n\t\t} = renderList;\n\n\t\tif ( bundles.length > 0 ) this._renderBundles( bundles, sceneRef, lightsNode );\n\t\tif ( this.opaque === true && opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );\n\t\tif ( this.transparent === true && transparentObjects.length > 0 ) this._renderTransparents( transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode );\n\n\t\t// finish render pass\n\n\t\tthis.backend.finishRender( renderContext );\n\n\t\t// restore render tree\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t\tthis._currentRenderContext = previousRenderContext;\n\t\tthis._currentRenderObjectFunction = previousRenderObjectFunction;\n\n\t\t//\n\n\t\tif ( frameBufferTarget !== null ) {\n\n\t\t\tthis.setRenderTarget( outputRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t\tthis._renderOutput( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tsceneRef.onAfterRender( this, scene, camera, renderTarget );\n\n\t\t//\n\n\t\treturn renderContext;\n\n\t}\n\n\t/**\n\t * The output pass performs tone mapping and color space conversion.\n\t *\n\t * @private\n\t * @param {RenderTarget} renderTarget - The current render target.\n\t */\n\t_renderOutput( renderTarget ) {\n\n\t\tconst quad = this._quad;\n\n\t\tif ( this._nodes.hasOutputChange( renderTarget.texture ) ) {\n\n\t\t\tquad.material.fragmentNode = this._nodes.getOutputNode( renderTarget.texture );\n\t\t\tquad.material.needsUpdate = true;\n\n\t\t}\n\n\t\t// a clear operation clears the intermediate renderTarget texture, but should not update the screen canvas.\n\n\t\tconst currentAutoClear = this.autoClear;\n\t\tconst currentXR = this.xr.enabled;\n\n\t\tthis.autoClear = false;\n\t\tthis.xr.enabled = false;\n\n\t\tthis._renderScene( quad, quad.camera, false );\n\n\t\tthis.autoClear = currentAutoClear;\n\t\tthis.xr.enabled = currentXR;\n\n\n\t}\n\n\t/**\n\t * Returns the maximum available anisotropy for texture filtering.\n\t *\n\t * @return {number} The maximum available anisotropy.\n\t */\n\tgetMaxAnisotropy() {\n\n\t\treturn this.backend.getMaxAnisotropy();\n\n\t}\n\n\t/**\n\t * Returns the active cube face.\n\t *\n\t * @return {number} The active cube face.\n\t */\n\tgetActiveCubeFace() {\n\n\t\treturn this._activeCubeFace;\n\n\t}\n\n\t/**\n\t * Returns the active mipmap level.\n\t *\n\t * @return {number} The active mipmap level.\n\t */\n\tgetActiveMipmapLevel() {\n\n\t\treturn this._activeMipmapLevel;\n\n\t}\n\n\t/**\n\t * Applications are advised to always define the animation loop\n\t * with this method and not manually with `requestAnimationFrame()`\n\t * for best compatibility.\n\t *\n\t * @async\n\t * @param {?Function} callback - The application's animation loop.\n\t * @return {Promise} A Promise that resolves when the set has been executed.\n\t */\n\tasync setAnimationLoop( callback ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis._animation.setAnimationLoop( callback );\n\n\t}\n\n\t/**\n\t * Can be used to transfer buffer data from a storage buffer attribute\n\t * from the GPU to the CPU in context of compute shaders.\n\t *\n\t * @async\n\t * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n\t * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n\t */\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.backend.getArrayBufferAsync( attribute );\n\n\t}\n\n\t/**\n\t * Returns the rendering context.\n\t *\n\t * @return {GPUCanvasContext|WebGL2RenderingContext} The rendering context.\n\t */\n\tgetContext() {\n\n\t\treturn this.backend.getContext();\n\n\t}\n\n\t/**\n\t * Returns the pixel ratio.\n\t *\n\t * @return {number} The pixel ratio.\n\t */\n\tgetPixelRatio() {\n\n\t\treturn this._pixelRatio;\n\n\t}\n\n\t/**\n\t * Returns the drawing buffer size in physical pixels. This method honors the pixel ratio.\n\t *\n\t * @param {Vector2} target - The method writes the result in this target object.\n\t * @return {Vector2} The drawing buffer size.\n\t */\n\tgetDrawingBufferSize( target ) {\n\n\t\treturn target.set( this._width * this._pixelRatio, this._height * this._pixelRatio ).floor();\n\n\t}\n\n\t/**\n\t * Returns the renderer's size in logical pixels. This method does not honor the pixel ratio.\n\t *\n\t * @param {Vector2} target - The method writes the result in this target object.\n\t * @return {Vector2} The renderer's size in logical pixels.\n\t */\n\tgetSize( target ) {\n\n\t\treturn target.set( this._width, this._height );\n\n\t}\n\n\t/**\n\t * Sets the given pixel ratio and resizes the canvas if necessary.\n\t *\n\t * @param {number} [value=1] - The pixel ratio.\n\t */\n\tsetPixelRatio( value = 1 ) {\n\n\t\tif ( this._pixelRatio === value ) return;\n\n\t\tthis._pixelRatio = value;\n\n\t\tthis.setSize( this._width, this._height, false );\n\n\t}\n\n\t/**\n\t * This method allows to define the drawing buffer size by specifying\n\t * width, height and pixel ratio all at once. The size of the drawing\n\t * buffer is computed with this formula:\n\t * ```js\n\t * size.x = width * pixelRatio;\n\t * size.y = height * pixelRatio;\n\t * ```\n\t *\n\t * @param {number} width - The width in logical pixels.\n\t * @param {number} height - The height in logical pixels.\n\t * @param {number} pixelRatio - The pixel ratio.\n\t */\n\tsetDrawingBufferSize( width, height, pixelRatio ) {\n\n\t\t// Renderer can't be resized while presenting in XR.\n\t\tif ( this.xr && this.xr.isPresenting ) return;\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.domElement.width = Math.floor( width * pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t\tif ( this._initialized ) this.backend.updateSize();\n\n\t}\n\n\t/**\n\t * Sets the size of the renderer.\n\t *\n\t * @param {number} width - The width in logical pixels.\n\t * @param {number} height - The height in logical pixels.\n\t * @param {boolean} [updateStyle=true] - Whether to update the `style` attribute of the canvas or not.\n\t */\n\tsetSize( width, height, updateStyle = true ) {\n\n\t\t// Renderer can't be resized while presenting in XR.\n\t\tif ( this.xr && this.xr.isPresenting ) return;\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis.domElement.width = Math.floor( width * this._pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * this._pixelRatio );\n\n\t\tif ( updateStyle === true ) {\n\n\t\t\tthis.domElement.style.width = width + 'px';\n\t\t\tthis.domElement.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t\tif ( this._initialized ) this.backend.updateSize();\n\n\t}\n\n\t/**\n\t * Defines a manual sort function for the opaque render list.\n\t * Pass `null` to use the default sort.\n\t *\n\t * @param {Function} method - The sort function.\n\t */\n\tsetOpaqueSort( method ) {\n\n\t\tthis._opaqueSort = method;\n\n\t}\n\n\t/**\n\t * Defines a manual sort function for the transparent render list.\n\t * Pass `null` to use the default sort.\n\t *\n\t * @param {Function} method - The sort function.\n\t */\n\tsetTransparentSort( method ) {\n\n\t\tthis._transparentSort = method;\n\n\t}\n\n\t/**\n\t * Returns the scissor rectangle.\n\t *\n\t * @param {Vector4} target - The method writes the result in this target object.\n\t * @return {Vector4} The scissor rectangle.\n\t */\n\tgetScissor( target ) {\n\n\t\tconst scissor = this._scissor;\n\n\t\ttarget.x = scissor.x;\n\t\ttarget.y = scissor.y;\n\t\ttarget.width = scissor.width;\n\t\ttarget.height = scissor.height;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Defines the scissor rectangle.\n\t *\n\t * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the box in logical pixel unit.\n\t * Instead of passing four arguments, the method also works with a single four-dimensional vector.\n\t * @param {number} y - The vertical coordinate for the lower left corner of the box in logical pixel unit.\n\t * @param {number} width - The width of the scissor box in logical pixel unit.\n\t * @param {number} height - The height of the scissor box in logical pixel unit.\n\t */\n\tsetScissor( x, y, width, height ) {\n\n\t\tconst scissor = this._scissor;\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\tscissor.copy( x );\n\n\t\t} else {\n\n\t\t\tscissor.set( x, y, width, height );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the scissor test value.\n\t *\n\t * @return {boolean} Whether the scissor test should be enabled or not.\n\t */\n\tgetScissorTest() {\n\n\t\treturn this._scissorTest;\n\n\t}\n\n\t/**\n\t * Defines the scissor test.\n\t *\n\t * @param {boolean} boolean - Whether the scissor test should be enabled or not.\n\t */\n\tsetScissorTest( boolean ) {\n\n\t\tthis._scissorTest = boolean;\n\n\t\tthis.backend.setScissorTest( boolean );\n\n\t}\n\n\t/**\n\t * Returns the viewport definition.\n\t *\n\t * @param {Vector4} target - The method writes the result in this target object.\n\t * @return {Vector4} The viewport definition.\n\t */\n\tgetViewport( target ) {\n\n\t\treturn target.copy( this._viewport );\n\n\t}\n\n\t/**\n\t * Defines the viewport.\n\t *\n\t * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.\n\t * @param {number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.\n\t * @param {number} width - The width of the viewport in logical pixel unit.\n\t * @param {number} height - The height of the viewport in logical pixel unit.\n\t * @param {number} minDepth - The minimum depth value of the viewport. WebGPU only.\n\t * @param {number} maxDepth - The maximum depth value of the viewport. WebGPU only.\n\t */\n\tsetViewport( x, y, width, height, minDepth = 0, maxDepth = 1 ) {\n\n\t\tconst viewport = this._viewport;\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\tviewport.copy( x );\n\n\t\t} else {\n\n\t\t\tviewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tviewport.minDepth = minDepth;\n\t\tviewport.maxDepth = maxDepth;\n\n\t}\n\n\t/**\n\t * Returns the clear color.\n\t *\n\t * @param {Color} target - The method writes the result in this target object.\n\t * @return {Color} The clear color.\n\t */\n\tgetClearColor( target ) {\n\n\t\treturn target.copy( this._clearColor );\n\n\t}\n\n\t/**\n\t * Defines the clear color and optionally the clear alpha.\n\t *\n\t * @param {Color} color - The clear color.\n\t * @param {number} [alpha=1] - The clear alpha.\n\t */\n\tsetClearColor( color, alpha = 1 ) {\n\n\t\tthis._clearColor.set( color );\n\t\tthis._clearColor.a = alpha;\n\n\t}\n\n\t/**\n\t * Returns the clear alpha.\n\t *\n\t * @return {number} The clear alpha.\n\t */\n\tgetClearAlpha() {\n\n\t\treturn this._clearColor.a;\n\n\t}\n\n\t/**\n\t * Defines the clear alpha.\n\t *\n\t * @param {number} alpha - The clear alpha.\n\t */\n\tsetClearAlpha( alpha ) {\n\n\t\tthis._clearColor.a = alpha;\n\n\t}\n\n\t/**\n\t * Returns the clear depth.\n\t *\n\t * @return {number} The clear depth.\n\t */\n\tgetClearDepth() {\n\n\t\treturn this._clearDepth;\n\n\t}\n\n\t/**\n\t * Defines the clear depth.\n\t *\n\t * @param {number} depth - The clear depth.\n\t */\n\tsetClearDepth( depth ) {\n\n\t\tthis._clearDepth = depth;\n\n\t}\n\n\t/**\n\t * Returns the clear stencil.\n\t *\n\t * @return {number} The clear stencil.\n\t */\n\tgetClearStencil() {\n\n\t\treturn this._clearStencil;\n\n\t}\n\n\t/**\n\t * Defines the clear stencil.\n\t *\n\t * @param {number} stencil - The clear stencil.\n\t */\n\tsetClearStencil( stencil ) {\n\n\t\tthis._clearStencil = stencil;\n\n\t}\n\n\t/**\n\t * This method performs an occlusion query for the given 3D object.\n\t * It returns `true` if the given 3D object is fully occluded by other\n\t * 3D objects in the scene.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object is fully occluded or not.\n\t */\n\tisOccluded( object ) {\n\n\t\tconst renderContext = this._currentRenderContext;\n\n\t\treturn renderContext && this.backend.isOccluded( renderContext, object );\n\n\t}\n\n\t/**\n\t * Performs a manual clear operation. This method ignores `autoClear` properties.\n\t *\n\t * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n\t * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n\t * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t * Only returned when the renderer has not been initialized.\n\t */\n\tclear( color = true, depth = true, stencil = true ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead.' );\n\n\t\t\treturn this.clearAsync( color, depth, stencil );\n\n\t\t}\n\n\t\tconst renderTarget = this._renderTarget || this._getFrameBufferTarget();\n\n\t\tlet renderContext = null;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget );\n\n\t\t\tconst renderTargetData = this._textures.get( renderTarget );\n\n\t\t\trenderContext = this._renderContexts.getForClear( renderTarget );\n\t\t\trenderContext.textures = renderTargetData.textures;\n\t\t\trenderContext.depthTexture = renderTargetData.depthTexture;\n\t\t\trenderContext.width = renderTargetData.width;\n\t\t\trenderContext.height = renderTargetData.height;\n\t\t\trenderContext.renderTarget = renderTarget;\n\t\t\trenderContext.depth = renderTarget.depthBuffer;\n\t\t\trenderContext.stencil = renderTarget.stencilBuffer;\n\t\t\t// #30329\n\t\t\trenderContext.clearColorValue = this.backend.getClearColor();\n\t\t\trenderContext.activeCubeFace = this.getActiveCubeFace();\n\t\t\trenderContext.activeMipmapLevel = this.getActiveMipmapLevel();\n\n\t\t}\n\n\t\tthis.backend.clear( color, depth, stencil, renderContext );\n\n\t\tif ( renderTarget !== null && this._renderTarget === null ) {\n\n\t\t\tthis._renderOutput( renderTarget );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Performs a manual clear operation of the color buffer. This method ignores `autoClear` properties.\n\t *\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t * Only returned when the renderer has not been initialized.\n\t */\n\tclearColor() {\n\n\t\treturn this.clear( true, false, false );\n\n\t}\n\n\t/**\n\t * Performs a manual clear operation of the depth buffer. This method ignores `autoClear` properties.\n\t *\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t * Only returned when the renderer has not been initialized.\n\t */\n\tclearDepth() {\n\n\t\treturn this.clear( false, true, false );\n\n\t}\n\n\t/**\n\t * Performs a manual clear operation of the stencil buffer. This method ignores `autoClear` properties.\n\t *\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t * Only returned when the renderer has not been initialized.\n\t */\n\tclearStencil() {\n\n\t\treturn this.clear( false, false, true );\n\n\t}\n\n\t/**\n\t * Async version of {@link Renderer#clear}.\n\t *\n\t * @async\n\t * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n\t * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n\t * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t */\n\tasync clearAsync( color = true, depth = true, stencil = true ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis.clear( color, depth, stencil );\n\n\t}\n\n\t/**\n\t * Async version of {@link Renderer#clearColor}.\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t */\n\tasync clearColorAsync() {\n\n\t\tthis.clearAsync( true, false, false );\n\n\t}\n\n\t/**\n\t * Async version of {@link Renderer#clearDepth}.\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t */\n\tasync clearDepthAsync() {\n\n\t\tthis.clearAsync( false, true, false );\n\n\t}\n\n\t/**\n\t * Async version of {@link Renderer#clearStencil}.\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when the clear operation has been executed.\n\t */\n\tasync clearStencilAsync() {\n\n\t\tthis.clearAsync( false, false, true );\n\n\t}\n\n\t/**\n\t * The current output tone mapping of the renderer. When a render target is set,\n\t * the output tone mapping is always `NoToneMapping`.\n\t *\n\t * @type {number}\n\t */\n\tget currentToneMapping() {\n\n\t\treturn this.isOutputTarget ? this.toneMapping : NoToneMapping;\n\n\t}\n\n\t/**\n\t * The current output color space of the renderer. When a render target is set,\n\t * the output color space is always `LinearSRGBColorSpace`.\n\t *\n\t * @type {string}\n\t */\n\tget currentColorSpace() {\n\n\t\treturn this.isOutputTarget ? this.outputColorSpace : LinearSRGBColorSpace;\n\n\t}\n\n\t/**\n\t * Returns `true` if the rendering settings are set to screen output.\n\t *\n\t * @returns {boolean} True if the current render target is the same of output render target or `null`, otherwise false.\n\t */\n\tget isOutputTarget() {\n\n\t\treturn this._renderTarget === this._outputRenderTarget || this._renderTarget === null;\n\n\t}\n\n\t/**\n\t * Frees all internal resources of the renderer. Call this method if the renderer\n\t * is no longer in use by your app.\n\t */\n\tdispose() {\n\n\t\tthis.info.dispose();\n\t\tthis.backend.dispose();\n\n\t\tthis._animation.dispose();\n\t\tthis._objects.dispose();\n\t\tthis._pipelines.dispose();\n\t\tthis._nodes.dispose();\n\t\tthis._bindings.dispose();\n\t\tthis._renderLists.dispose();\n\t\tthis._renderContexts.dispose();\n\t\tthis._textures.dispose();\n\n\t\tif ( this._frameBufferTarget !== null ) this._frameBufferTarget.dispose();\n\n\t\tObject.values( this.backend.timestampQueryPool ).forEach( queryPool => {\n\n\t\t\tif ( queryPool !== null ) queryPool.dispose();\n\n\t\t} );\n\n\t\tthis.setRenderTarget( null );\n\t\tthis.setAnimationLoop( null );\n\n\t}\n\n\t/**\n\t * Sets the given render target. Calling this method means the renderer does not\n\t * target the default framebuffer (meaning the canvas) anymore but a custom framebuffer.\n\t * Use `null` as the first argument to reset the state.\n\t *\n\t * @param {?RenderTarget} renderTarget - The render target to set.\n\t * @param {number} [activeCubeFace=0] - The active cube face.\n\t * @param {number} [activeMipmapLevel=0] - The active mipmap level.\n\t */\n\tsetRenderTarget( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\tthis._renderTarget = renderTarget;\n\t\tthis._activeCubeFace = activeCubeFace;\n\t\tthis._activeMipmapLevel = activeMipmapLevel;\n\n\t}\n\n\t/**\n\t * Returns the current render target.\n\t *\n\t * @return {?RenderTarget} The render target. Returns `null` if no render target is set.\n\t */\n\tgetRenderTarget() {\n\n\t\treturn this._renderTarget;\n\n\t}\n\n\t/**\n\t * Sets the output render target for the renderer.\n\t *\n\t * @param {Object} renderTarget - The render target to set as the output target.\n\t */\n\tsetOutputRenderTarget( renderTarget ) {\n\n\t\tthis._outputRenderTarget = renderTarget;\n\n\t}\n\n\t/**\n\t * Returns the current output target.\n\t *\n\t * @return {?RenderTarget} The current output render target. Returns `null` if no output target is set.\n\t */\n\tgetOutputRenderTarget() {\n\n\t\treturn this._outputRenderTarget;\n\n\t}\n\n\t/**\n\t * Callback for {@link Renderer#setRenderObjectFunction}.\n\t *\n\t * @callback renderObjectFunction\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the object should be rendered with.\n\t * @param {BufferGeometry} geometry - The object's geometry.\n\t * @param {Material} material - The object's material.\n\t * @param {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n\t * @param {LightsNode} lightsNode - The current lights node.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t * @param {?string} [passId=null] - An optional ID for identifying the pass.\n\t */\n\n\t/**\n\t * Sets the given render object function. Calling this method overwrites the default implementation\n\t * which is {@link Renderer#renderObject}. Defining a custom function can be useful\n\t * if you want to modify the way objects are rendered. For example you can define things like \"every\n\t * object that has material of a certain type should perform a pre-pass with a special overwrite material\".\n\t * The custom function must always call `renderObject()` in its implementation.\n\t *\n\t * Use `null` as the first argument to reset the state.\n\t *\n\t * @param {?renderObjectFunction} renderObjectFunction - The render object function.\n\t */\n\tsetRenderObjectFunction( renderObjectFunction ) {\n\n\t\tthis._renderObjectFunction = renderObjectFunction;\n\n\t}\n\n\t/**\n\t * Returns the current render object function.\n\t *\n\t * @return {?Function} The current render object function. Returns `null` if no function is set.\n\t */\n\tgetRenderObjectFunction() {\n\n\t\treturn this._renderObjectFunction;\n\n\t}\n\n\t/**\n\t * Execute a single or an array of compute nodes. This method can only be called\n\t * if the renderer has been initialized.\n\t *\n\t * @param {Node|Array<Node>} computeNodes - The compute node(s).\n\t * @return {Promise|undefined} A Promise that resolve when the compute has finished. Only returned when the renderer has not been initialized.\n\t */\n\tcompute( computeNodes ) {\n\n\t\tif ( this._isDeviceLost === true ) return;\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead.' );\n\n\t\t\treturn this.computeAsync( computeNodes );\n\n\t\t}\n\n\t\t//\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\n\t\t//\n\n\t\tthis.info.calls ++;\n\t\tthis.info.compute.calls ++;\n\t\tthis.info.compute.frameCalls ++;\n\n\t\tnodeFrame.renderId = this.info.calls;\n\n\t\t//\n\n\t\tconst backend = this.backend;\n\t\tconst pipelines = this._pipelines;\n\t\tconst bindings = this._bindings;\n\t\tconst nodes = this._nodes;\n\n\t\tconst computeList = Array.isArray( computeNodes ) ? computeNodes : [ computeNodes ];\n\n\t\tif ( computeList[ 0 ] === undefined || computeList[ 0 ].isComputeNode !== true ) {\n\n\t\t\tthrow new Error( 'THREE.Renderer: .compute() expects a ComputeNode.' );\n\n\t\t}\n\n\t\tbackend.beginCompute( computeNodes );\n\n\t\tfor ( const computeNode of computeList ) {\n\n\t\t\t// onInit\n\n\t\t\tif ( pipelines.has( computeNode ) === false ) {\n\n\t\t\t\tconst dispose = () => {\n\n\t\t\t\t\tcomputeNode.removeEventListener( 'dispose', dispose );\n\n\t\t\t\t\tpipelines.delete( computeNode );\n\t\t\t\t\tbindings.delete( computeNode );\n\t\t\t\t\tnodes.delete( computeNode );\n\n\t\t\t\t};\n\n\t\t\t\tcomputeNode.addEventListener( 'dispose', dispose );\n\n\t\t\t\t//\n\n\t\t\t\tconst onInitFn = computeNode.onInitFunction;\n\n\t\t\t\tif ( onInitFn !== null ) {\n\n\t\t\t\t\tonInitFn.call( computeNode, { renderer: this } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnodes.updateForCompute( computeNode );\n\t\t\tbindings.updateForCompute( computeNode );\n\n\t\t\tconst computeBindings = bindings.getForCompute( computeNode );\n\t\t\tconst computePipeline = pipelines.getForCompute( computeNode, computeBindings );\n\n\t\t\tbackend.compute( computeNodes, computeNode, computeBindings, computePipeline );\n\n\t\t}\n\n\t\tbackend.finishCompute( computeNodes );\n\n\t\t//\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t}\n\n\t/**\n\t * Execute a single or an array of compute nodes.\n\t *\n\t * @async\n\t * @param {Node|Array<Node>} computeNodes - The compute node(s).\n\t * @return {Promise} A Promise that resolve when the compute has finished.\n\t */\n\tasync computeAsync( computeNodes ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis.compute( computeNodes );\n\n\t}\n\n\t/**\n\t * Checks if the given feature is supported by the selected backend.\n\t *\n\t * @async\n\t * @param {string} name - The feature's name.\n\t * @return {Promise<boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.\n\t */\n\tasync hasFeatureAsync( name ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\treturn this.backend.hasFeature( name );\n\n\t}\n\n\tasync resolveTimestampsAsync( type = 'render' ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\treturn this.backend.resolveTimestampsAsync( type );\n\n\t}\n\n\t/**\n\t * Checks if the given feature is supported by the selected backend. If the\n\t * renderer has not been initialized, this method always returns `false`.\n\t *\n\t * @param {string} name - The feature's name.\n\t * @return {boolean} Whether the feature is supported or not.\n\t */\n\thasFeature( name ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead.' );\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.backend.hasFeature( name );\n\n\t}\n\n\t/**\n\t * Returns `true` when the renderer has been initialized.\n\t *\n\t * @return {boolean} Whether the renderer has been initialized or not.\n\t */\n\thasInitialized() {\n\n\t\treturn this._initialized;\n\n\t}\n\n\t/**\n\t * Initializes the given textures. Useful for preloading a texture rather than waiting until first render\n\t * (which can cause noticeable lags due to decode and GPU upload overhead).\n\t *\n\t * @async\n\t * @param {Texture} texture - The texture.\n\t * @return {Promise} A Promise that resolves when the texture has been initialized.\n\t */\n\tasync initTextureAsync( texture ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis._textures.updateTexture( texture );\n\n\t}\n\n\t/**\n\t * Initializes the given texture. Useful for preloading a texture rather than waiting until first render\n\t * (which can cause noticeable lags due to decode and GPU upload overhead).\n\t *\n\t * This method can only be used if the renderer has been initialized.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tinitTexture( texture ) {\n\n\t\tif ( this._initialized === false ) {\n\n\t\t\tconsole.warn( 'THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead.' );\n\n\t\t}\n\n\t\tthis._textures.updateTexture( texture );\n\n\t}\n\n\t/**\n\t * Copies the current bound framebuffer into the given texture.\n\t *\n\t * @param {FramebufferTexture} framebufferTexture - The texture.\n\t * @param {?Vector2|Vector4} [rectangle=null] - A two or four dimensional vector that defines the rectangular portion of the framebuffer that should be copied.\n\t */\n\tcopyFramebufferToTexture( framebufferTexture, rectangle = null ) {\n\n\t\tif ( rectangle !== null ) {\n\n\t\t\tif ( rectangle.isVector2 ) {\n\n\t\t\t\trectangle = _vector4.set( rectangle.x, rectangle.y, framebufferTexture.image.width, framebufferTexture.image.height ).floor();\n\n\t\t\t} else if ( rectangle.isVector4 ) {\n\n\t\t\t\trectangle = _vector4.copy( rectangle ).floor();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.' );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trectangle = _vector4.set( 0, 0, framebufferTexture.image.width, framebufferTexture.image.height );\n\n\t\t}\n\n\t\t//\n\n\t\tlet renderContext = this._currentRenderContext;\n\t\tlet renderTarget;\n\n\t\tif ( renderContext !== null ) {\n\n\t\t\trenderTarget = renderContext.renderTarget;\n\n\t\t} else {\n\n\t\t\trenderTarget = this._renderTarget || this._getFrameBufferTarget();\n\n\t\t\tif ( renderTarget !== null ) {\n\n\t\t\t\tthis._textures.updateRenderTarget( renderTarget );\n\n\t\t\t\trenderContext = this._textures.get( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis._textures.updateTexture( framebufferTexture, { renderTarget } );\n\n\t\tthis.backend.copyFramebufferToTexture( framebufferTexture, renderContext, rectangle );\n\n\t}\n\n\t/**\n\t * Copies data of the given source texture into a destination texture.\n\t *\n\t * @param {Texture} srcTexture - The source texture.\n\t * @param {Texture} dstTexture - The destination texture.\n\t * @param {Box2|Box3} [srcRegion=null] - A bounding box which describes the source region. Can be two or three-dimensional.\n\t * @param {Vector2|Vector3} [dstPosition=null] - A vector that represents the origin of the destination region. Can be two or three-dimensional.\n\t * @param {number} [srcLevel=0] - The source mip level to copy from.\n\t * @param {number} [dstLevel=0] - The destination mip level to copy to.\n\t */\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0 ) {\n\n\t\tthis._textures.updateTexture( srcTexture );\n\t\tthis._textures.updateTexture( dstTexture );\n\n\t\tthis.backend.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, srcLevel, dstLevel );\n\n\t}\n\n\t/**\n\t * Reads pixel data from the given render target.\n\t *\n\t * @async\n\t * @param {RenderTarget} renderTarget - The render target to read from.\n\t * @param {number} x - The `x` coordinate of the copy region's origin.\n\t * @param {number} y - The `y` coordinate of the copy region's origin.\n\t * @param {number} width - The width of the copy region.\n\t * @param {number} height - The height of the copy region.\n\t * @param {number} [textureIndex=0] - The texture index of a MRT render target.\n\t * @param {number} [faceIndex=0] - The active cube face index.\n\t * @return {Promise<TypedArray>} A Promise that resolves when the read has been finished. The resolve provides the read data as a typed array.\n\t */\n\tasync readRenderTargetPixelsAsync( renderTarget, x, y, width, height, textureIndex = 0, faceIndex = 0 ) {\n\n\t\treturn this.backend.copyTextureToBuffer( renderTarget.textures[ textureIndex ], x, y, width, height, faceIndex );\n\n\t}\n\n\t/**\n\t * Analyzes the given 3D object's hierarchy and builds render lists from the\n\t * processed hierarchy.\n\t *\n\t * @param {Object3D} object - The 3D object to process (usually a scene).\n\t * @param {Camera} camera - The camera the object is rendered with.\n\t * @param {number} groupOrder - The group order is derived from the `renderOrder` of groups and is used to group 3D objects within groups.\n\t * @param {RenderList} renderList - The current render list.\n\t * @param {ClippingContext} clippingContext - The current clipping context.\n\t */\n\t_projectObject( object, camera, groupOrder, renderList, clippingContext ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\tif ( object.isClippingGroup && object.enabled ) clippingContext = clippingContext.getGroupContext( object );\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\trenderList.pushLight( object );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tconst frustum = camera.isArrayCamera ? _frustumArray : _frustum;\n\n\t\t\t\tif ( ! object.frustumCulled || frustum.intersectsSprite( object, camera ) ) {\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\t_vector4.setFromMatrixPosition( object.matrixWorld ).applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { geometry, material } = object;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector4.z, null, clippingContext );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\tconsole.error( 'THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.' );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tconst frustum = camera.isArrayCamera ? _frustumArray : _frustum;\n\n\t\t\t\tif ( ! object.frustumCulled || frustum.intersectsObject( object, camera ) ) {\n\n\t\t\t\t\tconst { geometry, material } = object;\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\t\t\t_vector4\n\t\t\t\t\t\t\t.copy( geometry.boundingSphere.center )\n\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\trenderList.push( object, geometry, groupMaterial, groupOrder, _vector4.z, group, clippingContext );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector4.z, null, clippingContext );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isBundleGroup === true && this.backend.beginBundle !== undefined ) {\n\n\t\t\tconst baseRenderList = renderList;\n\n\t\t\t// replace render list\n\t\t\trenderList = this._renderLists.get( object, camera );\n\n\t\t\trenderList.begin();\n\n\t\t\tbaseRenderList.pushBundle( {\n\t\t\t\tbundleGroup: object,\n\t\t\t\tcamera,\n\t\t\t\trenderList,\n\t\t\t} );\n\n\t\t\trenderList.finish();\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis._projectObject( children[ i ], camera, groupOrder, renderList, clippingContext );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Renders the given render bundles.\n\t *\n\t * @private\n\t * @param {Array<Object>} bundles - Array with render bundle data.\n\t * @param {Scene} sceneRef - The scene the render bundles belong to.\n\t * @param {LightsNode} lightsNode - The current lights node.\n\t */\n\t_renderBundles( bundles, sceneRef, lightsNode ) {\n\n\t\tfor ( const bundle of bundles ) {\n\n\t\t\tthis._renderBundle( bundle, sceneRef, lightsNode );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Renders the transparent objects from the given render lists.\n\t *\n\t * @private\n\t * @param {Array<Object>} renderList - The transparent render list.\n\t * @param {Array<Object>} doublePassList - The list of transparent objects which require a double pass (e.g. because of transmission).\n\t * @param {Camera} camera - The camera the render list should be rendered with.\n\t * @param {Scene} scene - The scene the render list belongs to.\n\t * @param {LightsNode} lightsNode - The current lights node.\n\t */\n\t_renderTransparents( renderList, doublePassList, camera, scene, lightsNode ) {\n\n\t\tif ( doublePassList.length > 0 ) {\n\n\t\t\t// render back side\n\n\t\t\tfor ( const { material } of doublePassList ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\n\t\t\t}\n\n\t\t\tthis._renderObjects( doublePassList, camera, scene, lightsNode, 'backSide' );\n\n\t\t\t// render front side\n\n\t\t\tfor ( const { material } of doublePassList ) {\n\n\t\t\t\tmaterial.side = FrontSide;\n\n\t\t\t}\n\n\t\t\tthis._renderObjects( renderList, camera, scene, lightsNode );\n\n\t\t\t// restore\n\n\t\t\tfor ( const { material } of doublePassList ) {\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis._renderObjects( renderList, camera, scene, lightsNode );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Renders the objects from the given render list.\n\t *\n\t * @private\n\t * @param {Array<Object>} renderList - The render list.\n\t * @param {Camera} camera - The camera the render list should be rendered with.\n\t * @param {Scene} scene - The scene the render list belongs to.\n\t * @param {LightsNode} lightsNode - The current lights node.\n\t * @param {?string} [passId=null] - An optional ID for identifying the pass.\n\t */\n\t_renderObjects( renderList, camera, scene, lightsNode, passId = null ) {\n\n\t\tfor ( let i = 0, il = renderList.length; i < il; i ++ ) {\n\n\t\t\tconst { object, geometry, material, group, clippingContext } = renderList[ i ];\n\n\t\t\tthis._currentRenderObjectFunction( object, scene, camera, geometry, material, group, lightsNode, clippingContext, passId );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method represents the default render object function that manages the render lifecycle\n\t * of the object.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the object should be rendered with.\n\t * @param {BufferGeometry} geometry - The object's geometry.\n\t * @param {Material} material - The object's material.\n\t * @param {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n\t * @param {LightsNode} lightsNode - The current lights node.\n\t * @param {?ClippingContext} clippingContext - The clipping context.\n\t * @param {?string} [passId=null] - An optional ID for identifying the pass.\n\t */\n\trenderObject( object, scene, camera, geometry, material, group, lightsNode, clippingContext = null, passId = null ) {\n\n\t\tlet overridePositionNode;\n\t\tlet overrideColorNode;\n\t\tlet overrideDepthNode;\n\n\t\t//\n\n\t\tobject.onBeforeRender( this, scene, camera, geometry, material, group );\n\n\t\t//\n\n\t\tif ( material.allowOverride === true && scene.overrideMaterial !== null ) {\n\n\t\t\tconst overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( material.positionNode && material.positionNode.isNode ) {\n\n\t\t\t\toverridePositionNode = overrideMaterial.positionNode;\n\t\t\t\toverrideMaterial.positionNode = material.positionNode;\n\n\t\t\t}\n\n\t\t\toverrideMaterial.alphaTest = material.alphaTest;\n\t\t\toverrideMaterial.alphaMap = material.alphaMap;\n\t\t\toverrideMaterial.transparent = material.transparent || material.transmission > 0;\n\n\t\t\tif ( overrideMaterial.isShadowPassMaterial ) {\n\n\t\t\t\toverrideMaterial.side = material.shadowSide === null ? material.side : material.shadowSide;\n\n\t\t\t\tif ( material.depthNode && material.depthNode.isNode ) {\n\n\t\t\t\t\toverrideDepthNode = overrideMaterial.depthNode;\n\t\t\t\t\toverrideMaterial.depthNode = material.depthNode;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.castShadowNode && material.castShadowNode.isNode ) {\n\n\t\t\t\t\toverrideColorNode = overrideMaterial.colorNode;\n\t\t\t\t\toverrideMaterial.colorNode = material.castShadowNode;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.castShadowPositionNode && material.castShadowPositionNode.isNode ) {\n\n\t\t\t\t\toverridePositionNode = overrideMaterial.positionNode;\n\t\t\t\t\toverrideMaterial.positionNode = material.castShadowPositionNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterial = overrideMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tthis._handleObjectFunction( object, material, scene, camera, lightsNode, group, clippingContext, 'backSide' ); // create backSide pass id\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tthis._handleObjectFunction( object, material, scene, camera, lightsNode, group, clippingContext, passId ); // use default pass id\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\tthis._handleObjectFunction( object, material, scene, camera, lightsNode, group, clippingContext, passId );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( overridePositionNode !== undefined ) {\n\n\t\t\tscene.overrideMaterial.positionNode = overridePositionNode;\n\n\t\t}\n\n\t\tif ( overrideDepthNode !== undefined ) {\n\n\t\t\tscene.overrideMaterial.depthNode = overrideDepthNode;\n\n\t\t}\n\n\t\tif ( overrideColorNode !== undefined ) {\n\n\t\t\tscene.overrideMaterial.colorNode = overrideColorNode;\n\n\t\t}\n\n\t\t//\n\n\t\tobject.onAfterRender( this, scene, camera, geometry, material, group );\n\n\t}\n\n\t/**\n\t * This method represents the default `_handleObjectFunction` implementation which creates\n\t * a render object from the given data and performs the draw command with the selected backend.\n\t *\n\t * @private\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The object's material.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the object should be rendered with.\n\t * @param {LightsNode} lightsNode - The current lights node.\n\t * @param {?{start: number, count: number}} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t * @param {?string} [passId=null] - An optional ID for identifying the pass.\n\t */\n\t_renderObjectDirect( object, material, scene, camera, lightsNode, group, clippingContext, passId ) {\n\n\t\tconst renderObject = this._objects.get( object, material, scene, camera, lightsNode, this._currentRenderContext, clippingContext, passId );\n\t\trenderObject.drawRange = object.geometry.drawRange;\n\t\trenderObject.group = group;\n\n\t\t//\n\n\t\tconst needsRefresh = this._nodes.needsRefresh( renderObject );\n\n\t\tif ( needsRefresh ) {\n\n\t\t\tthis._nodes.updateBefore( renderObject );\n\n\t\t\tthis._geometries.updateForRender( renderObject );\n\n\t\t\tthis._nodes.updateForRender( renderObject );\n\t\t\tthis._bindings.updateForRender( renderObject );\n\n\t\t}\n\n\t\tthis._pipelines.updateForRender( renderObject );\n\n\t\t//\n\n\t\tif ( this._currentRenderBundle !== null ) {\n\n\t\t\tconst renderBundleData = this.backend.get( this._currentRenderBundle );\n\n\t\t\trenderBundleData.renderObjects.push( renderObject );\n\n\t\t\trenderObject.bundle = this._currentRenderBundle.bundleGroup;\n\n\t\t}\n\n\t\tthis.backend.draw( renderObject, this.info );\n\n\t\tif ( needsRefresh ) this._nodes.updateAfter( renderObject );\n\n\t}\n\n\t/**\n\t * A different implementation for `_handleObjectFunction` which only makes sure the object is ready for rendering.\n\t * Used in `compileAsync()`.\n\t *\n\t * @private\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The object's material.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the object should be rendered with.\n\t * @param {LightsNode} lightsNode - The current lights node.\n\t * @param {?{start: number, count: number}} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t * @param {?string} [passId=null] - An optional ID for identifying the pass.\n\t */\n\t_createObjectPipeline( object, material, scene, camera, lightsNode, group, clippingContext, passId ) {\n\n\t\tconst renderObject = this._objects.get( object, material, scene, camera, lightsNode, this._currentRenderContext, clippingContext, passId );\n\t\trenderObject.drawRange = object.geometry.drawRange;\n\t\trenderObject.group = group;\n\n\t\t//\n\n\t\tthis._nodes.updateBefore( renderObject );\n\n\t\tthis._geometries.updateForRender( renderObject );\n\n\t\tthis._nodes.updateForRender( renderObject );\n\t\tthis._bindings.updateForRender( renderObject );\n\n\t\tthis._pipelines.getForRender( renderObject, this._compilationPromises );\n\n\t\tthis._nodes.updateAfter( renderObject );\n\n\t}\n\n\t/**\n\t * Alias for `compileAsync()`.\n\t *\n\t * @method\n\t * @param {Object3D} scene - The scene or 3D object to precompile.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.\n\t * @return {function(Object3D, Camera, ?Scene): Promise|undefined} A Promise that resolves when the compile has been finished.\n\t */\n\tget compile() {\n\n\t\treturn this.compileAsync;\n\n\t}\n\n}\n\n/**\n * A binding represents the connection between a resource (like a texture, sampler\n * or uniform buffer) and the resource definition in a shader stage.\n *\n * This module is an abstract base class for all concrete bindings types.\n *\n * @abstract\n * @private\n */\nclass Binding {\n\n\t/**\n\t * Constructs a new binding.\n\t *\n\t * @param {string} [name=''] - The binding's name.\n\t */\n\tconstructor( name = '' ) {\n\n\t\t/**\n\t\t * The binding's name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * A bitmask that defines in what shader stages the\n\t\t * binding's resource is accessible.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.visibility = 0;\n\n\t}\n\n\t/**\n\t * Makes sure binding's resource is visible for the given shader stage.\n\t *\n\t * @param {number} visibility - The shader stage.\n\t */\n\tsetVisibility( visibility ) {\n\n\t\tthis.visibility |= visibility;\n\n\t}\n\n\t/**\n\t * Clones the binding.\n\t *\n\t * @return {Binding} The cloned binding.\n\t */\n\tclone() {\n\n\t\treturn Object.assign( new this.constructor(), this );\n\n\t}\n\n}\n\n/**\n * This function is usually called with the length in bytes of an array buffer.\n * It returns an padded value which ensure chunk size alignment according to STD140 layout.\n *\n * @function\n * @param {number} floatLength - The buffer length.\n * @return {number} The padded length.\n */\nfunction getFloatLength( floatLength ) {\n\n\t// ensure chunk size alignment (STD140 layout)\n\n\treturn floatLength + ( ( GPU_CHUNK_BYTES - ( floatLength % GPU_CHUNK_BYTES ) ) % GPU_CHUNK_BYTES );\n\n}\n\n/**\n * Represents a buffer binding type.\n *\n * @private\n * @abstract\n * @augments Binding\n */\nclass Buffer extends Binding {\n\n\t/**\n\t * Constructs a new buffer.\n\t *\n\t * @param {string} name - The buffer's name.\n\t * @param {TypedArray} [buffer=null] - The buffer.\n\t */\n\tconstructor( name, buffer = null ) {\n\n\t\tsuper( name );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBuffer = true;\n\n\t\t/**\n\t\t * The bytes per element.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;\n\n\t\t/**\n\t\t * A reference to the internal buffer.\n\t\t *\n\t\t * @private\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis._buffer = buffer;\n\n\t}\n\n\t/**\n\t * The buffer's byte length.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget byteLength() {\n\n\t\treturn getFloatLength( this._buffer.byteLength );\n\n\t}\n\n\t/**\n\t * A reference to the internal buffer.\n\t *\n\t * @type {Float32Array}\n\t * @readonly\n\t */\n\tget buffer() {\n\n\t\treturn this._buffer;\n\n\t}\n\n\t/**\n\t * Updates the binding.\n\t *\n\t * @return {boolean} Whether the buffer has been updated and must be\n\t * uploaded to the GPU.\n\t */\n\tupdate() {\n\n\t\treturn true;\n\n\t}\n\n}\n\n/**\n * Represents a uniform buffer binding type.\n *\n * @private\n * @augments Buffer\n */\nclass UniformBuffer extends Buffer {\n\n\t/**\n\t * Constructs a new uniform buffer.\n\t *\n\t * @param {string} name - The buffer's name.\n\t * @param {TypedArray} [buffer=null] - The buffer.\n\t */\n\tconstructor( name, buffer = null ) {\n\n\t\tsuper( name, buffer );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isUniformBuffer = true;\n\n\t}\n\n}\n\nlet _id$4 = 0;\n\n/**\n * A special form of uniform buffer binding type.\n * It's buffer value is managed by a node object.\n *\n * @private\n * @augments UniformBuffer\n */\nclass NodeUniformBuffer extends UniformBuffer {\n\n\t/**\n\t * Constructs a new node-based uniform buffer.\n\t *\n\t * @param {BufferNode} nodeUniform - The uniform buffer node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t */\n\tconstructor( nodeUniform, groupNode ) {\n\n\t\tsuper( 'UniformBuffer_' + _id$4 ++, nodeUniform ? nodeUniform.value : null );\n\n\t\t/**\n\t\t * The uniform buffer node.\n\t\t *\n\t\t * @type {BufferNode}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t\t/**\n\t\t * The uniform group node.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t */\n\t\tthis.groupNode = groupNode;\n\n\t}\n\n\t/**\n\t * The uniform buffer.\n\t *\n\t * @type {Float32Array}\n\t */\n\tget buffer() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\n/**\n * This class represents a uniform buffer binding but with\n * an API that allows to maintain individual uniform objects.\n *\n * @private\n * @augments UniformBuffer\n */\nclass UniformsGroup extends UniformBuffer {\n\n\t/**\n\t * Constructs a new uniforms group.\n\t *\n\t * @param {string} name - The group's name.\n\t */\n\tconstructor( name ) {\n\n\t\tsuper( name );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isUniformsGroup = true;\n\n\t\t/**\n\t\t * An array with the raw uniform values.\n\t\t *\n\t\t * @private\n\t\t * @type {?Array<number>}\n\t\t * @default null\n\t\t */\n\t\tthis._values = null;\n\n\t\t/**\n\t\t * An array of uniform objects.\n\t\t *\n\t\t * The order of uniforms in this array must match the order of uniforms in the shader.\n\t\t *\n\t\t * @type {Array<Uniform>}\n\t\t */\n\t\tthis.uniforms = [];\n\n\t}\n\n\t/**\n\t * Adds a uniform to this group.\n\t *\n\t * @param {Uniform} uniform - The uniform to add.\n\t * @return {UniformsGroup} A reference to this group.\n\t */\n\taddUniform( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes a uniform from this group.\n\t *\n\t * @param {Uniform} uniform - The uniform to remove.\n\t * @return {UniformsGroup} A reference to this group.\n\t */\n\tremoveUniform( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== -1 ) {\n\n\t\t\tthis.uniforms.splice( index, 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * An array with the raw uniform values.\n\t *\n\t * @type {Array<number>}\n\t */\n\tget values() {\n\n\t\tif ( this._values === null ) {\n\n\t\t\tthis._values = Array.from( this.buffer );\n\n\t\t}\n\n\t\treturn this._values;\n\n\t}\n\n\t/**\n\t * A Float32 array buffer with the uniform values.\n\t *\n\t * @type {Float32Array}\n\t */\n\tget buffer() {\n\n\t\tlet buffer = this._buffer;\n\n\t\tif ( buffer === null ) {\n\n\t\t\tconst byteLength = this.byteLength;\n\n\t\t\tbuffer = new Float32Array( new ArrayBuffer( byteLength ) );\n\n\t\t\tthis._buffer = buffer;\n\n\t\t}\n\n\t\treturn buffer;\n\n\t}\n\n\t/**\n\t * The byte length of the buffer with correct buffer alignment.\n\t *\n\t * @type {number}\n\t */\n\tget byteLength() {\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\n\t\tfor ( let i = 0, l = this.uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = this.uniforms[ i ];\n\n\t\t\tconst { boundary, itemSize } = uniform;\n\n\t\t\t// offset within a single chunk in bytes\n\n\t\t\tconst chunkOffset = offset % GPU_CHUNK_BYTES;\n\t\t\tconst remainingSizeInChunk = GPU_CHUNK_BYTES - chunkOffset;\n\n\t\t\t// conformance tests\n\n\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - boundary ) < 0 ) {\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\toffset += ( GPU_CHUNK_BYTES - chunkOffset );\n\n\t\t\t} else if ( chunkOffset % boundary !== 0 ) {\n\n\t\t\t\t// check for correct alignment\n\n\t\t\t\toffset += ( chunkOffset % boundary );\n\n\t\t\t}\n\n\t\t\tuniform.offset = ( offset / this.bytesPerElement );\n\n\t\t\toffset += ( itemSize * this.bytesPerElement );\n\n\t\t}\n\n\t\treturn Math.ceil( offset / GPU_CHUNK_BYTES ) * GPU_CHUNK_BYTES;\n\n\t}\n\n\t/**\n\t * Updates this group by updating each uniform object of\n\t * the internal uniform list. The uniform objects check if their\n\t * values has actually changed so this method only returns\n\t * `true` if there is a real value change.\n\t *\n\t * @return {boolean} Whether the uniforms have been updated and\n\t * must be uploaded to the GPU.\n\t */\n\tupdate() {\n\n\t\tlet updated = false;\n\n\t\tfor ( const uniform of this.uniforms ) {\n\n\t\t\tif ( this.updateByType( uniform ) === true ) {\n\n\t\t\t\tupdated = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Updates a given uniform by calling an update method matching\n\t * the uniforms type.\n\t *\n\t * @param {Uniform} uniform - The uniform to update.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateByType( uniform ) {\n\n\t\tif ( uniform.isNumberUniform ) return this.updateNumber( uniform );\n\t\tif ( uniform.isVector2Uniform ) return this.updateVector2( uniform );\n\t\tif ( uniform.isVector3Uniform ) return this.updateVector3( uniform );\n\t\tif ( uniform.isVector4Uniform ) return this.updateVector4( uniform );\n\t\tif ( uniform.isColorUniform ) return this.updateColor( uniform );\n\t\tif ( uniform.isMatrix3Uniform ) return this.updateMatrix3( uniform );\n\t\tif ( uniform.isMatrix4Uniform ) return this.updateMatrix4( uniform );\n\n\t\tconsole.error( 'THREE.WebGPUUniformsGroup: Unsupported uniform type.', uniform );\n\n\t}\n\n\t/**\n\t * Updates a given Number uniform.\n\t *\n\t * @param {NumberUniform} uniform - The Number uniform.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateNumber( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\t\tconst type = uniform.getType();\n\n\t\tif ( a[ offset ] !== v ) {\n\n\t\t\tconst b = this._getBufferForType( type );\n\n\t\t\tb[ offset ] = a[ offset ] = v;\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Updates a given Vector2 uniform.\n\t *\n\t * @param {Vector2Uniform} uniform - The Vector2 uniform.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateVector2( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\t\tconst type = uniform.getType();\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y ) {\n\n\t\t\tconst b = this._getBufferForType( type );\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = v.x;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = v.y;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Updates a given Vector3 uniform.\n\t *\n\t * @param {Vector3Uniform} uniform - The Vector3 uniform.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateVector3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\t\tconst type = uniform.getType();\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z ) {\n\n\t\t\tconst b = this._getBufferForType( type );\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = v.x;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = v.y;\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = v.z;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Updates a given Vector4 uniform.\n\t *\n\t * @param {Vector4Uniform} uniform - The Vector4 uniform.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateVector4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\t\tconst type = uniform.getType();\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z || a[ offset + 4 ] !== v.w ) {\n\n\t\t\tconst b = this._getBufferForType( type );\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = v.x;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = v.y;\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = v.z;\n\t\t\tb[ offset + 3 ] = a[ offset + 3 ] = v.w;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Updates a given Color uniform.\n\t *\n\t * @param {ColorUniform} uniform - The Color uniform.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateColor( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst c = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== c.r || a[ offset + 1 ] !== c.g || a[ offset + 2 ] !== c.b ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = c.r;\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = c.g;\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = c.b;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Updates a given Matrix3 uniform.\n\t *\n\t * @param {Matrix3Uniform} uniform - The Matrix3 uniform.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateMatrix3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== e[ 0 ] || a[ offset + 1 ] !== e[ 1 ] || a[ offset + 2 ] !== e[ 2 ] ||\n\t\t\ta[ offset + 4 ] !== e[ 3 ] || a[ offset + 5 ] !== e[ 4 ] || a[ offset + 6 ] !== e[ 5 ] ||\n\t\t\ta[ offset + 8 ] !== e[ 6 ] || a[ offset + 9 ] !== e[ 7 ] || a[ offset + 10 ] !== e[ 8 ] ) {\n\n\t\t\tconst b = this.buffer;\n\n\t\t\tb[ offset + 0 ] = a[ offset + 0 ] = e[ 0 ];\n\t\t\tb[ offset + 1 ] = a[ offset + 1 ] = e[ 1 ];\n\t\t\tb[ offset + 2 ] = a[ offset + 2 ] = e[ 2 ];\n\t\t\tb[ offset + 4 ] = a[ offset + 4 ] = e[ 3 ];\n\t\t\tb[ offset + 5 ] = a[ offset + 5 ] = e[ 4 ];\n\t\t\tb[ offset + 6 ] = a[ offset + 6 ] = e[ 5 ];\n\t\t\tb[ offset + 8 ] = a[ offset + 8 ] = e[ 6 ];\n\t\t\tb[ offset + 9 ] = a[ offset + 9 ] = e[ 7 ];\n\t\t\tb[ offset + 10 ] = a[ offset + 10 ] = e[ 8 ];\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Updates a given Matrix4 uniform.\n\t *\n\t * @param {Matrix4Uniform} uniform - The Matrix4 uniform.\n\t * @return {boolean} Whether the uniform has been updated or not.\n\t */\n\tupdateMatrix4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.values;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( arraysEqual( a, e, offset ) === false ) {\n\n\t\t\tconst b = this.buffer;\n\t\t\tb.set( e, offset );\n\t\t\tsetArray( a, e, offset );\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\t/**\n\t * Returns a typed array that matches the given data type.\n\t *\n\t * @param {string} type - The data type.\n\t * @return {TypedArray} The typed array.\n\t */\n\t_getBufferForType( type ) {\n\n\t\tif ( type === 'int' || type === 'ivec2' || type === 'ivec3' || type === 'ivec4' ) return new Int32Array( this.buffer.buffer );\n\t\tif ( type === 'uint' || type === 'uvec2' || type === 'uvec3' || type === 'uvec4' ) return new Uint32Array( this.buffer.buffer );\n\t\treturn this.buffer;\n\n\t}\n\n}\n\n/**\n * Sets the values of the second array to the first array.\n *\n * @private\n * @param {TypedArray} a - The first array.\n * @param {TypedArray} b - The second array.\n * @param {number} offset - An index offset for the first array.\n */\nfunction setArray( a, b, offset ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ offset + i ] = b[ i ];\n\n\t}\n\n}\n\n/**\n * Returns `true` if the given arrays are equal.\n *\n * @private\n * @param {TypedArray} a - The first array.\n * @param {TypedArray} b - The second array.\n * @param {number} offset - An index offset for the first array.\n * @return {boolean} Whether the given arrays are equal or not.\n */\nfunction arraysEqual( a, b, offset ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\tif ( a[ offset + i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nlet _id$3 = 0;\n\n/**\n * A special form of uniforms group that represents\n * the individual uniforms as node-based uniforms.\n *\n * @private\n * @augments UniformsGroup\n */\nclass NodeUniformsGroup extends UniformsGroup {\n\n\t/**\n\t * Constructs a new node-based uniforms group.\n\t *\n\t * @param {string} name - The group's name.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t */\n\tconstructor( name, groupNode ) {\n\n\t\tsuper( name );\n\n\t\t/**\n\t\t * The group's ID.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.id = _id$3 ++;\n\n\t\t/**\n\t\t * The uniform group node.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t */\n\t\tthis.groupNode = groupNode;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isNodeUniformsGroup = true;\n\n\t}\n\n}\n\nlet _id$2 = 0;\n\n/**\n * Represents a sampled texture binding type.\n *\n * @private\n * @augments Binding\n */\nclass SampledTexture extends Binding {\n\n\t/**\n\t * Constructs a new sampled texture.\n\t *\n\t * @param {string} name - The sampled texture's name.\n\t * @param {?Texture} texture - The texture this binding is referring to.\n\t */\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\t/**\n\t\t * This identifier.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.id = _id$2 ++;\n\n\t\t/**\n\t\t * The texture this binding is referring to.\n\t\t *\n\t\t * @type {?Texture}\n\t\t */\n\t\tthis.texture = texture;\n\n\t\t/**\n\t\t * The binding's version.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = texture ? texture.version : 0;\n\n\t\t/**\n\t\t * Whether the texture is a storage texture or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.store = false;\n\n\t\t/**\n\t\t * The binding's generation which is an additional version\n\t\t * qualifier.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.generation = null;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSampledTexture = true;\n\n\t}\n\n\t/**\n\t * Returns `true` whether this binding requires an update for the\n\t * given generation.\n\t *\n\t * @param {number} generation - The generation.\n\t * @return {boolean} Whether an update is required or not.\n\t */\n\tneedsBindingsUpdate( generation ) {\n\n\t\tconst { texture } = this;\n\n\t\tif ( generation !== this.generation ) {\n\n\t\t\tthis.generation = generation;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn texture.isVideoTexture;\n\n\t}\n\n\t/**\n\t * Updates the binding.\n\t *\n\t * @return {boolean} Whether the texture has been updated and must be\n\t * uploaded to the GPU.\n\t */\n\tupdate() {\n\n\t\tconst { texture, version } = this;\n\n\t\tif ( version !== texture.version ) {\n\n\t\t\tthis.version = texture.version;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n\n/**\n * A special form of sampled texture binding type.\n * It's texture value is managed by a node object.\n *\n * @private\n * @augments SampledTexture\n */\nclass NodeSampledTexture extends SampledTexture {\n\n\t/**\n\t * Constructs a new node-based sampled texture.\n\t *\n\t * @param {string} name - The textures's name.\n\t * @param {TextureNode} textureNode - The texture node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t * @param {?string} [access=null] - The access type.\n\t */\n\tconstructor( name, textureNode, groupNode, access = null ) {\n\n\t\tsuper( name, textureNode ? textureNode.value : null );\n\n\t\t/**\n\t\t * The texture node.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * The uniform group node.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t */\n\t\tthis.groupNode = groupNode;\n\n\t\t/**\n\t\t * The access type.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.access = access;\n\n\t}\n\n\t/**\n\t * Overwrites the default to additionally check if the node value has changed.\n\t *\n\t * @param {number} generation - The generation.\n\t * @return {boolean} Whether an update is required or not.\n\t */\n\tneedsBindingsUpdate( generation ) {\n\n\t\treturn this.textureNode.value !== this.texture || super.needsBindingsUpdate( generation );\n\n\t}\n\n\t/**\n\t * Updates the binding.\n\t *\n\t * @return {boolean} Whether the texture has been updated and must be\n\t * uploaded to the GPU.\n\t */\n\tupdate() {\n\n\t\tconst { textureNode } = this;\n\n\t\tif ( this.texture !== textureNode.value ) {\n\n\t\t\tthis.texture = textureNode.value;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn super.update();\n\n\t}\n\n}\n\n/**\n * A special form of sampled cube texture binding type.\n * It's texture value is managed by a node object.\n *\n * @private\n * @augments NodeSampledTexture\n */\nclass NodeSampledCubeTexture extends NodeSampledTexture {\n\n\t/**\n\t * Constructs a new node-based sampled cube texture.\n\t *\n\t * @param {string} name - The textures's name.\n\t * @param {TextureNode} textureNode - The texture node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t * @param {?string} [access=null] - The access type.\n\t */\n\tconstructor( name, textureNode, groupNode, access = null ) {\n\n\t\tsuper( name, textureNode, groupNode, access );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSampledCubeTexture = true;\n\n\t}\n\n}\n\n/**\n * A special form of sampled 3D texture binding type.\n * It's texture value is managed by a node object.\n *\n * @private\n * @augments NodeSampledTexture\n */\nclass NodeSampledTexture3D extends NodeSampledTexture {\n\n\t/**\n\t * Constructs a new node-based sampled 3D texture.\n\t *\n\t * @param {string} name - The textures's name.\n\t * @param {TextureNode} textureNode - The texture node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t * @param {?string} [access=null] - The access type.\n\t */\n\tconstructor( name, textureNode, groupNode, access = null ) {\n\n\t\tsuper( name, textureNode, groupNode, access );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSampledTexture3D = true;\n\n\t}\n\n}\n\nconst glslMethods = {\n\ttextureDimensions: 'textureSize',\n\tequals: 'equal'\n};\n\nconst precisionLib = {\n\tlow: 'lowp',\n\tmedium: 'mediump',\n\thigh: 'highp'\n};\n\nconst supports$1 = {\n\tswizzleAssign: true,\n\tstorageBuffer: false\n};\n\nconst interpolationTypeMap = {\n\tperspective: 'smooth',\n\tlinear: 'noperspective'\n};\n\nconst interpolationModeMap = {\n\t'centroid': 'centroid',\n\t'flat first': 'flat',\n\t'flat either': 'flat'\n};\n\nconst defaultPrecisions = `\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\nprecision lowp sampler2DArrayShadow;\nprecision lowp samplerCubeShadow;\n`;\n\n/**\n * A node builder targeting GLSL.\n *\n * This module generates GLSL shader code from node materials and also\n * generates the respective bindings and vertex buffer definitions. These\n * data are later used by the renderer to create render and compute pipelines\n * for render objects.\n *\n * @augments NodeBuilder\n */\nclass GLSLNodeBuilder extends NodeBuilder {\n\n\t/**\n\t * Constructs a new GLSL node builder renderer.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Renderer} renderer - The renderer.\n\t */\n\tconstructor( object, renderer ) {\n\n\t\tsuper( object, renderer, new GLSLNodeParser() );\n\n\t\t/**\n\t\t * A dictionary holds for each shader stage ('vertex', 'fragment', 'compute')\n\t\t * another dictionary which manages UBOs per group ('render','frame','object').\n\t\t *\n\t\t * @type {Object<string,Object<string,NodeUniformsGroup>>}\n\t\t */\n\t\tthis.uniformGroups = {};\n\n\t\t/**\n\t\t * An array that holds objects defining the varying and attribute data in\n\t\t * context of Transform Feedback.\n\t\t *\n\t\t * @type {Array<Object<string,AttributeNode|string>>}\n\t\t */\n\t\tthis.transforms = [];\n\n\t\t/**\n\t\t * A dictionary that holds for each shader stage a Map of used extensions.\n\t\t *\n\t\t * @type {Object<string,Map<string,Object>>}\n\t\t */\n\t\tthis.extensions = {};\n\n\t\t/**\n\t\t * A dictionary that holds for each shader stage an Array of used builtins.\n\t\t *\n\t\t * @type {Object<string,Array<string>>}\n\t\t */\n\t\tthis.builtins = { vertex: [], fragment: [], compute: [] };\n\n\t}\n\n\t/**\n\t * Checks if the given texture requires a manual conversion to the working color space.\n\t *\n\t * @param {Texture} texture - The texture to check.\n\t * @return {boolean} Whether the given texture requires a conversion to working color space or not.\n\t */\n\tneedsToWorkingColorSpace( texture ) {\n\n\t\treturn texture.isVideoTexture === true && texture.colorSpace !== NoColorSpace;\n\n\t}\n\n\t/**\n\t * Returns the native shader method name for a given generic name.\n\t *\n\t * @param {string} method - The method name to resolve.\n\t * @return {string} The resolved GLSL method name.\n\t */\n\tgetMethod( method ) {\n\n\t\treturn glslMethods[ method ] || method;\n\n\t}\n\n\t/**\n\t * Returns the output struct name. Not relevant for GLSL.\n\t *\n\t * @return {string}\n\t */\n\tgetOutputStructName() {\n\n\t\treturn '';\n\n\t}\n\n\t/**\n\t * Builds the given shader node.\n\t *\n\t * @param {ShaderNodeInternal} shaderNode - The shader node.\n\t * @return {string} The GLSL function code.\n\t */\n\tbuildFunctionCode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\t\tconst flowData = this.flowShaderNode( shaderNode );\n\n\t\tconst parameters = [];\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tparameters.push( this.getType( input.type ) + ' ' + input.name );\n\n\t\t}\n\n\t\t//\n\n\t\tconst code = `${ this.getType( layout.type ) } ${ layout.name }( ${ parameters.join( ', ' ) } ) {\n\n\t${ flowData.vars }\n\n${ flowData.code }\n\treturn ${ flowData.result };\n\n}`;\n\n\t\t//\n\n\t\treturn code;\n\n\t}\n\n\t/**\n\t * Setups the Pixel Buffer Object (PBO) for the given storage\n\t * buffer node.\n\t *\n\t * @param {StorageBufferNode} storageBufferNode - The storage buffer node.\n\t */\n\tsetupPBO( storageBufferNode ) {\n\n\t\tconst attribute = storageBufferNode.value;\n\n\t\tif ( attribute.pbo === undefined ) {\n\n\t\t\tconst originalArray = attribute.array;\n\t\t\tconst numElements = attribute.count * attribute.itemSize;\n\n\t\t\tconst { itemSize } = attribute;\n\n\t\t\tconst isInteger = attribute.array.constructor.name.toLowerCase().includes( 'int' );\n\n\t\t\tlet format = isInteger ? RedIntegerFormat : RedFormat;\n\n\t\t\tif ( itemSize === 2 ) {\n\n\t\t\t\tformat = isInteger ? RGIntegerFormat : RGFormat;\n\n\t\t\t} else if ( itemSize === 3 ) {\n\n\t\t\t\tformat = isInteger ? RGBIntegerFormat : RGBFormat;\n\n\t\t\t} else if ( itemSize === 4 ) {\n\n\t\t\t\tformat = isInteger ? RGBAIntegerFormat : RGBAFormat;\n\n\t\t\t}\n\n\t\t\tconst typeMap = {\n\t\t\t\tFloat32Array: FloatType,\n\t\t\t\tUint8Array: UnsignedByteType,\n\t\t\t\tUint16Array: UnsignedShortType,\n\t\t\t\tUint32Array: UnsignedIntType,\n\t\t\t\tInt8Array: ByteType,\n\t\t\t\tInt16Array: ShortType,\n\t\t\t\tInt32Array: IntType,\n\t\t\t\tUint8ClampedArray: UnsignedByteType,\n\t\t\t};\n\n\t\t\tconst width = Math.pow( 2, Math.ceil( Math.log2( Math.sqrt( numElements / itemSize ) ) ) );\n\t\t\tlet height = Math.ceil( ( numElements / itemSize ) / width );\n\t\t\tif ( width * height * itemSize < numElements ) height ++; // Ensure enough space\n\n\t\t\tconst newSize = width * height * itemSize;\n\n\t\t\tconst newArray = new originalArray.constructor( newSize );\n\n\t\t\tnewArray.set( originalArray, 0 );\n\n\t\t\tattribute.array = newArray;\n\n\t\t\tconst pboTexture = new DataTexture( attribute.array, width, height, format, typeMap[ attribute.array.constructor.name ] || FloatType );\n\t\t\tpboTexture.needsUpdate = true;\n\t\t\tpboTexture.isPBOTexture = true;\n\n\t\t\tconst pbo = new TextureNode( pboTexture, null, null );\n\t\t\tpbo.setPrecision( 'high' );\n\n\t\t\tattribute.pboNode = pbo;\n\t\t\tattribute.pbo = pbo.value;\n\n\t\t\tthis.getUniformFromNode( attribute.pboNode, 'texture', this.shaderStage, this.context.label );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a GLSL snippet that represents the property name of the given node.\n\t *\n\t * @param {Node} node - The node.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The property name.\n\t */\n\tgetPropertyName( node, shaderStage = this.shaderStage ) {\n\n\t\tif ( node.isNodeUniform && node.node.isTextureNode !== true && node.node.isBufferNode !== true ) {\n\n\t\t\treturn shaderStage.charAt( 0 ) + '_' + node.name;\n\n\t\t}\n\n\t\treturn super.getPropertyName( node, shaderStage );\n\n\t}\n\n\t/**\n\t * Setups the Pixel Buffer Object (PBO) for the given storage\n\t * buffer node.\n\t *\n\t * @param {StorageArrayElementNode} storageArrayElementNode - The storage array element node.\n\t * @return {string} The property name.\n\t */\n\tgeneratePBO( storageArrayElementNode ) {\n\n\t\tconst { node, indexNode } = storageArrayElementNode;\n\t\tconst attribute = node.value;\n\n\t\tif ( this.renderer.backend.has( attribute ) ) {\n\n\t\t\tconst attributeData = this.renderer.backend.get( attribute );\n\t\t\tattributeData.pbo = attribute.pbo;\n\n\t\t}\n\n\t\tconst nodeUniform = this.getUniformFromNode( attribute.pboNode, 'texture', this.shaderStage, this.context.label );\n\t\tconst textureName = this.getPropertyName( nodeUniform );\n\n\t\tthis.increaseUsage( indexNode ); // force cache generate to be used as index in x,y\n\t\tconst indexSnippet = indexNode.build( this, 'uint' );\n\n\t\tconst elementNodeData = this.getDataFromNode( storageArrayElementNode );\n\n\t\tlet propertyName = elementNodeData.propertyName;\n\n\t\tif ( propertyName === undefined ) {\n\n\t\t\t// property element\n\n\t\t\tconst nodeVar = this.getVarFromNode( storageArrayElementNode );\n\n\t\t\tpropertyName = this.getPropertyName( nodeVar );\n\n\t\t\t// property size\n\n\t\t\tconst bufferNodeData = this.getDataFromNode( node );\n\n\t\t\tlet propertySizeName = bufferNodeData.propertySizeName;\n\n\t\t\tif ( propertySizeName === undefined ) {\n\n\t\t\t\tpropertySizeName = propertyName + 'Size';\n\n\t\t\t\tthis.getVarFromNode( node, propertySizeName, 'uint' );\n\n\t\t\t\tthis.addLineFlowCode( `${ propertySizeName } = uint( textureSize( ${ textureName }, 0 ).x )`, storageArrayElementNode );\n\n\t\t\t\tbufferNodeData.propertySizeName = propertySizeName;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst { itemSize } = attribute;\n\n\t\t\tconst channel = '.' + vectorComponents.join( '' ).slice( 0, itemSize );\n\t\t\tconst uvSnippet = `ivec2(${indexSnippet} % ${ propertySizeName }, ${indexSnippet} / ${ propertySizeName })`;\n\n\t\t\tconst snippet = this.generateTextureLoad( null, textureName, uvSnippet, null, '0' );\n\n\t\t\t//\n\n\n\t\t\tlet prefix = 'vec4';\n\n\t\t\tif ( attribute.pbo.type === UnsignedIntType ) {\n\n\t\t\t\tprefix = 'uvec4';\n\n\t\t\t} else if ( attribute.pbo.type === IntType ) {\n\n\t\t\t\tprefix = 'ivec4';\n\n\t\t\t}\n\n\t\t\tthis.addLineFlowCode( `${ propertyName } = ${prefix}(${ snippet })${channel}`, storageArrayElementNode );\n\n\t\t\telementNodeData.propertyName = propertyName;\n\n\t\t}\n\n\t\treturn propertyName;\n\n\t}\n\n\t/**\n\t * Generates the GLSL snippet that reads a single texel from a texture without sampling or filtering.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvIndexSnippet - A GLSL snippet that represents texture coordinates used for sampling.\n\t * @param {?string} depthSnippet - A GLSL snippet that represents the 0-based texture array index to sample.\n\t * @param {string} [levelSnippet='0u'] - A GLSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @return {string} The GLSL snippet.\n\t */\n\tgenerateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0' ) {\n\n\t\tif ( depthSnippet ) {\n\n\t\t\treturn `texelFetch( ${ textureProperty }, ivec3( ${ uvIndexSnippet }, ${ depthSnippet } ), ${ levelSnippet } )`;\n\n\t\t} else {\n\n\t\t\treturn `texelFetch( ${ textureProperty }, ${ uvIndexSnippet }, ${ levelSnippet } )`;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the GLSL snippet for sampling/loading the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.\n\t * @param {?string} depthSnippet -  A GLSL snippet that represents the 0-based texture array index to sample.\n\t * @return {string} The GLSL snippet.\n\t */\n\tgenerateTexture( texture, textureProperty, uvSnippet, depthSnippet ) {\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\tif ( depthSnippet ) uvSnippet = `vec4( ${ uvSnippet }, ${ depthSnippet } )`;\n\n\t\t\treturn `texture( ${ textureProperty }, ${ uvSnippet } ).x`;\n\n\t\t} else {\n\n\t\t\tif ( depthSnippet ) uvSnippet = `vec3( ${ uvSnippet }, ${ depthSnippet } )`;\n\n\t\t\treturn `texture( ${ textureProperty }, ${ uvSnippet } )`;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the GLSL snippet when sampling textures with explicit mip level.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} levelSnippet - A GLSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @return {string} The GLSL snippet.\n\t */\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet ) {\n\n\t\treturn `textureLod( ${ textureProperty }, ${ uvSnippet }, ${ levelSnippet } )`;\n\n\t}\n\n\t/**\n\t * Generates the GLSL snippet when sampling textures with a bias to the mip level.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} biasSnippet - A GLSL snippet that represents the bias to apply to the mip level before sampling.\n\t * @return {string} The GLSL snippet.\n\t */\n\tgenerateTextureBias( texture, textureProperty, uvSnippet, biasSnippet ) {\n\n\t\treturn `texture( ${ textureProperty }, ${ uvSnippet }, ${ biasSnippet } )`;\n\n\t}\n\n\t/**\n\t * Generates the GLSL snippet for sampling/loading the given texture using explicit gradients.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.\n\t * @param {Array<string>} gradSnippet - An array holding both gradient GLSL snippets.\n\t * @return {string} The GLSL snippet.\n\t */\n\tgenerateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet ) {\n\n\t\treturn `textureGrad( ${ textureProperty }, ${ uvSnippet }, ${ gradSnippet[ 0 ] }, ${ gradSnippet[ 1 ] } )`;\n\n\t}\n\n\t/**\n\t * Generates the GLSL snippet for sampling a depth texture and comparing the sampled depth values\n\t * against a reference value.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} compareSnippet -  A GLSL snippet that represents the reference value.\n\t * @param {?string} depthSnippet - A GLSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The GLSL snippet.\n\t */\n\tgenerateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\tif ( depthSnippet ) {\n\n\t\t\t\treturn `texture( ${ textureProperty }, vec4( ${ uvSnippet }, ${ depthSnippet }, ${ compareSnippet } ) )`;\n\n\t\t\t}\n\n\t\t\treturn `texture( ${ textureProperty }, vec3( ${ uvSnippet }, ${ compareSnippet } ) )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the variables of the given shader stage as a GLSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The GLSL snippet that defines the variables.\n\t */\n\tgetVars( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tsnippets.push( `${ this.getVar( variable.type, variable.name, variable.count ) };` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( '\\n\\t' );\n\n\t}\n\n\t/**\n\t * Returns the uniforms of the given shader stage as a GLSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The GLSL snippet that defines the uniforms.\n\t */\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tconst bindingSnippets = [];\n\t\tconst uniformGroups = {};\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tlet snippet = null;\n\t\t\tlet group = false;\n\n\t\t\tif ( uniform.type === 'texture' || uniform.type === 'texture3D' ) {\n\n\t\t\t\tconst texture = uniform.node.value;\n\n\t\t\t\tlet typePrefix = '';\n\n\t\t\t\tif ( texture.isDataTexture === true || texture.isData3DTexture === true ) {\n\n\t\t\t\t\tif ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\ttypePrefix = 'u';\n\n\t\t\t\t\t} else if ( texture.type === IntType ) {\n\n\t\t\t\t\t\ttypePrefix = 'i';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( uniform.type === 'texture3D' && texture.isTextureArray === false ) {\n\n\t\t\t\t\tsnippet = `${typePrefix}sampler3D ${ uniform.name };`;\n\n\t\t\t\t} else if ( texture.compareFunction ) {\n\n\t\t\t\t\tif ( texture.isDepthArrayTexture === true ) {\n\n\t\t\t\t\t\tsnippet = `sampler2DArrayShadow ${ uniform.name };`;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsnippet = `sampler2DShadow ${ uniform.name };`;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true || texture.isTextureArray === true ) {\n\n\t\t\t\t\tsnippet = `${typePrefix}sampler2DArray ${ uniform.name };`;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet = `${typePrefix}sampler2D ${ uniform.name };`;\n\n\t\t\t\t}\n\n\t\t\t} else if ( uniform.type === 'cubeTexture' ) {\n\n\t\t\t\tsnippet = `samplerCube ${ uniform.name };`;\n\n\t\t\t} else if ( uniform.type === 'buffer' ) {\n\n\t\t\t\tconst bufferNode = uniform.node;\n\t\t\t\tconst bufferType = this.getType( bufferNode.bufferType );\n\t\t\t\tconst bufferCount = bufferNode.bufferCount;\n\n\t\t\t\tconst bufferCountSnippet = bufferCount > 0 ? bufferCount : '';\n\t\t\t\tsnippet = `${bufferNode.name} {\\n\\t${ bufferType } ${ uniform.name }[${ bufferCountSnippet }];\\n};\\n`;\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getVectorType( uniform.type );\n\n\t\t\t\tsnippet = `${ vectorType } ${ this.getPropertyName( uniform, shaderStage ) };`;\n\n\t\t\t\tgroup = true;\n\n\t\t\t}\n\n\t\t\tconst precision = uniform.node.precision;\n\n\t\t\tif ( precision !== null ) {\n\n\t\t\t\tsnippet = precisionLib[ precision ] + ' ' + snippet;\n\n\t\t\t}\n\n\t\t\tif ( group ) {\n\n\t\t\t\tsnippet = '\\t' + snippet;\n\n\t\t\t\tconst groupName = uniform.groupNode.name;\n\t\t\t\tconst groupSnippets = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = [] );\n\n\t\t\t\tgroupSnippets.push( snippet );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = 'uniform ' + snippet;\n\n\t\t\t\tbindingSnippets.push( snippet );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet output = '';\n\n\t\tfor ( const name in uniformGroups ) {\n\n\t\t\tconst groupSnippets = uniformGroups[ name ];\n\n\t\t\toutput += this._getGLSLUniformStruct( shaderStage + '_' + name, groupSnippets.join( '\\n' ) ) + '\\n';\n\n\t\t}\n\n\t\toutput += bindingSnippets.join( '\\n' );\n\n\t\treturn output;\n\n\t}\n\n\t/**\n\t * Returns the type for a given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t * @return {string} The type.\n\t */\n\tgetTypeFromAttribute( attribute ) {\n\n\t\tlet nodeType = super.getTypeFromAttribute( attribute );\n\n\t\tif ( /^[iu]/.test( nodeType ) && attribute.gpuType !== IntType ) {\n\n\t\t\tlet dataAttribute = attribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;\n\n\t\t\tconst array = dataAttribute.array;\n\n\t\t\tif ( ( array instanceof Uint32Array || array instanceof Int32Array ) === false ) {\n\n\t\t\t\tnodeType = nodeType.slice( 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeType;\n\n\t}\n\n\t/**\n\t * Returns the shader attributes of the given shader stage as a GLSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The GLSL snippet that defines the shader attributes.\n\t */\n\tgetAttributes( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tconst attributes = this.getAttributesArray();\n\n\t\t\tlet location = 0;\n\n\t\t\tfor ( const attribute of attributes ) {\n\n\t\t\t\tsnippet += `layout( location = ${ location ++ } ) in ${ attribute.type } ${ attribute.name };\\n`;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Returns the members of the given struct type node as a GLSL string.\n\t *\n\t * @param {StructTypeNode} struct - The struct type node.\n\t * @return {string} The GLSL snippet that defines the struct members.\n\t */\n\tgetStructMembers( struct ) {\n\n\t\tconst snippets = [];\n\n\t\tfor ( const member of struct.members ) {\n\n\t\t\tsnippets.push( `\\t${ member.type } ${ member.name };` );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\t/**\n\t * Returns the structs of the given shader stage as a GLSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The GLSL snippet that defines the structs.\n\t */\n\tgetStructs( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst structs = this.structs[ shaderStage ];\n\n\t\tconst outputSnippet = [];\n\n\t\tfor ( const struct of structs ) {\n\n\t\t\tif ( struct.output ) {\n\n\t\t\t\tfor ( const member of struct.members ) {\n\n\t\t\t\t\toutputSnippet.push( `layout( location = ${ member.index } ) out ${ member.type } ${ member.name };` );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tlet snippet = 'struct ' + struct.name + ' {\\n';\n\t\t\t\tsnippet += this.getStructMembers( struct );\n\t\t\t\tsnippet += '\\n};\\n';\n\n\t\t\t\tsnippets.push( snippet );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( outputSnippet.length === 0 ) {\n\n\t\t\toutputSnippet.push( 'layout( location = 0 ) out vec4 fragColor;' );\n\n\t\t}\n\n\t\treturn '\\n' + outputSnippet.join( '\\n' ) + '\\n\\n' + snippets.join( '\\n' );\n\n\t}\n\n\t/**\n\t * Returns the varyings of the given shader stage as a GLSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The GLSL snippet that defines the varyings.\n\t */\n\tgetVaryings( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tconst varyings = this.varyings;\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tif ( shaderStage === 'compute' ) varying.needsInterpolation = true;\n\n\t\t\t\tconst type = this.getType( varying.type );\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tif ( varying.interpolationType ) {\n\n\t\t\t\t\t\tconst interpolationType = interpolationTypeMap[ varying.interpolationType ] || varying.interpolationType;\n\t\t\t\t\t\tconst sampling = interpolationModeMap[ varying.interpolationSampling ] || '';\n\n\t\t\t\t\t\tsnippet += `${ interpolationType } ${ sampling } out ${ type } ${ varying.name };\\n`;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst flat = type.includes( 'int' ) || type.includes( 'uv' ) || type.includes( 'iv' ) ? 'flat ' : '';\n\n\t\t\t\t\t\tsnippet += `${ flat }out ${ type } ${ varying.name };\\n`;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet += `${type} ${varying.name};\\n`; // generate variable (no varying required)\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tconst type = this.getType( varying.type );\n\n\t\t\t\t\tif ( varying.interpolationType ) {\n\n\t\t\t\t\t\tconst interpolationType = interpolationTypeMap[ varying.interpolationType ] || varying.interpolationType;\n\t\t\t\t\t\tconst sampling = interpolationModeMap[ varying.interpolationSampling ] || '';\n\n\t\t\t\t\t\tsnippet += `${ interpolationType } ${ sampling } in ${ type } ${ varying.name };\\n`;\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst flat = type.includes( 'int' ) || type.includes( 'uv' ) || type.includes( 'iv' ) ? 'flat ' : '';\n\n\t\t\t\t\t\tsnippet += `${ flat }in ${ type } ${ varying.name };\\n`;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const builtin of this.builtins[ shaderStage ] ) {\n\n\t\t\tsnippet += `${builtin};\\n`;\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Returns the vertex index builtin.\n\t *\n\t * @return {string} The vertex index.\n\t */\n\tgetVertexIndex() {\n\n\t\treturn 'uint( gl_VertexID )';\n\n\t}\n\n\t/**\n\t * Returns the instance index builtin.\n\t *\n\t * @return {string} The instance index.\n\t */\n\tgetInstanceIndex() {\n\n\t\treturn 'uint( gl_InstanceID )';\n\n\t}\n\n\t/**\n\t * Returns the invocation local index builtin.\n\t *\n\t * @return {string} The invocation local index.\n\t */\n\tgetInvocationLocalIndex() {\n\n\t\tconst workgroupSize = this.object.workgroupSize;\n\n\t\tconst size = workgroupSize.reduce( ( acc, curr ) => acc * curr, 1 );\n\n\t\treturn `uint( gl_InstanceID ) % ${size}u`;\n\n\t}\n\n\t/**\n\t * Returns the draw index builtin.\n\t *\n\t * @return {?string} The drawIndex shader string. Returns `null` if `WEBGL_multi_draw` isn't supported by the device.\n\t */\n\tgetDrawIndex() {\n\n\t\tconst extensions = this.renderer.backend.extensions;\n\n\t\tif ( extensions.has( 'WEBGL_multi_draw' ) ) {\n\n\t\t\treturn 'uint( gl_DrawID )';\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Returns the front facing builtin.\n\t *\n\t * @return {string} The front facing builtin.\n\t */\n\tgetFrontFacing() {\n\n\t\treturn 'gl_FrontFacing';\n\n\t}\n\n\t/**\n\t * Returns the frag coord builtin.\n\t *\n\t * @return {string} The frag coord builtin.\n\t */\n\tgetFragCoord() {\n\n\t\treturn 'gl_FragCoord.xy';\n\n\t}\n\n\t/**\n\t * Returns the frag depth builtin.\n\t *\n\t * @return {string} The frag depth builtin.\n\t */\n\tgetFragDepth() {\n\n\t\treturn 'gl_FragDepth';\n\n\t}\n\n\t/**\n\t * Enables the given extension.\n\t *\n\t * @param {string} name - The extension name.\n\t * @param {string} behavior - The extension behavior.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage.\n\t */\n\tenableExtension( name, behavior, shaderStage = this.shaderStage ) {\n\n\t\tconst map = this.extensions[ shaderStage ] || ( this.extensions[ shaderStage ] = new Map() );\n\n\t\tif ( map.has( name ) === false ) {\n\n\t\t\tmap.set( name, {\n\t\t\t\tname,\n\t\t\t\tbehavior\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the enabled extensions of the given shader stage as a GLSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The GLSL snippet that defines the enabled extensions.\n\t */\n\tgetExtensions( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tconst ext = this.renderer.backend.extensions;\n\t\t\tconst isBatchedMesh = this.object.isBatchedMesh;\n\n\t\t\tif ( isBatchedMesh && ext.has( 'WEBGL_multi_draw' ) ) {\n\n\t\t\t\tthis.enableExtension( 'GL_ANGLE_multi_draw', 'require', shaderStage );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst extensions = this.extensions[ shaderStage ];\n\n\t\tif ( extensions !== undefined ) {\n\n\t\t\tfor ( const { name, behavior } of extensions.values() ) {\n\n\t\t\t\tsnippets.push( `#extension ${name} : ${behavior}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\t/**\n\t * Returns the clip distances builtin.\n\t *\n\t * @return {string} The clip distances builtin.\n\t */\n\tgetClipDistance() {\n\n\t\treturn 'gl_ClipDistance';\n\n\t}\n\n\t/**\n\t * Whether the requested feature is available or not.\n\t *\n\t * @param {string} name - The requested feature.\n\t * @return {boolean} Whether the requested feature is supported or not.\n\t */\n\tisAvailable( name ) {\n\n\t\tlet result = supports$1[ name ];\n\n\t\tif ( result === undefined ) {\n\n\t\t\tlet extensionName;\n\n\t\t\tresult = false;\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'float32Filterable':\n\t\t\t\t\textensionName = 'OES_texture_float_linear';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'clipDistance':\n\t\t\t\t\textensionName = 'WEBGL_clip_cull_distance';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( extensionName !== undefined ) {\n\n\t\t\t\tconst extensions = this.renderer.backend.extensions;\n\n\t\t\t\tif ( extensions.has( extensionName ) ) {\n\n\t\t\t\t\textensions.get( extensionName );\n\t\t\t\t\tresult = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tsupports$1[ name ] = result;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Whether to flip texture data along its vertical axis or not.\n\t *\n\t * @return {boolean} Returns always `true` in context of GLSL.\n\t */\n\tisFlipY() {\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Enables hardware clipping.\n\t *\n\t * @param {string} planeCount - The clipping plane count.\n\t */\n\tenableHardwareClipping( planeCount ) {\n\n\t\tthis.enableExtension( 'GL_ANGLE_clip_cull_distance', 'require' );\n\n\t\tthis.builtins[ 'vertex' ].push( `out float gl_ClipDistance[ ${ planeCount } ]` );\n\n\t}\n\n\t/**\n\t * Enables multiview.\n\t */\n\tenableMultiview() {\n\n\t\tthis.enableExtension( 'GL_OVR_multiview2', 'require', 'fragment' );\n\t\tthis.enableExtension( 'GL_OVR_multiview2', 'require', 'vertex' );\n\n\t\tthis.builtins[ 'vertex' ].push( 'layout(num_views = 2) in' );\n\n\t}\n\n\t/**\n\t * Registers a transform in context of Transform Feedback.\n\t *\n\t * @param {string} varyingName - The varying name.\n\t * @param {AttributeNode} attributeNode - The attribute node.\n\t */\n\tregisterTransform( varyingName, attributeNode ) {\n\n\t\tthis.transforms.push( { varyingName, attributeNode } );\n\n\t}\n\n\t/**\n\t * Returns the transforms of the given shader stage as a GLSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The GLSL snippet that defines the transforms.\n\t */\n\tgetTransforms( /* shaderStage  */ ) {\n\n\t\tconst transforms = this.transforms;\n\n\t\tlet snippet = '';\n\n\t\tfor ( let i = 0; i < transforms.length; i ++ ) {\n\n\t\t\tconst transform = transforms[ i ];\n\t\t\tconst attributeName = this.getPropertyName( transform.attributeNode );\n\n\t\t\tif ( attributeName ) snippet += `${ transform.varyingName } = ${ attributeName };\\n\\t`;\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Returns a GLSL struct based on the given name and variables.\n\t *\n\t * @private\n\t * @param {string} name - The struct name.\n\t * @param {string} vars - The struct variables.\n\t * @return {string} The GLSL snippet representing a struct.\n\t */\n\t_getGLSLUniformStruct( name, vars ) {\n\n\t\treturn `\nlayout( std140 ) uniform ${name} {\n${vars}\n};`;\n\n\t}\n\n\t/**\n\t * Returns a GLSL vertex shader based on the given shader data.\n\t *\n\t * @private\n\t * @param {Object} shaderData - The shader data.\n\t * @return {string} The vertex shader.\n\t */\n\t_getGLSLVertexCode( shaderData ) {\n\n\t\treturn `#version 300 es\n\n${ this.getSignature() }\n\n// extensions\n${shaderData.extensions}\n\n// precision\n${ defaultPrecisions }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// attributes\n${shaderData.attributes}\n\n// codes\n${shaderData.codes}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// transforms\n\t${shaderData.transforms}\n\n\t// flow\n\t${shaderData.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`;\n\n\t}\n\n\t/**\n\t * Returns a GLSL fragment shader based on the given shader data.\n\t *\n\t * @private\n\t * @param {Object} shaderData - The shader data.\n\t * @return {string} The vertex shader.\n\t */\n\t_getGLSLFragmentCode( shaderData ) {\n\n\t\treturn `#version 300 es\n\n${ this.getSignature() }\n\n// extensions\n${shaderData.extensions}\n\n// precision\n${ defaultPrecisions }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// codes\n${shaderData.codes}\n\n// structs\n${shaderData.structs}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t/**\n\t * Controls the code build of the shader stages.\n\t */\n\tbuildCode() {\n\n\t\tconst shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };\n\n\t\tthis.sortBindingGroups();\n\n\t\tfor ( const shaderStage in shadersData ) {\n\n\t\t\tlet flow = '// code\\n\\n';\n\t\t\tflow += this.flowCode[ shaderStage ];\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\t\t\tconst mainNode = flowNodes[ flowNodes.length - 1 ];\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tconst flowSlotData = this.getFlowData( node/*, shaderStage*/ );\n\t\t\t\tconst slotName = node.name;\n\n\t\t\t\tif ( slotName ) {\n\n\t\t\t\t\tif ( flow.length > 0 ) flow += '\\n';\n\n\t\t\t\t\tflow += `\\t// flow -> ${ slotName }\\n\\t`;\n\n\t\t\t\t}\n\n\t\t\t\tflow += `${ flowSlotData.code }\\n\\t`;\n\n\t\t\t\tif ( node === mainNode && shaderStage !== 'compute' ) {\n\n\t\t\t\t\tflow += '// result\\n\\t';\n\n\t\t\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\t\t\tflow += 'gl_Position = ';\n\t\t\t\t\t\tflow += `${ flowSlotData.result };`;\n\n\t\t\t\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\t\tif ( ! node.outputNode.isOutputStructNode ) {\n\n\t\t\t\t\t\t\tflow += 'fragColor = ';\n\t\t\t\t\t\t\tflow += `${ flowSlotData.result };`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst stageData = shadersData[ shaderStage ];\n\n\t\t\tstageData.extensions = this.getExtensions( shaderStage );\n\t\t\tstageData.uniforms = this.getUniforms( shaderStage );\n\t\t\tstageData.attributes = this.getAttributes( shaderStage );\n\t\t\tstageData.varyings = this.getVaryings( shaderStage );\n\t\t\tstageData.vars = this.getVars( shaderStage );\n\t\t\tstageData.structs = this.getStructs( shaderStage );\n\t\t\tstageData.codes = this.getCodes( shaderStage );\n\t\t\tstageData.transforms = this.getTransforms( shaderStage );\n\t\t\tstageData.flow = flow;\n\n\t\t}\n\n\t\tif ( this.material !== null ) {\n\n\t\t\tthis.vertexShader = this._getGLSLVertexCode( shadersData.vertex );\n\t\t\tthis.fragmentShader = this._getGLSLFragmentCode( shadersData.fragment );\n\n\t\t} else {\n\n\t\t\tthis.computeShader = this._getGLSLVertexCode( shadersData.compute );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is one of the more important ones since it's responsible\n\t * for generating a matching binding instance for the given uniform node.\n\t *\n\t * These bindings are later used in the renderer to create bind groups\n\t * and layouts.\n\t *\n\t * @param {UniformNode} node - The uniform node.\n\t * @param {string} type - The node data type.\n\t * @param {string} shaderStage - The shader stage.\n\t * @param {?string} [name=null] - An optional uniform name.\n\t * @return {NodeUniform} The node uniform object.\n\t */\n\tgetUniformFromNode( node, type, shaderStage, name = null ) {\n\n\t\tconst uniformNode = super.getUniformFromNode( node, type, shaderStage, name );\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tlet uniformGPU = nodeData.uniformGPU;\n\n\t\tif ( uniformGPU === undefined ) {\n\n\t\t\tconst group = node.groupNode;\n\t\t\tconst groupName = group.name;\n\n\t\t\tconst bindings = this.getBindGroupArray( groupName, shaderStage );\n\n\t\t\tif ( type === 'texture' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledTexture( uniformNode.name, uniformNode.node, group );\n\t\t\t\tbindings.push( uniformGPU );\n\n\t\t\t} else if ( type === 'cubeTexture' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node, group );\n\t\t\t\tbindings.push( uniformGPU );\n\n\t\t\t} else if ( type === 'texture3D' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledTexture3D( uniformNode.name, uniformNode.node, group );\n\t\t\t\tbindings.push( uniformGPU );\n\n\t\t\t} else if ( type === 'buffer' ) {\n\n\t\t\t\tnode.name = `NodeBuffer_${ node.id }`;\n\t\t\t\tuniformNode.name = `buffer${ node.id }`;\n\n\t\t\t\tconst buffer = new NodeUniformBuffer( node, group );\n\t\t\t\tbuffer.name = node.name;\n\n\t\t\t\tbindings.push( buffer );\n\n\t\t\t\tuniformGPU = buffer;\n\n\t\t\t} else {\n\n\t\t\t\tconst uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );\n\n\t\t\t\tlet uniformsGroup = uniformsStage[ groupName ];\n\n\t\t\t\tif ( uniformsGroup === undefined ) {\n\n\t\t\t\t\tuniformsGroup = new NodeUniformsGroup( shaderStage + '_' + groupName, group );\n\t\t\t\t\t//uniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tuniformsStage[ groupName ] = uniformsGroup;\n\n\t\t\t\t\tbindings.push( uniformsGroup );\n\n\t\t\t\t}\n\n\t\t\t\tuniformGPU = this.getNodeUniform( uniformNode, type );\n\n\t\t\t\tuniformsGroup.addUniform( uniformGPU );\n\n\t\t\t}\n\n\t\t\tnodeData.uniformGPU = uniformGPU;\n\n\t\t}\n\n\t\treturn uniformNode;\n\n\t}\n\n}\n\nlet _vector2 = null;\nlet _color4 = null;\n\n/**\n * Most of the rendering related logic is implemented in the\n * {@link Renderer} module and related management components.\n * Sometimes it is required though to execute commands which are\n * specific to the current 3D backend (which is WebGPU or WebGL 2).\n * This abstract base class defines an interface that encapsulates\n * all backend-related logic. Derived classes for each backend must\n * implement the interface.\n *\n * @abstract\n * @private\n */\nclass Backend {\n\n\t/**\n\t * Constructs a new backend.\n\t *\n\t * @param {Object} parameters - An object holding parameters for the backend.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\t/**\n\t\t * The parameters of the backend.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = Object.assign( {}, parameters );\n\n\t\t/**\n\t\t * This weak map holds backend-specific data of objects\n\t\t * like textures, attributes or render targets.\n\t\t *\n\t\t * @type {WeakMap}\n\t\t */\n\t\tthis.data = new WeakMap();\n\n\t\t/**\n\t\t * A reference to the renderer.\n\t\t *\n\t\t * @type {?Renderer}\n\t\t * @default null\n\t\t */\n\t\tthis.renderer = null;\n\n\t\t/**\n\t\t * A reference to the canvas element the renderer is drawing to.\n\t\t *\n\t\t * @type {?(HTMLCanvasElement|OffscreenCanvas)}\n\t\t * @default null\n\t\t */\n\t\tthis.domElement = null;\n\n\t\t/**\n\t\t * A reference to the timestamp query pool.\n   \t\t *\n   \t\t * @type {{render: ?TimestampQueryPool, compute: ?TimestampQueryPool}}\n\t\t */\n\t\tthis.timestampQueryPool = {\n\t\t\t'render': null,\n\t\t\t'compute': null\n\t\t};\n\n\t\t/**\n\t\t * Whether to track timestamps with a Timestamp Query API or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.trackTimestamp = ( parameters.trackTimestamp === true );\n\n\t}\n\n\t/**\n\t * Initializes the backend so it is ready for usage. Concrete backends\n\t * are supposed to implement their rendering context creation and related\n\t * operations in this method.\n\t *\n\t * @async\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {Promise} A Promise that resolves when the backend has been initialized.\n\t */\n\tasync init( renderer ) {\n\n\t\tthis.renderer = renderer;\n\n\t}\n\n\t/**\n\t * The coordinate system of the backend.\n\t *\n\t * @abstract\n\t * @type {number}\n\t * @readonly\n\t */\n\tget coordinateSystem() {}\n\n\t// render context\n\n\t/**\n\t * This method is executed at the beginning of a render call and\n\t * can be used by the backend to prepare the state for upcoming\n\t * draw calls.\n\t *\n\t * @abstract\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tbeginRender( /*renderContext*/ ) {}\n\n\t/**\n\t * This method is executed at the end of a render call and\n\t * can be used by the backend to finalize work after draw\n\t * calls.\n\t *\n\t * @abstract\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tfinishRender( /*renderContext*/ ) {}\n\n\t/**\n\t * This method is executed at the beginning of a compute call and\n\t * can be used by the backend to prepare the state for upcoming\n\t * compute tasks.\n\t *\n\t * @abstract\n\t * @param {Node|Array<Node>} computeGroup - The compute node(s).\n\t */\n\tbeginCompute( /*computeGroup*/ ) {}\n\n\t/**\n\t * This method is executed at the end of a compute call and\n\t * can be used by the backend to finalize work after compute\n\t * tasks.\n\t *\n\t * @abstract\n\t * @param {Node|Array<Node>} computeGroup - The compute node(s).\n\t */\n\tfinishCompute( /*computeGroup*/ ) {}\n\n\t// render object\n\n\t/**\n\t * Executes a draw command for the given render object.\n\t *\n\t * @abstract\n\t * @param {RenderObject} renderObject - The render object to draw.\n\t * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.\n\t */\n\tdraw( /*renderObject, info*/ ) { }\n\n\t// compute node\n\n\t/**\n\t * Executes a compute command for the given compute node.\n\t *\n\t * @abstract\n\t * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.\n\t * @param {Node} computeNode - The compute node.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t * @param {ComputePipeline} computePipeline - The compute pipeline.\n\t */\n\tcompute( /*computeGroup, computeNode, computeBindings, computePipeline*/ ) { }\n\n\t// program\n\n\t/**\n\t * Creates a shader program from the given programmable stage.\n\t *\n\t * @abstract\n\t * @param {ProgrammableStage} program - The programmable stage.\n\t */\n\tcreateProgram( /*program*/ ) { }\n\n\t/**\n\t * Destroys the shader program of the given programmable stage.\n\t *\n\t * @abstract\n\t * @param {ProgrammableStage} program - The programmable stage.\n\t */\n\tdestroyProgram( /*program*/ ) { }\n\n\t// bindings\n\n\t/**\n\t * Creates bindings from the given bind group definition.\n\t *\n\t * @abstract\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {Array<BindGroup>} bindings - Array of bind groups.\n\t * @param {number} cacheIndex - The cache index.\n\t * @param {number} version - The version.\n\t */\n\tcreateBindings( /*bindGroup, bindings, cacheIndex, version*/ ) { }\n\n\t/**\n\t * Updates the given bind group definition.\n\t *\n\t * @abstract\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {Array<BindGroup>} bindings - Array of bind groups.\n\t * @param {number} cacheIndex - The cache index.\n\t * @param {number} version - The version.\n\t */\n\tupdateBindings( /*bindGroup, bindings, cacheIndex, version*/ ) { }\n\n\t/**\n\t * Updates a buffer binding.\n\t *\n\t * @abstract\n\t * @param {Buffer} binding - The buffer binding to update.\n\t */\n\tupdateBinding( /*binding*/ ) { }\n\n\t// pipeline\n\n\t/**\n\t * Creates a render pipeline for the given render object.\n\t *\n\t * @abstract\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n\t */\n\tcreateRenderPipeline( /*renderObject, promises*/ ) { }\n\n\t/**\n\t * Creates a compute pipeline for the given compute node.\n\t *\n\t * @abstract\n\t * @param {ComputePipeline} computePipeline - The compute pipeline.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t */\n\tcreateComputePipeline( /*computePipeline, bindings*/ ) { }\n\n\t// cache key\n\n\t/**\n\t * Returns `true` if the render pipeline requires an update.\n\t *\n\t * @abstract\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether the render pipeline requires an update or not.\n\t */\n\tneedsRenderUpdate( /*renderObject*/ ) { }\n\n\t/**\n\t * Returns a cache key that is used to identify render pipelines.\n\t *\n\t * @abstract\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {string} The cache key.\n\t */\n\tgetRenderCacheKey( /*renderObject*/ ) { }\n\n\t// node builder\n\n\t/**\n\t * Returns a node builder for the given render object.\n\t *\n\t * @abstract\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {NodeBuilder} The node builder.\n\t */\n\tcreateNodeBuilder( /*renderObject, renderer*/ ) { }\n\n\t// textures\n\n\t/**\n\t * Creates a GPU sampler for the given texture.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture to create the sampler for.\n\t */\n\tcreateSampler( /*texture*/ ) { }\n\n\t/**\n\t * Destroys the GPU sampler for the given texture.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture to destroy the sampler for.\n\t */\n\tdestroySampler( /*texture*/ ) {}\n\n\t/**\n\t * Creates a default texture for the given texture that can be used\n\t * as a placeholder until the actual texture is ready for usage.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture to create a default texture for.\n\t */\n\tcreateDefaultTexture( /*texture*/ ) { }\n\n\t/**\n\t * Defines a texture on the GPU for the given texture object.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tcreateTexture( /*texture, options={}*/ ) { }\n\n\t/**\n\t * Uploads the updated texture data to the GPU.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tupdateTexture( /*texture, options = {}*/ ) { }\n\n\t/**\n\t * Generates mipmaps for the given texture.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture.\n\t */\n\tgenerateMipmaps( /*texture*/ ) { }\n\n\t/**\n\t * Destroys the GPU data for the given texture object.\n\t *\n\t * @abstract\n\t * @param {Texture} texture - The texture.\n\t */\n\tdestroyTexture( /*texture*/ ) { }\n\n\t/**\n\t * Returns texture data as a typed array.\n\t *\n\t * @abstract\n\t * @async\n\t * @param {Texture} texture - The texture to copy.\n\t * @param {number} x - The x coordinate of the copy origin.\n\t * @param {number} y - The y coordinate of the copy origin.\n\t * @param {number} width - The width of the copy.\n\t * @param {number} height - The height of the copy.\n\t * @param {number} faceIndex - The face index.\n\t * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.\n\t */\n\tasync copyTextureToBuffer( /*texture, x, y, width, height, faceIndex*/ ) {}\n\n\t/**\n\t * Copies data of the given source texture to the given destination texture.\n\t *\n\t * @abstract\n\t * @param {Texture} srcTexture - The source texture.\n\t * @param {Texture} dstTexture - The destination texture.\n\t * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.\n\t * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.\n\t * @param {number} [srcLevel=0] - The source mip level to copy from.\n\t * @param {number} [dstLevel=0] - The destination mip level to copy to.\n\t */\n\tcopyTextureToTexture( /*srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0*/ ) {}\n\n\t/**\n\t* Copies the current bound framebuffer to the given texture.\n\t*\n\t* @abstract\n\t* @param {Texture} texture - The destination texture.\n\t* @param {RenderContext} renderContext - The render context.\n\t* @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n\t*/\n\tcopyFramebufferToTexture( /*texture, renderContext, rectangle*/ ) {}\n\n\t// attributes\n\n\t/**\n\t * Creates the GPU buffer of a shader attribute.\n\t *\n\t * @abstract\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tcreateAttribute( /*attribute*/ ) { }\n\n\t/**\n\t * Creates the GPU buffer of an indexed shader attribute.\n\t *\n\t * @abstract\n\t * @param {BufferAttribute} attribute - The indexed buffer attribute.\n\t */\n\tcreateIndexAttribute( /*attribute*/ ) { }\n\n\t/**\n\t * Creates the GPU buffer of a storage attribute.\n\t *\n\t * @abstract\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tcreateStorageAttribute( /*attribute*/ ) { }\n\n\t/**\n\t * Updates the GPU buffer of a shader attribute.\n\t *\n\t * @abstract\n\t * @param {BufferAttribute} attribute - The buffer attribute to update.\n\t */\n\tupdateAttribute( /*attribute*/ ) { }\n\n\t/**\n\t * Destroys the GPU buffer of a shader attribute.\n\t *\n\t * @abstract\n\t * @param {BufferAttribute} attribute - The buffer attribute to destroy.\n\t */\n\tdestroyAttribute( /*attribute*/ ) { }\n\n\t// canvas\n\n\t/**\n\t * Returns the backend's rendering context.\n\t *\n\t * @abstract\n\t * @return {Object} The rendering context.\n\t */\n\tgetContext() { }\n\n\t/**\n\t * Backends can use this method if they have to run\n\t * logic when the renderer gets resized.\n\t *\n\t * @abstract\n\t */\n\tupdateSize() { }\n\n\t/**\n\t * Updates the viewport with the values from the given render context.\n\t *\n\t * @abstract\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tupdateViewport( /*renderContext*/ ) {}\n\n\t// utils\n\n\t/**\n\t * Returns `true` if the given 3D object is fully occluded by other\n\t * 3D objects in the scene. Backends must implement this method by using\n\t * a Occlusion Query API.\n\t *\n\t * @abstract\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object is fully occluded or not.\n\t */\n\tisOccluded( /*renderContext, object*/ ) {}\n\n\t/**\n\t * Resolves the time stamp for the given render context and type.\n\t *\n\t * @async\n\t * @abstract\n\t * @param {string} [type='render'] - The type of the time stamp.\n\t * @return {Promise<number>} A Promise that resolves with the time stamp.\n\t */\n\tasync resolveTimestampsAsync( type = 'render' ) {\n\n\t\tif ( ! this.trackTimestamp ) {\n\n\t\t\twarnOnce( 'WebGPURenderer: Timestamp tracking is disabled.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst queryPool = this.timestampQueryPool[ type ];\n\t\tif ( ! queryPool ) {\n\n\t\t\twarnOnce( `WebGPURenderer: No timestamp query pool for type '${type}' found.` );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst duration = await queryPool.resolveQueriesAsync();\n\n\t\tthis.renderer.info[ type ].timestamp = duration;\n\n\t\treturn duration;\n\n\t}\n\n\t/**\n\t * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n\t * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n\t *\n\t * @async\n\t * @abstract\n\t * @return {Promise} A Promise that resolves when synchronization has been finished.\n\t */\n\tasync waitForGPU() {}\n\n\t/**\n\t * This method performs a readback operation by moving buffer data from\n\t * a storage buffer attribute from the GPU to the CPU.\n\t *\n\t * @async\n\t * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n\t * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n\t */\n\tasync getArrayBufferAsync( /* attribute */ ) {}\n\n\t/**\n\t * Checks if the given feature is supported by the backend.\n\t *\n\t * @async\n\t * @abstract\n\t * @param {string} name - The feature's name.\n\t * @return {Promise<boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.\n\t */\n\tasync hasFeatureAsync( /*name*/ ) { }\n\n\t/**\n\t * Checks if the given feature is supported  by the backend.\n\t *\n\t * @abstract\n\t * @param {string} name - The feature's name.\n\t * @return {boolean} Whether the feature is supported or not.\n\t */\n\thasFeature( /*name*/ ) {}\n\n\t/**\n\t * Returns the maximum anisotropy texture filtering value.\n\t *\n\t * @abstract\n\t * @return {number} The maximum anisotropy texture filtering value.\n\t */\n\tgetMaxAnisotropy() {}\n\n\t/**\n\t * Returns the drawing buffer size.\n\t *\n\t * @return {Vector2} The drawing buffer size.\n\t */\n\tgetDrawingBufferSize() {\n\n\t\t_vector2 = _vector2 || new Vector2();\n\n\t\treturn this.renderer.getDrawingBufferSize( _vector2 );\n\n\t}\n\n\t/**\n\t * Defines the scissor test.\n\t *\n\t * @abstract\n\t * @param {boolean} boolean - Whether the scissor test should be enabled or not.\n\t */\n\tsetScissorTest( /*boolean*/ ) { }\n\n\t/**\n\t * Returns the clear color and alpha into a single\n\t * color object.\n\t *\n\t * @return {Color4} The clear color.\n\t */\n\tgetClearColor() {\n\n\t\tconst renderer = this.renderer;\n\n\t\t_color4 = _color4 || new Color4();\n\n\t\trenderer.getClearColor( _color4 );\n\n\t\t_color4.getRGB( _color4 );\n\n\t\treturn _color4;\n\n\t}\n\n\t/**\n\t * Returns the DOM element. If no DOM element exists, the backend\n\t * creates a new one.\n\t *\n\t * @return {HTMLCanvasElement} The DOM element.\n\t */\n\tgetDomElement() {\n\n\t\tlet domElement = this.domElement;\n\n\t\tif ( domElement === null ) {\n\n\t\t\tdomElement = ( this.parameters.canvas !== undefined ) ? this.parameters.canvas : createCanvasElement();\n\n\t\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\t\tif ( 'setAttribute' in domElement ) domElement.setAttribute( 'data-engine', `three.js r${REVISION} webgpu` );\n\n\t\t\tthis.domElement = domElement;\n\n\t\t}\n\n\t\treturn domElement;\n\n\t}\n\n\t/**\n\t * Sets a dictionary for the given object into the\n\t * internal data structure.\n\t *\n\t * @param {Object} object - The object.\n\t * @param {Object} value - The dictionary to set.\n\t */\n\tset( object, value ) {\n\n\t\tthis.data.set( object, value );\n\n\t}\n\n\t/**\n\t * Returns the dictionary for the given object.\n\t *\n\t * @param {Object} object - The object.\n\t * @return {Object} The object's dictionary.\n\t */\n\tget( object ) {\n\n\t\tlet map = this.data.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.data.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\t/**\n\t * Checks if the given object has a dictionary\n\t * with data defined.\n\t *\n\t * @param {Object} object - The object.\n\t * @return {boolean} Whether a dictionary for the given object as been defined or not.\n\t */\n\thas( object ) {\n\n\t\treturn this.data.has( object );\n\n\t}\n\n\t/**\n\t * Deletes an object from the internal data structure.\n\t *\n\t * @param {Object} object - The object to delete.\n\t */\n\tdelete( object ) {\n\n\t\tthis.data.delete( object );\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t *\n\t * @abstract\n\t */\n\tdispose() { }\n\n}\n\nlet _id$1 = 0;\n\n/**\n * This module is internally used in context of compute shaders.\n * This type of shader is not natively supported in WebGL 2 and\n * thus implemented via Transform Feedback. `DualAttributeData`\n * manages the related data.\n *\n * @private\n */\nclass DualAttributeData {\n\n\tconstructor( attributeData, dualBuffer ) {\n\n\t\tthis.buffers = [ attributeData.bufferGPU, dualBuffer ];\n\t\tthis.type = attributeData.type;\n\t\tthis.bufferType = attributeData.bufferType;\n\t\tthis.pbo = attributeData.pbo;\n\t\tthis.byteLength = attributeData.byteLength;\n\t\tthis.bytesPerElement = attributeData.BYTES_PER_ELEMENT;\n\t\tthis.version = attributeData.version;\n\t\tthis.isInteger = attributeData.isInteger;\n\t\tthis.activeBufferIndex = 0;\n\t\tthis.baseId = attributeData.id;\n\n\t}\n\n\n\tget id() {\n\n\t\treturn `${ this.baseId }|${ this.activeBufferIndex }`;\n\n\t}\n\n\tget bufferGPU() {\n\n\t\treturn this.buffers[ this.activeBufferIndex ];\n\n\t}\n\n\tget transformBuffer() {\n\n\t\treturn this.buffers[ this.activeBufferIndex ^ 1 ];\n\n\t}\n\n\tswitchBuffers() {\n\n\t\tthis.activeBufferIndex ^= 1;\n\n\t}\n\n}\n\n/**\n * A WebGL 2 backend utility module for managing shader attributes.\n *\n * @private\n */\nclass WebGLAttributeUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGLBackend} backend - The WebGL 2 backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGL 2 backend.\n\t\t *\n\t\t * @type {WebGLBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t}\n\n\t/**\n\t * Creates the GPU buffer for the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t * @param {GLenum } bufferType - A flag that indicates the buffer type and thus binding point target.\n\t */\n\tcreateAttribute( attribute, bufferType ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage || gl.STATIC_DRAW;\n\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\n\t\tlet bufferGPU = bufferData.bufferGPU;\n\n\t\tif ( bufferGPU === undefined ) {\n\n\t\t\tbufferGPU = this._createBuffer( gl, bufferType, array, usage );\n\n\t\t\tbufferData.bufferGPU = bufferGPU;\n\t\t\tbufferData.bufferType = bufferType;\n\t\t\tbufferData.version = bufferAttribute.version;\n\n\t\t}\n\n\t\t//attribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\ttype = gl.HALF_FLOAT;\n\n\t\t\t} else {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLBackend: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\tlet attributeData = {\n\t\t\tbufferGPU,\n\t\t\tbufferType,\n\t\t\ttype,\n\t\t\tbyteLength: array.byteLength,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version,\n\t\t\tpbo: attribute.pbo,\n\t\t\tisInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute.gpuType === IntType,\n\t\t\tid: _id$1 ++\n\t\t};\n\n\t\tif ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) {\n\n\t\t\t// create buffer for transform feedback use\n\t\t\tconst bufferGPUDual = this._createBuffer( gl, bufferType, array, usage );\n\t\t\tattributeData = new DualAttributeData( attributeData, bufferGPUDual );\n\n\t\t}\n\n\t\tbackend.set( attribute, attributeData );\n\n\t}\n\n\t/**\n\t * Updates the GPU buffer of the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tupdateAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst array = attribute.array;\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\t\tconst bufferType = bufferData.bufferType;\n\t\tconst updateRanges = attribute.isInterleavedBufferAttribute ? attribute.data.updateRanges : attribute.updateRanges;\n\n\t\tgl.bindBuffer( bufferType, bufferData.bufferGPU );\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\t\t\t\tgl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, range.start, range.count );\n\n\t\t\t}\n\n\t\t\tbufferAttribute.clearUpdateRanges();\n\n\t\t}\n\n\t\tgl.bindBuffer( bufferType, null );\n\n\t\tbufferData.version = bufferAttribute.version;\n\n\t}\n\n\t/**\n\t * Destroys the GPU buffer of the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tdestroyAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tbackend.delete( attribute.data );\n\n\t\t}\n\n\t\tconst attributeData = backend.get( attribute );\n\n\t\tgl.deleteBuffer( attributeData.bufferGPU );\n\n\t\tbackend.delete( attribute );\n\n\t}\n\n\t/**\n\t * This method performs a readback operation by moving buffer data from\n\t * a storage buffer attribute from the GPU to the CPU.\n\t *\n\t * @async\n\t * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n\t * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n\t */\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst { bufferGPU } = backend.get( bufferAttribute );\n\n\t\tconst array = attribute.array;\n\t\tconst byteLength = array.byteLength;\n\n\t\tgl.bindBuffer( gl.COPY_READ_BUFFER, bufferGPU );\n\n\t\tconst writeBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.COPY_WRITE_BUFFER, writeBuffer );\n\t\tgl.bufferData( gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ );\n\n\t\tgl.copyBufferSubData( gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength );\n\n\t\tawait backend.utils._clientWaitAsync();\n\n\t\tconst dstBuffer = new attribute.array.constructor( array.length );\n\n\t\t// Ensure the buffer is bound before reading\n\t\tgl.bindBuffer( gl.COPY_WRITE_BUFFER, writeBuffer );\n\n\t\tgl.getBufferSubData( gl.COPY_WRITE_BUFFER, 0, dstBuffer );\n\n\t\tgl.deleteBuffer( writeBuffer );\n\n\t\tgl.bindBuffer( gl.COPY_READ_BUFFER, null );\n\t\tgl.bindBuffer( gl.COPY_WRITE_BUFFER, null );\n\n\t\treturn dstBuffer.buffer;\n\n\t}\n\n\t/**\n\t * Creates a WebGL buffer with the given data.\n\t *\n\t * @private\n\t * @param {WebGL2RenderingContext} gl - The rendering context.\n\t * @param {GLenum } bufferType - A flag that indicates the buffer type and thus binding point target.\n\t * @param {TypedArray} array - The array of the buffer attribute.\n\t * @param {GLenum} usage - The usage.\n\t * @return {WebGLBuffer} The WebGL buffer.\n\t */\n\t_createBuffer( gl, bufferType, array, usage ) {\n\n\t\tconst bufferGPU = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, bufferGPU );\n\t\tgl.bufferData( bufferType, array, usage );\n\t\tgl.bindBuffer( bufferType, null );\n\n\t\treturn bufferGPU;\n\n\t}\n\n}\n\nlet equationToGL, factorToGL;\n\n/**\n * A WebGL 2 backend utility module for managing the WebGL state.\n *\n * The major goal of this module is to reduce the number of state changes\n * by caching the WEbGL state with a series of variables. In this way, the\n * renderer only executes state change commands when necessary which\n * improves the overall performance.\n *\n * @private\n */\nclass WebGLState {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGLBackend} backend - The WebGL 2 backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGL 2 backend.\n\t\t *\n\t\t * @type {WebGLBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A reference to the rendering context.\n\t\t *\n\t\t * @type {WebGL2RenderingContext}\n\t\t */\n\t\tthis.gl = this.backend.gl;\n\n\t\t// Below properties are intended to cache\n\t\t// the WebGL state and are not explicitly\n\t\t// documented for convenience reasons.\n\n\t\tthis.enabled = {};\n\t\tthis.currentFlipSided = null;\n\t\tthis.currentCullFace = null;\n\t\tthis.currentProgram = null;\n\t\tthis.currentBlendingEnabled = false;\n\t\tthis.currentBlending = null;\n\t\tthis.currentBlendSrc = null;\n\t\tthis.currentBlendDst = null;\n\t\tthis.currentBlendSrcAlpha = null;\n\t\tthis.currentBlendDstAlpha = null;\n\t\tthis.currentPremultipledAlpha = null;\n\t\tthis.currentPolygonOffsetFactor = null;\n\t\tthis.currentPolygonOffsetUnits = null;\n\t\tthis.currentColorMask = null;\n\t\tthis.currentDepthFunc = null;\n\t\tthis.currentDepthMask = null;\n\t\tthis.currentStencilFunc = null;\n\t\tthis.currentStencilRef = null;\n\t\tthis.currentStencilFuncMask = null;\n\t\tthis.currentStencilFail = null;\n\t\tthis.currentStencilZFail = null;\n\t\tthis.currentStencilZPass = null;\n\t\tthis.currentStencilMask = null;\n\t\tthis.currentLineWidth = null;\n\t\tthis.currentClippingPlanes = 0;\n\n\t\tthis.currentVAO = null;\n\t\tthis.currentIndex = null;\n\n\t\tthis.currentBoundFramebuffers = {};\n\t\tthis.currentDrawbuffers = new WeakMap();\n\n\t\tthis.maxTextures = this.gl.getParameter( this.gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tthis.currentTextureSlot = null;\n\t\tthis.currentBoundTextures = {};\n\t\tthis.currentBoundBufferBases = {};\n\n\n\t\tthis._init();\n\n\t}\n\n\t/**\n\t * Inits the state of the utility.\n\t *\n\t * @private\n\t */\n\t_init() {\n\n\t\tconst gl = this.gl;\n\n\t\t// Store only WebGL constants here.\n\n\t\tequationToGL = {\n\t\t\t[ AddEquation ]: gl.FUNC_ADD,\n\t\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\n\t\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tfactorToGL = {\n\t\t\t[ ZeroFactor ]: gl.ZERO,\n\t\t\t[ OneFactor ]: gl.ONE,\n\t\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\n\t\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\n\t\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[ DstColorFactor ]: gl.DST_COLOR,\n\t\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\n\t\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tconst scissorParam = gl.getParameter( gl.SCISSOR_BOX );\n\t\tconst viewportParam = gl.getParameter( gl.VIEWPORT );\n\n\t\tthis.currentScissor = new Vector4().fromArray( scissorParam );\n\t\tthis.currentViewport = new Vector4().fromArray( viewportParam );\n\n\t\tthis._tempVec4 = new Vector4();\n\n\t}\n\n\t/**\n\t * Enables the given WebGL capability.\n\t *\n\t * This method caches the capability state so\n\t * `gl.enable()` is only called when necessary.\n\t *\n\t * @param {GLenum} id - The capability to enable.\n\t */\n\tenable( id ) {\n\n\t\tconst { enabled } = this;\n\n\t\tif ( enabled[ id ] !== true ) {\n\n\t\t\tthis.gl.enable( id );\n\t\t\tenabled[ id ] = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disables the given WebGL capability.\n\t *\n\t * This method caches the capability state so\n\t * `gl.disable()` is only called when necessary.\n\t *\n\t * @param {GLenum} id - The capability to enable.\n\t */\n\tdisable( id ) {\n\n\t\tconst { enabled } = this;\n\n\t\tif ( enabled[ id ] !== false ) {\n\n\t\t\tthis.gl.disable( id );\n\t\t\tenabled[ id ] = false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether polygons are front- or back-facing\n\t * by setting the winding orientation.\n\t *\n\t * This method caches the state so `gl.frontFace()` is only\n\t * called when necessary.\n\t *\n\t * @param {boolean} flipSided - Whether triangles flipped their sides or not.\n\t */\n\tsetFlipSided( flipSided ) {\n\n\t\tif ( this.currentFlipSided !== flipSided ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tthis.currentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether or not front- and/or back-facing\n\t * polygons can be culled.\n\t *\n\t * This method caches the state so `gl.cullFace()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} cullFace - Defines which polygons are candidates for culling.\n\t */\n\tsetCullFace( cullFace ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== this.currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tthis.currentCullFace = cullFace;\n\n\t}\n\n\t/**\n\t * Specifies the width of line primitives.\n\t *\n\t * This method caches the state so `gl.lineWidth()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} width - The line width.\n\t */\n\tsetLineWidth( width ) {\n\n\t\tconst { currentLineWidth, gl } = this;\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tgl.lineWidth( width );\n\n\t\t\tthis.currentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Defines the blending.\n\t *\n\t * This method caches the state so `gl.blendEquation()`, `gl.blendEquationSeparate()`,\n\t * `gl.blendFunc()` and  `gl.blendFuncSeparate()` are only called when necessary.\n\t *\n\t * @param {number} blending - The blending type.\n\t * @param {number} blendEquation - The blending equation.\n\t * @param {number} blendSrc - Only relevant for custom blending. The RGB source blending factor.\n\t * @param {number} blendDst - Only relevant for custom blending. The RGB destination blending factor.\n\t * @param {number} blendEquationAlpha - Only relevant for custom blending. The blending equation for alpha.\n\t * @param {number} blendSrcAlpha - Only relevant for custom blending. The alpha source blending factor.\n\t * @param {number} blendDstAlpha - Only relevant for custom blending. The alpha destination blending factor.\n\t * @param {boolean} premultipliedAlpha - Whether premultiplied alpha is enabled or not.\n\t */\n\tsetBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( this.currentBlendingEnabled === true ) {\n\n\t\t\t\tthis.disable( gl.BLEND );\n\t\t\t\tthis.currentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.currentBlendingEnabled === false ) {\n\n\t\t\tthis.enable( gl.BLEND );\n\t\t\tthis.currentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha ) {\n\n\t\t\t\tif ( this.currentBlendEquation !== AddEquation || this.currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\tthis.currentBlendEquation = AddEquation;\n\t\t\t\t\tthis.currentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.currentBlendSrc = null;\n\t\t\t\tthis.currentBlendDst = null;\n\t\t\t\tthis.currentBlendSrcAlpha = null;\n\t\t\t\tthis.currentBlendDstAlpha = null;\n\n\t\t\t\tthis.currentBlending = blending;\n\t\t\t\tthis.currentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tthis.currentBlendEquation = blendEquation;\n\t\t\tthis.currentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tthis.currentBlendSrc = blendSrc;\n\t\t\tthis.currentBlendDst = blendDst;\n\t\t\tthis.currentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tthis.currentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tthis.currentBlending = blending;\n\t\tthis.currentPremultipledAlpha = false;\n\n\t}\n\n\t/**\n\t * Specifies whether colors can be written when rendering\n\t * into a framebuffer or not.\n\t *\n\t * This method caches the state so `gl.colorMask()` is only\n\t * called when necessary.\n\t *\n\t * @param {boolean} colorMask - The color mask.\n\t */\n\tsetColorMask( colorMask ) {\n\n\t\tif ( this.currentColorMask !== colorMask ) {\n\n\t\t\tthis.gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\tthis.currentColorMask = colorMask;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether the depth test is enabled or not.\n\t *\n\t * @param {boolean} depthTest - Whether the depth test is enabled or not.\n\t */\n\tsetDepthTest( depthTest ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( depthTest ) {\n\n\t\t\tthis.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether depth values can be written when rendering\n\t * into a framebuffer or not.\n\t *\n\t * This method caches the state so `gl.depthMask()` is only\n\t * called when necessary.\n\t *\n\t * @param {boolean} depthMask - The depth mask.\n\t */\n\tsetDepthMask( depthMask ) {\n\n\t\tif ( this.currentDepthMask !== depthMask ) {\n\n\t\t\tthis.gl.depthMask( depthMask );\n\t\t\tthis.currentDepthMask = depthMask;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies the depth compare function.\n\t *\n\t * This method caches the state so `gl.depthFunc()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} depthFunc - The depth compare function.\n\t */\n\tsetDepthFunc( depthFunc ) {\n\n\t\tif ( this.currentDepthFunc !== depthFunc ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tthis.currentDepthFunc = depthFunc;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies the scissor box.\n\t *\n\t * @param {number} x - The x-coordinate of the lower left corner of the viewport.\n\t * @param {number} y - The y-coordinate of the lower left corner of the viewport.\n\t * @param {number} width - The width of the viewport.\n\t * @param {number} height - The height of the viewport.\n\t *\n\t */\n\tscissor( x, y, width, height ) {\n\n\t\tconst scissor = this._tempVec4.set( x, y, width, height );\n\n\t\tif ( this.currentScissor.equals( scissor ) === false ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tthis.currentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies the viewport.\n\t *\n\t * @param {number} x - The x-coordinate of the lower left corner of the viewport.\n\t * @param {number} y - The y-coordinate of the lower left corner of the viewport.\n\t * @param {number} width - The width of the viewport.\n\t * @param {number} height - The height of the viewport.\n\t *\n\t */\n\tviewport( x, y, width, height ) {\n\n\t\tconst viewport = this._tempVec4.set( x, y, width, height );\n\n\t\tif ( this.currentViewport.equals( viewport ) === false ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tthis.currentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Defines the scissor test.\n\t *\n\t * @param {boolean} boolean - Whether the scissor test should be enabled or not.\n\t */\n\tsetScissorTest( boolean ) {\n\n\t\tconst gl = this.gl;\n\n\t\tif ( boolean ) {\n\n\t\t\tgl.enable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tgl.disable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether the stencil test is enabled or not.\n\t *\n\t * @param {boolean} stencilTest - Whether the stencil test is enabled or not.\n\t */\n\tsetStencilTest( stencilTest ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( stencilTest ) {\n\n\t\t\tthis.enable( gl.STENCIL_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.STENCIL_TEST );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether stencil values can be written when rendering\n\t * into a framebuffer or not.\n\t *\n\t * This method caches the state so `gl.stencilMask()` is only\n\t * called when necessary.\n\t *\n\t * @param {boolean} stencilMask - The stencil mask.\n\t */\n\tsetStencilMask( stencilMask ) {\n\n\t\tif ( this.currentStencilMask !== stencilMask ) {\n\n\t\t\tthis.gl.stencilMask( stencilMask );\n\t\t\tthis.currentStencilMask = stencilMask;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether the stencil test functions.\n\t *\n\t * This method caches the state so `gl.stencilFunc()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} stencilFunc - The stencil compare function.\n\t * @param {number} stencilRef - The reference value for the stencil test.\n\t * @param {number} stencilMask - A bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done.\n\t */\n\tsetStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tif ( this.currentStencilFunc !== stencilFunc ||\n\t\t\t this.currentStencilRef !== stencilRef ||\n\t\t\t this.currentStencilFuncMask !== stencilMask ) {\n\n\t\t\tthis.gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\tthis.currentStencilFunc = stencilFunc;\n\t\t\tthis.currentStencilRef = stencilRef;\n\t\t\tthis.currentStencilFuncMask = stencilMask;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies whether the stencil test operation.\n\t *\n\t * This method caches the state so `gl.stencilOp()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} stencilFail - The function to use when the stencil test fails.\n\t * @param {number} stencilZFail - The function to use when the stencil test passes, but the depth test fail.\n\t * @param {number} stencilZPass - The function to use when both the stencil test and the depth test pass,\n\t * or when the stencil test passes and there is no depth buffer or depth testing is disabled.\n\t */\n\tsetStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tif ( this.currentStencilFail !== stencilFail ||\n\t\t\t this.currentStencilZFail !== stencilZFail ||\n\t\t\t this.currentStencilZPass !== stencilZPass ) {\n\n\t\t\tthis.gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\tthis.currentStencilFail = stencilFail;\n\t\t\tthis.currentStencilZFail = stencilZFail;\n\t\t\tthis.currentStencilZPass = stencilZPass;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Configures the WebGL state for the given material.\n\t *\n\t * @param {Material} material - The material to configure the state for.\n\t * @param {number} frontFaceCW - Whether the front faces are counter-clockwise or not.\n\t * @param {number} hardwareClippingPlanes - The number of hardware clipping planes.\n\t */\n\tsetMaterial( material, frontFaceCW, hardwareClippingPlanes ) {\n\n\t\tconst { gl } = this;\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? this.disable( gl.CULL_FACE )\n\t\t\t: this.enable( gl.CULL_FACE );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tthis.setFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? this.setBlending( NoBlending )\n\t\t\t: this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tthis.setDepthFunc( material.depthFunc );\n\t\tthis.setDepthTest( material.depthTest );\n\t\tthis.setDepthMask( material.depthWrite );\n\t\tthis.setColorMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tthis.setStencilTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tthis.setStencilMask( material.stencilWriteMask );\n\t\t\tthis.setStencilFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tthis.setStencilOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tthis.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true && this.backend.renderer.samples > 1\n\t\t\t? this.enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\n\t\t\t: this.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t\tif ( hardwareClippingPlanes > 0 ) {\n\n\t\t\tif ( this.currentClippingPlanes !== hardwareClippingPlanes ) {\n\n\t\t\t\tconst CLIP_DISTANCE0_WEBGL = 0x3000;\n\n\t\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\t\tif ( i < hardwareClippingPlanes ) {\n\n\t\t\t\t\t\tthis.enable( CLIP_DISTANCE0_WEBGL + i );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.disable( CLIP_DISTANCE0_WEBGL + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specifies the polygon offset.\n\t *\n\t * This method caches the state so `gl.polygonOffset()` is only\n\t * called when necessary.\n\t *\n\t * @param {boolean} polygonOffset - Whether polygon offset is enabled or not.\n\t * @param {number} factor - The scale factor for the variable depth offset for each polygon.\n\t * @param {number} units - The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset.\n\t */\n\tsetPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tthis.currentPolygonOffsetFactor = factor;\n\t\t\t\tthis.currentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Defines the usage of the given WebGL program.\n\t *\n\t * This method caches the state so `gl.useProgram()` is only\n\t * called when necessary.\n\t *\n\t * @param {WebGLProgram} program - The WebGL program to use.\n\t * @return {boolean} Whether a program change has been executed or not.\n\t */\n\tuseProgram( program ) {\n\n\t\tif ( this.currentProgram !== program ) {\n\n\t\t\tthis.gl.useProgram( program );\n\n\t\t\tthis.currentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Sets the vertex state by binding the given VAO and element buffer.\n\t *\n\t * @param {WebGLVertexArrayObject} vao - The VAO.\n\t * @param {WebGLBuffer} indexBuffer - The index buffer.\n\t * @return {boolean} Whether a vertex state has been changed or not.\n\t */\n\tsetVertexState( vao, indexBuffer = null ) {\n\n\t\tconst gl = this.gl;\n\n\t\tif ( this.currentVAO !== vao || this.currentIndex !== indexBuffer ) {\n\n\t\t\tgl.bindVertexArray( vao );\n\n\t\t\tif ( indexBuffer !== null ) {\n\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, indexBuffer );\n\n\t\t\t}\n\n\t\t\tthis.currentVAO = vao;\n\t\t\tthis.currentIndex = indexBuffer;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Resets the vertex array state by resetting the VAO and element buffer.\n\t */\n\tresetVertexState() {\n\n\t\tconst gl = this.gl;\n\n\t\tgl.bindVertexArray( null );\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, null );\n\n\t\tthis.currentVAO = null;\n\t\tthis.currentIndex = null;\n\n\t}\n\n\t// framebuffer\n\n\n\t/**\n\t * Binds the given framebuffer.\n\t *\n\t * This method caches the state so `gl.bindFramebuffer()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} target - The binding point (target).\n\t * @param {WebGLFramebuffer} framebuffer - The WebGL framebuffer to bind.\n\t * @return {boolean} Whether a bind has been executed or not.\n\t */\n\tbindFramebuffer( target, framebuffer ) {\n\n\t\tconst { gl, currentBoundFramebuffers } = this;\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\n\t\t\tif ( target === gl.DRAW_FRAMEBUFFER ) {\n\n\t\t\t\tcurrentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;\n\n\t\t\t}\n\n\t\t\tif ( target === gl.FRAMEBUFFER ) {\n\n\t\t\t\tcurrentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Defines draw buffers to which fragment colors are written into.\n\t * Configures the MRT setup of custom framebuffers.\n\t *\n\t * This method caches the state so `gl.drawBuffers()` is only\n\t * called when necessary.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {WebGLFramebuffer} framebuffer - The WebGL framebuffer.\n\t */\n\tdrawBuffers( renderContext, framebuffer ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet drawBuffers = [];\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tdrawBuffers = this.currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tthis.currentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\n\t\t\tconst textures = renderContext.textures;\n\n\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\n\n\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\tdrawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t}\n\n\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== gl.BACK ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = gl.BACK;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t}\n\n\t}\n\n\n\t// texture\n\n\t/**\n\t * Makes the given texture unit active.\n\t *\n\t * This method caches the state so `gl.activeTexture()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} webglSlot - The texture unit to make active.\n\t */\n\tactiveTexture( webglSlot ) {\n\n\t\tconst { gl, currentTextureSlot, maxTextures } = this;\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tthis.currentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Binds the given WebGL texture to a target.\n\t *\n\t * This method caches the state so `gl.bindTexture()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} webglType - The binding point (target).\n\t * @param {WebGLTexture} webglTexture - The WebGL texture to bind.\n\t * @param {number} webglSlot - The texture.\n\t */\n\tbindTexture( webglType, webglTexture, webglSlot ) {\n\n\t\tconst { gl, currentTextureSlot, currentBoundTextures, maxTextures } = this;\n\n\t\tif ( webglSlot === undefined ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\twebglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\t} else {\n\n\t\t\t\twebglSlot = currentTextureSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tthis.currentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t\tgl.bindTexture( webglType, webglTexture );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Binds a given WebGL buffer to a given binding point (target) at a given index.\n\t *\n\t * This method caches the state so `gl.bindBufferBase()` is only\n\t * called when necessary.\n\t *\n\t * @param {number} target - The target for the bind operation.\n\t * @param {number} index - The index of the target.\n\t * @param {WebGLBuffer} buffer - The WebGL buffer.\n\t * @return {boolean} Whether a bind has been executed or not.\n\t */\n\tbindBufferBase( target, index, buffer ) {\n\n\t\tconst { gl } = this;\n\n\t\tconst key = `${target}-${index}`;\n\n\t\tif ( this.currentBoundBufferBases[ key ] !== buffer ) {\n\n\t\t\tgl.bindBufferBase( target, index, buffer );\n\t\t\tthis.currentBoundBufferBases[ key ] = buffer;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\n\t/**\n\t * Unbinds the current bound texture.\n\t *\n\t * This method caches the state so `gl.bindTexture()` is only\n\t * called when necessary.\n\t */\n\tunbindTexture() {\n\n\t\tconst { gl, currentTextureSlot, currentBoundTextures } = this;\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * A WebGL 2 backend utility module with common helpers.\n *\n * @private\n */\nclass WebGLUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGLBackend} backend - The WebGL 2 backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGL 2 backend.\n\t\t *\n\t\t * @type {WebGLBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A reference to the rendering context.\n\t\t *\n\t\t * @type {WebGL2RenderingContext}\n\t\t */\n\t\tthis.gl = this.backend.gl;\n\n\t\t/**\n\t\t * A reference to a backend module holding extension-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {WebGLExtensions}\n\t\t */\n\t\tthis.extensions = backend.extensions;\n\n\t}\n\n\t/**\n\t * Converts the given three.js constant into a WebGL constant.\n\t * The method currently supports the conversion of texture formats\n\t * and types.\n\t *\n\t * @param {number} p - The three.js constant.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t * @return {?number} The corresponding WebGL constant.\n\t */\n\tconvert( p, colorSpace = NoColorSpace ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === UnsignedInt5999Type ) return gl.UNSIGNED_INT_5_9_9_9_REV;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\treturn gl.HALF_FLOAT;\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedFormat ) return gl.RED;\n\t\tif ( p === RedIntegerFormat ) return gl.RED_INTEGER;\n\t\tif ( p === RGFormat ) return gl.RG;\n\t\tif ( p === RGIntegerFormat ) return gl.RG_INTEGER;\n\t\tif ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( colorSpace === SRGBColorSpace ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC\n\n\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC1_Format || p === RGB_ETC2_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// RGTC\n\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\treturn gl.UNSIGNED_INT_24_8;\n\n\t\t}\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\t/**\n\t * This method can be used to synchronize the CPU with the GPU by waiting until\n\t * ongoing GPU commands have been completed.\n\t *\n\t * @private\n\t * @return {Promise} A promise that resolves when all ongoing GPU commands have been completed.\n\t */\n\t_clientWaitAsync() {\n\n\t\tconst { gl } = this;\n\n\t\tconst sync = gl.fenceSync( gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );\n\n\t\tgl.flush();\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tfunction test() {\n\n\t\t\t\tconst res = gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 );\n\n\t\t\t\tif ( res === gl.WAIT_FAILED ) {\n\n\t\t\t\t\tgl.deleteSync( sync );\n\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( res === gl.TIMEOUT_EXPIRED ) {\n\n\t\t\t\t\trequestAnimationFrame( test );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tgl.deleteSync( sync );\n\n\t\t\t\tresolve();\n\n\t\t\t}\n\n\t\t\ttest();\n\n\t\t} );\n\n\t}\n\n}\n\nlet initialized = false, wrappingToGL, filterToGL, compareToGL;\n\n/**\n * A WebGL 2 backend utility module for managing textures.\n *\n * @private\n */\nclass WebGLTextureUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGLBackend} backend - The WebGL 2 backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGL 2 backend.\n\t\t *\n\t\t * @type {WebGLBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A reference to the rendering context.\n\t\t *\n\t\t * @type {WebGL2RenderingContext}\n\t\t */\n\t\tthis.gl = backend.gl;\n\n\t\t/**\n\t\t * A reference to a backend module holding extension-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {WebGLExtensions}\n\t\t */\n\t\tthis.extensions = backend.extensions;\n\n\t\t/**\n\t\t * A dictionary for managing default textures. The key\n\t\t * is the binding point (target), the value the WEbGL texture object.\n\t\t *\n\t\t * @type {Object<GLenum,WebGLTexture>}\n\t\t */\n\t\tthis.defaultTextures = {};\n\n\t\tif ( initialized === false ) {\n\n\t\t\tthis._init();\n\n\t\t\tinitialized = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Inits the state of the utility.\n\t *\n\t * @private\n\t */\n\t_init() {\n\n\t\tconst gl = this.gl;\n\n\t\t// Store only WebGL constants here.\n\n\t\twrappingToGL = {\n\t\t\t[ RepeatWrapping ]: gl.REPEAT,\n\t\t\t[ ClampToEdgeWrapping ]: gl.CLAMP_TO_EDGE,\n\t\t\t[ MirroredRepeatWrapping ]: gl.MIRRORED_REPEAT\n\t\t};\n\n\t\tfilterToGL = {\n\t\t\t[ NearestFilter ]: gl.NEAREST,\n\t\t\t[ NearestMipmapNearestFilter ]: gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[ NearestMipmapLinearFilter ]: gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t\t[ LinearFilter ]: gl.LINEAR,\n\t\t\t[ LinearMipmapNearestFilter ]: gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[ LinearMipmapLinearFilter ]: gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tcompareToGL = {\n\t\t\t[ NeverCompare ]: gl.NEVER,\n\t\t\t[ AlwaysCompare ]: gl.ALWAYS,\n\t\t\t[ LessCompare ]: gl.LESS,\n\t\t\t[ LessEqualCompare ]: gl.LEQUAL,\n\t\t\t[ EqualCompare ]: gl.EQUAL,\n\t\t\t[ GreaterEqualCompare ]: gl.GEQUAL,\n\t\t\t[ GreaterCompare ]: gl.GREATER,\n\t\t\t[ NotEqualCompare ]: gl.NOTEQUAL\n\t\t};\n\n\t}\n\n\t/**\n\t * Returns the native texture type for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {GLenum} The native texture type.\n\t */\n\tgetGLTextureType( texture ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet glTextureType;\n\n\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_CUBE_MAP;\n\n\t\t} else if ( texture.isDepthArrayTexture === true || texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true || texture.isTextureArray === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_2D_ARRAY;\n\n\t\t} else if ( texture.isData3DTexture === true ) { // TODO: isCompressed3DTexture, wait for #26642\n\n\t\t\tglTextureType = gl.TEXTURE_3D;\n\n\t\t} else {\n\n\t\t\tglTextureType = gl.TEXTURE_2D;\n\n\n\t\t}\n\n\t\treturn glTextureType;\n\n\t}\n\n\t/**\n\t * Returns the native texture type for the given texture.\n\t *\n\t * @param {?string} internalFormatName - The internal format name. When `null`, the internal format is derived from the subsequent parameters.\n\t * @param {GLenum} glFormat - The WebGL format.\n\t * @param {GLenum} glType - The WebGL type.\n\t * @param {string} colorSpace - The texture's color space.\n\t * @param {boolean} [forceLinearTransfer=false] - Whether to force a linear transfer or not.\n\t * @return {GLenum} The internal format.\n\t */\n\tgetInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( gl[ internalFormatName ] !== undefined ) return gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === gl.RED ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.R32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.R16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RG32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RG16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RG8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RG16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RG8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RG16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGB ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGB32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGB16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGB8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGB16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGB32I;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8 : gl.RGB8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_6_5 ) internalFormat = gl.RGB565;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGB4;\n\t\t\tif ( glType === gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = gl.RGB9_E5;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGB_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGB8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGB16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGB32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGBA32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGBA16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGBA32I;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGBA4;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGBA32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_COMPONENT ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.DEPTH_COMPONENT16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.DEPTH_COMPONENT24;\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_STENCIL ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT_24_8 ) internalFormat = gl.DEPTH24_STENCIL8;\n\n\t\t}\n\n\t\tif ( internalFormat === gl.R16F || internalFormat === gl.R32F ||\n\t\t\tinternalFormat === gl.RG16F || internalFormat === gl.RG32F ||\n\t\t\tinternalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\t/**\n\t * Sets the texture parameters for the given texture.\n\t *\n\t * @param {GLenum} textureType - The texture type.\n\t * @param {Texture} texture - The texture.\n\t */\n\tsetTextureParameters( textureType, texture ) {\n\n\t\tconst { gl, extensions, backend } = this;\n\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\tgl.pixelStorei( gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE );\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\tif ( textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t// WebGL 2 does not support wrapping for depth 2D array textures\n\t\t\tif ( texture.isDepthArrayTexture !== true && texture.isTextureArray === false ) {\n\n\t\t\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\n\n\t\tconst hasMipmaps = texture.mipmaps !== undefined && texture.mipmaps.length > 0;\n\n\t\t// follow WebGPU backend mapping for texture filtering\n\t\tconst minFilter = texture.minFilter === LinearFilter && hasMipmaps ? LinearMipmapLinearFilter : texture.minFilter;\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MIN_FILTER, filterToGL[ minFilter ] );\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE );\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\tif ( texture.anisotropy > 1 ) {\n\n\t\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\t\t\tgl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, backend.getMaxAnisotropy() ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates a default texture for the given texture that can be used\n\t * as a placeholder until the actual texture is ready for usage.\n\t *\n\t * @param {Texture} texture - The texture to create a default texture for.\n\t */\n\tcreateDefaultTexture( texture ) {\n\n\t\tconst { gl, backend, defaultTextures } = this;\n\n\n\t\tconst glTextureType = this.getGLTextureType( texture );\n\n\t\tlet textureGPU = defaultTextures[ glTextureType ];\n\n\t\tif ( textureGPU === undefined ) {\n\n\t\t\ttextureGPU = gl.createTexture();\n\n\t\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\t// gl.texImage2D( glTextureType, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\tdefaultTextures[ glTextureType ] = textureGPU;\n\n\t\t}\n\n\t\tbackend.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tisDefault: true\n\t\t} );\n\n\t}\n\n\t/**\n\t * Defines a texture on the GPU for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t * @return {undefined}\n\t */\n\tcreateTexture( texture, options ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { levels, width, height, depth } = options;\n\n\t\tconst glFormat = backend.utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = backend.utils.convert( texture.type );\n\t\tconst glInternalFormat = this.getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\tconst textureGPU = gl.createTexture();\n\t\tconst glTextureType = this.getGLTextureType( texture );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tthis.setTextureParameters( glTextureType, texture );\n\n\t\tif ( texture.isDepthArrayTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture || texture.isTextureArray ) {\n\n\t\t\tgl.texStorage3D( gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\tgl.texStorage3D( gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth );\n\n\t\t} else if ( ! texture.isVideoTexture ) {\n\n\t\t\tgl.texStorage2D( glTextureType, levels, glInternalFormat, width, height );\n\n\t\t}\n\n\t\tbackend.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tglFormat,\n\t\t\tglType,\n\t\t\tglInternalFormat\n\t\t} );\n\n\t}\n\n\t/**\n\t * Uploads texture buffer data to the GPU memory.\n\t *\n\t * @param {WebGLBuffer} buffer - The buffer data.\n\t * @param {Texture} texture - The texture,\n\t */\n\tcopyBufferToTexture( buffer, texture ) {\n\n\t\tconst { gl, backend } = this;\n\n\t\tconst { textureGPU, glTextureType, glFormat, glType } = backend.get( texture );\n\n\t\tconst { width, height } = texture.source.data;\n\n\t\tgl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, buffer );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, false );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false );\n\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, 0 );\n\n\t\tgl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, null );\n\n\t\tbackend.state.unbindTexture();\n\t\t// debug\n\t\t// const framebuffer = gl.createFramebuffer();\n\t\t// gl.bindFramebuffer( gl.FRAMEBUFFER, framebuffer );\n\t\t// gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTextureType, textureGPU, 0 );\n\n\t\t// const readout = new Float32Array( width * height * 4 );\n\n\t\t// const altFormat = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT );\n\t\t// const altType = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE );\n\n\t\t// gl.readPixels( 0, 0, width, height, altFormat, altType, readout );\n\t\t// gl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\t\t// console.log( readout );\n\n\t}\n\n\t/**\n\t * Uploads the updated texture data to the GPU.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tupdateTexture( texture, options ) {\n\n\t\tconst { gl } = this;\n\t\tconst { width, height } = options;\n\t\tconst { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.backend.get( texture );\n\n\t\tif ( texture.isRenderTargetTexture || ( textureGPU === undefined /* unsupported texture format */ ) )\n\t\t\treturn;\n\n\t\tconst getImage = ( source ) => {\n\n\t\t\tif ( source.isDataTexture ) {\n\n\t\t\t\treturn source.image.data;\n\n\t\t\t} else if ( ( typeof HTMLImageElement !== 'undefined' && source instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && source instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && source instanceof ImageBitmap ) ||\n\t\t\t\tsource instanceof OffscreenCanvas ) {\n\n\t\t\t\treturn source;\n\n\t\t\t}\n\n\t\t\treturn source.data;\n\n\t\t};\n\n\t\tthis.backend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tthis.setTextureParameters( glTextureType, texture );\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tconst mipmaps = texture.mipmaps;\n\t\t\tconst image = options.image;\n\n\t\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\n\n\t\t\t\tconst mipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\n\t\t\t\t\tif ( texture.format !== gl.RGBA ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tgl.compressedTexSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.texSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tgl.compressedTexSubImage2D( gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'Unsupported compressed texture format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( texture.isCubeTexture ) {\n\n\t\t\tconst images = options.images;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconst image = getImage( images[ i ] );\n\n\t\t\t\tgl.texSubImage2D( gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t} else if ( texture.isDataArrayTexture || texture.isDepthArrayTexture ) {\n\n\t\t\tconst image = options.image;\n\n\t\t\tgl.texSubImage3D( gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\tconst image = options.image;\n\n\t\t\tgl.texSubImage3D( gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\ttexture.update();\n\n\t\t\tgl.texImage2D( glTextureType, 0, glInternalFormat, glFormat, glType, options.image );\n\n\n\t\t} else {\n\n\t\t\tconst image = getImage( options.image );\n\n\t\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates mipmaps for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tgenerateMipmaps( texture ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { textureGPU, glTextureType } = backend.get( texture );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\t\tgl.generateMipmap( glTextureType );\n\n\t}\n\n\t/**\n\t * Deallocates the render buffers of the given render target.\n\t *\n\t * @param {RenderTarget} renderTarget - The render target.\n\t */\n\tdeallocateRenderBuffers( renderTarget ) {\n\n\t\tconst { gl, backend } = this;\n\n\t\t// remove framebuffer reference\n\t\tif ( renderTarget ) {\n\n\t\t\tconst renderContextData = backend.get( renderTarget );\n\n\t\t\trenderContextData.renderBufferStorageSetup = undefined;\n\n\t\t\tif ( renderContextData.framebuffers ) {\n\n\t\t\t\tfor ( const cacheKey in renderContextData.framebuffers ) {\n\n\t\t\t\t\tgl.deleteFramebuffer( renderContextData.framebuffers[ cacheKey ] );\n\n\t\t\t\t}\n\n\t\t\t\tdelete renderContextData.framebuffers;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.depthRenderbuffer ) {\n\n\t\t\t\tgl.deleteRenderbuffer( renderContextData.depthRenderbuffer );\n\t\t\t\tdelete renderContextData.depthRenderbuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.stencilRenderbuffer ) {\n\n\t\t\t\tgl.deleteRenderbuffer( renderContextData.stencilRenderbuffer );\n\t\t\t\tdelete renderContextData.stencilRenderbuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.msaaFrameBuffer ) {\n\n\t\t\t\tgl.deleteFramebuffer( renderContextData.msaaFrameBuffer );\n\t\t\t\tdelete renderContextData.msaaFrameBuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.msaaRenderbuffers ) {\n\n\t\t\t\tfor ( let i = 0; i < renderContextData.msaaRenderbuffers.length; i ++ ) {\n\n\t\t\t\t\tgl.deleteRenderbuffer( renderContextData.msaaRenderbuffers[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tdelete renderContextData.msaaRenderbuffers;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Destroys the GPU data for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tdestroyTexture( texture ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { textureGPU, renderTarget } = backend.get( texture );\n\n\t\tthis.deallocateRenderBuffers( renderTarget );\n\t\tgl.deleteTexture( textureGPU );\n\n\t\tbackend.delete( texture );\n\n\t}\n\n\t/**\n\t * Copies data of the given source texture to the given destination texture.\n\t *\n\t * @param {Texture} srcTexture - The source texture.\n\t * @param {Texture} dstTexture - The destination texture.\n\t * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.\n\t * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.\n\t * @param {number} [srcLevel=0] - The source mip level to copy from.\n\t * @param {number} [dstLevel=0] - The destination mip level to copy to.\n\t */\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0 ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { state } = this.backend;\n\n\t\tconst { textureGPU: dstTextureGPU, glTextureType, glType, glFormat } = backend.get( dstTexture );\n\n\t\tstate.bindTexture( glTextureType, dstTextureGPU );\n\n\t\t// gather the necessary dimensions to copy\n\t\tlet width, height, depth, minX, minY, minZ;\n\t\tlet dstX, dstY, dstZ;\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ dstLevel ] : srcTexture.image;\n\n\t\tif ( srcRegion !== null ) {\n\n\t\t\twidth = srcRegion.max.x - srcRegion.min.x;\n\t\t\theight = srcRegion.max.y - srcRegion.min.y;\n\t\t\tdepth = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;\n\t\t\tminX = srcRegion.min.x;\n\t\t\tminY = srcRegion.min.y;\n\t\t\tminZ = srcRegion.isBox3 ? srcRegion.min.z : 0;\n\n\t\t} else {\n\n\t\t\tconst levelScale = Math.pow( 2, - srcLevel );\n\t\t\twidth = Math.floor( image.width * levelScale );\n\t\t\theight = Math.floor( image.height * levelScale );\n\n\t\t\tif ( srcTexture.isDataArrayTexture || srcTexture.isDepthArrayTexture ) {\n\n\t\t\t\tdepth = image.depth;\n\n\t\t\t} else if ( srcTexture.isData3DTexture ) {\n\n\t\t\t\tdepth = Math.floor( image.depth * levelScale );\n\n\t\t\t} else {\n\n\t\t\t\tdepth = 1;\n\n\t\t\t}\n\n\t\t\tminX = 0;\n\t\t\tminY = 0;\n\t\t\tminZ = 0;\n\n\t\t}\n\n\t\tif ( dstPosition !== null ) {\n\n\t\t\tdstX = dstPosition.x;\n\t\t\tdstY = dstPosition.y;\n\t\t\tdstZ = dstPosition.z;\n\n\t\t} else {\n\n\t\t\tdstX = 0;\n\t\t\tdstY = 0;\n\t\t\tdstZ = 0;\n\n\t\t}\n\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\t// used for copying data from cpu\n\t\tconst currentUnpackRowLen = gl.getParameter( gl.UNPACK_ROW_LENGTH );\n\t\tconst currentUnpackImageHeight = gl.getParameter( gl.UNPACK_IMAGE_HEIGHT );\n\t\tconst currentUnpackSkipPixels = gl.getParameter( gl.UNPACK_SKIP_PIXELS );\n\t\tconst currentUnpackSkipRows = gl.getParameter( gl.UNPACK_SKIP_ROWS );\n\t\tconst currentUnpackSkipImages = gl.getParameter( gl.UNPACK_SKIP_IMAGES );\n\n\t\tgl.pixelStorei( gl.UNPACK_ROW_LENGTH, image.width );\n\t\tgl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, image.height );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_PIXELS, minX );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_ROWS, minY );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_IMAGES, minZ );\n\n\t\t// set up the src texture\n\t\tconst isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture || dstTexture.isDepthArrayTexture;\n\t\tif ( srcTexture.isRenderTargetTexture || srcTexture.isDepthTexture ) {\n\n\t\t\tconst srcTextureData = backend.get( srcTexture );\n\t\t\tconst dstTextureData = backend.get( dstTexture );\n\n\t\t\tconst srcRenderContextData = backend.get( srcTextureData.renderTarget );\n\t\t\tconst dstRenderContextData = backend.get( dstTextureData.renderTarget );\n\n\t\t\tconst srcFramebuffer = srcRenderContextData.framebuffers[ srcTextureData.cacheKey ];\n\t\t\tconst dstFramebuffer = dstRenderContextData.framebuffers[ dstTextureData.cacheKey ];\n\n\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, srcFramebuffer );\n\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, dstFramebuffer );\n\n\t\t\tlet mask = gl.COLOR_BUFFER_BIT;\n\n\t\t\tif ( srcTexture.isDepthTexture ) mask = gl.DEPTH_BUFFER_BIT;\n\n\t\t\tgl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, mask, gl.NEAREST );\n\n\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\n\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );\n\n\t\t} else {\n\n\t\t\tif ( isDst3D ) {\n\n\t\t\t\t// copy data into the 3d texture\n\t\t\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t\t\tgl.texSubImage3D( glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image.data );\n\n\t\t\t\t} else if ( dstTexture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tgl.compressedTexSubImage3D( glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.texSubImage3D( glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// copy data into the 2d texture\n\t\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t\tgl.texSubImage2D( glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data );\n\n\t\t\t\t} else if ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\tgl.compressedTexSubImage2D( glTextureType, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.texSubImage2D( glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// reset values\n\t\tgl.pixelStorei( gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );\n\t\tgl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( dstLevel === 0 && dstTexture.generateMipmaps ) {\n\n\t\t\tgl.generateMipmap( glTextureType );\n\n\t\t}\n\n\t\tstate.unbindTexture();\n\n\t}\n\n\n\t/**\n\t * Copies the current bound framebuffer to the given texture.\n\t *\n\t * @param {Texture} texture - The destination texture.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n\t */\n\tcopyFramebufferToTexture( texture, renderContext, rectangle ) {\n\n\t\tconst { gl } = this;\n\t\tconst { state } = this.backend;\n\n\t\tconst { textureGPU } = this.backend.get( texture );\n\n\t\tconst { x, y, z: width, w: height } = rectangle;\n\n\t\tconst requireDrawFrameBuffer = texture.isDepthTexture === true || ( renderContext.renderTarget && renderContext.renderTarget.samples > 0 );\n\n\t\tconst srcHeight = renderContext.renderTarget ? renderContext.renderTarget.height : this.backend.getDrawingBufferSize().y;\n\n\t\tif ( requireDrawFrameBuffer ) {\n\n\t\t\tconst partial = ( x !== 0 || y !== 0 );\n\t\t\tlet mask;\n\t\t\tlet attachment;\n\n\t\t\tif ( texture.isDepthTexture === true ) {\n\n\t\t\t\tmask = gl.DEPTH_BUFFER_BIT;\n\t\t\t\tattachment = gl.DEPTH_ATTACHMENT;\n\n\t\t\t\tif ( renderContext.stencil ) {\n\n\t\t\t\t\tmask |= gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmask = gl.COLOR_BUFFER_BIT;\n\t\t\t\tattachment = gl.COLOR_ATTACHMENT0;\n\n\t\t\t}\n\n\t\t\tif ( partial ) {\n\n\t\t\t\tconst renderTargetContextData = this.backend.get( renderContext.renderTarget );\n\n\t\t\t\tconst fb = renderTargetContextData.framebuffers[ renderContext.getCacheKey() ];\n\t\t\t\tconst msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, msaaFrameBuffer );\n\n\t\t\t\tconst flippedY = srcHeight - y - height;\n\n\t\t\t\tgl.blitFramebuffer( x, flippedY, x + width, flippedY + height, x, flippedY, x + width, flippedY + height, mask, gl.NEAREST );\n\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );\n\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, textureGPU );\n\n\t\t\t\tgl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, flippedY, width, height );\n\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t} else {\n\n\t\t\t\tconst fb = gl.createFramebuffer();\n\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\n\t\t\t\tgl.framebufferTexture2D( gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0 );\n\t\t\t\tgl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST );\n\n\t\t\t\tgl.deleteFramebuffer( fb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, textureGPU );\n\t\t\tgl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, srcHeight - height - y, width, height );\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps ) this.generateMipmaps( texture );\n\n\t\tthis.backend._setFramebuffer( renderContext );\n\n\t}\n\n\t/**\n\t * SetupS storage for internal depth/stencil buffers and bind to correct framebuffer.\n\t *\n\t * @param {WebGLRenderbuffer} renderbuffer - The render buffer.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {number} samples - The MSAA sample count.\n\t * @param {boolean} [useMultisampledRTT=false] - Whether to use WEBGL_multisampled_render_to_texture or not.\n\t */\n\tsetupRenderBufferStorage( renderbuffer, renderContext, samples, useMultisampledRTT = false ) {\n\n\t\tconst { gl } = this;\n\t\tconst renderTarget = renderContext.renderTarget;\n\n\t\tconst { depthTexture, depthBuffer, stencilBuffer, width, height } = renderTarget;\n\n\t\tgl.bindRenderbuffer( gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( depthBuffer && ! stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = gl.DEPTH_COMPONENT24;\n\n\t\t\tif ( useMultisampledRTT === true ) {\n\n\t\t\t\tconst multisampledRTTExt = this.extensions.get( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( gl.RENDERBUFFER, renderTarget.samples, glInternalFormat, width, height );\n\n\t\t\t} else if ( samples > 0 ) {\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === gl.FLOAT ) {\n\n\t\t\t\t\t\tglInternalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, glInternalFormat, width, height );\n\n\t\t\t} else {\n\n\t\t\t\tgl.renderbufferStorage( gl.RENDERBUFFER, glInternalFormat, width, height );\n\n\t\t\t}\n\n\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( depthBuffer && stencilBuffer ) {\n\n\t\t\tif ( samples > 0 ) {\n\n\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height );\n\n\t\t\t} else {\n\n\t\t\t\tgl.renderbufferStorage( gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height );\n\n\t\t\t}\n\n\n\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns texture data as a typed array.\n\t *\n\t * @async\n\t * @param {Texture} texture - The texture to copy.\n\t * @param {number} x - The x coordinate of the copy origin.\n\t * @param {number} y - The y coordinate of the copy origin.\n\t * @param {number} width - The width of the copy.\n\t * @param {number} height - The height of the copy.\n\t * @param {number} faceIndex - The face index.\n\t * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.\n\t */\n\tasync copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\tconst { backend, gl } = this;\n\n\t\tconst { textureGPU, glFormat, glType } = this.backend.get( texture );\n\n\t\tconst fb = gl.createFramebuffer();\n\n\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );\n\n\t\tconst target = texture.isCubeTexture ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\n\n\t\tgl.framebufferTexture2D( gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, textureGPU, 0 );\n\n\t\tconst typedArrayType = this._getTypedArrayType( glType );\n\t\tconst bytesPerTexel = this._getBytesPerTexel( glType, glFormat );\n\n\t\tconst elementCount = width * height;\n\t\tconst byteLength = elementCount * bytesPerTexel;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.bufferData( gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ );\n\t\tgl.readPixels( x, y, width, height, glFormat, glType, 0 );\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );\n\n\t\tawait backend.utils._clientWaitAsync();\n\n\t\tconst dstBuffer = new typedArrayType( byteLength / typedArrayType.BYTES_PER_ELEMENT );\n\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.getBufferSubData( gl.PIXEL_PACK_BUFFER, 0, dstBuffer );\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );\n\n\t\tgl.deleteFramebuffer( fb );\n\n\t\treturn dstBuffer;\n\n\t}\n\n\t/**\n\t * Returns the corresponding typed array type for the given WebGL data type.\n\t *\n\t * @private\n\t * @param {GLenum} glType - The WebGL data type.\n\t * @return {TypedArray.constructor} The typed array type.\n\t */\n\t_getTypedArrayType( glType ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( glType === gl.UNSIGNED_BYTE ) return Uint8Array;\n\n\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_6_5 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_INT ) return Uint32Array;\n\n\t\tif ( glType === gl.HALF_FLOAT ) return Uint16Array;\n\t\tif ( glType === gl.FLOAT ) return Float32Array;\n\n\t\tthrow new Error( `Unsupported WebGL type: ${glType}` );\n\n\t}\n\n\t/**\n\t * Returns the bytes-per-texel value for the given WebGL data type and texture format.\n\t *\n\t * @private\n\t * @param {GLenum} glType - The WebGL data type.\n\t * @param {GLenum} glFormat - The WebGL texture format.\n\t * @return {number} The bytes-per-texel.\n\t */\n\t_getBytesPerTexel( glType, glFormat ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet bytesPerComponent = 0;\n\n\t\tif ( glType === gl.UNSIGNED_BYTE ) bytesPerComponent = 1;\n\n\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ||\n\t\t\tglType === gl.UNSIGNED_SHORT_5_5_5_1 ||\n\t\t\tglType === gl.UNSIGNED_SHORT_5_6_5 ||\n\t\t\tglType === gl.UNSIGNED_SHORT ||\n\t\t\tglType === gl.HALF_FLOAT ) bytesPerComponent = 2;\n\n\t\tif ( glType === gl.UNSIGNED_INT ||\n\t\t\tglType === gl.FLOAT ) bytesPerComponent = 4;\n\n\t\tif ( glFormat === gl.RGBA ) return bytesPerComponent * 4;\n\t\tif ( glFormat === gl.RGB ) return bytesPerComponent * 3;\n\t\tif ( glFormat === gl.ALPHA ) return bytesPerComponent;\n\n\t}\n\n}\n\n/**\n * A WebGL 2 backend utility module for managing extensions.\n *\n * @private\n */\nclass WebGLExtensions {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGLBackend} backend - The WebGL 2 backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGL 2 backend.\n\t\t *\n\t\t * @type {WebGLBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A reference to the rendering context.\n\t\t *\n\t\t * @type {WebGL2RenderingContext}\n\t\t */\n\t\tthis.gl = this.backend.gl;\n\n\t\t/**\n\t\t * A list with all the supported WebGL extensions.\n\t\t *\n\t\t * @type {Array<string>}\n\t\t */\n\t\tthis.availableExtensions = this.gl.getSupportedExtensions();\n\n\t\t/**\n\t\t * A dictionary with requested WebGL extensions.\n\t\t * The key is the name of the extension, the value\n\t\t * the requested extension object.\n\t\t *\n\t\t * @type {Object<string,Object>}\n\t\t */\n\t\tthis.extensions = {};\n\n\t}\n\n\t/**\n\t * Returns the extension object for the given extension name.\n\t *\n\t * @param {string} name - The extension name.\n\t * @return {Object} The extension object.\n\t */\n\tget( name ) {\n\n\t\tlet extension = this.extensions[ name ];\n\n\t\tif ( extension === undefined ) {\n\n\t\t\textension = this.gl.getExtension( name );\n\n\t\t\tthis.extensions[ name ] = extension;\n\n\t\t}\n\n\t\treturn extension;\n\n\t}\n\n\t/**\n\t * Returns `true` if the requested extension is available.\n\t *\n\t * @param {string} name - The extension name.\n\t * @return {boolean} Whether the given extension is available or not.\n\t */\n\thas( name ) {\n\n\t\treturn this.availableExtensions.includes( name );\n\n\t}\n\n}\n\n/**\n * A WebGL 2 backend utility module for managing the device's capabilities.\n *\n * @private\n */\nclass WebGLCapabilities {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGLBackend} backend - The WebGL 2 backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGL 2 backend.\n\t\t *\n\t\t * @type {WebGLBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * This value holds the cached max anisotropy value.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.maxAnisotropy = null;\n\n\t}\n\n\t/**\n\t * Returns the maximum anisotropy texture filtering value. This value\n\t * depends on the device and is reported by the `EXT_texture_filter_anisotropic`\n\t * WebGL extension.\n\t *\n\t * @return {number} The maximum anisotropy texture filtering value.\n\t */\n\tgetMaxAnisotropy() {\n\n\t\tif ( this.maxAnisotropy !== null ) return this.maxAnisotropy;\n\n\t\tconst gl = this.backend.gl;\n\t\tconst extensions = this.backend.extensions;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tthis.maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tthis.maxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn this.maxAnisotropy;\n\n\t}\n\n}\n\nconst GLFeatureName = {\n\n\t'WEBGL_multi_draw': 'WEBGL_multi_draw',\n\t'WEBGL_compressed_texture_astc': 'texture-compression-astc',\n\t'WEBGL_compressed_texture_etc': 'texture-compression-etc2',\n\t'WEBGL_compressed_texture_etc1': 'texture-compression-etc1',\n\t'WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',\n\t'WEBKIT_WEBGL_compressed_texture_pvrtc': 'texture-compression-pvrtc',\n\t'WEBGL_compressed_texture_s3tc': 'texture-compression-bc',\n\t'EXT_texture_compression_bptc': 'texture-compression-bptc',\n\t'EXT_disjoint_timer_query_webgl2': 'timestamp-query',\n\t'OVR_multiview2': 'OVR_multiview2'\n\n};\n\nclass WebGLBufferRenderer {\n\n\tconstructor( backend ) {\n\n\t\tthis.gl = backend.gl;\n\t\tthis.extensions = backend.extensions;\n\t\tthis.info = backend.renderer.info;\n\t\tthis.mode = null;\n\t\tthis.index = 0;\n\t\tthis.type = null;\n\t\tthis.object = null;\n\n\t}\n\n\trender( start, count ) {\n\n\t\tconst { gl, mode, object, type, info, index } = this;\n\n\t\tif ( index !== 0 ) {\n\n\t\t\tgl.drawElements( mode, count, type, start );\n\n\t\t} else {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t}\n\n\t\tinfo.update( object, count, 1 );\n\n\t}\n\n\trenderInstances( start, count, primcount ) {\n\n\t\tconst { gl, mode, type, index, object, info } = this;\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tif ( index !== 0 ) {\n\n\t\t\tgl.drawElementsInstanced( mode, count, type, start, primcount );\n\n\t\t} else {\n\n\t\t\tgl.drawArraysInstanced( mode, start, count, primcount );\n\n\t\t}\n\n\t\tinfo.update( object, count, primcount );\n\n\t}\n\n\trenderMultiDraw( starts, counts, drawCount ) {\n\n\t\tconst { extensions, mode, object, info } = this;\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\tthis.render( starts[ i ], counts[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.index !== 0 ) {\n\n\t\t\t\textension.multiDrawElementsWEBGL( mode, counts, 0, this.type, starts, 0, drawCount );\n\n\t\t\t} else {\n\n\t\t\t\textension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );\n\n\t\t\t}\n\n\t\t\tlet elementCount = 0;\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\telementCount += counts[ i ];\n\n\t\t\t}\n\n\t\t\tinfo.update( object, elementCount, 1 );\n\n\t\t}\n\n\t}\n\n\trenderMultiDrawInstances( starts, counts, drawCount, primcount ) {\n\n\t\tconst { extensions, mode, object, info } = this;\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\tconst extension = extensions.get( 'WEBGL_multi_draw' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\tthis.renderInstances( starts[ i ], counts[ i ], primcount[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.index !== 0 ) {\n\n\t\t\t\textension.multiDrawElementsInstancedWEBGL( mode, counts, 0, this.type, starts, 0, primcount, 0, drawCount );\n\n\t\t\t} else {\n\n\t\t\t\textension.multiDrawArraysInstancedWEBGL( mode, starts, 0, counts, 0, primcount, 0, drawCount );\n\n\t\t\t}\n\n\t\t\tlet elementCount = 0;\n\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\telementCount += counts[ i ] * primcount[ i ];\n\n\t\t\t}\n\n\t\t\tinfo.update( object, elementCount, 1 );\n\n\t\t}\n\n\t}\n\n\t//\n\n}\n\n/**\n * Abstract base class of a timestamp query pool.\n *\n * @abstract\n */\nclass TimestampQueryPool {\n\n\t/**\n\t * Creates a new timestamp query pool.\n\t *\n\t * @param {number} [maxQueries=256] - Maximum number of queries this pool can hold.\n\t */\n\tconstructor( maxQueries = 256 ) {\n\n\t\t/**\n\t\t * Whether to track timestamps or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.trackTimestamp = true;\n\n\t\t/**\n\t\t * Maximum number of queries this pool can hold.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 256\n\t\t */\n\t\tthis.maxQueries = maxQueries;\n\n\t\t/**\n\t\t * How many queries allocated so far.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.currentQueryIndex = 0;\n\n\t\t/**\n\t\t * Tracks offsets for different contexts.\n\t\t *\n\t\t * @type {Map<string, number>}\n\t\t */\n\t\tthis.queryOffsets = new Map();\n\n\t\t/**\n\t\t * Whether the pool has been disposed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.isDisposed = false;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.lastValue = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.pendingResolve = false;\n\n\t}\n\n\t/**\n\t * Allocate queries for a specific renderContext.\n\t *\n\t * @abstract\n\t * @param {Object} renderContext - The render context to allocate queries for.\n\t * @returns {?number}\n\t */\n\tallocateQueriesForContext( /* renderContext */ ) {}\n\n\t/**\n\t * Resolve all timestamps and return data (or process them).\n\t *\n\t * @abstract\n\t * @async\n\t * @returns {Promise<number>|number} The resolved timestamp value.\n\t */\n\tasync resolveQueriesAsync() {}\n\n\t/**\n\t * Dispose of the query pool.\n\t *\n\t * @abstract\n\t */\n\tdispose() {}\n\n}\n\n/**\n * Manages a pool of WebGL timestamp queries for performance measurement.\n * Handles creation, execution, and resolution of timer queries using WebGL extensions.\n *\n * @augments TimestampQueryPool\n */\nclass WebGLTimestampQueryPool extends TimestampQueryPool {\n\n\t/**\n\t * Creates a new WebGL timestamp query pool.\n\t *\n\t * @param {WebGLRenderingContext|WebGL2RenderingContext} gl - The WebGL context.\n\t * @param {string} type - The type identifier for this query pool.\n\t * @param {number} [maxQueries=2048] - Maximum number of queries this pool can hold.\n\t */\n\tconstructor( gl, type, maxQueries = 2048 ) {\n\n\t\tsuper( maxQueries );\n\n\t\tthis.gl = gl;\n\t\tthis.type = type;\n\n\t\t// Check for timer query extensions\n\t\tthis.ext = gl.getExtension( 'EXT_disjoint_timer_query_webgl2' ) ||\n\t\t\t\t  gl.getExtension( 'EXT_disjoint_timer_query' );\n\n\t\tif ( ! this.ext ) {\n\n\t\t\tconsole.warn( 'EXT_disjoint_timer_query not supported; timestamps will be disabled.' );\n\t\t\tthis.trackTimestamp = false;\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Create query objects\n\t\tthis.queries = [];\n\t\tfor ( let i = 0; i < this.maxQueries; i ++ ) {\n\n\t\t\tthis.queries.push( gl.createQuery() );\n\n\t\t}\n\n\t\tthis.activeQuery = null;\n\t\tthis.queryStates = new Map(); // Track state of each query: 'inactive', 'started', 'ended'\n\n\t}\n\n\t/**\n\t * Allocates a pair of queries for a given render context.\n\t *\n\t * @param {Object} renderContext - The render context to allocate queries for.\n\t * @returns {?number} The base offset for the allocated queries, or null if allocation failed.\n\t */\n\tallocateQueriesForContext( renderContext ) {\n\n\t\tif ( ! this.trackTimestamp ) return null;\n\n\t\t// Check if we have enough space for a new query pair\n\t\tif ( this.currentQueryIndex + 2 > this.maxQueries ) {\n\n\t\t\twarnOnce( `WebGPUTimestampQueryPool [${ this.type }]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${ this.type.toUpperCase() } ).` );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst baseOffset = this.currentQueryIndex;\n\t\tthis.currentQueryIndex += 2;\n\n\t\t// Initialize query states\n\t\tthis.queryStates.set( baseOffset, 'inactive' );\n\t\tthis.queryOffsets.set( renderContext.id, baseOffset );\n\n\t\treturn baseOffset;\n\n\t}\n\n\t/**\n\t * Begins a timestamp query for the specified render context.\n\t *\n\t * @param {Object} renderContext - The render context to begin timing for.\n\t */\n\tbeginQuery( renderContext ) {\n\n\t\tif ( ! this.trackTimestamp || this.isDisposed ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst baseOffset = this.queryOffsets.get( renderContext.id );\n\t\tif ( baseOffset == null ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Don't start a new query if there's an active one\n\t\tif ( this.activeQuery !== null ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst query = this.queries[ baseOffset ];\n\t\tif ( ! query ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// Only begin if query is inactive\n\t\t\tif ( this.queryStates.get( baseOffset ) === 'inactive' ) {\n\n\t\t\t\tthis.gl.beginQuery( this.ext.TIME_ELAPSED_EXT, query );\n\t\t\t\tthis.activeQuery = baseOffset;\n\t\t\t\tthis.queryStates.set( baseOffset, 'started' );\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'Error in beginQuery:', error );\n\t\t\tthis.activeQuery = null;\n\t\t\tthis.queryStates.set( baseOffset, 'inactive' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Ends the active timestamp query for the specified render context.\n\t *\n\t * @param {Object} renderContext - The render context to end timing for.\n\t * @param {string} renderContext.id - Unique identifier for the render context.\n\t */\n\tendQuery( renderContext ) {\n\n\t\tif ( ! this.trackTimestamp || this.isDisposed ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst baseOffset = this.queryOffsets.get( renderContext.id );\n\t\tif ( baseOffset == null ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Only end if this is the active query\n\t\tif ( this.activeQuery !== baseOffset ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tthis.gl.endQuery( this.ext.TIME_ELAPSED_EXT );\n\t\t\tthis.queryStates.set( baseOffset, 'ended' );\n\t\t\tthis.activeQuery = null;\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'Error in endQuery:', error );\n\t\t\t// Reset state on error\n\t\t\tthis.queryStates.set( baseOffset, 'inactive' );\n\t\t\tthis.activeQuery = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Asynchronously resolves all completed queries and returns the total duration.\n\t *\n\t * @async\n\t * @returns {Promise<number>} The total duration in milliseconds, or the last valid value if resolution fails.\n\t */\n\tasync resolveQueriesAsync() {\n\n\t\tif ( ! this.trackTimestamp || this.pendingResolve ) {\n\n\t\t\treturn this.lastValue;\n\n\t\t}\n\n\t\tthis.pendingResolve = true;\n\n\t\ttry {\n\n\t\t\t// Wait for all ended queries to complete\n\t\t\tconst resolvePromises = [];\n\n\t\t\tfor ( const [ baseOffset, state ] of this.queryStates ) {\n\n\t\t\t\tif ( state === 'ended' ) {\n\n\t\t\t\t\tconst query = this.queries[ baseOffset ];\n\t\t\t\t\tresolvePromises.push( this.resolveQuery( query ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( resolvePromises.length === 0 ) {\n\n\t\t\t\treturn this.lastValue;\n\n\t\t\t}\n\n\t\t\tconst results = await Promise.all( resolvePromises );\n\t\t\tconst totalDuration = results.reduce( ( acc, val ) => acc + val, 0 );\n\n\t\t\t// Store the last valid result\n\t\t\tthis.lastValue = totalDuration;\n\n\t\t\t// Reset states\n\t\t\tthis.currentQueryIndex = 0;\n\t\t\tthis.queryOffsets.clear();\n\t\t\tthis.queryStates.clear();\n\t\t\tthis.activeQuery = null;\n\n\t\t\treturn totalDuration;\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'Error resolving queries:', error );\n\t\t\treturn this.lastValue;\n\n\t\t} finally {\n\n\t\t\tthis.pendingResolve = false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resolves a single query, checking for completion and disjoint operation.\n\t *\n\t * @async\n\t * @param {WebGLQuery} query - The query object to resolve.\n\t * @returns {Promise<number>} The elapsed time in milliseconds.\n\t */\n\tasync resolveQuery( query ) {\n\n\t\treturn new Promise( ( resolve ) => {\n\n\t\t\tif ( this.isDisposed ) {\n\n\t\t\t\tresolve( this.lastValue );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tlet timeoutId;\n\t\t\tlet isResolved = false;\n\n\t\t\tconst cleanup = () => {\n\n\t\t\t\tif ( timeoutId ) {\n\n\t\t\t\t\tclearTimeout( timeoutId );\n\t\t\t\t\ttimeoutId = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tconst finalizeResolution = ( value ) => {\n\n\t\t\t\tif ( ! isResolved ) {\n\n\t\t\t\t\tisResolved = true;\n\t\t\t\t\tcleanup();\n\t\t\t\t\tresolve( value );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tconst checkQuery = () => {\n\n\t\t\t\tif ( this.isDisposed ) {\n\n\t\t\t\t\tfinalizeResolution( this.lastValue );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Check if the GPU timer was disjoint (i.e., timing was unreliable)\n\t\t\t\t\tconst disjoint = this.gl.getParameter( this.ext.GPU_DISJOINT_EXT );\n\t\t\t\t\tif ( disjoint ) {\n\n\t\t\t\t\t\tfinalizeResolution( this.lastValue );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst available = this.gl.getQueryParameter( query, this.gl.QUERY_RESULT_AVAILABLE );\n\t\t\t\t\tif ( ! available ) {\n\n\t\t\t\t\t\ttimeoutId = setTimeout( checkQuery, 1 );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst elapsed = this.gl.getQueryParameter( query, this.gl.QUERY_RESULT );\n\t\t\t\t\tresolve( Number( elapsed ) / 1e6 ); // Convert nanoseconds to milliseconds\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tconsole.error( 'Error checking query:', error );\n\t\t\t\t\tresolve( this.lastValue );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tcheckQuery();\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Releases all resources held by this query pool.\n\t * This includes deleting all query objects and clearing internal state.\n\t */\n\tdispose() {\n\n\t\tif ( this.isDisposed ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.isDisposed = true;\n\n\t\tif ( ! this.trackTimestamp ) return;\n\n\t\tfor ( const query of this.queries ) {\n\n\t\t\tthis.gl.deleteQuery( query );\n\n\t\t}\n\n\t\tthis.queries = [];\n\t\tthis.queryStates.clear();\n\t\tthis.queryOffsets.clear();\n\t\tthis.lastValue = 0;\n\t\tthis.activeQuery = null;\n\n\t}\n\n}\n\n/**\n * A backend implementation targeting WebGL 2.\n *\n * @private\n * @augments Backend\n */\nclass WebGLBackend extends Backend {\n\n\t/**\n\t * WebGLBackend options.\n\t *\n\t * @typedef {Object} WebGLBackend~Options\n\t * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n\t * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n\t * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.\n\t * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n\t * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n\t * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.\n\t * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.\n\t * @property {WebGL2RenderingContext} [context=undefined] - A WebGL 2 rendering context.\n\t */\n\n\t/**\n\t * Constructs a new WebGPU backend.\n\t *\n\t * @param {WebGLBackend~Options} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGLBackend = true;\n\n\t\t/**\n\t\t * A reference to a backend module holding shader attribute-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {?WebGLAttributeUtils}\n\t\t * @default null\n\t\t */\n\t\tthis.attributeUtils = null;\n\n\t\t/**\n\t\t * A reference to a backend module holding extension-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {?WebGLExtensions}\n\t\t * @default null\n\t\t */\n\t\tthis.extensions = null;\n\n\t\t/**\n\t\t * A reference to a backend module holding capability-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {?WebGLCapabilities}\n\t\t * @default null\n\t\t */\n\t\tthis.capabilities = null;\n\n\t\t/**\n\t\t * A reference to a backend module holding texture-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {?WebGLTextureUtils}\n\t\t * @default null\n\t\t */\n\t\tthis.textureUtils = null;\n\n\t\t/**\n\t\t * A reference to a backend module holding renderer-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {?WebGLBufferRenderer}\n\t\t * @default null\n\t\t */\n\t\tthis.bufferRenderer = null;\n\n\t\t/**\n\t\t * A reference to the rendering context.\n\t\t *\n\t\t * @type {?WebGL2RenderingContext}\n\t\t * @default null\n\t\t */\n\t\tthis.gl = null;\n\n\t\t/**\n\t\t * A reference to a backend module holding state-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {?WebGLState}\n\t\t * @default null\n\t\t */\n\t\tthis.state = null;\n\n\t\t/**\n\t\t * A reference to a backend module holding common\n\t\t * utility functions.\n\t\t *\n\t\t * @type {?WebGLUtils}\n\t\t * @default null\n\t\t */\n\t\tthis.utils = null;\n\n\t\t/**\n\t\t * Dictionary for caching VAOs.\n\t\t *\n\t\t * @type {Object<string,WebGLVertexArrayObject>}\n\t\t */\n\t\tthis.vaoCache = {};\n\n\t\t/**\n\t\t * Dictionary for caching transform feedback objects.\n\t\t *\n\t\t * @type {Object<string,WebGLTransformFeedback>}\n\t\t */\n\t\tthis.transformFeedbackCache = {};\n\n\t\t/**\n\t\t * Controls if `gl.RASTERIZER_DISCARD` should be enabled or not.\n\t\t * Only relevant when using compute shaders.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.discard = false;\n\n\t\t/**\n\t\t * A reference to the `EXT_disjoint_timer_query_webgl2` extension. `null` if the\n\t\t * device does not support the extension.\n\t\t *\n\t\t * @type {?EXTDisjointTimerQueryWebGL2}\n\t\t * @default null\n\t\t */\n\t\tthis.disjoint = null;\n\n\t\t/**\n\t\t* A reference to the `KHR_parallel_shader_compile` extension. `null` if the\n\t\t* device does not support the extension.\n\t\t*\n\t\t* @type {?KHRParallelShaderCompile}\n\t\t* @default null\n\t\t*/\n\t\tthis.parallel = null;\n\n\t\t/**\n\t\t * A reference to the current render context.\n\t\t *\n\t\t * @private\n\t\t * @type {RenderContext}\n\t\t * @default null\n\t\t */\n\t\tthis._currentContext = null;\n\n\t\t/**\n\t\t * A unique collection of bindings.\n\t\t *\n\t\t * @private\n\t\t * @type {WeakSet}\n\t\t */\n\t\tthis._knownBindings = new WeakSet();\n\n\n\t\t/**\n\t\t * Whether the device supports framebuffers invalidation or not.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\n\n\t\t/**\n\t\t * The target framebuffer when rendering with\n\t\t * the WebXR device API.\n\t\t *\n\t\t * @private\n\t\t * @type {WebGLFramebuffer}\n\t\t * @default null\n\t\t */\n\t\tthis._xrFramebuffer = null;\n\n\t}\n\n\t/**\n\t * Initializes the backend so it is ready for usage.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t */\n\tinit( renderer ) {\n\n\t\tsuper.init( renderer );\n\n\t\t//\n\n\t\tconst parameters = this.parameters;\n\n\t\tconst contextAttributes = {\n\t\t\tantialias: renderer.samples > 0,\n\t\t\talpha: true, // always true for performance reasons\n\t\t\tdepth: renderer.depth,\n\t\t\tstencil: renderer.stencil\n\t\t};\n\n\t\tconst glContext = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgl2', contextAttributes );\n\n\t \tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconst contextLossInfo = {\n\t\t\t\tapi: 'WebGL',\n\t\t\t\tmessage: event.statusMessage || 'Unknown reason',\n\t\t\t\treason: null,\n\t\t\t\toriginalEvent: event\n\t\t\t};\n\n\t\t\trenderer.onDeviceLost( contextLossInfo );\n\n\t\t}\n\n\t\tthis._onContextLost = onContextLost;\n\n\t\trenderer.domElement.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\tthis.gl = glContext;\n\n\t\tthis.extensions = new WebGLExtensions( this );\n\t\tthis.capabilities = new WebGLCapabilities( this );\n\t\tthis.attributeUtils = new WebGLAttributeUtils( this );\n\t\tthis.textureUtils = new WebGLTextureUtils( this );\n\t\tthis.bufferRenderer = new WebGLBufferRenderer( this );\n\n\t\tthis.state = new WebGLState( this );\n\t\tthis.utils = new WebGLUtils( this );\n\n\t\tthis.extensions.get( 'EXT_color_buffer_float' );\n\t\tthis.extensions.get( 'WEBGL_clip_cull_distance' );\n\t\tthis.extensions.get( 'OES_texture_float_linear' );\n\t\tthis.extensions.get( 'EXT_color_buffer_half_float' );\n\t\tthis.extensions.get( 'WEBGL_multisampled_render_to_texture' );\n\t\tthis.extensions.get( 'WEBGL_render_shared_exponent' );\n\t\tthis.extensions.get( 'WEBGL_multi_draw' );\n\t\tthis.extensions.get( 'OVR_multiview2' );\n\n\t\tthis.disjoint = this.extensions.get( 'EXT_disjoint_timer_query_webgl2' );\n\t\tthis.parallel = this.extensions.get( 'KHR_parallel_shader_compile' );\n\n\t}\n\n\t/**\n\t * The coordinate system of the backend.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget coordinateSystem() {\n\n\t\treturn WebGLCoordinateSystem;\n\n\t}\n\n\t/**\n\t * This method performs a readback operation by moving buffer data from\n\t * a storage buffer attribute from the GPU to the CPU.\n\t *\n\t * @async\n\t * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n\t * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n\t */\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.attributeUtils.getArrayBufferAsync( attribute );\n\n\t}\n\n\t/**\n\t * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n\t * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when synchronization has been finished.\n\t */\n\tasync waitForGPU() {\n\n\t\tawait this.utils._clientWaitAsync();\n\n\t}\n\n\t/**\n\t * Ensures the backend is XR compatible.\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolve when the renderer is XR compatible.\n\t */\n\tasync makeXRCompatible() {\n\n\t\tconst attributes = this.gl.getContextAttributes();\n\n\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\tawait this.gl.makeXRCompatible();\n\n\t\t}\n\n\t}\n\t/**\n\t * Sets the XR rendering destination.\n\t *\n\t * @param {WebGLFramebuffer} xrFramebuffer - The XR framebuffer.\n\t */\n\tsetXRTarget( xrFramebuffer ) {\n\n\t\tthis._xrFramebuffer = xrFramebuffer;\n\n\t}\n\n\t/**\n\t * Configures the given XR render target with external textures.\n\t *\n\t * This method is only relevant when using the WebXR Layers API.\n\t *\n\t * @param {XRRenderTarget} renderTarget - The XR render target.\n\t * @param {WebGLTexture} colorTexture - A native color texture.\n\t * @param {?WebGLTexture} [depthTexture=null] - A native depth texture.\n\t */\n\tsetXRRenderTargetTextures( renderTarget, colorTexture, depthTexture = null ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.set( renderTarget.texture, { textureGPU: colorTexture, glInternalFormat: gl.RGBA8 } ); // see #24698 why RGBA8 and not SRGB8_ALPHA8 is used\n\n\t\tif ( depthTexture !== null ) {\n\n\t\t\tconst glInternalFormat = renderTarget.stencilBuffer ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\n\t\t\tthis.set( renderTarget.depthTexture, { textureGPU: depthTexture, glInternalFormat: glInternalFormat } );\n\n\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t// are midframe flushes and an external depth texture.\n\t\t\tif ( ( this.extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) && renderTarget.autoAllocateDepthBuffer === true && renderTarget.multiview === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided' );\n\n\t\t\t}\n\n\t\t\trenderTarget.autoAllocateDepthBuffer = false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Inits a time stamp query for the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tinitTimestampQuery( renderContext ) {\n\n\t\tif ( ! this.disjoint || ! this.trackTimestamp ) return;\n\n\t\tconst type = renderContext.isComputeNode ? 'compute' : 'render';\n\n\t\tif ( ! this.timestampQueryPool[ type ] ) {\n\n\t\t\t// TODO: Variable maxQueries?\n\t\t\tthis.timestampQueryPool[ type ] = new WebGLTimestampQueryPool( this.gl, type, 2048 );\n\n\t\t}\n\n\t\tconst timestampQueryPool = this.timestampQueryPool[ type ];\n\n\t\tconst baseOffset = timestampQueryPool.allocateQueriesForContext( renderContext );\n\n\t\tif ( baseOffset !== null ) {\n\n\t\t\ttimestampQueryPool.beginQuery( renderContext );\n\n\t\t}\n\n\t}\n\n\t// timestamp utils\n\n\t/**\n\t * Prepares the timestamp buffer.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tprepareTimestampBuffer( renderContext ) {\n\n\t\tif ( ! this.disjoint || ! this.trackTimestamp ) return;\n\n\t\tconst type = renderContext.isComputeNode ? 'compute' : 'render';\n\t\tconst timestampQueryPool = this.timestampQueryPool[ type ];\n\n\t\ttimestampQueryPool.endQuery( renderContext );\n\n\t}\n\n\n\t/**\n\t * Returns the backend's rendering context.\n\t *\n\t * @return {WebGL2RenderingContext} The rendering context.\n\t */\n\tgetContext() {\n\n\t\treturn this.gl;\n\n\t}\n\n\t/**\n\t * This method is executed at the beginning of a render call and prepares\n\t * the WebGL state for upcoming render calls\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tbeginRender( renderContext ) {\n\n\t\tconst { state, gl } = this;\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t//\n\n\t\tif ( renderContext.viewport ) {\n\n\t\t\tthis.updateViewport( renderContext );\n\n\t\t} else {\n\n\t\t\tstate.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );\n\n\t\t}\n\n\t\tif ( renderContext.scissor ) {\n\n\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\n\t\t\tstate.scissor( x, renderContext.height - height - y, width, height );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.initTimestampQuery( renderContext );\n\n\t\trenderContextData.previousContext = this._currentContext;\n\t\tthis._currentContext = renderContext;\n\n\t\tthis._setFramebuffer( renderContext );\n\n\t\tthis.clear( renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext, false );\n\n\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\t// Get a reference to the array of objects with queries. The renderContextData property\n\t\t\t// can be changed by another render pass before the async reading of all previous queries complete\n\t\t\trenderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;\n\t\t\trenderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n\n\t\t\trenderContextData.lastOcclusionObject = null;\n\t\t\trenderContextData.occlusionQueries = new Array( occlusionQueryCount );\n\t\t\trenderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );\n\t\t\trenderContextData.occlusionQueryIndex = 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is executed at the end of a render call and finalizes work\n\t * after draw calls.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tfinishRender( renderContext ) {\n\n\t\tconst { gl, state } = this;\n\t\tconst renderContextData = this.get( renderContext );\n\t\tconst previousContext = renderContextData.previousContext;\n\n\t\tstate.resetVertexState();\n\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tif ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {\n\n\t\t\t\tgl.endQuery( gl.ANY_SAMPLES_PASSED );\n\n\t\t\t}\n\n\t\t\tthis.resolveOccludedAsync( renderContext );\n\n\t\t}\n\n\t\tconst textures = renderContext.textures;\n\n\t\tif ( textures !== null ) {\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tif ( texture.generateMipmaps ) {\n\n\t\t\t\t\tthis.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._currentContext = previousContext;\n\n\t\tif ( renderContext.textures !== null && renderContext.renderTarget ) {\n\n\t\t\tconst renderTargetContextData = this.get( renderContext.renderTarget );\n\n\t\t\tconst { samples } = renderContext.renderTarget;\n\n\t\t\tif ( samples > 0 && this._useMultisampledExtension( renderContext.renderTarget ) === false ) {\n\n\t\t\t\tconst fb = renderTargetContextData.framebuffers[ renderContext.getCacheKey() ];\n\n\t\t\t\tconst mask = gl.COLOR_BUFFER_BIT;\n\n\t\t\t\tconst msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n\n\t\t\t\tconst textures = renderContext.textures;\n\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, msaaFrameBuffer );\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t// TODO Add support for MRT\n\n\t\t\t\t\tif ( renderContext.scissor ) {\n\n\t\t\t\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\n\t\t\t\t\t\tconst viewY = renderContext.height - height - y;\n\n\t\t\t\t\t\tgl.blitFramebuffer( x, viewY, x + width, viewY + height, x, viewY, x + width, viewY + height, mask, gl.NEAREST );\n\n\t\t\t\t\t\tif ( this._supportsInvalidateFramebuffer === true ) {\n\n\t\t\t\t\t\t\tgl.invalidateSubFramebuffer( gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray, x, viewY, width, height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blitFramebuffer( 0, 0, renderContext.width, renderContext.height, 0, 0, renderContext.width, renderContext.height, mask, gl.NEAREST );\n\n\t\t\t\t\t\tif ( this._supportsInvalidateFramebuffer === true ) {\n\n\t\t\t\t\t\t\tgl.invalidateFramebuffer( gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( previousContext !== null ) {\n\n\t\t\tthis._setFramebuffer( previousContext );\n\n\t\t\tif ( previousContext.viewport ) {\n\n\t\t\t\tthis.updateViewport( previousContext );\n\n\t\t\t} else {\n\n\t\t\t\tstate.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.prepareTimestampBuffer( renderContext );\n\n\t}\n\n\t/**\n\t * This method processes the result of occlusion queries and writes it\n\t * into render context data.\n\t *\n\t * @async\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tresolveOccludedAsync( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t// handle occlusion query results\n\n\t\tconst { currentOcclusionQueries, currentOcclusionQueryObjects } = renderContextData;\n\n\t\tif ( currentOcclusionQueries && currentOcclusionQueryObjects ) {\n\n\t\t\tconst occluded = new WeakSet();\n\t\t\tconst { gl } = this;\n\n\t\t\trenderContextData.currentOcclusionQueryObjects = null;\n\t\t\trenderContextData.currentOcclusionQueries = null;\n\n\t\t\tconst check = () => {\n\n\t\t\t\tlet completed = 0;\n\n\t\t\t\t// check all queries and requeue as appropriate\n\t\t\t\tfor ( let i = 0; i < currentOcclusionQueries.length; i ++ ) {\n\n\t\t\t\t\tconst query = currentOcclusionQueries[ i ];\n\n\t\t\t\t\tif ( query === null ) continue;\n\n\t\t\t\t\tif ( gl.getQueryParameter( query, gl.QUERY_RESULT_AVAILABLE ) ) {\n\n\t\t\t\t\t\tif ( gl.getQueryParameter( query, gl.QUERY_RESULT ) === 0 ) occluded.add( currentOcclusionQueryObjects[ i ] );\n\n\t\t\t\t\t\tcurrentOcclusionQueries[ i ] = null;\n\t\t\t\t\t\tgl.deleteQuery( query );\n\n\t\t\t\t\t\tcompleted ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( completed < currentOcclusionQueries.length ) {\n\n\t\t\t\t\trequestAnimationFrame( check );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderContextData.occluded = occluded;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tcheck();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the given 3D object is fully occluded by other\n\t * 3D objects in the scene.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object is fully occluded or not.\n\t */\n\tisOccluded( renderContext, object ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\treturn renderContextData.occluded && renderContextData.occluded.has( object );\n\n\t}\n\n\t/**\n\t * Updates the viewport with the values from the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tupdateViewport( renderContext ) {\n\n\t\tconst { state } = this;\n\t\tconst { x, y, width, height } = renderContext.viewportValue;\n\n\t\tstate.viewport( x, renderContext.height - height - y, width, height );\n\n\t}\n\n\t/**\n\t * Defines the scissor test.\n\t *\n\t * @param {boolean} boolean - Whether the scissor test should be enabled or not.\n\t */\n\tsetScissorTest( boolean ) {\n\n\t\tconst state = this.state;\n\n\t\tstate.setScissorTest( boolean );\n\n\t}\n\n\t/**\n\t * Returns the clear color and alpha into a single\n\t * color object.\n\t *\n\t * @return {Color4} The clear color.\n\t */\n\tgetClearColor() {\n\n\t\tconst clearColor = super.getClearColor();\n\n\t\t// Since the canvas is always created with alpha: true,\n\t\t// WebGL must always premultiply the clear color.\n\n\t\tclearColor.r *= clearColor.a;\n\t\tclearColor.g *= clearColor.a;\n\t\tclearColor.b *= clearColor.a;\n\n\t\treturn clearColor;\n\n\t}\n\n\t/**\n\t * Performs a clear operation.\n\t *\n\t * @param {boolean} color - Whether the color buffer should be cleared or not.\n\t * @param {boolean} depth - Whether the depth buffer should be cleared or not.\n\t * @param {boolean} stencil - Whether the stencil buffer should be cleared or not.\n\t * @param {?Object} [descriptor=null] - The render context of the current set render target.\n\t * @param {boolean} [setFrameBuffer=true] - TODO.\n\t */\n\tclear( color, depth, stencil, descriptor = null, setFrameBuffer = true ) {\n\n\t\tconst { gl, renderer } = this;\n\n\t\tif ( descriptor === null ) {\n\n\t\t\tconst clearColor = this.getClearColor();\n\n\t\t\tdescriptor = {\n\t\t\t\ttextures: null,\n\t\t\t\tclearColorValue: clearColor\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tlet clear = 0;\n\n\t\tif ( color ) clear |= gl.COLOR_BUFFER_BIT;\n\t\tif ( depth ) clear |= gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil ) clear |= gl.STENCIL_BUFFER_BIT;\n\n\t\tif ( clear !== 0 ) {\n\n\t\t\tlet clearColor;\n\n\t\t\tif ( descriptor.clearColorValue ) {\n\n\t\t\t\tclearColor = descriptor.clearColorValue;\n\n\t\t\t} else {\n\n\t\t\t\tclearColor = this.getClearColor();\n\n\t\t\t}\n\n\t\t\tconst clearDepth = renderer.getClearDepth();\n\t\t\tconst clearStencil = renderer.getClearStencil();\n\n\t\t\tif ( depth ) this.state.setDepthMask( true );\n\n\t\t\tif ( descriptor.textures === null ) {\n\n\t\t\t\tgl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearColor.a );\n\t\t\t\tgl.clear( clear );\n\n\t\t\t} else {\n\n\t\t\t\tif ( setFrameBuffer ) this._setFramebuffer( descriptor );\n\n\t\t\t\tif ( color ) {\n\n\t\t\t\t\tfor ( let i = 0; i < descriptor.textures.length; i ++ ) {\n\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\tgl.clearBufferfv( gl.COLOR, i, [ clearColor.r, clearColor.g, clearColor.b, clearColor.a ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.clearBufferfv( gl.COLOR, i, [ 0, 0, 0, 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( depth && stencil ) {\n\n\t\t\t\t\tgl.clearBufferfi( gl.DEPTH_STENCIL, 0, clearDepth, clearStencil );\n\n\t\t\t\t} else if ( depth ) {\n\n\t\t\t\t\tgl.clearBufferfv( gl.DEPTH, 0, [ clearDepth ] );\n\n\t\t\t\t} else if ( stencil ) {\n\n\t\t\t\t\tgl.clearBufferiv( gl.STENCIL, 0, [ clearStencil ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is executed at the beginning of a compute call and\n\t * prepares the state for upcoming compute tasks.\n\t *\n\t * @param {Node|Array<Node>} computeGroup - The compute node(s).\n\t */\n\tbeginCompute( computeGroup ) {\n\n\t\tconst { state, gl } = this;\n\n\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, null );\n\t\tthis.initTimestampQuery( computeGroup );\n\n\t}\n\n\t/**\n\t * Executes a compute command for the given compute node.\n\t *\n\t * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.\n\t * @param {Node} computeNode - The compute node.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t * @param {ComputePipeline} pipeline - The compute pipeline.\n\t */\n\tcompute( computeGroup, computeNode, bindings, pipeline ) {\n\n\t\tconst { state, gl } = this;\n\n\t\tif ( this.discard === false ) {\n\n\t\t\t// required here to handle async behaviour of render.compute()\n\t\t\tgl.enable( gl.RASTERIZER_DISCARD );\n\t\t\tthis.discard = true;\n\n\t\t}\n\n\t\tconst { programGPU, transformBuffers, attributes } = this.get( pipeline );\n\n\t\tconst vaoKey = this._getVaoKey( attributes );\n\n\t\tconst vaoGPU = this.vaoCache[ vaoKey ];\n\n\t\tif ( vaoGPU === undefined ) {\n\n\t\t\tthis._createVao( attributes );\n\n\t\t} else {\n\n\t\t\tstate.setVertexState( vaoGPU );\n\n\t\t}\n\n\t\tstate.useProgram( programGPU );\n\n\t\tthis._bindUniforms( bindings );\n\n\t\tconst transformFeedbackGPU = this._getTransformFeedback( transformBuffers );\n\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, transformFeedbackGPU );\n\t\tgl.beginTransformFeedback( gl.POINTS );\n\n\t\tif ( attributes[ 0 ].isStorageInstancedBufferAttribute ) {\n\n\t\t\tgl.drawArraysInstanced( gl.POINTS, 0, 1, computeNode.count );\n\n\t\t} else {\n\n\t\t\tgl.drawArrays( gl.POINTS, 0, computeNode.count );\n\n\t\t}\n\n\t\tgl.endTransformFeedback();\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );\n\n\t\t// switch active buffers\n\n\t\tfor ( let i = 0; i < transformBuffers.length; i ++ ) {\n\n\t\t\tconst dualAttributeData = transformBuffers[ i ];\n\n\t\t\tif ( dualAttributeData.pbo ) {\n\n\t\t\t\tthis.textureUtils.copyBufferToTexture( dualAttributeData.transformBuffer, dualAttributeData.pbo );\n\n\t\t\t}\n\n\t\t\tdualAttributeData.switchBuffers();\n\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is executed at the end of a compute call and\n\t * finalizes work after compute tasks.\n\t *\n\t * @param {Node|Array<Node>} computeGroup - The compute node(s).\n\t */\n\tfinishCompute( computeGroup ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.discard = false;\n\n\t\tgl.disable( gl.RASTERIZER_DISCARD );\n\n\t\tthis.prepareTimestampBuffer( computeGroup );\n\n\t\tif ( this._currentContext ) {\n\n\t\t\tthis._setFramebuffer( this._currentContext );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Internal to determine if the current render target is a render target array with depth 2D array texture.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {boolean} Whether the render target is a render target array with depth 2D array texture.\n\t *\n\t * @private\n\t */\n\t_isRenderCameraDepthArray( renderContext ) {\n\n\t\treturn renderContext.depthTexture && renderContext.depthTexture.isDepthArrayTexture && renderContext.camera.isArrayCamera;\n\n\t}\n\n\t/**\n\t * Executes a draw command for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object to draw.\n\t * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.\n\t */\n\tdraw( renderObject/*, info*/ ) {\n\n\t\tconst { object, pipeline, material, context, hardwareClippingPlanes } = renderObject;\n\t\tconst { programGPU } = this.get( pipeline );\n\n\t\tconst { gl, state } = this;\n\n\t\tconst contextData = this.get( context );\n\n\t\tconst drawParams = renderObject.getDrawParameters();\n\n\t\tif ( drawParams === null ) return;\n\n\t\t//\n\n\t\tthis._bindUniforms( renderObject.getBindings() );\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tstate.setMaterial( material, frontFaceCW, hardwareClippingPlanes );\n\n\t\tstate.useProgram( programGPU );\n\n\t\t// vertex state\n\n\t\tconst renderObjectData = this.get( renderObject );\n\n\t\tlet vaoGPU = renderObjectData.staticVao;\n\n\t\tif ( vaoGPU === undefined || renderObjectData.geometryId !== renderObject.geometry.id ) {\n\n\t\t\tconst vaoKey = this._getVaoKey( renderObject.getAttributes() );\n\n\t\t\tvaoGPU = this.vaoCache[ vaoKey ];\n\n\t\t\tif ( vaoGPU === undefined ) {\n\n\t\t\t\tlet staticVao;\n\n\t\t\t\t( { vaoGPU, staticVao } = this._createVao( renderObject.getAttributes() ) );\n\n\t\t\t\tif ( staticVao ) {\n\n\t\t\t\t\trenderObjectData.staticVao = vaoGPU;\n\t\t\t\t\trenderObjectData.geometryId = renderObject.geometry.id;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst index = renderObject.getIndex();\n\t\tconst indexGPU = ( index !== null ) ? this.get( index ).bufferGPU : null;\n\n\t\tstate.setVertexState( vaoGPU, indexGPU );\n\n\t\t//\n\n\t\tconst lastObject = contextData.lastOcclusionObject;\n\n\t\tif ( lastObject !== object && lastObject !== undefined ) {\n\n\t\t\tif ( lastObject !== null && lastObject.occlusionTest === true ) {\n\n\t\t\t\tgl.endQuery( gl.ANY_SAMPLES_PASSED );\n\n\t\t\t\tcontextData.occlusionQueryIndex ++;\n\n\t\t\t}\n\n\t\t\tif ( object.occlusionTest === true ) {\n\n\t\t\t\tconst query = gl.createQuery();\n\n\t\t\t\tgl.beginQuery( gl.ANY_SAMPLES_PASSED, query );\n\n\t\t\t\tcontextData.occlusionQueries[ contextData.occlusionQueryIndex ] = query;\n\t\t\t\tcontextData.occlusionQueryObjects[ contextData.occlusionQueryIndex ] = object;\n\n\t\t\t}\n\n\t\t\tcontextData.lastOcclusionObject = object;\n\n\t\t}\n\n\t\t//\n\t\tconst renderer = this.bufferRenderer;\n\n\t\tif ( object.isPoints ) renderer.mode = gl.POINTS;\n\t\telse if ( object.isLineSegments ) renderer.mode = gl.LINES;\n\t\telse if ( object.isLine ) renderer.mode = gl.LINE_STRIP;\n\t\telse if ( object.isLineLoop ) renderer.mode = gl.LINE_LOOP;\n\t\telse {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * this.renderer.getPixelRatio() );\n\t\t\t\trenderer.mode = gl.LINES;\n\n\t\t\t} else {\n\n\t\t\t\trenderer.mode = gl.TRIANGLES;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst { vertexCount, instanceCount } = drawParams;\n\t\tlet { firstVertex } = drawParams;\n\n\t\trenderer.object = object;\n\n\t\tif ( index !== null ) {\n\n\t\t\tfirstVertex *= index.array.BYTES_PER_ELEMENT;\n\n\t\t\tconst indexData = this.get( index );\n\n\t\t\trenderer.index = index.count;\n\t\t\trenderer.type = indexData.type;\n\n\t\t} else {\n\n\t\t\trenderer.index = 0;\n\n\t\t}\n\n\t\tconst draw = () => {\n\n\t\t\tif ( object.isBatchedMesh ) {\n\n\t\t\t\tif ( object._multiDrawInstances !== null ) {\n\n\t\t\t\t\t// @deprecated, r174\n\t\t\t\t\twarnOnce( 'THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.' );\n\t\t\t\t\trenderer.renderMultiDrawInstances( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances );\n\n\t\t\t\t} else if ( ! this.hasFeature( 'WEBGL_multi_draw' ) ) {\n\n\t\t\t\t\twarnOnce( 'THREE.WebGLRenderer: WEBGL_multi_draw not supported.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );\n\n\t\t\t\t}\n\n\t\t\t} else if ( instanceCount > 1 ) {\n\n\t\t\t\trenderer.renderInstances( firstVertex, vertexCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( firstVertex, vertexCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tif ( renderObject.camera.isArrayCamera === true && renderObject.camera.cameras.length > 0 && renderObject.camera.isMultiViewCamera === false ) {\n\n\t\t\tconst cameraData = this.get( renderObject.camera );\n\t\t\tconst cameras = renderObject.camera.cameras;\n\t\t\tconst cameraIndex = renderObject.getBindingGroup( 'cameraIndex' ).bindings[ 0 ];\n\n\t\t\tif ( cameraData.indexesGPU === undefined || cameraData.indexesGPU.length !== cameras.length ) {\n\n\t\t\t\tconst data = new Uint32Array( [ 0, 0, 0, 0 ] );\n\t\t\t\tconst indexesGPU = [];\n\n\t\t\t\tfor ( let i = 0, len = cameras.length; i < len; i ++ ) {\n\n\t\t\t\t\tconst bufferGPU = gl.createBuffer();\n\n\t\t\t\t\tdata[ 0 ] = i;\n\n\t\t\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.STATIC_DRAW );\n\n\t\t\t\t\tindexesGPU.push( bufferGPU );\n\n\t\t\t\t}\n\n\t\t\t\tcameraData.indexesGPU = indexesGPU; // TODO: Create a global library for this\n\n\t\t\t}\n\n\t\t\tconst cameraIndexData = this.get( cameraIndex );\n\t\t\tconst pixelRatio = this.renderer.getPixelRatio();\n\n\t\t\tconst renderTarget = this._currentContext.renderTarget;\n\t\t\tconst isRenderCameraDepthArray = this._isRenderCameraDepthArray( this._currentContext );\n\t\t\tconst prevActiveCubeFace = this._currentContext.activeCubeFace;\n\n\t\t\tif ( isRenderCameraDepthArray ) {\n\n\t\t\t\t// Clear the depth texture\n\t\t\t\tconst textureData = this.get( renderTarget.depthTexture );\n\n\t\t\t\tif ( textureData.clearedRenderId !== this.renderer._nodes.nodeFrame.renderId ) {\n\n\t\t\t\t\ttextureData.clearedRenderId = this.renderer._nodes.nodeFrame.renderId;\n\n\t\t\t\t\tconst { stencilBuffer } = renderTarget;\n\n\t\t\t\t\tfor ( let i = 0, len = cameras.length; i < len; i ++ ) {\n\n\t\t\t\t\t\tthis.renderer._activeCubeFace = i;\n\t\t\t\t\t\tthis._currentContext.activeCubeFace = i;\n\n\t\t\t\t\t\tthis._setFramebuffer( this._currentContext );\n\t\t\t\t\t\tthis.clear( false, true, stencilBuffer, this._currentContext, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.renderer._activeCubeFace = prevActiveCubeFace;\n\t\t\t\t\tthis._currentContext.activeCubeFace = prevActiveCubeFace;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, len = cameras.length; i < len; i ++ ) {\n\n\t\t\t\tconst subCamera = cameras[ i ];\n\n\t\t\t\tif ( object.layers.test( subCamera.layers ) ) {\n\n\t\t\t\t\tif ( isRenderCameraDepthArray ) {\n\n\t\t\t\t\t\t// Update the active layer\n\t\t\t\t\t\tthis.renderer._activeCubeFace = i;\n\t\t\t\t\t\tthis._currentContext.activeCubeFace = i;\n\n\t\t\t\t\t\tthis._setFramebuffer( this._currentContext );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst vp = subCamera.viewport;\n\n\t\t\t\t\tif ( vp !== undefined ) {\n\n\t\t\t\t\t\tconst x = vp.x * pixelRatio;\n\t\t\t\t\t\tconst y = vp.y * pixelRatio;\n\t\t\t\t\t\tconst width = vp.width * pixelRatio;\n\t\t\t\t\t\tconst height = vp.height * pixelRatio;\n\n\t\t\t\t\t\tstate.viewport(\n\t\t\t\t\t\t\tMath.floor( x ),\n\t\t\t\t\t\t\tMath.floor( renderObject.context.height - height - y ),\n\t\t\t\t\t\t\tMath.floor( width ),\n\t\t\t\t\t\t\tMath.floor( height )\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.bindBufferBase( gl.UNIFORM_BUFFER, cameraIndexData.index, cameraData.indexesGPU[ i ] );\n\n\t\t\t\t\tdraw();\n\n\t\t\t\t}\n\n\t\t\t\tthis._currentContext.activeCubeFace = prevActiveCubeFace;\n\t\t\t\tthis.renderer._activeCubeFace = prevActiveCubeFace;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdraw();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Explain why always null is returned.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether the render pipeline requires an update or not.\n\t */\n\tneedsRenderUpdate( /*renderObject*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Explain why no cache key is computed.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {string} The cache key.\n\t */\n\tgetRenderCacheKey( /*renderObject*/ ) {\n\n\t\treturn '';\n\n\t}\n\n\t// textures\n\n\t/**\n\t * Creates a default texture for the given texture that can be used\n\t * as a placeholder until the actual texture is ready for usage.\n\t *\n\t * @param {Texture} texture - The texture to create a default texture for.\n\t */\n\tcreateDefaultTexture( texture ) {\n\n\t\tthis.textureUtils.createDefaultTexture( texture );\n\n\t}\n\n\t/**\n\t * Defines a texture on the GPU for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tcreateTexture( texture, options ) {\n\n\t\tthis.textureUtils.createTexture( texture, options );\n\n\t}\n\n\t/**\n\t * Uploads the updated texture data to the GPU.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tupdateTexture( texture, options ) {\n\n\t\tthis.textureUtils.updateTexture( texture, options );\n\n\t}\n\n\t/**\n\t * Generates mipmaps for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tgenerateMipmaps( texture ) {\n\n\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t}\n\n\t/**\n\t * Destroys the GPU data for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tdestroyTexture( texture ) {\n\n\t\tthis.textureUtils.destroyTexture( texture );\n\n\t}\n\n\t/**\n\t * Returns texture data as a typed array.\n\t *\n\t * @async\n\t * @param {Texture} texture - The texture to copy.\n\t * @param {number} x - The x coordinate of the copy origin.\n\t * @param {number} y - The y coordinate of the copy origin.\n\t * @param {number} width - The width of the copy.\n\t * @param {number} height - The height of the copy.\n\t * @param {number} faceIndex - The face index.\n\t * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.\n\t */\n\tasync copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\treturn this.textureUtils.copyTextureToBuffer( texture, x, y, width, height, faceIndex );\n\n\t}\n\n\t/**\n\t * This method does nothing since WebGL 2 has no concept of samplers.\n\t *\n\t * @param {Texture} texture - The texture to create the sampler for.\n\t */\n\tcreateSampler( /*texture*/ ) {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\t/**\n\t * This method does nothing since WebGL 2 has no concept of samplers.\n\t *\n\t * @param {Texture} texture - The texture to destroy the sampler for.\n\t */\n\tdestroySampler( /*texture*/ ) {}\n\n\t// node builder\n\n\t/**\n\t * Returns a node builder for the given render object.\n\t *\n\t * @param {RenderObject} object - The render object.\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {GLSLNodeBuilder} The node builder.\n\t */\n\tcreateNodeBuilder( object, renderer ) {\n\n\t\treturn new GLSLNodeBuilder( object, renderer );\n\n\t}\n\n\t// program\n\n\t/**\n\t * Creates a shader program from the given programmable stage.\n\t *\n\t * @param {ProgrammableStage} program - The programmable stage.\n\t */\n\tcreateProgram( program ) {\n\n\t\tconst gl = this.gl;\n\t\tconst { stage, code } = program;\n\n\t\tconst shader = stage === 'fragment' ? gl.createShader( gl.FRAGMENT_SHADER ) : gl.createShader( gl.VERTEX_SHADER );\n\n\t\tgl.shaderSource( shader, code );\n\t\tgl.compileShader( shader );\n\n\t\tthis.set( program, {\n\t\t\tshaderGPU: shader\n\t\t} );\n\n\t}\n\n\t/**\n\t * Destroys the shader program of the given programmable stage.\n\t *\n\t * @param {ProgrammableStage} program - The programmable stage.\n\t */\n\tdestroyProgram( program ) {\n\n\t\tthis.delete( program );\n\n\t}\n\n\t/**\n\t * Creates a render pipeline for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n\t */\n\tcreateRenderPipeline( renderObject, promises ) {\n\n\t\tconst gl = this.gl;\n\t\tconst pipeline = renderObject.pipeline;\n\n\t\t// Program\n\n\t\tconst { fragmentProgram, vertexProgram } = pipeline;\n\n\t\tconst programGPU = gl.createProgram();\n\n\t\tconst fragmentShader = this.get( fragmentProgram ).shaderGPU;\n\t\tconst vertexShader = this.get( vertexProgram ).shaderGPU;\n\n\t\tgl.attachShader( programGPU, fragmentShader );\n\t\tgl.attachShader( programGPU, vertexShader );\n\t\tgl.linkProgram( programGPU );\n\n\t\tthis.set( pipeline, {\n\t\t\tprogramGPU,\n\t\t\tfragmentShader,\n\t\t\tvertexShader\n\t\t} );\n\n\t\tif ( promises !== null && this.parallel ) {\n\n\t\t\tconst p = new Promise( ( resolve /*, reject*/ ) => {\n\n\t\t\t\tconst parallel = this.parallel;\n\t\t\t\tconst checkStatus = () => {\n\n\t\t\t\t\tif ( gl.getProgramParameter( programGPU, parallel.COMPLETION_STATUS_KHR ) ) {\n\n\t\t\t\t\t\tthis._completeCompile( renderObject, pipeline );\n\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trequestAnimationFrame( checkStatus );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tcheckStatus();\n\n\t\t\t} );\n\n\t\t\tpromises.push( p );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._completeCompile( renderObject, pipeline );\n\n\t}\n\n\t/**\n\t * Formats the source code of error messages.\n\t *\n\t * @private\n\t * @param {string} string - The code.\n\t * @param {number} errorLine - The error line.\n\t * @return {string} The formatted code.\n\t */\n\t_handleSource( string, errorLine ) {\n\n\t\tconst lines = string.split( '\\n' );\n\t\tconst lines2 = [];\n\n\t\tconst from = Math.max( errorLine - 6, 0 );\n\t\tconst to = Math.min( errorLine + 6, lines.length );\n\n\t\tfor ( let i = from; i < to; i ++ ) {\n\n\t\t\tconst line = i + 1;\n\t\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\n\n\t\t}\n\n\t\treturn lines2.join( '\\n' );\n\n\t}\n\n\t/**\n\t * Gets the shader compilation errors from the info log.\n\t *\n\t * @private\n\t * @param {WebGL2RenderingContext} gl - The rendering context.\n\t * @param {WebGLShader} shader - The WebGL shader object.\n\t * @param {string} type - The shader type.\n\t * @return {string} The shader errors.\n\t */\n\t_getShaderErrors( gl, shader, type ) {\n\n\t\tconst status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );\n\t\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && errors === '' ) return '';\n\n\t\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\n\t\tif ( errorMatches ) {\n\n\t\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\n\t\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + this._handleSource( gl.getShaderSource( shader ), errorLine );\n\n\t\t} else {\n\n\t\t\treturn errors;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Logs shader compilation errors.\n\t *\n\t * @private\n\t * @param {WebGLProgram} programGPU - The WebGL program.\n\t * @param {WebGLShader} glFragmentShader - The fragment shader as a native WebGL shader object.\n\t * @param {WebGLShader} glVertexShader - The vertex shader as a native WebGL shader object.\n\t */\n\t_logProgramError( programGPU, glFragmentShader, glVertexShader ) {\n\n\t\tif ( this.renderer.debug.checkShaderErrors ) {\n\n\t\t\tconst gl = this.gl;\n\n\t\t\tconst programLog = gl.getProgramInfoLog( programGPU ).trim();\n\n\t\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\n\t\t\t\tif ( typeof this.renderer.debug.onShaderError === 'function' ) {\n\n\t\t\t\t\tthis.renderer.debug.onShaderError( gl, programGPU, glVertexShader, glFragmentShader );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// default error reporting\n\n\t\t\t\t\tconst vertexErrors = this._getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\t\tconst fragmentErrors = this._getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( programGPU, gl.VALIDATE_STATUS ) + '\\n\\n' +\n\t\t\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\t\t\tfragmentErrors\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Completes the shader program setup for the given render object.\n\t *\n\t * @private\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {RenderPipeline} pipeline - The render pipeline.\n\t */\n\t_completeCompile( renderObject, pipeline ) {\n\n\t\tconst { state, gl } = this;\n\t\tconst pipelineData = this.get( pipeline );\n\t\tconst { programGPU, fragmentShader, vertexShader } = pipelineData;\n\n\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\t\t\tthis._logProgramError( programGPU, fragmentShader, vertexShader );\n\n\t\t}\n\n\t\tstate.useProgram( programGPU );\n\n\t\t// Bindings\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tthis._setupBindings( bindings, programGPU );\n\n\t\t//\n\n\t\tthis.set( pipeline, {\n\t\t\tprogramGPU\n\t\t} );\n\n\t}\n\n\t/**\n\t * Creates a compute pipeline for the given compute node.\n\t *\n\t * @param {ComputePipeline} computePipeline - The compute pipeline.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t */\n\tcreateComputePipeline( computePipeline, bindings ) {\n\n\t\tconst { state, gl } = this;\n\n\t\t// Program\n\n\t\tconst fragmentProgram = {\n\t\t\tstage: 'fragment',\n\t\t\tcode: '#version 300 es\\nprecision highp float;\\nvoid main() {}'\n\t\t};\n\n\t\tthis.createProgram( fragmentProgram );\n\n\t\tconst { computeProgram } = computePipeline;\n\n\t\tconst programGPU = gl.createProgram();\n\n\t\tconst fragmentShader = this.get( fragmentProgram ).shaderGPU;\n\t\tconst vertexShader = this.get( computeProgram ).shaderGPU;\n\n\t\tconst transforms = computeProgram.transforms;\n\n\t\tconst transformVaryingNames = [];\n\t\tconst transformAttributeNodes = [];\n\n\t\tfor ( let i = 0; i < transforms.length; i ++ ) {\n\n\t\t\tconst transform = transforms[ i ];\n\n\t\t\ttransformVaryingNames.push( transform.varyingName );\n\t\t\ttransformAttributeNodes.push( transform.attributeNode );\n\n\t\t}\n\n\t\tgl.attachShader( programGPU, fragmentShader );\n\t\tgl.attachShader( programGPU, vertexShader );\n\n\t\tgl.transformFeedbackVaryings(\n\t\t\tprogramGPU,\n\t\t\ttransformVaryingNames,\n\t\t\tgl.SEPARATE_ATTRIBS\n\t\t);\n\n\t\tgl.linkProgram( programGPU );\n\n\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\t\t\tthis._logProgramError( programGPU, fragmentShader, vertexShader );\n\n\n\t\t}\n\n\t\tstate.useProgram( programGPU );\n\n\t\t// Bindings\n\n\t\tthis._setupBindings( bindings, programGPU );\n\n\t\tconst attributeNodes = computeProgram.attributes;\n\t\tconst attributes = [];\n\t\tconst transformBuffers = [];\n\n\t\tfor ( let i = 0; i < attributeNodes.length; i ++ ) {\n\n\t\t\tconst attribute = attributeNodes[ i ].node.attribute;\n\n\t\t\tattributes.push( attribute );\n\n\t\t\tif ( ! this.has( attribute ) ) this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < transformAttributeNodes.length; i ++ ) {\n\n\t\t\tconst attribute = transformAttributeNodes[ i ].attribute;\n\n\t\t\tif ( ! this.has( attribute ) ) this.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t\t\tconst attributeData = this.get( attribute );\n\n\t\t\ttransformBuffers.push( attributeData );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.set( computePipeline, {\n\t\t\tprogramGPU,\n\t\t\ttransformBuffers,\n\t\t\tattributes\n\t\t} );\n\n\t}\n\n\t/**\n\t * Creates bindings from the given bind group definition.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {Array<BindGroup>} bindings - Array of bind groups.\n\t * @param {number} cacheIndex - The cache index.\n\t * @param {number} version - The version.\n\t */\n\tcreateBindings( bindGroup, bindings /*, cacheIndex, version*/ ) {\n\n\t\tif ( this._knownBindings.has( bindings ) === false ) {\n\n\t\t\tthis._knownBindings.add( bindings );\n\n\t\t\tlet uniformBuffers = 0;\n\t\t\tlet textures = 0;\n\n\t\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\t\tthis.set( bindGroup, {\n\t\t\t\t\ttextures: textures,\n\t\t\t\t\tuniformBuffers: uniformBuffers\n\t\t\t\t} );\n\n\t\t\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\t\t\tif ( binding.isUniformBuffer ) uniformBuffers ++;\n\t\t\t\t\tif ( binding.isSampledTexture ) textures ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.updateBindings( bindGroup, bindings );\n\n\t}\n\n\t/**\n\t * Updates the given bind group definition.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {Array<BindGroup>} bindings - Array of bind groups.\n\t * @param {number} cacheIndex - The cache index.\n\t * @param {number} version - The version.\n\t */\n\tupdateBindings( bindGroup /*, bindings, cacheIndex, version*/ ) {\n\n\t\tconst { gl } = this;\n\n\t\tconst bindGroupData = this.get( bindGroup );\n\n\t\tlet i = bindGroupData.uniformBuffers;\n\t\tlet t = bindGroupData.textures;\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\tconst data = binding.buffer;\n\t\t\t\tconst bufferGPU = gl.createBuffer();\n\n\t\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: i ++,\n\t\t\t\t\tbufferGPU\n\t\t\t\t} );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst { textureGPU, glTextureType } = this.get( binding.texture );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: t ++,\n\t\t\t\t\ttextureGPU,\n\t\t\t\t\tglTextureType\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates a buffer binding.\n\t *\n\t *  @param {Buffer} binding - The buffer binding to update.\n\t */\n\tupdateBinding( binding ) {\n\n\t\tconst gl = this.gl;\n\n\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst bufferGPU = bindingData.bufferGPU;\n\t\t\tconst data = binding.buffer;\n\n\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\n\t\t}\n\n\t}\n\n\t// attributes\n\n\t/**\n\t * Creates the GPU buffer of an indexed shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The indexed buffer attribute.\n\t */\n\tcreateIndexAttribute( attribute ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t}\n\n\t/**\n\t * Creates the GPU buffer of a shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tcreateAttribute( attribute ) {\n\n\t\tif ( this.has( attribute ) ) return;\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t}\n\n\t/**\n\t * Creates the GPU buffer of a storage attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tcreateStorageAttribute( attribute ) {\n\n\t\tif ( this.has( attribute ) ) return;\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t}\n\n\t/**\n\t * Updates the GPU buffer of a shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute to update.\n\t */\n\tupdateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.updateAttribute( attribute );\n\n\t}\n\n\t/**\n\t * Destroys the GPU buffer of a shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute to destroy.\n\t */\n\tdestroyAttribute( attribute ) {\n\n\t\tthis.attributeUtils.destroyAttribute( attribute );\n\n\t}\n\n\t/**\n\t * Checks if the given feature is supported  by the backend.\n\t *\n\t * @param {string} name - The feature's name.\n\t * @return {boolean} Whether the feature is supported or not.\n\t */\n\thasFeature( name ) {\n\n\t\tconst keysMatching = Object.keys( GLFeatureName ).filter( key => GLFeatureName[ key ] === name );\n\n\t\tconst extensions = this.extensions;\n\n\t\tfor ( let i = 0; i < keysMatching.length; i ++ ) {\n\n\t\t\tif ( extensions.has( keysMatching[ i ] ) ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the maximum anisotropy texture filtering value.\n\t *\n\t * @return {number} The maximum anisotropy texture filtering value.\n\t */\n\tgetMaxAnisotropy() {\n\n\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t}\n\n\t/**\n\t * Copies data of the given source texture to the given destination texture.\n\t *\n\t * @param {Texture} srcTexture - The source texture.\n\t * @param {Texture} dstTexture - The destination texture.\n\t * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.\n\t * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.\n\t * @param {number} [srcLevel=0] - The source mip level to copy from.\n\t * @param {number} [dstLevel=0] - The destination mip level to copy to.\n\t */\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0 ) {\n\n\t\tthis.textureUtils.copyTextureToTexture( srcTexture, dstTexture, srcRegion, dstPosition, srcLevel, dstLevel );\n\n\t}\n\n\t/**\n\t * Copies the current bound framebuffer to the given texture.\n\t *\n\t * @param {Texture} texture - The destination texture.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n\t */\n\tcopyFramebufferToTexture( texture, renderContext, rectangle ) {\n\n\t\tthis.textureUtils.copyFramebufferToTexture( texture, renderContext, rectangle );\n\n\t}\n\n\t/**\n\t * Configures the active framebuffer from the given render context.\n\t *\n\t * @private\n\t * @param {RenderContext} descriptor - The render context.\n\t */\n\t_setFramebuffer( descriptor ) {\n\n\t\tconst { gl, state } = this;\n\n\t\tlet currentFrameBuffer = null;\n\n\t\tif ( descriptor.textures !== null ) {\n\n\t\t\tconst renderTarget = descriptor.renderTarget;\n\t\t\tconst renderTargetContextData = this.get( renderTarget );\n\t\t\tconst { samples, depthBuffer, stencilBuffer } = renderTarget;\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isRenderTarget3D = renderTarget.isRenderTarget3D === true;\n\t\t\tconst isRenderTargetArray = renderTarget.isRenderTargetArray === true;\n\t\t\tconst isXRRenderTarget = renderTarget.isXRRenderTarget === true;\n\t\t\tconst hasExternalTextures = ( isXRRenderTarget === true && renderTarget.hasExternalTextures === true );\n\n\t\t\tlet msaaFb = renderTargetContextData.msaaFrameBuffer;\n\t\t\tlet depthRenderbuffer = renderTargetContextData.depthRenderbuffer;\n\t\t\tconst multisampledRTTExt = this.extensions.get( 'WEBGL_multisampled_render_to_texture' );\n\t\t\tconst multiviewExt = this.extensions.get( 'OVR_multiview2' );\n\t\t\tconst useMultisampledRTT = this._useMultisampledExtension( renderTarget );\n\t\t\tconst cacheKey = getCacheKey( descriptor );\n\n\t\t\tlet fb;\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetContextData.cubeFramebuffers || ( renderTargetContextData.cubeFramebuffers = {} );\n\n\t\t\t\tfb = renderTargetContextData.cubeFramebuffers[ cacheKey ];\n\n\t\t\t} else if ( isXRRenderTarget && hasExternalTextures === false ) {\n\n\t\t\t\tfb = this._xrFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetContextData.framebuffers || ( renderTargetContextData.framebuffers = {} );\n\n\t\t\t\tfb = renderTargetContextData.framebuffers[ cacheKey ];\n\n\t\t\t}\n\n\t\t\tif ( fb === undefined ) {\n\n\t\t\t\tfb = gl.createFramebuffer();\n\n\t\t\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t\tconst textures = descriptor.textures;\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetContextData.cubeFramebuffers[ cacheKey ] = fb;\n\n\t\t\t\t\tconst { textureGPU } = this.get( textures[ 0 ] );\n\n\t\t\t\t\tconst cubeFace = this.renderer._activeCubeFace;\n\n\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + cubeFace, textureGPU, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderTargetContextData.framebuffers[ cacheKey ] = fb;\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\t\tconst textureData = this.get( texture );\n\t\t\t\t\t\ttextureData.renderTarget = descriptor.renderTarget;\n\t\t\t\t\t\ttextureData.cacheKey = cacheKey; // required for copyTextureToTexture()\n\n\t\t\t\t\t\tconst attachment = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t\t\tif ( isRenderTarget3D || isRenderTargetArray ) {\n\n\t\t\t\t\t\t\tconst layer = this.renderer._activeCubeFace;\n\n\t\t\t\t\t\t\tgl.framebufferTextureLayer( gl.FRAMEBUFFER, attachment, textureData.textureGPU, 0, layer );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( renderTarget.multiview ) {\n\n\t\t\t\t\t\t\t\tmultiviewExt.framebufferTextureMultisampleMultiviewOVR( gl.FRAMEBUFFER, attachment, textureData.textureGPU, 0, samples, 0, 2 );\n\n\t\t\t\t\t\t\t} else if ( hasExternalTextures && useMultisampledRTT ) {\n\n\t\t\t\t\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0, samples );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.drawBuffers( descriptor, fb );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTarget.isXRRenderTarget && renderTarget.autoAllocateDepthBuffer === true ) {\n\n\t\t\t\t\tconst renderbuffer = gl.createRenderbuffer();\n\t\t\t\t\tthis.textureUtils.setupRenderBufferStorage( renderbuffer, descriptor, 0, useMultisampledRTT );\n\t\t\t\t\trenderTargetContextData.xrDepthRenderbuffer = renderbuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( descriptor.depthTexture !== null ) {\n\n\t\t\t\t\t\tconst textureData = this.get( descriptor.depthTexture );\n\t\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\ttextureData.renderTarget = descriptor.renderTarget;\n\t\t\t\t\t\ttextureData.cacheKey = cacheKey; // required for copyTextureToTexture()\n\n\t\t\t\t\t\tif ( renderTarget.multiview ) {\n\n\t\t\t\t\t\t\tmultiviewExt.framebufferTextureMultisampleMultiviewOVR( gl.FRAMEBUFFER, depthStyle, textureData.textureGPU, 0, samples, 0, 2 );\n\n\t\t\t\t\t\t} else if ( hasExternalTextures && useMultisampledRTT ) {\n\n\t\t\t\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0, samples );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( descriptor.depthTexture.isDepthArrayTexture ) {\n\n\t\t\t\t\t\t\t\tconst layer = this.renderer._activeCubeFace;\n\n\t\t\t\t\t\t\t\tgl.framebufferTextureLayer( gl.FRAMEBUFFER, depthStyle, textureData.textureGPU, 0, layer );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst isRenderCameraDepthArray = this._isRenderCameraDepthArray( descriptor );\n\n\t\t\t\tif ( isRenderCameraDepthArray ) {\n\n\t\t\t\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t\t\tconst layer = this.renderer._activeCubeFace;\n\n\t\t\t\t\tconst depthData = this.get( descriptor.depthTexture );\n\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\tgl.framebufferTextureLayer(\n\t\t\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\t\t\tdepthStyle,\n\t\t\t\t\t\tdepthData.textureGPU,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tlayer\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\t// rebind external XR textures\n\n\t\t\t\tif ( ( isXRRenderTarget && hasExternalTextures ) || renderTarget.multiview ) {\n\n\t\t\t\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t\t\t// rebind color\n\n\t\t\t\t\tconst textureData = this.get( descriptor.textures[ 0 ] );\n\n\t\t\t\t\tif ( renderTarget.multiview ) {\n\n\t\t\t\t\t\tmultiviewExt.framebufferTextureMultisampleMultiviewOVR( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, textureData.textureGPU, 0, samples, 0, 2 );\n\n\t\t\t\t\t} else if ( useMultisampledRTT ) {\n\n\t\t\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureData.textureGPU, 0, samples );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureData.textureGPU, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// rebind depth\n\n\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\n\t\t\t\t\tif ( renderTarget.autoAllocateDepthBuffer === true ) {\n\n\t\t\t\t\t\tconst renderbuffer = renderTargetContextData.xrDepthRenderbuffer;\n\t\t\t\t\t\tgl.bindRenderbuffer( gl.RENDERBUFFER, renderbuffer );\n\t\t\t\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst textureData = this.get( descriptor.depthTexture );\n\n\t\t\t\t\t\tif ( renderTarget.multiview ) {\n\n\t\t\t\t\t\t\tmultiviewExt.framebufferTextureMultisampleMultiviewOVR( gl.FRAMEBUFFER, depthStyle, textureData.textureGPU, 0, samples, 0, 2 );\n\n\t\t\t\t\t\t} else if ( useMultisampledRTT ) {\n\n\t\t\t\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0, samples );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( samples > 0 && useMultisampledRTT === false && ! renderTarget.multiview ) {\n\n\t\t\t\tif ( msaaFb === undefined ) {\n\n\t\t\t\t\tconst invalidationArray = [];\n\n\t\t\t\t\tmsaaFb = gl.createFramebuffer();\n\n\t\t\t\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, msaaFb );\n\n\t\t\t\t\tconst msaaRenderbuffers = [];\n\n\t\t\t\t\tconst textures = descriptor.textures;\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tmsaaRenderbuffers[ i ] = gl.createRenderbuffer();\n\n\t\t\t\t\t\tgl.bindRenderbuffer( gl.RENDERBUFFER, msaaRenderbuffers[ i ] );\n\n\t\t\t\t\t\tinvalidationArray.push( gl.COLOR_ATTACHMENT0 + i );\n\n\t\t\t\t\t\tif ( depthBuffer ) {\n\n\t\t\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst texture = descriptor.textures[ i ];\n\t\t\t\t\t\tconst textureData = this.get( texture );\n\n\t\t\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, textureData.glInternalFormat, descriptor.width, descriptor.height );\n\t\t\t\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, msaaRenderbuffers[ i ] );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetContextData.msaaFrameBuffer = msaaFb;\n\t\t\t\t\trenderTargetContextData.msaaRenderbuffers = msaaRenderbuffers;\n\n\t\t\t\t\tif ( depthRenderbuffer === undefined ) {\n\n\t\t\t\t\t\tdepthRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\tthis.textureUtils.setupRenderBufferStorage( depthRenderbuffer, descriptor, samples );\n\n\t\t\t\t\t\trenderTargetContextData.depthRenderbuffer = depthRenderbuffer;\n\n\t\t\t\t\t\tconst depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetContextData.invalidationArray = invalidationArray;\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n\n\t\t\t} else {\n\n\t\t\t\tcurrentFrameBuffer = fb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( gl.FRAMEBUFFER, currentFrameBuffer );\n\n\t}\n\n\t/**\n\t * Computes the VAO key for the given index and attributes.\n\t *\n\t * @private\n\t * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.\n\t * @return {string} The VAO key.\n\t */\n\t_getVaoKey( attributes ) {\n\n\t\tlet key = '';\n\n\t\tfor ( let i = 0; i < attributes.length; i ++ ) {\n\n\t\t\tconst attributeData = this.get( attributes[ i ] );\n\n\t\t\tkey += ':' + attributeData.id;\n\n\t\t}\n\n\t\treturn key;\n\n\t}\n\n\t/**\n\t * Creates a VAO from the index and attributes.\n\t *\n\t * @private\n\t * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.\n\t * @return {Object} The VAO data.\n\t */\n\t_createVao( attributes ) {\n\n\t\tconst { gl } = this;\n\n\t\tconst vaoGPU = gl.createVertexArray();\n\t\tlet key = '';\n\n\t\tlet staticVao = true;\n\n\t\tgl.bindVertexArray( vaoGPU );\n\n\t\tfor ( let i = 0; i < attributes.length; i ++ ) {\n\n\t\t\tconst attribute = attributes[ i ];\n\t\t\tconst attributeData = this.get( attribute );\n\n\t\t\tkey += ':' + attributeData.id;\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, attributeData.bufferGPU );\n\t\t\tgl.enableVertexAttribArray( i );\n\n\t\t\tif ( attribute.isStorageBufferAttribute || attribute.isStorageInstancedBufferAttribute ) staticVao = false;\n\n\t\t\tlet stride, offset;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute === true ) {\n\n\t\t\t\tstride = attribute.data.stride * attributeData.bytesPerElement;\n\t\t\t\toffset = attribute.offset * attributeData.bytesPerElement;\n\n\t\t\t} else {\n\n\t\t\t\tstride = 0;\n\t\t\t\toffset = 0;\n\n\t\t\t}\n\n\t\t\tif ( attributeData.isInteger ) {\n\n\t\t\t\tgl.vertexAttribIPointer( i, attribute.itemSize, attributeData.type, stride, offset );\n\n\t\t\t} else {\n\n\t\t\t\tgl.vertexAttribPointer( i, attribute.itemSize, attributeData.type, attribute.normalized, stride, offset );\n\n\t\t\t}\n\n\t\t\tif ( attribute.isInstancedBufferAttribute && ! attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tgl.vertexAttribDivisor( i, attribute.meshPerAttribute );\n\n\t\t\t} else if ( attribute.isInterleavedBufferAttribute && attribute.data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\tgl.vertexAttribDivisor( i, attribute.data.meshPerAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, null );\n\n\t\tthis.vaoCache[ key ] = vaoGPU;\n\n\t\treturn { vaoGPU, staticVao };\n\n\t}\n\n\t/**\n\t * Creates a transform feedback from the given transform buffers.\n\t *\n\t * @private\n\t * @param {Array<DualAttributeData>} transformBuffers - The transform buffers.\n\t * @return {WebGLTransformFeedback} The transform feedback.\n\t */\n\t_getTransformFeedback( transformBuffers ) {\n\n\t\tlet key = '';\n\n\t\tfor ( let i = 0; i < transformBuffers.length; i ++ ) {\n\n\t\t\tkey += ':' + transformBuffers[ i ].id;\n\n\t\t}\n\n\t\tlet transformFeedbackGPU = this.transformFeedbackCache[ key ];\n\n\t\tif ( transformFeedbackGPU !== undefined ) {\n\n\t\t\treturn transformFeedbackGPU;\n\n\t\t}\n\n\t\tconst { gl } = this;\n\n\t\ttransformFeedbackGPU = gl.createTransformFeedback();\n\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, transformFeedbackGPU );\n\n\t\tfor ( let i = 0; i < transformBuffers.length; i ++ ) {\n\n\t\t\tconst attributeData = transformBuffers[ i ];\n\n\t\t\tgl.bindBufferBase( gl.TRANSFORM_FEEDBACK_BUFFER, i, attributeData.transformBuffer );\n\n\t\t}\n\n\t\tgl.bindTransformFeedback( gl.TRANSFORM_FEEDBACK, null );\n\n\t\tthis.transformFeedbackCache[ key ] = transformFeedbackGPU;\n\n\t\treturn transformFeedbackGPU;\n\n\t}\n\n\t/**\n\t * Setups the given bindings.\n\t *\n\t * @private\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t * @param {WebGLProgram} programGPU - The WebGL program.\n\t */\n\t_setupBindings( bindings, programGPU ) {\n\n\t\tconst gl = this.gl;\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\t\tconst bindingData = this.get( binding );\n\t\t\t\tconst index = bindingData.index;\n\n\t\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\t\tconst location = gl.getUniformBlockIndex( programGPU, binding.name );\n\t\t\t\t\tgl.uniformBlockBinding( programGPU, location, index );\n\n\t\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\t\tconst location = gl.getUniformLocation( programGPU, binding.name );\n\t\t\t\t\tgl.uniform1i( location, index );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Binds the given uniforms.\n\t *\n\t * @private\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t */\n\t_bindUniforms( bindings ) {\n\n\t\tconst { gl, state } = this;\n\n\t\tfor ( const bindGroup of bindings ) {\n\n\t\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\t\tconst bindingData = this.get( binding );\n\t\t\t\tconst index = bindingData.index;\n\n\t\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\t\t// TODO USE bindBufferRange to group multiple uniform buffers\n\t\t\t\t\tstate.bindBufferBase( gl.UNIFORM_BUFFER, index, bindingData.bufferGPU );\n\n\t\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\t\tstate.bindTexture( bindingData.glTextureType, bindingData.textureGPU, gl.TEXTURE0 + index );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the `WEBGL_multisampled_render_to_texture` extension\n\t * should be used when MSAA is enabled.\n\t *\n\t * @private\n\t * @param {RenderTarget} renderTarget - The render target that should be multisampled.\n\t * @return {boolean} Whether to use the `WEBGL_multisampled_render_to_texture` extension for MSAA or not.\n\t */\n\t_useMultisampledExtension( renderTarget ) {\n\n\t\tif ( renderTarget.multiview === true ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn renderTarget.samples > 0 && this.extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTarget.autoAllocateDepthBuffer !== false;\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tconst extension = this.extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t\tthis.renderer.domElement.removeEventListener( 'webglcontextlost', this._onContextLost );\n\n\t}\n\n}\n\nconst GPUPrimitiveTopology = {\n\tPointList: 'point-list',\n\tLineList: 'line-list',\n\tLineStrip: 'line-strip',\n\tTriangleList: 'triangle-list',\n\tTriangleStrip: 'triangle-strip',\n};\n\nconst GPUCompareFunction = {\n\tNever: 'never',\n\tLess: 'less',\n\tEqual: 'equal',\n\tLessEqual: 'less-equal',\n\tGreater: 'greater',\n\tNotEqual: 'not-equal',\n\tGreaterEqual: 'greater-equal',\n\tAlways: 'always'\n};\n\nconst GPUStoreOp = {\n\tStore: 'store'};\n\nconst GPULoadOp = {\n\tLoad: 'load',\n\tClear: 'clear'\n};\n\nconst GPUFrontFace = {\n\tCCW: 'ccw'};\n\nconst GPUCullMode = {\n\tNone: 'none',\n\tFront: 'front',\n\tBack: 'back'\n};\n\nconst GPUIndexFormat = {\n\tUint16: 'uint16',\n\tUint32: 'uint32'\n};\n\nconst GPUTextureFormat = {\n\n\t// 8-bit formats\n\n\tR8Unorm: 'r8unorm',\n\tR8Snorm: 'r8snorm',\n\tR8Uint: 'r8uint',\n\tR8Sint: 'r8sint',\n\n\t// 16-bit formats\n\n\tR16Uint: 'r16uint',\n\tR16Sint: 'r16sint',\n\tR16Float: 'r16float',\n\tRG8Unorm: 'rg8unorm',\n\tRG8Snorm: 'rg8snorm',\n\tRG8Uint: 'rg8uint',\n\tRG8Sint: 'rg8sint',\n\n\t// 32-bit formats\n\n\tR32Uint: 'r32uint',\n\tR32Sint: 'r32sint',\n\tR32Float: 'r32float',\n\tRG16Uint: 'rg16uint',\n\tRG16Sint: 'rg16sint',\n\tRG16Float: 'rg16float',\n\tRGBA8Unorm: 'rgba8unorm',\n\tRGBA8UnormSRGB: 'rgba8unorm-srgb',\n\tRGBA8Snorm: 'rgba8snorm',\n\tRGBA8Uint: 'rgba8uint',\n\tRGBA8Sint: 'rgba8sint',\n\tBGRA8Unorm: 'bgra8unorm',\n\tBGRA8UnormSRGB: 'bgra8unorm-srgb',\n\t// Packed 32-bit formats\n\tRGB9E5UFloat: 'rgb9e5ufloat',\n\tRGB10A2Unorm: 'rgb10a2unorm',\n\tRG11B10UFloat: 'rgb10a2unorm',\n\n\t// 64-bit formats\n\n\tRG32Uint: 'rg32uint',\n\tRG32Sint: 'rg32sint',\n\tRG32Float: 'rg32float',\n\tRGBA16Uint: 'rgba16uint',\n\tRGBA16Sint: 'rgba16sint',\n\tRGBA16Float: 'rgba16float',\n\n\t// 128-bit formats\n\n\tRGBA32Uint: 'rgba32uint',\n\tRGBA32Sint: 'rgba32sint',\n\tRGBA32Float: 'rgba32float',\n\n\tDepth16Unorm: 'depth16unorm',\n\tDepth24Plus: 'depth24plus',\n\tDepth24PlusStencil8: 'depth24plus-stencil8',\n\tDepth32Float: 'depth32float',\n\n\t// 'depth32float-stencil8' extension\n\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\n\t// BC compressed formats usable if 'texture-compression-bc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tBC1RGBAUnorm: 'bc1-rgba-unorm',\n\tBC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n\tBC2RGBAUnorm: 'bc2-rgba-unorm',\n\tBC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n\tBC3RGBAUnorm: 'bc3-rgba-unorm',\n\tBC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n\tBC4RUnorm: 'bc4-r-unorm',\n\tBC4RSnorm: 'bc4-r-snorm',\n\tBC5RGUnorm: 'bc5-rg-unorm',\n\tBC5RGSnorm: 'bc5-rg-snorm',\n\tBC6HRGBUFloat: 'bc6h-rgb-ufloat',\n\tBC6HRGBFloat: 'bc6h-rgb-float',\n\tBC7RGBAUnorm: 'bc7-rgba-unorm',\n\tBC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n\n\t// ETC2 compressed formats usable if 'texture-compression-etc2' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tETC2RGB8Unorm: 'etc2-rgb8unorm',\n\tETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',\n\tETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',\n\tETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',\n\tETC2RGBA8Unorm: 'etc2-rgba8unorm',\n\tETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',\n\tEACR11Unorm: 'eac-r11unorm',\n\tEACR11Snorm: 'eac-r11snorm',\n\tEACRG11Unorm: 'eac-rg11unorm',\n\tEACRG11Snorm: 'eac-rg11snorm',\n\n\t// ASTC compressed formats usable if 'texture-compression-astc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tASTC4x4Unorm: 'astc-4x4-unorm',\n\tASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',\n\tASTC5x4Unorm: 'astc-5x4-unorm',\n\tASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',\n\tASTC5x5Unorm: 'astc-5x5-unorm',\n\tASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',\n\tASTC6x5Unorm: 'astc-6x5-unorm',\n\tASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',\n\tASTC6x6Unorm: 'astc-6x6-unorm',\n\tASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',\n\tASTC8x5Unorm: 'astc-8x5-unorm',\n\tASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',\n\tASTC8x6Unorm: 'astc-8x6-unorm',\n\tASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',\n\tASTC8x8Unorm: 'astc-8x8-unorm',\n\tASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',\n\tASTC10x5Unorm: 'astc-10x5-unorm',\n\tASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',\n\tASTC10x6Unorm: 'astc-10x6-unorm',\n\tASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',\n\tASTC10x8Unorm: 'astc-10x8-unorm',\n\tASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',\n\tASTC10x10Unorm: 'astc-10x10-unorm',\n\tASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',\n\tASTC12x10Unorm: 'astc-12x10-unorm',\n\tASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',\n\tASTC12x12Unorm: 'astc-12x12-unorm',\n\tASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb',\n\n};\n\nconst GPUAddressMode = {\n\tClampToEdge: 'clamp-to-edge',\n\tRepeat: 'repeat',\n\tMirrorRepeat: 'mirror-repeat'\n};\n\nconst GPUFilterMode = {\n\tLinear: 'linear',\n\tNearest: 'nearest'\n};\n\nconst GPUBlendFactor = {\n\tZero: 'zero',\n\tOne: 'one',\n\tSrc: 'src',\n\tOneMinusSrc: 'one-minus-src',\n\tSrcAlpha: 'src-alpha',\n\tOneMinusSrcAlpha: 'one-minus-src-alpha',\n\tDst: 'dst',\n\tOneMinusDstColor: 'one-minus-dst',\n\tDstAlpha: 'dst-alpha',\n\tOneMinusDstAlpha: 'one-minus-dst-alpha',\n\tSrcAlphaSaturated: 'src-alpha-saturated',\n\tConstant: 'constant',\n\tOneMinusConstant: 'one-minus-constant'\n};\n\nconst GPUBlendOperation = {\n\tAdd: 'add',\n\tSubtract: 'subtract',\n\tReverseSubtract: 'reverse-subtract',\n\tMin: 'min',\n\tMax: 'max'\n};\n\nconst GPUColorWriteFlags = {\n\tNone: 0,\n\tAll: 0xF\n};\n\nconst GPUStencilOperation = {\n\tKeep: 'keep',\n\tZero: 'zero',\n\tReplace: 'replace',\n\tInvert: 'invert',\n\tIncrementClamp: 'increment-clamp',\n\tDecrementClamp: 'decrement-clamp',\n\tIncrementWrap: 'increment-wrap',\n\tDecrementWrap: 'decrement-wrap'\n};\n\nconst GPUBufferBindingType = {\n\tStorage: 'storage',\n\tReadOnlyStorage: 'read-only-storage'\n};\n\nconst GPUStorageTextureAccess = {\n\tWriteOnly: 'write-only',\n\tReadOnly: 'read-only',\n\tReadWrite: 'read-write',\n};\n\nconst GPUSamplerBindingType = {\n\tNonFiltering: 'non-filtering',\n\tComparison: 'comparison'\n};\n\nconst GPUTextureSampleType = {\n\tFloat: 'float',\n\tUnfilterableFloat: 'unfilterable-float',\n\tDepth: 'depth',\n\tSInt: 'sint',\n\tUInt: 'uint'\n};\n\nconst GPUTextureDimension = {\n\tTwoD: '2d',\n\tThreeD: '3d'\n};\n\nconst GPUTextureViewDimension = {\n\tTwoD: '2d',\n\tTwoDArray: '2d-array',\n\tCube: 'cube',\n\tThreeD: '3d'\n};\n\nconst GPUTextureAspect = {\n\tAll: 'all'};\n\nconst GPUInputStepMode = {\n\tVertex: 'vertex',\n\tInstance: 'instance'\n};\n\nconst GPUFeatureName = {\n\tDepthClipControl: 'depth-clip-control',\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\tTextureCompressionBC: 'texture-compression-bc',\n\tTextureCompressionETC2: 'texture-compression-etc2',\n\tTextureCompressionASTC: 'texture-compression-astc',\n\tTimestampQuery: 'timestamp-query',\n\tIndirectFirstInstance: 'indirect-first-instance',\n\tShaderF16: 'shader-f16',\n\tRG11B10UFloat: 'rg11b10ufloat-renderable',\n\tBGRA8UNormStorage: 'bgra8unorm-storage',\n\tFloat32Filterable: 'float32-filterable',\n\tClipDistances: 'clip-distances',\n\tDualSourceBlending: 'dual-source-blending',\n\tSubgroups: 'subgroups'\n};\n\n/**\n * Represents a sampler binding type.\n *\n * @private\n * @augments Binding\n */\nclass Sampler extends Binding {\n\n\t/**\n\t * Constructs a new sampler.\n\t *\n\t * @param {string} name - The samplers's name.\n\t * @param {?Texture} texture - The texture this binding is referring to.\n\t */\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\t/**\n\t\t * The texture the sampler is referring to.\n\t\t *\n\t\t * @type {?Texture}\n\t\t */\n\t\tthis.texture = texture;\n\n\t\t/**\n\t\t * The binding's version.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = texture ? texture.version : 0;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSampler = true;\n\n\t}\n\n}\n\n/**\n * A special form of sampler binding type.\n * It's texture value is managed by a node object.\n *\n * @private\n * @augments Sampler\n */\nclass NodeSampler extends Sampler {\n\n\t/**\n\t * Constructs a new node-based sampler.\n\t *\n\t * @param {string} name - The samplers's name.\n\t * @param {TextureNode} textureNode - The texture node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t */\n\tconstructor( name, textureNode, groupNode ) {\n\n\t\tsuper( name, textureNode ? textureNode.value : null );\n\n\t\t/**\n\t\t * The texture node.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * The uniform group node.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t */\n\t\tthis.groupNode = groupNode;\n\n\t}\n\n\t/**\n\t * Updates the texture value of this sampler.\n\t */\n\tupdate() {\n\n\t\tthis.texture = this.textureNode.value;\n\n\t}\n\n}\n\n/**\n * Represents a storage buffer binding type.\n *\n * @private\n * @augments Buffer\n */\nclass StorageBuffer extends Buffer {\n\n\t/**\n\t * Constructs a new uniform buffer.\n\t *\n\t * @param {string} name - The buffer's name.\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tconstructor( name, attribute ) {\n\n\t\tsuper( name, attribute ? attribute.array : null );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {BufferAttribute}\n\t\t */\n\t\tthis.attribute = attribute;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageBuffer = true;\n\n\t}\n\n}\n\nlet _id = 0;\n\n/**\n * A special form of storage buffer binding type.\n * It's buffer value is managed by a node object.\n *\n * @private\n * @augments StorageBuffer\n */\nclass NodeStorageBuffer extends StorageBuffer {\n\n\t/**\n\t * Constructs a new node-based storage buffer.\n\t *\n\t * @param {StorageBufferNode} nodeUniform - The storage buffer node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t */\n\tconstructor( nodeUniform, groupNode ) {\n\n\t\tsuper( 'StorageBuffer_' + _id ++, nodeUniform ? nodeUniform.value : null );\n\n\t\t/**\n\t\t * The node uniform.\n\t\t *\n\t\t * @type {StorageBufferNode}\n\t\t */\n\t\tthis.nodeUniform = nodeUniform;\n\n\t\t/**\n\t\t * The access type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.access = nodeUniform ? nodeUniform.access : NodeAccess.READ_WRITE;\n\n\t\t/**\n\t\t * The uniform group node.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t */\n\t\tthis.groupNode = groupNode;\n\n\t}\n\n\t/**\n\t * The storage buffer.\n\t *\n\t * @type {BufferAttribute}\n\t */\n\tget buffer() {\n\n\t\treturn this.nodeUniform.value;\n\n\t}\n\n}\n\n/**\n * A WebGPU backend utility module used by {@link WebGPUTextureUtils}.\n *\n * @private\n */\nclass WebGPUTexturePassUtils extends DataMap {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {GPUDevice} device - The WebGPU device.\n\t */\n\tconstructor( device ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The WebGPU device.\n\t\t *\n\t\t * @type {GPUDevice}\n\t\t */\n\t\tthis.device = device;\n\n\t\tconst mipmapVertexSource = `\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n`;\n\n\t\tconst mipmapFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n`;\n\n\t\tconst flipYFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n`;\n\n\t\t/**\n\t\t * The mipmap GPU sampler.\n\t\t *\n\t\t * @type {GPUSampler}\n\t\t */\n\t\tthis.mipmapSampler = device.createSampler( { minFilter: GPUFilterMode.Linear } );\n\n\t\t/**\n\t\t * The flipY GPU sampler.\n\t\t *\n\t\t * @type {GPUSampler}\n\t\t */\n\t\tthis.flipYSampler = device.createSampler( { minFilter: GPUFilterMode.Nearest } ); //@TODO?: Consider using textureLoad()\n\n\t\t/**\n\t\t * A cache for GPU render pipelines used for copy/transfer passes.\n\t\t * Every texture format requires a unique pipeline.\n\t\t *\n\t\t * @type {Object<string,GPURenderPipeline>}\n\t\t */\n\t\tthis.transferPipelines = {};\n\n\t\t/**\n\t\t * A cache for GPU render pipelines used for flipY passes.\n\t\t * Every texture format requires a unique pipeline.\n\t\t *\n\t\t * @type {Object<string,GPURenderPipeline>}\n\t\t */\n\t\tthis.flipYPipelines = {};\n\n\t\t/**\n\t\t * The mipmap vertex shader module.\n\t\t *\n\t\t * @type {GPUShaderModule}\n\t\t */\n\t\tthis.mipmapVertexShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapVertex',\n\t\t\tcode: mipmapVertexSource\n\t\t} );\n\n\t\t/**\n\t\t * The mipmap fragment shader module.\n\t\t *\n\t\t * @type {GPUShaderModule}\n\t\t */\n\t\tthis.mipmapFragmentShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapFragment',\n\t\t\tcode: mipmapFragmentSource\n\t\t} );\n\n\t\t/**\n\t\t * The flipY fragment shader module.\n\t\t *\n\t\t * @type {GPUShaderModule}\n\t\t */\n\t\tthis.flipYFragmentShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'flipYFragment',\n\t\t\tcode: flipYFragmentSource\n\t\t} );\n\n\t}\n\n\t/**\n\t * Returns a render pipeline for the internal copy render pass. The pass\n\t * requires a unique render pipeline for each texture format.\n\t *\n\t * @param {string} format - The GPU texture format\n\t * @return {GPURenderPipeline} The GPU render pipeline.\n\t */\n\tgetTransferPipeline( format ) {\n\n\t\tlet pipeline = this.transferPipelines[ format ];\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = this.device.createRenderPipeline( {\n\t\t\t\tlabel: `mipmap-${ format }`,\n\t\t\t\tvertex: {\n\t\t\t\t\tmodule: this.mipmapVertexShaderModule,\n\t\t\t\t\tentryPoint: 'main'\n\t\t\t\t},\n\t\t\t\tfragment: {\n\t\t\t\t\tmodule: this.mipmapFragmentShaderModule,\n\t\t\t\t\tentryPoint: 'main',\n\t\t\t\t\ttargets: [ { format } ]\n\t\t\t\t},\n\t\t\t\tprimitive: {\n\t\t\t\t\ttopology: GPUPrimitiveTopology.TriangleStrip,\n\t\t\t\t\tstripIndexFormat: GPUIndexFormat.Uint32\n\t\t\t\t},\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.transferPipelines[ format ] = pipeline;\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t/**\n\t * Returns a render pipeline for the flipY render pass. The pass\n\t * requires a unique render pipeline for each texture format.\n\t *\n\t * @param {string} format - The GPU texture format\n\t * @return {GPURenderPipeline} The GPU render pipeline.\n\t */\n\tgetFlipYPipeline( format ) {\n\n\t\tlet pipeline = this.flipYPipelines[ format ];\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = this.device.createRenderPipeline( {\n\t\t\t\tlabel: `flipY-${ format }`,\n\t\t\t\tvertex: {\n\t\t\t\t\tmodule: this.mipmapVertexShaderModule,\n\t\t\t\t\tentryPoint: 'main'\n\t\t\t\t},\n\t\t\t\tfragment: {\n\t\t\t\t\tmodule: this.flipYFragmentShaderModule,\n\t\t\t\t\tentryPoint: 'main',\n\t\t\t\t\ttargets: [ { format } ]\n\t\t\t\t},\n\t\t\t\tprimitive: {\n\t\t\t\t\ttopology: GPUPrimitiveTopology.TriangleStrip,\n\t\t\t\t\tstripIndexFormat: GPUIndexFormat.Uint32\n\t\t\t\t},\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.flipYPipelines[ format ] = pipeline;\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t/**\n\t * Flip the contents of the given GPU texture along its vertical axis.\n\t *\n\t * @param {GPUTexture} textureGPU - The GPU texture object.\n\t * @param {Object} textureGPUDescriptor - The texture descriptor.\n\t * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.\n\t */\n\tflipY( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {\n\n\t\tconst format = textureGPUDescriptor.format;\n\t\tconst { width, height } = textureGPUDescriptor.size;\n\n\t\tconst transferPipeline = this.getTransferPipeline( format );\n\t\tconst flipYPipeline = this.getFlipYPipeline( format );\n\n\t\tconst tempTexture = this.device.createTexture( {\n\t\t\tsize: { width, height, depthOrArrayLayers: 1 },\n\t\t\tformat,\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n\t\t} );\n\n\t\tconst srcView = textureGPU.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer\n\t\t} );\n\n\t\tconst dstView = tempTexture.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer: 0\n\t\t} );\n\n\t\tconst commandEncoder = this.device.createCommandEncoder( {} );\n\n\t\tconst pass = ( pipeline, sourceView, destinationView ) => {\n\n\t\t\tconst bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.\n\n\t\t\tconst bindGroup = this.device.createBindGroup( {\n\t\t\t\tlayout: bindGroupLayout,\n\t\t\t\tentries: [ {\n\t\t\t\t\tbinding: 0,\n\t\t\t\t\tresource: this.flipYSampler\n\t\t\t\t}, {\n\t\t\t\t\tbinding: 1,\n\t\t\t\t\tresource: sourceView\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tconst passEncoder = commandEncoder.beginRenderPass( {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: destinationView,\n\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store,\n\t\t\t\t\tclearValue: [ 0, 0, 0, 0 ]\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tpassEncoder.setPipeline( pipeline );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\t\t\tpassEncoder.draw( 4, 1, 0, 0 );\n\t\t\tpassEncoder.end();\n\n\t\t};\n\n\t\tpass( transferPipeline, srcView, dstView );\n\t\tpass( flipYPipeline, dstView, srcView );\n\n\t\tthis.device.queue.submit( [ commandEncoder.finish() ] );\n\n\t\ttempTexture.destroy();\n\n\t}\n\n\t/**\n\t * Generates mipmaps for the given GPU texture.\n\t *\n\t * @param {GPUTexture} textureGPU - The GPU texture object.\n\t * @param {Object} textureGPUDescriptor - The texture descriptor.\n\t * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.\n\t */\n\tgenerateMipmaps( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {\n\n\t\tconst textureData = this.get( textureGPU );\n\n\t\tif ( textureData.useCount === undefined ) {\n\n\t\t\ttextureData.useCount = 0;\n\t\t\ttextureData.layers = [];\n\n\t\t}\n\n\t\tconst passes = textureData.layers[ baseArrayLayer ] || this._mipmapCreateBundles( textureGPU, textureGPUDescriptor, baseArrayLayer );\n\n\t\tconst commandEncoder = this.device.createCommandEncoder( {} );\n\n\t\tthis._mipmapRunBundles( commandEncoder, passes );\n\n\t\tthis.device.queue.submit( [ commandEncoder.finish() ] );\n\n\t\tif ( textureData.useCount !== 0 ) textureData.layers[ baseArrayLayer ] = passes;\n\n\t\ttextureData.useCount ++;\n\n\t}\n\n\t/**\n\t * Since multiple copy render passes are required to generate mipmaps, the passes\n\t * are managed as render bundles to improve performance.\n\t *\n\t * @param {GPUTexture} textureGPU - The GPU texture object.\n\t * @param {Object} textureGPUDescriptor - The texture descriptor.\n\t * @param {number} baseArrayLayer - The index of the first array layer accessible to the texture view.\n\t * @return {Array<Object>} An array of render bundles.\n\t */\n\t_mipmapCreateBundles( textureGPU, textureGPUDescriptor, baseArrayLayer ) {\n\n\t\tconst pipeline = this.getTransferPipeline( textureGPUDescriptor.format );\n\n\t\tconst bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.\n\n\t\tlet srcView = textureGPU.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer\n\t\t} );\n\n\t\tconst passes = [];\n\n\t\tfor ( let i = 1; i < textureGPUDescriptor.mipLevelCount; i ++ ) {\n\n\t\t\tconst bindGroup = this.device.createBindGroup( {\n\t\t\t\tlayout: bindGroupLayout,\n\t\t\t\tentries: [ {\n\t\t\t\t\tbinding: 0,\n\t\t\t\t\tresource: this.mipmapSampler\n\t\t\t\t}, {\n\t\t\t\t\tbinding: 1,\n\t\t\t\t\tresource: srcView\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tconst dstView = textureGPU.createView( {\n\t\t\t\tbaseMipLevel: i,\n\t\t\t\tmipLevelCount: 1,\n\t\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\t\tbaseArrayLayer\n\t\t\t} );\n\n\t\t\tconst passDescriptor = {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: dstView,\n\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store,\n\t\t\t\t\tclearValue: [ 0, 0, 0, 0 ]\n\t\t\t\t} ]\n\t\t\t};\n\n\t\t\tconst passEncoder = this.device.createRenderBundleEncoder( {\n\t\t\t\tcolorFormats: [ textureGPUDescriptor.format ]\n\t\t\t} );\n\n\t\t\tpassEncoder.setPipeline( pipeline );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\t\t\tpassEncoder.draw( 4, 1, 0, 0 );\n\n\t\t\tpasses.push( {\n\t\t\t\trenderBundles: [ passEncoder.finish() ],\n\t\t\t\tpassDescriptor\n\t\t\t} );\n\n\t\t\tsrcView = dstView;\n\n\t\t}\n\n\t\treturn passes;\n\n\t}\n\n\t/**\n\t * Executes the render bundles.\n\t *\n\t * @param {GPUCommandEncoder} commandEncoder - The GPU command encoder.\n\t * @param {Array<Object>} passes - An array of render bundles.\n\t */\n\t_mipmapRunBundles( commandEncoder, passes ) {\n\n\t\tconst levels = passes.length;\n\n\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\tconst pass = passes[ i ];\n\n\t\t\tconst passEncoder = commandEncoder.beginRenderPass( pass.passDescriptor );\n\n\t\t\tpassEncoder.executeBundles( pass.renderBundles );\n\n\t\t\tpassEncoder.end();\n\n\t\t}\n\n\t}\n\n}\n\nconst _compareToWebGPU = {\n\t[ NeverCompare ]: 'never',\n\t[ LessCompare ]: 'less',\n\t[ EqualCompare ]: 'equal',\n\t[ LessEqualCompare ]: 'less-equal',\n\t[ GreaterCompare ]: 'greater',\n\t[ GreaterEqualCompare ]: 'greater-equal',\n\t[ AlwaysCompare ]: 'always',\n\t[ NotEqualCompare ]: 'not-equal'\n};\n\nconst _flipMap = [ 0, 1, 3, 2, 4, 5 ];\n\n/**\n * A WebGPU backend utility module for managing textures.\n *\n * @private\n */\nclass WebGPUTextureUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGPUBackend} backend - The WebGPU backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGPU backend.\n\t\t *\n\t\t * @type {WebGPUBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A reference to the pass utils.\n\t\t *\n\t\t * @type {?WebGPUTexturePassUtils}\n\t\t * @default null\n\t\t */\n\t\tthis._passUtils = null;\n\n\t\t/**\n\t\t * A dictionary for managing default textures. The key\n\t\t * is the texture format, the value the texture object.\n\t\t *\n\t\t * @type {Object<string,Texture>}\n\t\t */\n\t\tthis.defaultTexture = {};\n\n\t\t/**\n\t\t * A dictionary for managing default cube textures. The key\n\t\t * is the texture format, the value the texture object.\n\t\t *\n\t\t * @type {Object<string,CubeTexture>}\n\t\t */\n\t\tthis.defaultCubeTexture = {};\n\n\t\t/**\n\t\t * A default video frame.\n\t\t *\n\t\t * @type {?VideoFrame}\n\t\t * @default null\n\t\t */\n\t\tthis.defaultVideoFrame = null;\n\n\t\t/**\n\t\t * Represents the color attachment of the default framebuffer.\n\t\t *\n\t\t * @type {?GPUTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.colorBuffer = null;\n\n\t\t/**\n\t\t * Represents the depth attachment of the default framebuffer.\n\t\t *\n\t\t * @type {DepthTexture}\n\t\t */\n\t\tthis.depthTexture = new DepthTexture();\n\t\tthis.depthTexture.name = 'depthBuffer';\n\n\t}\n\n\t/**\n\t * Creates a GPU sampler for the given texture.\n\t *\n\t * @param {Texture} texture - The texture to create the sampler for.\n\t */\n\tcreateSampler( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst textureGPU = backend.get( texture );\n\n\t\tconst samplerDescriptorGPU = {\n\t\t\taddressModeU: this._convertAddressMode( texture.wrapS ),\n\t\t\taddressModeV: this._convertAddressMode( texture.wrapT ),\n\t\t\taddressModeW: this._convertAddressMode( texture.wrapR ),\n\t\t\tmagFilter: this._convertFilterMode( texture.magFilter ),\n\t\t\tminFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\tmipmapFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\tmaxAnisotropy: 1\n\t\t};\n\n\t\t// anisotropy can only be used when all filter modes are set to linear.\n\n\t\tif ( samplerDescriptorGPU.magFilter === GPUFilterMode.Linear && samplerDescriptorGPU.minFilter === GPUFilterMode.Linear && samplerDescriptorGPU.mipmapFilter === GPUFilterMode.Linear ) {\n\n\t\t\tsamplerDescriptorGPU.maxAnisotropy = texture.anisotropy;\n\n\t\t}\n\n\t\tif ( texture.isDepthTexture && texture.compareFunction !== null ) {\n\n\t\t\tsamplerDescriptorGPU.compare = _compareToWebGPU[ texture.compareFunction ];\n\n\t\t}\n\n\t\ttextureGPU.sampler = device.createSampler( samplerDescriptorGPU );\n\n\t}\n\n\t/**\n\t * Creates a default texture for the given texture that can be used\n\t * as a placeholder until the actual texture is ready for usage.\n\t *\n\t * @param {Texture} texture - The texture to create a default texture for.\n\t */\n\tcreateDefaultTexture( texture ) {\n\n\t\tlet textureGPU;\n\n\t\tconst format = getFormat( texture );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\ttextureGPU = this._getDefaultCubeTextureGPU( format );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\tthis.backend.get( texture ).externalTexture = this._getDefaultVideoFrame();\n\n\t\t} else {\n\n\t\t\ttextureGPU = this._getDefaultTextureGPU( format );\n\n\t\t}\n\n\t\tthis.backend.get( texture ).texture = textureGPU;\n\n\t}\n\n\t/**\n\t * Defines a texture on the GPU for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tcreateTexture( texture, options = {} ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\tif ( textureData.initialized ) {\n\n\t\t\tthrow new Error( 'WebGPUTextureUtils: Texture already initialized.' );\n\n\t\t}\n\n\t\tif ( options.needsMipmaps === undefined ) options.needsMipmaps = false;\n\t\tif ( options.levels === undefined ) options.levels = 1;\n\t\tif ( options.depth === undefined ) options.depth = 1;\n\n\t\tconst { width, height, depth, levels } = options;\n\n\t\tif ( texture.isFramebufferTexture ) {\n\n\t\t\tif ( options.renderTarget ) {\n\n\t\t\t\toptions.format = this.backend.utils.getCurrentColorFormat( options.renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\toptions.format = this.backend.utils.getPreferredCanvasFormat();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst dimension = this._getDimension( texture );\n\t\tconst format = texture.internalFormat || options.format || getFormat( texture, backend.device );\n\n\t\ttextureData.format = format;\n\n\t\tconst { samples, primarySamples, isMSAA } = backend.utils.getTextureSampleData( texture );\n\n\t\tlet usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;\n\n\t\tif ( texture.isStorageTexture === true ) {\n\n\t\t\tusage |= GPUTextureUsage.STORAGE_BINDING;\n\n\t\t}\n\n\t\tif ( texture.isCompressedTexture !== true && texture.isCompressedArrayTexture !== true ) {\n\n\t\t\tusage |= GPUTextureUsage.RENDER_ATTACHMENT;\n\n\t\t}\n\n\t\tconst textureDescriptorGPU = {\n\t\t\tlabel: texture.name,\n\t\t\tsize: {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepthOrArrayLayers: depth,\n\t\t\t},\n\t\t\tmipLevelCount: levels,\n\t\t\tsampleCount: primarySamples,\n\t\t\tdimension: dimension,\n\t\t\tformat: format,\n\t\t\tusage: usage\n\t\t};\n\n\t\t// texture creation\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\tconst video = texture.source.data;\n\t\t\tconst videoFrame = new VideoFrame( video );\n\n\t\t\ttextureDescriptorGPU.size.width = videoFrame.displayWidth;\n\t\t\ttextureDescriptorGPU.size.height = videoFrame.displayHeight;\n\n\t\t\tvideoFrame.close();\n\n\t\t\ttextureData.externalTexture = video;\n\n\t\t} else {\n\n\t\t\tif ( format === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGPURenderer: Texture format not supported.' );\n\n\t\t\t\tthis.createDefaultTexture( texture );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( texture.isCubeTexture ) {\n\n\t\t\t\ttextureDescriptorGPU.textureBindingViewDimension = GPUTextureViewDimension.Cube;\n\n\t\t\t}\n\n\t\t\ttextureData.texture = backend.device.createTexture( textureDescriptorGPU );\n\n\t\t}\n\n\t\tif ( isMSAA ) {\n\n\t\t\tconst msaaTextureDescriptorGPU = Object.assign( {}, textureDescriptorGPU );\n\n\t\t\tmsaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + '-msaa';\n\t\t\tmsaaTextureDescriptorGPU.sampleCount = samples;\n\n\t\t\ttextureData.msaaTexture = backend.device.createTexture( msaaTextureDescriptorGPU );\n\n\t\t}\n\n\t\ttextureData.initialized = true;\n\n\t\ttextureData.textureDescriptorGPU = textureDescriptorGPU;\n\n\t}\n\n\t/**\n\t * Destroys the GPU data for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tdestroyTexture( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\tif ( textureData.texture !== undefined ) textureData.texture.destroy();\n\n\t\tif ( textureData.msaaTexture !== undefined ) textureData.msaaTexture.destroy();\n\n\t\tbackend.delete( texture );\n\n\t}\n\n\t/**\n\t * Destroys the GPU sampler for the given texture.\n\t *\n\t * @param {Texture} texture - The texture to destroy the sampler for.\n\t */\n\tdestroySampler( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\tdelete textureData.sampler;\n\n\t}\n\n\t/**\n\t * Generates mipmaps for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tgenerateMipmaps( texture ) {\n\n\t\tconst textureData = this.backend.get( texture );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst depth = texture.image.depth || 1;\n\n\t\t\tfor ( let i = 0; i < depth; i ++ ) {\n\n\t\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the color buffer representing the color\n\t * attachment of the default framebuffer.\n\t *\n\t * @return {GPUTexture} The color buffer.\n\t */\n\tgetColorBuffer() {\n\n\t\tif ( this.colorBuffer ) this.colorBuffer.destroy();\n\n\t\tconst backend = this.backend;\n\t\tconst { width, height } = backend.getDrawingBufferSize();\n\n\t\tthis.colorBuffer = backend.device.createTexture( {\n\t\t\tlabel: 'colorBuffer',\n\t\t\tsize: {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t},\n\t\t\tsampleCount: backend.utils.getSampleCount( backend.renderer.samples ),\n\t\t\tformat: backend.utils.getPreferredCanvasFormat(),\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n\t\t} );\n\n\t\treturn this.colorBuffer;\n\n\t}\n\n\t/**\n\t * Returns the depth buffer representing the depth\n\t * attachment of the default framebuffer.\n\t *\n\t * @param {boolean} [depth=true] - Whether depth is enabled or not.\n\t * @param {boolean} [stencil=false] -  Whether stencil is enabled or not.\n\t * @return {GPUTexture} The depth buffer.\n\t */\n\tgetDepthBuffer( depth = true, stencil = false ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { width, height } = backend.getDrawingBufferSize();\n\n\t\tconst depthTexture = this.depthTexture;\n\t\tconst depthTextureGPU = backend.get( depthTexture ).texture;\n\n\t\tlet format, type;\n\n\t\tif ( stencil ) {\n\n\t\t\tformat = DepthStencilFormat;\n\t\t\ttype = UnsignedInt248Type;\n\n\t\t} else if ( depth ) {\n\n\t\t\tformat = DepthFormat;\n\t\t\ttype = UnsignedIntType;\n\n\t\t}\n\n\t\tif ( depthTextureGPU !== undefined ) {\n\n\t\t\tif ( depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format && depthTexture.type === type ) {\n\n\t\t\t\treturn depthTextureGPU;\n\n\t\t\t}\n\n\t\t\tthis.destroyTexture( depthTexture );\n\n\t\t}\n\n\t\tdepthTexture.name = 'depthBuffer';\n\t\tdepthTexture.format = format;\n\t\tdepthTexture.type = type;\n\t\tdepthTexture.image.width = width;\n\t\tdepthTexture.image.height = height;\n\n\t\tthis.createTexture( depthTexture, { width, height } );\n\n\t\treturn backend.get( depthTexture ).texture;\n\n\t}\n\n\t/**\n\t * Uploads the updated texture data to the GPU.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tupdateTexture( texture, options ) {\n\n\t\tconst textureData = this.backend.get( texture );\n\n\t\tconst { textureDescriptorGPU } = textureData;\n\n\t\tif ( texture.isRenderTargetTexture || ( textureDescriptorGPU === undefined /* unsupported texture format */ ) )\n\t\t\treturn;\n\n\t\t// transfer texture data\n\n\t\tif ( texture.isDataTexture ) {\n\n\t\t\tthis._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY );\n\n\t\t} else if ( texture.isDataArrayTexture || texture.isDepthArrayTexture || texture.isData3DTexture ) {\n\n\t\t\tfor ( let i = 0; i < options.image.depth; i ++ ) {\n\n\t\t\t\tthis._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, i, texture.flipY, i );\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\tthis._copyCompressedBufferToTexture( texture.mipmaps, textureData.texture, textureDescriptorGPU );\n\n\t\t} else if ( texture.isCubeTexture ) {\n\n\t\t\tthis._copyCubeMapToTexture( options.images, textureData.texture, textureDescriptorGPU, texture.flipY );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\tconst video = texture.source.data;\n\n\t\t\ttextureData.externalTexture = video;\n\n\t\t} else {\n\n\t\t\tthis._copyImageToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureData.version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t/**\n\t * Returns texture data as a typed array.\n\t *\n\t * @async\n\t * @param {Texture} texture - The texture to copy.\n\t * @param {number} x - The x coordinate of the copy origin.\n\t * @param {number} y - The y coordinate of the copy origin.\n\t * @param {number} width - The width of the copy.\n\t * @param {number} height - The height of the copy.\n\t * @param {number} faceIndex - The face index.\n\t * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.\n\t */\n\tasync copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\tconst device = this.backend.device;\n\n\t\tconst textureData = this.backend.get( texture );\n\t\tconst textureGPU = textureData.texture;\n\t\tconst format = textureData.textureDescriptorGPU.format;\n\t\tconst bytesPerTexel = this._getBytesPerTexel( format );\n\n\t\tlet bytesPerRow = width * bytesPerTexel;\n\t\tbytesPerRow = Math.ceil( bytesPerRow / 256 ) * 256; // Align to 256 bytes\n\n\t\tconst readBuffer = device.createBuffer(\n\t\t\t{\n\t\t\t\tsize: width * height * bytesPerTexel,\n\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t}\n\t\t);\n\n\t\tconst encoder = device.createCommandEncoder();\n\n\t\tencoder.copyTextureToBuffer(\n\t\t\t{\n\t\t\t\ttexture: textureGPU,\n\t\t\t\torigin: { x, y, z: faceIndex },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbuffer: readBuffer,\n\t\t\t\tbytesPerRow: bytesPerRow\n\t\t\t},\n\t\t\t{\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t}\n\n\t\t);\n\n\t\tconst typedArrayType = this._getTypedArrayType( format );\n\n\t\tdevice.queue.submit( [ encoder.finish() ] );\n\n\t\tawait readBuffer.mapAsync( GPUMapMode.READ );\n\n\t\tconst buffer = readBuffer.getMappedRange();\n\n\t\treturn new typedArrayType( buffer );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given texture is an environment map.\n\t *\n\t * @private\n\t * @param {Texture} texture - The texture.\n\t * @return {boolean} Whether the given texture is an environment map or not.\n\t */\n\t_isEnvironmentTexture( texture ) {\n\n\t\tconst mapping = texture.mapping;\n\n\t\treturn ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t}\n\n\t/**\n\t * Returns the default GPU texture for the given format.\n\t *\n\t * @private\n\t * @param {string} format - The GPU format.\n\t * @return {GPUTexture} The GPU texture.\n\t */\n\t_getDefaultTextureGPU( format ) {\n\n\t\tlet defaultTexture = this.defaultTexture[ format ];\n\n\t\tif ( defaultTexture === undefined ) {\n\n\t\t\tconst texture = new Texture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis.createTexture( texture, { width: 1, height: 1, format } );\n\n\t\t\tthis.defaultTexture[ format ] = defaultTexture = texture;\n\n\t\t}\n\n\t\treturn this.backend.get( defaultTexture ).texture;\n\n\t}\n\n\t/**\n\t * Returns the default GPU cube texture for the given format.\n\t *\n\t * @private\n\t * @param {string} format - The GPU format.\n\t * @return {GPUTexture} The GPU texture.\n\t */\n\t_getDefaultCubeTextureGPU( format ) {\n\n\t\tlet defaultCubeTexture = this.defaultTexture[ format ];\n\n\t\tif ( defaultCubeTexture === undefined ) {\n\n\t\t\tconst texture = new CubeTexture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis.createTexture( texture, { width: 1, height: 1, depth: 6 } );\n\n\t\t\tthis.defaultCubeTexture[ format ] = defaultCubeTexture = texture;\n\n\t\t}\n\n\t\treturn this.backend.get( defaultCubeTexture ).texture;\n\n\t}\n\n\t/**\n\t * Returns the default video frame used as default data in context of video textures.\n\t *\n\t * @private\n\t * @return {VideoFrame} The video frame.\n\t */\n\t_getDefaultVideoFrame() {\n\n\t\tlet defaultVideoFrame = this.defaultVideoFrame;\n\n\t\tif ( defaultVideoFrame === null ) {\n\n\t\t\tconst init = {\n\t\t\t\ttimestamp: 0,\n\t\t\t\tcodedWidth: 1,\n\t\t\t\tcodedHeight: 1,\n\t\t\t\tformat: 'RGBA',\n\t\t\t};\n\n\t\t\tthis.defaultVideoFrame = defaultVideoFrame = new VideoFrame( new Uint8Array( [ 0, 0, 0, 0xff ] ), init );\n\n\t\t}\n\n\t\treturn defaultVideoFrame;\n\n\t}\n\n\t/**\n\t * Uploads cube texture image data to the GPU memory.\n\t *\n\t * @private\n\t * @param {Array} images - The cube image data.\n\t * @param {GPUTexture} textureGPU - The GPU texture.\n\t * @param {Object} textureDescriptorGPU - The GPU texture descriptor.\n\t * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.\n\t */\n\t_copyCubeMapToTexture( images, textureGPU, textureDescriptorGPU, flipY ) {\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst image = images[ i ];\n\n\t\t\tconst flipIndex = flipY === true ? _flipMap[ i ] : i;\n\n\t\t\tif ( image.isDataTexture ) {\n\n\t\t\t\tthis._copyBufferToTexture( image.image, textureGPU, textureDescriptorGPU, flipIndex, flipY );\n\n\t\t\t} else {\n\n\t\t\t\tthis._copyImageToTexture( image, textureGPU, textureDescriptorGPU, flipIndex, flipY );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Uploads texture image data to the GPU memory.\n\t *\n\t * @private\n\t * @param {HTMLImageElement|ImageBitmap|HTMLCanvasElement} image - The image data.\n\t * @param {GPUTexture} textureGPU - The GPU texture.\n\t * @param {Object} textureDescriptorGPU - The GPU texture descriptor.\n\t * @param {number} originDepth - The origin depth.\n\t * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.\n\t */\n\t_copyImageToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY ) {\n\n\t\tconst device = this.backend.device;\n\n\t\tdevice.queue.copyExternalImageToTexture(\n\t\t\t{\n\t\t\t\tsource: image,\n\t\t\t\tflipY: flipY\n\t\t\t}, {\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t}, {\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t}\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns the pass utils singleton.\n\t *\n\t * @private\n\t * @return {WebGPUTexturePassUtils} The utils instance.\n\t */\n\t_getPassUtils() {\n\n\t\tlet passUtils = this._passUtils;\n\n\t\tif ( passUtils === null ) {\n\n\t\t\tthis._passUtils = passUtils = new WebGPUTexturePassUtils( this.backend.device );\n\n\t\t}\n\n\t\treturn passUtils;\n\n\t}\n\n\t/**\n\t * Generates mipmaps for the given GPU texture.\n\t *\n\t * @private\n\t * @param {GPUTexture} textureGPU - The GPU texture object.\n\t * @param {Object} textureDescriptorGPU - The texture descriptor.\n\t * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.\n\t */\n\t_generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer = 0 ) {\n\n\t\tthis._getPassUtils().generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer );\n\n\t}\n\n\t/**\n\t * Flip the contents of the given GPU texture along its vertical axis.\n\t *\n\t * @private\n\t * @param {GPUTexture} textureGPU - The GPU texture object.\n\t * @param {Object} textureDescriptorGPU - The texture descriptor.\n\t * @param {number} [originDepth=0] - The origin depth.\n\t */\n\t_flipY( textureGPU, textureDescriptorGPU, originDepth = 0 ) {\n\n\t\tthis._getPassUtils().flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t}\n\n\t/**\n\t * Uploads texture buffer data to the GPU memory.\n\t *\n\t * @private\n\t * @param {Object} image - An object defining the image buffer data.\n\t * @param {GPUTexture} textureGPU - The GPU texture.\n\t * @param {Object} textureDescriptorGPU - The GPU texture descriptor.\n\t * @param {number} originDepth - The origin depth.\n\t * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.\n\t * @param {number} [depth=0] - TODO.\n\t */\n\t_copyBufferToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY, depth = 0 ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\t\t// @TODO: Consider to support valid buffer layouts with other formats like RGB\n\n\t\tconst device = this.backend.device;\n\n\t\tconst data = image.data;\n\n\t\tconst bytesPerTexel = this._getBytesPerTexel( textureDescriptorGPU.format );\n\t\tconst bytesPerRow = image.width * bytesPerTexel;\n\n\t\tdevice.queue.writeTexture(\n\t\t\t{\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t},\n\t\t\tdata,\n\t\t\t{\n\t\t\t\toffset: image.width * image.height * bytesPerTexel * depth,\n\t\t\t\tbytesPerRow\n\t\t\t},\n\t\t\t{\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t} );\n\n\t\tif ( flipY === true ) {\n\n\t\t\tthis._flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Uploads compressed texture data to the GPU memory.\n\t *\n\t * @private\n\t * @param {Array<Object>} mipmaps - An array with mipmap data.\n\t * @param {GPUTexture} textureGPU - The GPU texture.\n\t * @param {Object} textureDescriptorGPU - The GPU texture descriptor.\n\t */\n\t_copyCompressedBufferToTexture( mipmaps, textureGPU, textureDescriptorGPU ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\n\t\tconst device = this.backend.device;\n\n\t\tconst blockData = this._getBlockData( textureDescriptorGPU.format );\n\t\tconst isTextureArray = textureDescriptorGPU.size.depthOrArrayLayers > 1;\n\n\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\n\n\t\t\tconst mipmap = mipmaps[ i ];\n\n\t\t\tconst width = mipmap.width;\n\t\t\tconst height = mipmap.height;\n\t\t\tconst depth = isTextureArray ? textureDescriptorGPU.size.depthOrArrayLayers : 1;\n\n\t\t\tconst bytesPerRow = Math.ceil( width / blockData.width ) * blockData.byteLength;\n\t\t\tconst bytesPerImage = bytesPerRow * Math.ceil( height / blockData.height );\n\n\t\t\tfor ( let j = 0; j < depth; j ++ ) {\n\n\t\t\t\tdevice.queue.writeTexture(\n\t\t\t\t\t{\n\t\t\t\t\t\ttexture: textureGPU,\n\t\t\t\t\t\tmipLevel: i,\n\t\t\t\t\t\torigin: { x: 0, y: 0, z: j }\n\t\t\t\t\t},\n\t\t\t\t\tmipmap.data,\n\t\t\t\t\t{\n\t\t\t\t\t\toffset: j * bytesPerImage,\n\t\t\t\t\t\tbytesPerRow,\n\t\t\t\t\t\trowsPerImage: Math.ceil( height / blockData.height )\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: Math.ceil( width / blockData.width ) * blockData.width,\n\t\t\t\t\t\theight: Math.ceil( height / blockData.height ) * blockData.height,\n\t\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is only relevant for compressed texture formats. It returns a block\n\t * data descriptor for the given GPU compressed texture format.\n\t *\n\t * @private\n\t * @param {string} format - The GPU compressed texture format.\n\t * @return {Object} The block data descriptor.\n\t */\n\t_getBlockData( format ) {\n\n\t\tif ( format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB ) return { byteLength: 8, width: 4, height: 4 }; // DXT1\n\t\tif ( format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT3\n\t\tif ( format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT5\n\t\tif ( format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSnorm ) return { byteLength: 8, width: 4, height: 4 }; // RGTC1\n\t\tif ( format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm ) return { byteLength: 16, width: 4, height: 4 }; // RGTC2\n\t\tif ( format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (float)\n\t\tif ( format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (unorm)\n\n\t\tif ( format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Unorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Snorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Unorm ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Snorm ) return { byteLength: 16, width: 4, height: 4 };\n\n\t\tif ( format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB ) return { byteLength: 16, width: 5, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB ) return { byteLength: 16, width: 5, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB ) return { byteLength: 16, width: 6, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB ) return { byteLength: 16, width: 6, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB ) return { byteLength: 16, width: 8, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB ) return { byteLength: 16, width: 8, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB ) return { byteLength: 16, width: 8, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB ) return { byteLength: 16, width: 10, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB ) return { byteLength: 16, width: 10, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB ) return { byteLength: 16, width: 10, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB ) return { byteLength: 16, width: 10, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB ) return { byteLength: 16, width: 12, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB ) return { byteLength: 16, width: 12, height: 12 };\n\n\t}\n\n\t/**\n\t * Converts the three.js uv wrapping constants to GPU address mode constants.\n\t *\n\t * @private\n\t * @param {number} value - The three.js constant defining a uv wrapping mode.\n\t * @return {string} The GPU address mode.\n\t */\n\t_convertAddressMode( value ) {\n\n\t\tlet addressMode = GPUAddressMode.ClampToEdge;\n\n\t\tif ( value === RepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.Repeat;\n\n\t\t} else if ( value === MirroredRepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.MirrorRepeat;\n\n\t\t}\n\n\t\treturn addressMode;\n\n\t}\n\n\t/**\n\t * Converts the three.js filter constants to GPU filter constants.\n\t *\n\t * @private\n\t * @param {number} value - The three.js constant defining a filter mode.\n\t * @return {string} The GPU filter mode.\n\t */\n\t_convertFilterMode( value ) {\n\n\t\tlet filterMode = GPUFilterMode.Linear;\n\n\t\tif ( value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter ) {\n\n\t\t\tfilterMode = GPUFilterMode.Nearest;\n\n\t\t}\n\n\t\treturn filterMode;\n\n\t}\n\n\t/**\n\t * Returns the bytes-per-texel value for the given GPU texture format.\n\t *\n\t * @private\n\t * @param {string} format - The GPU texture format.\n\t * @return {number} The bytes-per-texel.\n\t */\n\t_getBytesPerTexel( format ) {\n\n\t\t// 8-bit formats\n\t\tif ( format === GPUTextureFormat.R8Unorm ||\n\t\t\tformat === GPUTextureFormat.R8Snorm ||\n\t\t\tformat === GPUTextureFormat.R8Uint ||\n\t\t\tformat === GPUTextureFormat.R8Sint ) return 1;\n\n\t\t// 16-bit formats\n\t\tif ( format === GPUTextureFormat.R16Uint ||\n\t\t\tformat === GPUTextureFormat.R16Sint ||\n\t\t\tformat === GPUTextureFormat.R16Float ||\n\t\t\tformat === GPUTextureFormat.RG8Unorm ||\n\t\t\tformat === GPUTextureFormat.RG8Snorm ||\n\t\t\tformat === GPUTextureFormat.RG8Uint ||\n\t\t\tformat === GPUTextureFormat.RG8Sint ) return 2;\n\n\t\t// 32-bit formats\n\t\tif ( format === GPUTextureFormat.R32Uint ||\n\t\t\tformat === GPUTextureFormat.R32Sint ||\n\t\t\tformat === GPUTextureFormat.R32Float ||\n\t\t\tformat === GPUTextureFormat.RG16Uint ||\n\t\t\tformat === GPUTextureFormat.RG16Sint ||\n\t\t\tformat === GPUTextureFormat.RG16Float ||\n\t\t\tformat === GPUTextureFormat.RGBA8Unorm ||\n\t\t\tformat === GPUTextureFormat.RGBA8UnormSRGB ||\n\t\t\tformat === GPUTextureFormat.RGBA8Snorm ||\n\t\t\tformat === GPUTextureFormat.RGBA8Uint ||\n\t\t\tformat === GPUTextureFormat.RGBA8Sint ||\n\t\t\tformat === GPUTextureFormat.BGRA8Unorm ||\n\t\t\tformat === GPUTextureFormat.BGRA8UnormSRGB ||\n\t\t\t// Packed 32-bit formats\n\t\t\tformat === GPUTextureFormat.RGB9E5UFloat ||\n\t\t\tformat === GPUTextureFormat.RGB10A2Unorm ||\n\t\t\tformat === GPUTextureFormat.RG11B10UFloat ||\n\t\t\tformat === GPUTextureFormat.Depth32Float ||\n\t\t\tformat === GPUTextureFormat.Depth24Plus ||\n\t\t\tformat === GPUTextureFormat.Depth24PlusStencil8 ||\n\t\t\tformat === GPUTextureFormat.Depth32FloatStencil8 ) return 4;\n\n\t\t// 64-bit formats\n\t\tif ( format === GPUTextureFormat.RG32Uint ||\n\t\t\tformat === GPUTextureFormat.RG32Sint ||\n\t\t\tformat === GPUTextureFormat.RG32Float ||\n\t\t\tformat === GPUTextureFormat.RGBA16Uint ||\n\t\t\tformat === GPUTextureFormat.RGBA16Sint ||\n\t\t\tformat === GPUTextureFormat.RGBA16Float ) return 8;\n\n\t\t// 128-bit formats\n\t\tif ( format === GPUTextureFormat.RGBA32Uint ||\n\t\t\tformat === GPUTextureFormat.RGBA32Sint ||\n\t\t\tformat === GPUTextureFormat.RGBA32Float ) return 16;\n\n\n\t}\n\n\t/**\n\t * Returns the corresponding typed array type for the given GPU texture format.\n\t *\n\t * @private\n\t * @param {string} format - The GPU texture format.\n\t * @return {TypedArray.constructor} The typed array type.\n\t */\n\t_getTypedArrayType( format ) {\n\n\t\tif ( format === GPUTextureFormat.R8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.R8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.R8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.R8Snorm ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RG8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RG8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RG8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RG8Snorm ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Snorm ) return Int8Array;\n\n\n\t\tif ( format === GPUTextureFormat.R16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.R16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.RG16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RG16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.R16Float ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RG16Float ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Float ) return Uint16Array;\n\n\n\t\tif ( format === GPUTextureFormat.R32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.R32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.R32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.RG32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RG32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.RG32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Float ) return Float32Array;\n\n\t\tif ( format === GPUTextureFormat.BGRA8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.BGRA8UnormSRGB ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGB10A2Unorm ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RGB9E5UFloat ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RG11B10UFloat ) return Uint32Array;\n\n\t\tif ( format === GPUTextureFormat.Depth32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.Depth24Plus ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.Depth24PlusStencil8 ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.Depth32FloatStencil8 ) return Float32Array;\n\n\t}\n\n\t/**\n\t * Returns the GPU dimensions for the given texture.\n\t *\n\t * @private\n\t * @param {Texture} texture - The texture.\n\t * @return {string} The GPU dimension.\n\t */\n\t_getDimension( texture ) {\n\n\t\tlet dimension;\n\n\t\tif ( texture.isData3DTexture ) {\n\n\t\t\tdimension = GPUTextureDimension.ThreeD;\n\n\t\t} else {\n\n\t\t\tdimension = GPUTextureDimension.TwoD;\n\n\t\t}\n\n\t\treturn dimension;\n\n\t}\n\n}\n\n/**\n * Returns the GPU format for the given texture.\n *\n * @param {Texture} texture - The texture.\n * @param {?GPUDevice} [device=null] - The GPU device which is used for feature detection.\n * It is not necessary to apply the device for most formats.\n * @return {string} The GPU format.\n */\nfunction getFormat( texture, device = null ) {\n\n\tconst format = texture.format;\n\tconst type = texture.type;\n\tconst colorSpace = texture.colorSpace;\n\n\tlet formatGPU;\n\n\tif ( texture.isCompressedTexture === true || texture.isCompressedArrayTexture === true ) {\n\n\t\tswitch ( format ) {\n\n\t\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_S3TC_DXT3_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGB_ETC2_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBAFormat:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t}\n\n\t} else {\n\n\t\tswitch ( format ) {\n\n\t\t\tcase RGBAFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase ByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA8Snorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Uint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBAFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGBFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedInt5999Type:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGB9E5UFloat;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RedFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase ByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R8Snorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RedFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase ByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG8Snorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DepthFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth16Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24Plus;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DepthStencilFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedInt248Type:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24PlusStencil8;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tif ( device && device.features.has( GPUFeatureName.Depth32FloatStencil8 ) === false ) {\n\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the \"depth32float-stencil8\" GPU feature.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32FloatStencil8;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RedIntegerFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RedIntegerFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGIntegerFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGIntegerFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGBAIntegerFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase IntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Sint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Uint;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t}\n\n\t}\n\n\treturn formatGPU;\n\n}\n\nconst declarationRegexp = /^[fn]*\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)\\s*[\\-\\>]*\\s*([a-z_0-9]+(?:<[\\s\\S]+?>)?)/i;\nconst propertiesRegexp = /([a-z_0-9]+)\\s*:\\s*([a-z_0-9]+(?:<[\\s\\S]+?>)?)/ig;\n\nconst wgslTypeLib$1 = {\n\t'f32': 'float',\n\t'i32': 'int',\n\t'u32': 'uint',\n\t'bool': 'bool',\n\n\t'vec2<f32>': 'vec2',\n \t'vec2<i32>': 'ivec2',\n \t'vec2<u32>': 'uvec2',\n \t'vec2<bool>': 'bvec2',\n\n\t'vec2f': 'vec2',\n\t'vec2i': 'ivec2',\n\t'vec2u': 'uvec2',\n\t'vec2b': 'bvec2',\n\n\t'vec3<f32>': 'vec3',\n\t'vec3<i32>': 'ivec3',\n\t'vec3<u32>': 'uvec3',\n\t'vec3<bool>': 'bvec3',\n\n\t'vec3f': 'vec3',\n\t'vec3i': 'ivec3',\n\t'vec3u': 'uvec3',\n\t'vec3b': 'bvec3',\n\n\t'vec4<f32>': 'vec4',\n\t'vec4<i32>': 'ivec4',\n\t'vec4<u32>': 'uvec4',\n\t'vec4<bool>': 'bvec4',\n\n\t'vec4f': 'vec4',\n\t'vec4i': 'ivec4',\n\t'vec4u': 'uvec4',\n\t'vec4b': 'bvec4',\n\n\t'mat2x2<f32>': 'mat2',\n\t'mat2x2f': 'mat2',\n\n\t'mat3x3<f32>': 'mat3',\n\t'mat3x3f': 'mat3',\n\n\t'mat4x4<f32>': 'mat4',\n\t'mat4x4f': 'mat4',\n\n\t'sampler': 'sampler',\n\n\t'texture_1d': 'texture',\n\n\t'texture_2d': 'texture',\n\t'texture_2d_array': 'texture',\n\t'texture_multisampled_2d': 'cubeTexture',\n\n\t'texture_depth_2d': 'depthTexture',\n\t'texture_depth_2d_array': 'depthTexture',\n\t'texture_depth_multisampled_2d': 'depthTexture',\n\t'texture_depth_cube': 'depthTexture',\n\t'texture_depth_cube_array': 'depthTexture',\n\n\t'texture_3d': 'texture3D',\n\n\t'texture_cube': 'cubeTexture',\n\t'texture_cube_array': 'cubeTexture',\n\n\t'texture_storage_1d': 'storageTexture',\n\t'texture_storage_2d': 'storageTexture',\n\t'texture_storage_2d_array': 'storageTexture',\n\t'texture_storage_3d': 'storageTexture'\n\n};\n\nconst parse = ( source ) => {\n\n\tsource = source.trim();\n\n\tconst declaration = source.match( declarationRegexp );\n\n\tif ( declaration !== null && declaration.length === 4 ) {\n\n\t\tconst inputsCode = declaration[ 2 ];\n\t\tconst propsMatches = [];\n\t\tlet match = null;\n\n\t\twhile ( ( match = propertiesRegexp.exec( inputsCode ) ) !== null ) {\n\n\t\t\tpropsMatches.push( { name: match[ 1 ], type: match[ 2 ] } );\n\n\t\t}\n\n\t\t// Process matches to correctly pair names and types\n\t\tconst inputs = [];\n\t\tfor ( let i = 0; i < propsMatches.length; i ++ ) {\n\n\t\t\tconst { name, type } = propsMatches[ i ];\n\n\t\t\tlet resolvedType = type;\n\n\t\t\tif ( resolvedType.startsWith( 'ptr' ) ) {\n\n\t\t\t\tresolvedType = 'pointer';\n\n\t\t\t} else {\n\n\t\t\t\tif ( resolvedType.startsWith( 'texture' ) ) {\n\n\t\t\t\t\tresolvedType = type.split( '<' )[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tresolvedType = wgslTypeLib$1[ resolvedType ];\n\n\t\t\t}\n\n\t\t\tinputs.push( new NodeFunctionInput( resolvedType, name ) );\n\n\t\t}\n\n\t\tconst blockCode = source.substring( declaration[ 0 ].length );\n\t\tconst outputType = declaration[ 3 ] || 'void';\n\n\t\tconst name = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';\n\t\tconst type = wgslTypeLib$1[ outputType ] || outputType;\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tinputs,\n\t\t\tname,\n\t\t\tinputsCode,\n\t\t\tblockCode,\n\t\t\toutputType\n\t\t};\n\n\t} else {\n\n\t\tthrow new Error( 'FunctionNode: Function is not a WGSL code.' );\n\n\t}\n\n};\n\n/**\n * This class represents a WSL node function.\n *\n * @augments NodeFunction\n */\nclass WGSLNodeFunction extends NodeFunction {\n\n\t/**\n\t * Constructs a new WGSL node function.\n\t *\n\t * @param {string} source - The WGSL source.\n\t */\n\tconstructor( source ) {\n\n\t\tconst { type, inputs, name, inputsCode, blockCode, outputType } = parse( source );\n\n\t\tsuper( type, inputs, name );\n\n\t\tthis.inputsCode = inputsCode;\n\t\tthis.blockCode = blockCode;\n\t\tthis.outputType = outputType;\n\n\t}\n\n\t/**\n\t * This method returns the WGSL code of the node function.\n\t *\n\t * @param {string} [name=this.name] - The function's name.\n\t * @return {string} The shader code.\n\t */\n\tgetCode( name = this.name ) {\n\n\t\tconst outputType = this.outputType !== 'void' ? '-> ' + this.outputType : '';\n\n\t\treturn `fn ${ name } ( ${ this.inputsCode.trim() } ) ${ outputType }` + this.blockCode;\n\n\t}\n\n}\n\n/**\n * A WGSL node parser.\n *\n * @augments NodeParser\n */\nclass WGSLNodeParser extends NodeParser {\n\n\t/**\n\t * The method parses the given WGSL code an returns a node function.\n\t *\n\t * @param {string} source - The WGSL code.\n\t * @return {WGSLNodeFunction} A node function.\n\t */\n\tparseFunction( source ) {\n\n\t\treturn new WGSLNodeFunction( source );\n\n\t}\n\n}\n\n// GPUShaderStage is not defined in browsers not supporting WebGPU\nconst GPUShaderStage = ( typeof self !== 'undefined' ) ? self.GPUShaderStage : { VERTEX: 1, FRAGMENT: 2, COMPUTE: 4 };\n\nconst accessNames = {\n\t[ NodeAccess.READ_ONLY ]: 'read',\n\t[ NodeAccess.WRITE_ONLY ]: 'write',\n\t[ NodeAccess.READ_WRITE ]: 'read_write'\n};\n\nconst wrapNames = {\n\t[ RepeatWrapping ]: 'repeat',\n\t[ ClampToEdgeWrapping ]: 'clamp',\n\t[ MirroredRepeatWrapping ]: 'mirror'\n};\n\nconst gpuShaderStageLib = {\n\t'vertex': GPUShaderStage ? GPUShaderStage.VERTEX : 1,\n\t'fragment': GPUShaderStage ? GPUShaderStage.FRAGMENT : 2,\n\t'compute': GPUShaderStage ? GPUShaderStage.COMPUTE : 4\n};\n\nconst supports = {\n\tinstance: true,\n\tswizzleAssign: false,\n\tstorageBuffer: true\n};\n\nconst wgslFnOpLib = {\n\t'^^': 'tsl_xor'\n};\n\nconst wgslTypeLib = {\n\tfloat: 'f32',\n\tint: 'i32',\n\tuint: 'u32',\n\tbool: 'bool',\n\tcolor: 'vec3<f32>',\n\n\tvec2: 'vec2<f32>',\n\tivec2: 'vec2<i32>',\n\tuvec2: 'vec2<u32>',\n\tbvec2: 'vec2<bool>',\n\n\tvec3: 'vec3<f32>',\n\tivec3: 'vec3<i32>',\n\tuvec3: 'vec3<u32>',\n\tbvec3: 'vec3<bool>',\n\n\tvec4: 'vec4<f32>',\n\tivec4: 'vec4<i32>',\n\tuvec4: 'vec4<u32>',\n\tbvec4: 'vec4<bool>',\n\n\tmat2: 'mat2x2<f32>',\n\tmat3: 'mat3x3<f32>',\n\tmat4: 'mat4x4<f32>'\n};\n\nconst wgslCodeCache = {};\n\nconst wgslPolyfill = {\n\ttsl_xor: new CodeNode( 'fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }' ),\n\tmod_float: new CodeNode( 'fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }' ),\n\tmod_vec2: new CodeNode( 'fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }' ),\n\tmod_vec3: new CodeNode( 'fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }' ),\n\tmod_vec4: new CodeNode( 'fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }' ),\n\tequals_bool: new CodeNode( 'fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }' ),\n\tequals_bvec2: new CodeNode( 'fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }' ),\n\tequals_bvec3: new CodeNode( 'fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }' ),\n\tequals_bvec4: new CodeNode( 'fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }' ),\n\trepeatWrapping_float: new CodeNode( 'fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }' ),\n\tmirrorWrapping_float: new CodeNode( 'fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }' ),\n\tclampWrapping_float: new CodeNode( 'fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }' ),\n\tbiquadraticTexture: new CodeNode( /* wgsl */`\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n` )\n};\n\nconst wgslMethods = {\n\tdFdx: 'dpdx',\n\tdFdy: '- dpdy',\n\tmod_float: 'tsl_mod_float',\n\tmod_vec2: 'tsl_mod_vec2',\n\tmod_vec3: 'tsl_mod_vec3',\n\tmod_vec4: 'tsl_mod_vec4',\n\tequals_bool: 'tsl_equals_bool',\n\tequals_bvec2: 'tsl_equals_bvec2',\n\tequals_bvec3: 'tsl_equals_bvec3',\n\tequals_bvec4: 'tsl_equals_bvec4',\n\tinversesqrt: 'inverseSqrt',\n\tbitcast: 'bitcast<f32>'\n};\n\n// WebGPU issue: does not support pow() with negative base on Windows\n\nif ( typeof navigator !== 'undefined' && /Windows/g.test( navigator.userAgent ) ) {\n\n\twgslPolyfill.pow_float = new CodeNode( 'fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }' );\n\twgslPolyfill.pow_vec2 = new CodeNode( 'fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }', [ wgslPolyfill.pow_float ] );\n\twgslPolyfill.pow_vec3 = new CodeNode( 'fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }', [ wgslPolyfill.pow_float ] );\n\twgslPolyfill.pow_vec4 = new CodeNode( 'fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }', [ wgslPolyfill.pow_float ] );\n\n\twgslMethods.pow_float = 'tsl_pow_float';\n\twgslMethods.pow_vec2 = 'tsl_pow_vec2';\n\twgslMethods.pow_vec3 = 'tsl_pow_vec3';\n\twgslMethods.pow_vec4 = 'tsl_pow_vec4';\n\n}\n\n//\n\nlet diagnostics = '';\n\nif ( ( typeof navigator !== 'undefined' && /Firefox|Deno/g.test( navigator.userAgent ) ) !== true ) {\n\n\tdiagnostics += 'diagnostic( off, derivative_uniformity );\\n';\n\n}\n\n/**\n * A node builder targeting WGSL.\n *\n * This module generates WGSL shader code from node materials and also\n * generates the respective bindings and vertex buffer definitions. These\n * data are later used by the renderer to create render and compute pipelines\n * for render objects.\n *\n * @augments NodeBuilder\n */\nclass WGSLNodeBuilder extends NodeBuilder {\n\n\t/**\n\t * Constructs a new WGSL node builder renderer.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Renderer} renderer - The renderer.\n\t */\n\tconstructor( object, renderer ) {\n\n\t\tsuper( object, renderer, new WGSLNodeParser() );\n\n\t\t/**\n\t\t * A dictionary that holds for each shader stage ('vertex', 'fragment', 'compute')\n\t\t * another dictionary which manages UBOs per group ('render','frame','object').\n\t\t *\n\t\t * @type {Object<string,Object<string,NodeUniformsGroup>>}\n\t\t */\n\t\tthis.uniformGroups = {};\n\n\t\t/**\n\t\t * A dictionary that holds for each shader stage a Map of builtins.\n\t\t *\n\t\t * @type {Object<string,Map<string,Object>>}\n\t\t */\n\t\tthis.builtins = {};\n\n\t\t/**\n\t\t * A dictionary that holds for each shader stage a Set of directives.\n\t\t *\n\t\t * @type {Object<string,Set<string>>}\n\t\t */\n\t\tthis.directives = {};\n\n\t\t/**\n\t\t * A map for managing scope arrays. Only relevant for when using\n\t\t * {@link WorkgroupInfoNode} in context of compute shaders.\n\t\t *\n\t\t * @type {Map<string,Object>}\n\t\t */\n\t\tthis.scopedArrays = new Map();\n\n\t}\n\n\t/**\n\t * Checks if the given texture requires a manual conversion to the working color space.\n\t *\n\t * @param {Texture} texture - The texture to check.\n\t * @return {boolean} Whether the given texture requires a conversion to working color space or not.\n\t */\n\tneedsToWorkingColorSpace( texture ) {\n\n\t\treturn texture.isVideoTexture === true && texture.colorSpace !== NoColorSpace;\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet for sampled textures.\n\t *\n\t * @private\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\t_generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\tif ( depthSnippet ) {\n\n\t\t\t\treturn `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ depthSnippet } )`;\n\n\t\t\t} else {\n\n\t\t\t\treturn `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet } )`;\n\n\t\t\t}\n\n\t\t} else if ( this.isFilteredTexture( texture ) ) {\n\n\t\t\treturn this.generateFilteredTexture( texture, textureProperty, uvSnippet );\n\n\t\t} else {\n\n\t\t\treturn this.generateTextureLod( texture, textureProperty, uvSnippet, depthSnippet, '0' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet when sampling video textures.\n\t *\n\t * @private\n\t * @param {string} textureProperty - The name of the video texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\t_generateVideoSample( textureProperty, uvSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleBaseClampToEdge( ${ textureProperty }, ${ textureProperty }_sampler, vec2<f32>( ${ uvSnippet }.x, 1.0 - ${ uvSnippet }.y ) )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.VideoTexture does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet when sampling textures with explicit mip level.\n\t *\n\t * @private\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\t_generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( ( shaderStage === 'fragment' || shaderStage === 'compute' ) && this.isUnfilterable( texture ) === false ) {\n\n\t\t\treturn `textureSampleLevel( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ levelSnippet } )`;\n\n\t\t} else if ( this.isFilteredTexture( texture ) ) {\n\n\t\t\treturn this.generateFilteredTexture( texture, textureProperty, uvSnippet, levelSnippet );\n\n\t\t} else {\n\n\t\t\treturn this.generateTextureLod( texture, textureProperty, uvSnippet, depthSnippet, levelSnippet );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates a wrap function used in context of textures.\n\t *\n\t * @param {Texture} texture - The texture to generate the function for.\n\t * @return {string} The name of the generated function.\n\t */\n\tgenerateWrapFunction( texture ) {\n\n\t\tconst functionName = `tsl_coord_${ wrapNames[ texture.wrapS ] }S_${ wrapNames[ texture.wrapT ] }_${ texture.isData3DTexture ? '3d' : '2d' }T`;\n\n\t\tlet nodeCode = wgslCodeCache[ functionName ];\n\n\t\tif ( nodeCode === undefined ) {\n\n\t\t\tconst includes = [];\n\n\t\t\t// For 3D textures, use vec3f; for texture arrays, keep vec2f since array index is separate\n\t\t\tconst coordType = texture.isData3DTexture ? 'vec3f' : 'vec2f';\n\t\t\tlet code = `fn ${ functionName }( coord : ${ coordType } ) -> ${ coordType } {\\n\\n\\treturn ${ coordType }(\\n`;\n\n\t\t\tconst addWrapSnippet = ( wrap, axis ) => {\n\n\t\t\t\tif ( wrap === RepeatWrapping ) {\n\n\t\t\t\t\tincludes.push( wgslPolyfill.repeatWrapping_float );\n\n\t\t\t\t\tcode += `\\t\\ttsl_repeatWrapping_float( coord.${ axis } )`;\n\n\t\t\t\t} else if ( wrap === ClampToEdgeWrapping ) {\n\n\t\t\t\t\tincludes.push( wgslPolyfill.clampWrapping_float );\n\n\t\t\t\t\tcode += `\\t\\ttsl_clampWrapping_float( coord.${ axis } )`;\n\n\t\t\t\t} else if ( wrap === MirroredRepeatWrapping ) {\n\n\t\t\t\t\tincludes.push( wgslPolyfill.mirrorWrapping_float );\n\n\t\t\t\t\tcode += `\\t\\ttsl_mirrorWrapping_float( coord.${ axis } )`;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcode += `\\t\\tcoord.${ axis }`;\n\n\t\t\t\t\tconsole.warn( `WebGPURenderer: Unsupported texture wrap type \"${ wrap }\" for vertex shader.` );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\taddWrapSnippet( texture.wrapS, 'x' );\n\n\t\t\tcode += ',\\n';\n\n\t\t\taddWrapSnippet( texture.wrapT, 'y' );\n\n\t\t\tif ( texture.isData3DTexture ) {\n\n\t\t\t\tcode += ',\\n';\n\t\t\t\taddWrapSnippet( texture.wrapR, 'z' );\n\n\t\t\t}\n\n\t\t\tcode += '\\n\\t);\\n\\n}\\n';\n\n\t\t\twgslCodeCache[ functionName ] = nodeCode = new CodeNode( code, includes );\n\n\t\t}\n\n\t\tnodeCode.build( this );\n\n\t\treturn functionName;\n\n\t}\n\n\t/**\n\t * Generates the array declaration string.\n\t *\n\t * @param {string} type - The type.\n\t * @param {?number} [count] - The count.\n\t * @return {string} The generated value as a shader string.\n\t */\n\tgenerateArrayDeclaration( type, count ) {\n\n\t\treturn `array< ${ this.getType( type ) }, ${ count } >`;\n\n\t}\n\n\t/**\n\t * Generates a WGSL variable that holds the texture dimension of the given texture.\n\t * It also returns information about the number of layers (elements) of an arrayed\n\t * texture as well as the cube face count of cube textures.\n\t *\n\t * @param {Texture} texture - The texture to generate the function for.\n\t * @param {string} textureProperty - The name of the video texture uniform in the shader.\n\t * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @return {string} The name of the dimension variable.\n\t */\n\tgenerateTextureDimension( texture, textureProperty, levelSnippet ) {\n\n\t\tconst textureData = this.getDataFromNode( texture, this.shaderStage, this.globalCache );\n\n\t\tif ( textureData.dimensionsSnippet === undefined ) textureData.dimensionsSnippet = {};\n\n\t\tlet textureDimensionNode = textureData.dimensionsSnippet[ levelSnippet ];\n\n\t\tif ( textureData.dimensionsSnippet[ levelSnippet ] === undefined ) {\n\n\t\t\tlet textureDimensionsParams;\n\t\t\tlet dimensionType;\n\n\t\t\tconst { primarySamples } = this.renderer.backend.utils.getTextureSampleData( texture );\n\t\t\tconst isMultisampled = primarySamples > 1;\n\n\t\t\tif ( texture.isData3DTexture ) {\n\n\t\t\t\tdimensionType = 'vec3<u32>';\n\n\t\t\t} else {\n\n\t\t\t\t// Regular 2D textures, depth textures, etc.\n\t\t\t\tdimensionType = 'vec2<u32>';\n\n\t\t\t}\n\n\t\t\t// Build parameters string based on texture type and multisampling\n\t\t\tif ( isMultisampled || texture.isVideoTexture || texture.isStorageTexture ) {\n\n\t\t\t\ttextureDimensionsParams = textureProperty;\n\n\t\t\t} else {\n\n\t\t\t\ttextureDimensionsParams = `${textureProperty}${levelSnippet ? `, u32( ${ levelSnippet } )` : ''}`;\n\n\t\t\t}\n\n\t\t\ttextureDimensionNode = new VarNode( new ExpressionNode( `textureDimensions( ${ textureDimensionsParams } )`, dimensionType ) );\n\n\t\t\ttextureData.dimensionsSnippet[ levelSnippet ] = textureDimensionNode;\n\n\t\t\tif ( texture.isDataArrayTexture || texture.isDepthArrayTexture || texture.isData3DTexture ) {\n\n\t\t\t\ttextureData.arrayLayerCount = new VarNode(\n\t\t\t\t\tnew ExpressionNode(\n\t\t\t\t\t\t`textureNumLayers(${textureProperty})`,\n\t\t\t\t\t\t'u32'\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// For cube textures, we know it's always 6 faces\n\t\t\tif ( texture.isTextureCube ) {\n\n\t\t\t\ttextureData.cubeFaceCount = new VarNode(\n\t\t\t\t\tnew ExpressionNode( '6u', 'u32' )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textureDimensionNode.build( this );\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet for a manual filtered texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateFilteredTexture( texture, textureProperty, uvSnippet, levelSnippet = '0u' ) {\n\n\t\tthis._include( 'biquadraticTexture' );\n\n\t\tconst wrapFunction = this.generateWrapFunction( texture );\n\t\tconst textureDimension = this.generateTextureDimension( texture, textureProperty, levelSnippet );\n\n\t\treturn `tsl_biquadraticTexture( ${ textureProperty }, ${ wrapFunction }( ${ uvSnippet } ), ${ textureDimension }, u32( ${ levelSnippet } ) )`;\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet for a texture lookup with explicit level-of-detail.\n\t * Since it's a lookup, no sampling or filtering is applied.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [levelSnippet='0u'] - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTextureLod( texture, textureProperty, uvSnippet, depthSnippet, levelSnippet = '0u' ) {\n\n\t\tconst wrapFunction = this.generateWrapFunction( texture );\n\t\tconst textureDimension = this.generateTextureDimension( texture, textureProperty, levelSnippet );\n\n\t\tconst vecType = texture.isData3DTexture ? 'vec3' : 'vec2';\n\t\tconst coordSnippet = `${ vecType }<u32>( ${ wrapFunction }( ${ uvSnippet } ) * ${ vecType }<f32>( ${ textureDimension } ) )`;\n\n\t\treturn this.generateTextureLoad( texture, textureProperty, coordSnippet, depthSnippet, levelSnippet );\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet that reads a single texel from a texture without sampling or filtering.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvIndexSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [levelSnippet='0u'] - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0u' ) {\n\n\t\tlet snippet;\n\n\t\tif ( texture.isVideoTexture === true || texture.isStorageTexture === true ) {\n\n\t\t\tsnippet = `textureLoad( ${ textureProperty }, ${ uvIndexSnippet } )`;\n\n\t\t} else if ( depthSnippet ) {\n\n\t\t\tsnippet = `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, ${ depthSnippet }, u32( ${ levelSnippet } ) )`;\n\n\t\t} else {\n\n\t\t\tsnippet = `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, u32( ${ levelSnippet } ) )`;\n\n\t\t\tif ( this.renderer.backend.compatibilityMode && texture.isDepthTexture ) {\n\n\t\t\t\tsnippet += '.x';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet that writes a single texel to a texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvIndexSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} valueSnippet - A WGSL snippet that represent the new texel value.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTextureStore( texture, textureProperty, uvIndexSnippet, valueSnippet ) {\n\n\t\treturn `textureStore( ${ textureProperty }, ${ uvIndexSnippet }, ${ valueSnippet } )`;\n\n\t}\n\n\t/**\n\t * Returns `true` if the sampled values of the given texture should be compared against a reference value.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {boolean} Whether the sampled values of the given texture should be compared against a reference value or not.\n\t */\n\tisSampleCompare( texture ) {\n\n\t\treturn texture.isDepthTexture === true && texture.compareFunction !== null;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given texture is unfilterable.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {boolean} Whether the given texture is unfilterable or not.\n\t */\n\tisUnfilterable( texture ) {\n\n\t\treturn this.getComponentTypeFromTexture( texture ) !== 'float' ||\n\t\t\t( ! this.isAvailable( 'float32Filterable' ) && texture.isDataTexture === true && texture.type === FloatType ) ||\n\t\t\t( this.isSampleCompare( texture ) === false && texture.minFilter === NearestFilter && texture.magFilter === NearestFilter ) ||\n\t\t\tthis.renderer.backend.utils.getTextureSampleData( texture ).primarySamples > 1;\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet for sampling/loading the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTexture( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else if ( this.isUnfilterable( texture ) ) {\n\n\t\t\tsnippet = this.generateTextureLod( texture, textureProperty, uvSnippet, depthSnippet, '0', shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this._generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet for sampling/loading the given texture using explicit gradients.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {Array<string>} gradSnippet - An array holding both gradient WGSL snippets.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\t// TODO handle i32 or u32 --> uvSnippet, array_index: A, ddx, ddy\n\t\t\treturn `textureSampleGrad( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet },  ${ gradSnippet[ 0 ] }, ${ gradSnippet[ 1 ] } )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.TextureNode.gradient() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet for sampling a depth texture and comparing the sampled depth values\n\t * against a reference value.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} compareSnippet -  A WGSL snippet that represents the reference value.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\tif ( texture.isDepthArrayTexture ) {\n\n\t\t\t\treturn `textureSampleCompare( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ depthSnippet }, ${ compareSnippet } )`;\n\n\t\t\t}\n\n\t\t\treturn `textureSampleCompare( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ compareSnippet } )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet when sampling textures with explicit mip level.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this._generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Generates the WGSL snippet when sampling textures with a bias to the mip level.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {string} textureProperty - The name of the texture uniform in the shader.\n\t * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.\n\t * @param {string} biasSnippet - A WGSL snippet that represents the bias to apply to the mip level before sampling.\n\t * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The WGSL snippet.\n\t */\n\tgenerateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleBias( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ biasSnippet } )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.TextureNode.biasNode does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a WGSL snippet that represents the property name of the given node.\n\t *\n\t * @param {Node} node - The node.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The property name.\n\t */\n\tgetPropertyName( node, shaderStage = this.shaderStage ) {\n\n\t\tif ( node.isNodeVarying === true && node.needsInterpolation === true ) {\n\n\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\treturn `varyings.${ node.name }`;\n\n\t\t\t}\n\n\t\t} else if ( node.isNodeUniform === true ) {\n\n\t\t\tconst name = node.name;\n\t\t\tconst type = node.type;\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) {\n\n\t\t\t\treturn name;\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' || type === 'indirectStorageBuffer' ) {\n\n\t\t\t\tif ( this.isCustomStruct( node ) ) {\n\n\t\t\t\t\treturn name;\n\n\t\t\t\t}\n\n\t\t\t\treturn name + '.value';\n\n\t\t\t} else {\n\n\t\t\t\treturn node.groupNode.name + '.' + name;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.getPropertyName( node );\n\n\t}\n\n\t/**\n\t * Returns the output struct name.\n\t *\n\t * @return {string} The name of the output struct.\n\t */\n\tgetOutputStructName() {\n\n\t\treturn 'output';\n\n\t}\n\n\t/**\n\t * Returns the native shader operator name for a given generic name.\n\t *\n\t * @param {string} op - The operator name to resolve.\n\t * @return {?string} The resolved operator name.\n\t */\n\tgetFunctionOperator( op ) {\n\n\t\tconst fnOp = wgslFnOpLib[ op ];\n\n\t\tif ( fnOp !== undefined ) {\n\n\t\t\tthis._include( fnOp );\n\n\t\t\treturn fnOp;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Returns the node access for the given node and shader stage.\n\t *\n\t * @param {StorageTextureNode|StorageBufferNode} node - The storage node.\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The node access.\n\t */\n\tgetNodeAccess( node, shaderStage ) {\n\n\t\tif ( shaderStage !== 'compute' )\n\t\t\treturn NodeAccess.READ_ONLY;\n\n\t\treturn node.access;\n\n\t}\n\n\t/**\n\t * Returns A WGSL snippet representing the storage access.\n\t *\n\t * @param {StorageTextureNode|StorageBufferNode} node - The storage node.\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The WGSL snippet representing the storage access.\n\t */\n\tgetStorageAccess( node, shaderStage ) {\n\n\t\treturn accessNames[ this.getNodeAccess( node, shaderStage ) ];\n\n\t}\n\n\t/**\n\t * This method is one of the more important ones since it's responsible\n\t * for generating a matching binding instance for the given uniform node.\n\t *\n\t * These bindings are later used in the renderer to create bind groups\n\t * and layouts.\n\t *\n\t * @param {UniformNode} node - The uniform node.\n\t * @param {string} type - The node data type.\n\t * @param {string} shaderStage - The shader stage.\n\t * @param {?string} [name=null] - An optional uniform name.\n\t * @return {NodeUniform} The node uniform object.\n\t */\n\tgetUniformFromNode( node, type, shaderStage, name = null ) {\n\n\t\tconst uniformNode = super.getUniformFromNode( node, type, shaderStage, name );\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tif ( nodeData.uniformGPU === undefined ) {\n\n\t\t\tlet uniformGPU;\n\n\t\t\tconst group = node.groupNode;\n\t\t\tconst groupName = group.name;\n\n\t\t\tconst bindings = this.getBindGroupArray( groupName, shaderStage );\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' || type === 'storageTexture' || type === 'texture3D' ) {\n\n\t\t\t\tlet texture = null;\n\n\t\t\t\tconst access = this.getNodeAccess( node, shaderStage );\n\n\t\t\t\tif ( type === 'texture' || type === 'storageTexture' ) {\n\n\t\t\t\t\ttexture = new NodeSampledTexture( uniformNode.name, uniformNode.node, group, access );\n\n\t\t\t\t} else if ( type === 'cubeTexture' ) {\n\n\t\t\t\t\ttexture = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node, group, access );\n\n\t\t\t\t} else if ( type === 'texture3D' ) {\n\n\t\t\t\t\ttexture = new NodeSampledTexture3D( uniformNode.name, uniformNode.node, group, access );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.store = node.isStorageTextureNode === true;\n\t\t\t\ttexture.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\tif ( ( shaderStage === 'fragment' || shaderStage === 'compute' ) && this.isUnfilterable( node.value ) === false && texture.store === false ) {\n\n\t\t\t\t\tconst sampler = new NodeSampler( `${ uniformNode.name }_sampler`, uniformNode.node, group );\n\t\t\t\t\tsampler.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tbindings.push( sampler, texture );\n\n\t\t\t\t\tuniformGPU = [ sampler, texture ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbindings.push( texture );\n\n\t\t\t\t\tuniformGPU = [ texture ];\n\n\t\t\t\t}\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' || type === 'indirectStorageBuffer' ) {\n\n\t\t\t\tconst bufferClass = type === 'buffer' ? NodeUniformBuffer : NodeStorageBuffer;\n\n\t\t\t\tconst buffer = new bufferClass( node, group );\n\t\t\t\tbuffer.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\tbindings.push( buffer );\n\n\t\t\t\tuniformGPU = buffer;\n\n\t\t\t\tuniformNode.name = name ? name : 'NodeBuffer_' + uniformNode.id;\n\n\t\t\t} else {\n\n\t\t\t\tconst uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );\n\n\t\t\t\tlet uniformsGroup = uniformsStage[ groupName ];\n\n\t\t\t\tif ( uniformsGroup === undefined ) {\n\n\t\t\t\t\tuniformsGroup = new NodeUniformsGroup( groupName, group );\n\t\t\t\t\tuniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tuniformsStage[ groupName ] = uniformsGroup;\n\n\t\t\t\t\tbindings.push( uniformsGroup );\n\n\t\t\t\t}\n\n\t\t\t\tuniformGPU = this.getNodeUniform( uniformNode, type );\n\n\t\t\t\tuniformsGroup.addUniform( uniformGPU );\n\n\t\t\t}\n\n\t\t\tnodeData.uniformGPU = uniformGPU;\n\n\t\t}\n\n\t\treturn uniformNode;\n\n\t}\n\n\t/**\n\t * This method should be used whenever builtins are required in nodes.\n\t * The internal builtins data structure will make sure builtins are\n\t * defined in the WGSL source.\n\t *\n\t * @param {string} name - The builtin name.\n\t * @param {string} property - The property name.\n\t * @param {string} type - The node data type.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {string} The property name.\n\t */\n\tgetBuiltin( name, property, type, shaderStage = this.shaderStage ) {\n\n\t\tconst map = this.builtins[ shaderStage ] || ( this.builtins[ shaderStage ] = new Map() );\n\n\t\tif ( map.has( name ) === false ) {\n\n\t\t\tmap.set( name, {\n\t\t\t\tname,\n\t\t\t\tproperty,\n\t\t\t\ttype\n\t\t\t} );\n\n\t\t}\n\n\t\treturn property;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given builtin is defined in the given shader stage.\n\t *\n\t * @param {string} name - The builtin name.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.\n\t * @return {boolean} Whether the given builtin is defined in the given shader stage or not.\n\t */\n\thasBuiltin( name, shaderStage = this.shaderStage ) {\n\n\t\treturn ( this.builtins[ shaderStage ] !== undefined && this.builtins[ shaderStage ].has( name ) );\n\n\t}\n\n\t/**\n\t * Returns the vertex index builtin.\n\t *\n\t * @return {string} The vertex index.\n\t */\n\tgetVertexIndex() {\n\n\t\tif ( this.shaderStage === 'vertex' ) {\n\n\t\t\treturn this.getBuiltin( 'vertex_index', 'vertexIndex', 'u32', 'attribute' );\n\n\t\t}\n\n\t\treturn 'vertexIndex';\n\n\t}\n\n\t/**\n\t * Builds the given shader node.\n\t *\n\t * @param {ShaderNodeInternal} shaderNode - The shader node.\n\t * @return {string} The WGSL function code.\n\t */\n\tbuildFunctionCode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\t\tconst flowData = this.flowShaderNode( shaderNode );\n\n\t\tconst parameters = [];\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tparameters.push( input.name + ' : ' + this.getType( input.type ) );\n\n\t\t}\n\n\t\t//\n\n\t\tlet code = `fn ${ layout.name }( ${ parameters.join( ', ' ) } ) -> ${ this.getType( layout.type ) } {\n${ flowData.vars }\n${ flowData.code }\n`;\n\n\t\tif ( flowData.result ) {\n\n\t\t\tcode += `\\treturn ${ flowData.result };\\n`;\n\n\t\t}\n\n\t\tcode += '\\n}\\n';\n\n\t\t//\n\n\t\treturn code;\n\n\t}\n\n\t/**\n\t * Returns the instance index builtin.\n\t *\n\t * @return {string} The instance index.\n\t */\n\tgetInstanceIndex() {\n\n\t\tif ( this.shaderStage === 'vertex' ) {\n\n\t\t\treturn this.getBuiltin( 'instance_index', 'instanceIndex', 'u32', 'attribute' );\n\n\t\t}\n\n\t\treturn 'instanceIndex';\n\n\t}\n\n\t/**\n\t * Returns the invocation local index builtin.\n\t *\n\t * @return {string} The invocation local index.\n\t */\n\tgetInvocationLocalIndex() {\n\n\t\treturn this.getBuiltin( 'local_invocation_index', 'invocationLocalIndex', 'u32', 'attribute' );\n\n\t}\n\n\t/**\n\t * Returns the subgroup size builtin.\n\t *\n\t * @return {string} The subgroup size.\n\t */\n\tgetSubgroupSize() {\n\n\t\tthis.enableSubGroups();\n\n\t\treturn this.getBuiltin( 'subgroup_size', 'subgroupSize', 'u32', 'attribute' );\n\n\t}\n\n\t/**\n\t * Returns the invocation subgroup index builtin.\n\t *\n\t * @return {string} The invocation subgroup index.\n\t */\n\tgetInvocationSubgroupIndex() {\n\n\t\tthis.enableSubGroups();\n\n\t\treturn this.getBuiltin( 'subgroup_invocation_id', 'invocationSubgroupIndex', 'u32', 'attribute' );\n\n\t}\n\n\t/**\n\t * Returns the subgroup index builtin.\n\t *\n\t * @return {string} The subgroup index.\n\t */\n\tgetSubgroupIndex() {\n\n\t\tthis.enableSubGroups();\n\n\t\treturn this.getBuiltin( 'subgroup_id', 'subgroupIndex', 'u32', 'attribute' );\n\n\t}\n\n\t/**\n\t * Overwritten as a NOP since this method is intended for the WebGL 2 backend.\n\t *\n\t * @return {null} Null.\n\t */\n\tgetDrawIndex() {\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Returns the front facing builtin.\n\t *\n\t * @return {string} The front facing builtin.\n\t */\n\tgetFrontFacing() {\n\n\t\treturn this.getBuiltin( 'front_facing', 'isFront', 'bool' );\n\n\t}\n\n\t/**\n\t * Returns the frag coord builtin.\n\t *\n\t * @return {string} The frag coord builtin.\n\t */\n\tgetFragCoord() {\n\n\t\treturn this.getBuiltin( 'position', 'fragCoord', 'vec4<f32>' ) + '.xy';\n\n\t}\n\n\t/**\n\t * Returns the frag depth builtin.\n\t *\n\t * @return {string} The frag depth builtin.\n\t */\n\tgetFragDepth() {\n\n\t\treturn 'output.' + this.getBuiltin( 'frag_depth', 'depth', 'f32', 'output' );\n\n\t}\n\n\t/**\n\t * Returns the clip distances builtin.\n\t *\n\t * @return {string} The clip distances builtin.\n\t */\n\tgetClipDistance() {\n\n\t\treturn 'varyings.hw_clip_distances';\n\n\t}\n\n\t/**\n\t * Whether to flip texture data along its vertical axis or not.\n\t *\n\t * @return {boolean} Returns always `false` in context of WGSL.\n\t */\n\tisFlipY() {\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Enables the given directive for the given shader stage.\n\t *\n\t * @param {string} name - The directive name.\n\t * @param {string} [shaderStage=this.shaderStage] - The shader stage to enable the directive for.\n\t */\n\tenableDirective( name, shaderStage = this.shaderStage ) {\n\n\t\tconst stage = this.directives[ shaderStage ] || ( this.directives[ shaderStage ] = new Set() );\n\t\tstage.add( name );\n\n\t}\n\n\t/**\n\t * Returns the directives of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} A WGSL snippet that enables the directives of the given stage.\n\t */\n\tgetDirectives( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst directives = this.directives[ shaderStage ];\n\n\t\tif ( directives !== undefined ) {\n\n\t\t\tfor ( const directive of directives ) {\n\n\t\t\t\tsnippets.push( `enable ${directive};` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\t/**\n\t * Enables the 'subgroups' directive.\n\t */\n\tenableSubGroups() {\n\n\t\tthis.enableDirective( 'subgroups' );\n\n\t}\n\n\t/**\n\t * Enables the 'subgroups-f16' directive.\n\t */\n\tenableSubgroupsF16() {\n\n\t\tthis.enableDirective( 'subgroups-f16' );\n\n\t}\n\n\t/**\n\t * Enables the 'clip_distances' directive.\n\t */\n\tenableClipDistances() {\n\n\t\tthis.enableDirective( 'clip_distances' );\n\n\t}\n\n\t/**\n\t * Enables the 'f16' directive.\n\t */\n\tenableShaderF16() {\n\n\t\tthis.enableDirective( 'f16' );\n\n\t}\n\n\t/**\n\t * Enables the 'dual_source_blending' directive.\n\t */\n\tenableDualSourceBlending() {\n\n\t\tthis.enableDirective( 'dual_source_blending' );\n\n\t}\n\n\t/**\n\t * Enables hardware clipping.\n\t *\n\t * @param {string} planeCount - The clipping plane count.\n\t */\n\tenableHardwareClipping( planeCount ) {\n\n\t\tthis.enableClipDistances();\n\t\tthis.getBuiltin( 'clip_distances', 'hw_clip_distances', `array<f32, ${ planeCount } >`, 'vertex' );\n\n\t}\n\n\t/**\n\t * Returns the builtins of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} A WGSL snippet that represents the builtins of the given stage.\n\t */\n\tgetBuiltins( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst builtins = this.builtins[ shaderStage ];\n\n\t\tif ( builtins !== undefined ) {\n\n\t\t\tfor ( const { name, property, type } of builtins.values() ) {\n\n\t\t\t\tsnippets.push( `@builtin( ${name} ) ${property} : ${type}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n\\t' );\n\n\t}\n\n\t/**\n\t * This method should be used when a new scoped buffer is used in context of\n\t * compute shaders. It adds the array to the internal data structure which is\n\t * later used to generate the respective WGSL.\n\t *\n\t * @param {string} name - The array name.\n\t * @param {string} scope - The scope.\n\t * @param {string} bufferType - The buffer type.\n\t * @param {string} bufferCount - The buffer count.\n\t * @return {string} The array name.\n\t */\n\tgetScopedArray( name, scope, bufferType, bufferCount ) {\n\n\t\tif ( this.scopedArrays.has( name ) === false ) {\n\n\t\t\tthis.scopedArrays.set( name, {\n\t\t\t\tname,\n\t\t\t\tscope,\n\t\t\t\tbufferType,\n\t\t\t\tbufferCount\n\t\t\t} );\n\n\t\t}\n\n\t\treturn name;\n\n\t}\n\n\t/**\n\t * Returns the scoped arrays of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string|undefined} The WGSL snippet that defines the scoped arrays.\n\t * Returns `undefined` when used in the vertex or fragment stage.\n\t */\n\tgetScopedArrays( shaderStage ) {\n\n\t\tif ( shaderStage !== 'compute' ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst snippets = [];\n\n\t\tfor ( const { name, scope, bufferType, bufferCount } of this.scopedArrays.values() ) {\n\n\t\t\tconst type = this.getType( bufferType );\n\n\t\t\tsnippets.push( `var<${scope}> ${name}: array< ${type}, ${bufferCount} >;` );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\t/**\n\t * Returns the shader attributes of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The WGSL snippet that defines the shader attributes.\n\t */\n\tgetAttributes( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tthis.getBuiltin( 'global_invocation_id', 'globalId', 'vec3<u32>', 'attribute' );\n\t\t\tthis.getBuiltin( 'workgroup_id', 'workgroupId', 'vec3<u32>', 'attribute' );\n\t\t\tthis.getBuiltin( 'local_invocation_id', 'localId', 'vec3<u32>', 'attribute' );\n\t\t\tthis.getBuiltin( 'num_workgroups', 'numWorkgroups', 'vec3<u32>', 'attribute' );\n\n\t\t\tif ( this.renderer.hasFeature( 'subgroups' ) ) {\n\n\t\t\t\tthis.enableDirective( 'subgroups', shaderStage );\n\t\t\t\tthis.getBuiltin( 'subgroup_size', 'subgroupSize', 'u32', 'attribute' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tconst builtins = this.getBuiltins( 'attribute' );\n\n\t\t\tif ( builtins ) snippets.push( builtins );\n\n\t\t\tconst attributes = this.getAttributesArray();\n\n\t\t\tfor ( let index = 0, length = attributes.length; index < length; index ++ ) {\n\n\t\t\t\tconst attribute = attributes[ index ];\n\t\t\t\tconst name = attribute.name;\n\t\t\t\tconst type = this.getType( attribute.type );\n\n\t\t\t\tsnippets.push( `@location( ${index} ) ${ name } : ${ type }` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n\\t' );\n\n\t}\n\n\t/**\n\t * Returns the members of the given struct type node as a WGSL string.\n\t *\n\t * @param {StructTypeNode} struct - The struct type node.\n\t * @return {string} The WGSL snippet that defines the struct members.\n\t */\n\tgetStructMembers( struct ) {\n\n\t\tconst snippets = [];\n\n\t\tfor ( const member of struct.members ) {\n\n\t\t\tconst prefix = struct.output ? '@location( ' + member.index + ' ) ' : '';\n\n\t\t\tlet type = this.getType( member.type );\n\n\t\t\tif ( member.atomic ) {\n\n\t\t\t\ttype = 'atomic< ' + type + ' >';\n\n\t\t\t}\n\n\t\t\tsnippets.push( `\\t${ prefix + member.name } : ${ type }` );\n\n\t\t}\n\n\t\tif ( struct.output ) {\n\n\t\t\tsnippets.push( `\\t${ this.getBuiltins( 'output' ) }` );\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n' );\n\n\t}\n\n\t/**\n\t * Returns the structs of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The WGSL snippet that defines the structs.\n\t */\n\tgetStructs( shaderStage ) {\n\n\t\tlet result = '';\n\n\t\tconst structs = this.structs[ shaderStage ];\n\n\t\tif ( structs.length > 0 ) {\n\n\t\t\tconst snippets = [];\n\n\t\t\tfor ( const struct of structs ) {\n\n\t\t\t\tlet snippet = `struct ${ struct.name } {\\n`;\n\t\t\t\tsnippet += this.getStructMembers( struct );\n\t\t\t\tsnippet += '\\n};';\n\n\t\t\t\tsnippets.push( snippet );\n\n\t\t\t}\n\n\t\t\tresult = '\\n' + snippets.join( '\\n\\n' ) + '\\n';\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Returns a WGSL string representing a variable.\n\t *\n\t * @param {string} type - The variable's type.\n\t * @param {string} name - The variable's name.\n\t * @param {?number} [count=null] - The array length.\n\t * @return {string} The WGSL snippet that defines a variable.\n\t */\n\tgetVar( type, name, count = null ) {\n\n\t\tlet snippet = `var ${ name } : `;\n\n\t\tif ( count !== null ) {\n\n\t\t\tsnippet += this.generateArrayDeclaration( type, count );\n\n\t\t} else {\n\n\t\t\tsnippet += this.getType( type );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\t/**\n\t * Returns the variables of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The WGSL snippet that defines the variables.\n\t */\n\tgetVars( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tsnippets.push( `\\t${ this.getVar( variable.type, variable.name, variable.count ) };` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn `\\n${ snippets.join( '\\n' ) }\\n`;\n\n\t}\n\n\t/**\n\t * Returns the varyings of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The WGSL snippet that defines the varyings.\n\t */\n\tgetVaryings( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tthis.getBuiltin( 'position', 'Vertex', 'vec4<f32>', 'vertex' );\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'fragment' ) {\n\n\t\t\tconst varyings = this.varyings;\n\t\t\tconst vars = this.vars[ shaderStage ];\n\n\t\t\tfor ( let index = 0; index < varyings.length; index ++ ) {\n\n\t\t\t\tconst varying = varyings[ index ];\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tlet attributesSnippet = `@location( ${index} )`;\n\n\t\t\t\t\tif ( varying.interpolationType ) {\n\n\t\t\t\t\t\tconst samplingSnippet = varying.interpolationSampling !== null ? `, ${ varying.interpolationSampling } )` : ' )';\n\n\t\t\t\t\t\tattributesSnippet += ` @interpolate( ${ varying.interpolationType }${ samplingSnippet }`;\n\n\t\t\t\t\t\t// Otherwise, optimize interpolation when sensible\n\n\t\t\t\t\t} else if ( /^(int|uint|ivec|uvec)/.test( varying.type ) ) {\n\n\t\t\t\t\t\tattributesSnippet += ` @interpolate( ${ this.renderer.backend.compatibilityMode ? 'flat, either' : 'flat' } )`;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsnippets.push( `${ attributesSnippet } ${ varying.name } : ${ this.getType( varying.type ) }` );\n\n\t\t\t\t} else if ( shaderStage === 'vertex' && vars.includes( varying ) === false ) {\n\n\t\t\t\t\tvars.push( varying );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst builtins = this.getBuiltins( shaderStage );\n\n\t\tif ( builtins ) snippets.push( builtins );\n\n\t\tconst code = snippets.join( ',\\n\\t' );\n\n\t\treturn shaderStage === 'vertex' ? this._getWGSLStruct( 'VaryingsStruct', '\\t' + code ) : code;\n\n\t}\n\n\tisCustomStruct( nodeUniform ) {\n\n\t\tconst attribute = nodeUniform.value;\n\t\tconst bufferNode = nodeUniform.node;\n\n\t\tconst isAttributeStructType = ( attribute.isBufferAttribute || attribute.isInstancedBufferAttribute ) && bufferNode.structTypeNode !== null;\n\n\t\tconst isStructArray =\n\t\t\t( bufferNode.value && bufferNode.value.array ) &&\n\t\t\t( typeof bufferNode.value.itemSize === 'number' && bufferNode.value.array.length > bufferNode.value.itemSize );\n\n\t\treturn isAttributeStructType && ! isStructArray;\n\n\t}\n\n\t/**\n\t * Returns the uniforms of the given shader stage as a WGSL string.\n\t *\n\t * @param {string} shaderStage - The shader stage.\n\t * @return {string} The WGSL snippet that defines the uniforms.\n\t */\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tconst bindingSnippets = [];\n\t\tconst bufferSnippets = [];\n\t\tconst structSnippets = [];\n\t\tconst uniformGroups = {};\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tconst groupName = uniform.groupNode.name;\n\t\t\tconst uniformIndexes = this.bindingsIndexes[ groupName ];\n\n\t\t\tif ( uniform.type === 'texture' || uniform.type === 'cubeTexture' || uniform.type === 'storageTexture' || uniform.type === 'texture3D' ) {\n\n\t\t\t\tconst texture = uniform.node.value;\n\n\t\t\t\tif ( ( shaderStage === 'fragment' || shaderStage === 'compute' ) && this.isUnfilterable( texture ) === false && uniform.node.isStorageTextureNode !== true ) {\n\n\t\t\t\t\tif ( this.isSampleCompare( texture ) ) {\n\n\t\t\t\t\t\tbindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name }_sampler : sampler_comparison;` );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name }_sampler : sampler;` );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlet textureType;\n\n\t\t\t\tlet multisampled = '';\n\n\t\t\t\tconst { primarySamples } = this.renderer.backend.utils.getTextureSampleData( texture );\n\n\t\t\t\tif ( primarySamples > 1 ) {\n\n\t\t\t\t\tmultisampled = '_multisampled';\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_cube<f32>';\n\n\t\t\t\t} else if ( texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true || texture.isTextureArray === true ) {\n\n\t\t\t\t\ttextureType = 'texture_2d_array<f32>';\n\n\t\t\t\t} else if ( texture.isDepthTexture === true ) {\n\n\t\t\t\t\tif ( this.renderer.backend.compatibilityMode && texture.compareFunction === null ) {\n\n\t\t\t\t\t\ttextureType = `texture${ multisampled }_2d<f32>`;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureType = `texture_depth${ multisampled }_2d${ texture.isDepthArrayTexture === true ? '_array' : '' }`;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( texture.isVideoTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_external';\n\n\t\t\t\t} else if ( texture.isData3DTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_3d<f32>';\n\n\t\t\t\t} else if ( uniform.node.isStorageTextureNode === true ) {\n\n\t\t\t\t\tconst format = getFormat( texture );\n\t\t\t\t\tconst access = this.getStorageAccess( uniform.node, shaderStage );\n\n\t\t\t\t\ttextureType = `texture_storage_2d<${ format }, ${ access }>`;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst componentPrefix = this.getComponentTypeFromTexture( texture ).charAt( 0 );\n\n\t\t\t\t\ttextureType = `texture${ multisampled }_2d<${ componentPrefix }32>`;\n\n\t\t\t\t}\n\n\t\t\t\tbindingSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var ${ uniform.name } : ${ textureType };` );\n\n\t\t\t} else if ( uniform.type === 'buffer' || uniform.type === 'storageBuffer' || uniform.type === 'indirectStorageBuffer' ) {\n\n\t\t\t\tconst bufferNode = uniform.node;\n\t\t\t\tconst bufferType = this.getType( bufferNode.getNodeType( this ) );\n\t\t\t\tconst bufferCount = bufferNode.bufferCount;\n\t\t\t\tconst bufferCountSnippet = bufferCount > 0 && uniform.type === 'buffer' ? ', ' + bufferCount : '';\n\t\t\t\tconst bufferAccessMode = bufferNode.isStorageBufferNode ? `storage, ${ this.getStorageAccess( bufferNode, shaderStage ) }` : 'uniform';\n\n\t\t\t\tif ( this.isCustomStruct( uniform ) ) {\n\n\t\t\t\t\tbufferSnippets.push( `@binding( ${ uniformIndexes.binding ++ } ) @group( ${ uniformIndexes.group } ) var<${ bufferAccessMode }> ${ uniform.name } : ${ bufferType };` );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst bufferTypeSnippet = bufferNode.isAtomic ? `atomic<${ bufferType }>` : `${ bufferType }`;\n\t\t\t\t\tconst bufferSnippet = `\\tvalue : array< ${ bufferTypeSnippet }${ bufferCountSnippet } >`;\n\n\t\t\t\t\tbufferSnippets.push( this._getWGSLStructBinding( uniform.name, bufferSnippet, bufferAccessMode, uniformIndexes.binding ++, uniformIndexes.group ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getType( this.getVectorType( uniform.type ) );\n\t\t\t\tconst groupName = uniform.groupNode.name;\n\n\t\t\t\tconst group = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = {\n\t\t\t\t\tindex: uniformIndexes.binding ++,\n\t\t\t\t\tid: uniformIndexes.group,\n\t\t\t\t\tsnippets: []\n\t\t\t\t} );\n\n\t\t\t\tgroup.snippets.push( `\\t${ uniform.name } : ${ vectorType }` );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const name in uniformGroups ) {\n\n\t\t\tconst group = uniformGroups[ name ];\n\n\t\t\tstructSnippets.push( this._getWGSLStructBinding( name, group.snippets.join( ',\\n' ), 'uniform', group.index, group.id ) );\n\n\t\t}\n\n\t\tlet code = bindingSnippets.join( '\\n' );\n\t\tcode += bufferSnippets.join( '\\n' );\n\t\tcode += structSnippets.join( '\\n' );\n\n\t\treturn code;\n\n\t}\n\n\t/**\n\t * Controls the code build of the shader stages.\n\t */\n\tbuildCode() {\n\n\t\tconst shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };\n\n\t\tthis.sortBindingGroups();\n\n\t\tfor ( const shaderStage in shadersData ) {\n\n\t\t\tthis.shaderStage = shaderStage;\n\n\t\t\tconst stageData = shadersData[ shaderStage ];\n\t\t\tstageData.uniforms = this.getUniforms( shaderStage );\n\t\t\tstageData.attributes = this.getAttributes( shaderStage );\n\t\t\tstageData.varyings = this.getVaryings( shaderStage );\n\t\t\tstageData.structs = this.getStructs( shaderStage );\n\t\t\tstageData.vars = this.getVars( shaderStage );\n\t\t\tstageData.codes = this.getCodes( shaderStage );\n\t\t\tstageData.directives = this.getDirectives( shaderStage );\n\t\t\tstageData.scopedArrays = this.getScopedArrays( shaderStage );\n\n\t\t\t//\n\n\t\t\tlet flow = '// code\\n\\n';\n\t\t\tflow += this.flowCode[ shaderStage ];\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\t\t\tconst mainNode = flowNodes[ flowNodes.length - 1 ];\n\n\t\t\tconst outputNode = mainNode.outputNode;\n\t\t\tconst isOutputStruct = ( outputNode !== undefined && outputNode.isOutputStructNode === true );\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tconst flowSlotData = this.getFlowData( node/*, shaderStage*/ );\n\t\t\t\tconst slotName = node.name;\n\n\t\t\t\tif ( slotName ) {\n\n\t\t\t\t\tif ( flow.length > 0 ) flow += '\\n';\n\n\t\t\t\t\tflow += `\\t// flow -> ${ slotName }\\n`;\n\n\t\t\t\t}\n\n\t\t\t\tflow += `${ flowSlotData.code }\\n\\t`;\n\n\t\t\t\tif ( node === mainNode && shaderStage !== 'compute' ) {\n\n\t\t\t\t\tflow += '// result\\n\\n\\t';\n\n\t\t\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\t\t\tflow += `varyings.Vertex = ${ flowSlotData.result };`;\n\n\t\t\t\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\t\tif ( isOutputStruct ) {\n\n\t\t\t\t\t\t\tstageData.returnType = outputNode.getNodeType( this );\n\t\t\t\t\t\t\tstageData.structs += 'var<private> output : ' + stageData.returnType + ';';\n\n\t\t\t\t\t\t\tflow += `return ${ flowSlotData.result };`;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tlet structSnippet = '\\t@location(0) color: vec4<f32>';\n\n\t\t\t\t\t\t\tconst builtins = this.getBuiltins( 'output' );\n\n\t\t\t\t\t\t\tif ( builtins ) structSnippet += ',\\n\\t' + builtins;\n\n\t\t\t\t\t\t\tstageData.returnType = 'OutputStruct';\n\t\t\t\t\t\t\tstageData.structs += this._getWGSLStruct( 'OutputStruct', structSnippet );\n\t\t\t\t\t\t\tstageData.structs += '\\nvar<private> output : OutputStruct;';\n\n\t\t\t\t\t\t\tflow += `output.color = ${ flowSlotData.result };\\n\\n\\treturn output;`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstageData.flow = flow;\n\n\t\t}\n\n\t\tthis.shaderStage = null;\n\n\t\tif ( this.material !== null ) {\n\n\t\t\tthis.vertexShader = this._getWGSLVertexCode( shadersData.vertex );\n\t\t\tthis.fragmentShader = this._getWGSLFragmentCode( shadersData.fragment );\n\n\t\t} else {\n\n\t\t\tthis.computeShader = this._getWGSLComputeCode( shadersData.compute, ( this.object.workgroupSize || [ 64 ] ).join( ', ' ) );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the native shader method name for a given generic name.\n\t *\n\t * @param {string} method - The method name to resolve.\n\t * @param {?string} [output=null] - An optional output.\n\t * @return {string} The resolved WGSL method name.\n\t */\n\tgetMethod( method, output = null ) {\n\n\t\tlet wgslMethod;\n\n\t\tif ( output !== null ) {\n\n\t\t\twgslMethod = this._getWGSLMethod( method + '_' + output );\n\n\t\t}\n\n\t\tif ( wgslMethod === undefined ) {\n\n\t\t\twgslMethod = this._getWGSLMethod( method );\n\n\t\t}\n\n\t\treturn wgslMethod || method;\n\n\t}\n\n\t/**\n\t * Returns the WGSL type of the given node data type.\n\t *\n\t * @param {string} type - The node data type.\n\t * @return {string} The WGSL type.\n\t */\n\tgetType( type ) {\n\n\t\treturn wgslTypeLib[ type ] || type;\n\n\t}\n\n\t/**\n\t * Whether the requested feature is available or not.\n\t *\n\t * @param {string} name - The requested feature.\n\t * @return {boolean} Whether the requested feature is supported or not.\n\t */\n\tisAvailable( name ) {\n\n\t\tlet result = supports[ name ];\n\n\t\tif ( result === undefined ) {\n\n\t\t\tif ( name === 'float32Filterable' ) {\n\n\t\t\t\tresult = this.renderer.hasFeature( 'float32-filterable' );\n\n\t\t\t} else if ( name === 'clipDistance' ) {\n\n\t\t\t\tresult = this.renderer.hasFeature( 'clip-distances' );\n\n\t\t\t}\n\n\t\t\tsupports[ name ] = result;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Returns the native shader method name for a given generic name.\n\t *\n\t * @private\n\t * @param {string} method - The method name to resolve.\n\t * @return {string} The resolved WGSL method name.\n\t */\n\t_getWGSLMethod( method ) {\n\n\t\tif ( wgslPolyfill[ method ] !== undefined ) {\n\n\t\t\tthis._include( method );\n\n\t\t}\n\n\t\treturn wgslMethods[ method ];\n\n\t}\n\n\t/**\n\t * Includes the given method name into the current\n\t * function node.\n\t *\n\t * @private\n\t * @param {string} name - The method name to include.\n\t * @return {CodeNode} The respective code node.\n\t */\n\t_include( name ) {\n\n\t\tconst codeNode = wgslPolyfill[ name ];\n\t\tcodeNode.build( this );\n\n\t\tif ( this.currentFunctionNode !== null ) {\n\n\t\t\tthis.currentFunctionNode.includes.push( codeNode );\n\n\t\t}\n\n\t\treturn codeNode;\n\n\t}\n\n\t/**\n\t * Returns a WGSL vertex shader based on the given shader data.\n\t *\n\t * @private\n\t * @param {Object} shaderData - The shader data.\n\t * @return {string} The vertex shader.\n\t */\n\t_getWGSLVertexCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n// directives\n${shaderData.directives}\n\n// structs\n${shaderData.structs}\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${shaderData.codes}\n\n@vertex\nfn main( ${shaderData.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n\treturn varyings;\n\n}\n`;\n\n\t}\n\n\t/**\n\t * Returns a WGSL fragment shader based on the given shader data.\n\t *\n\t * @private\n\t * @param {Object} shaderData - The shader data.\n\t * @return {string} The vertex shader.\n\t */\n\t_getWGSLFragmentCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n// global\n${ diagnostics }\n\n// structs\n${shaderData.structs}\n\n// uniforms\n${shaderData.uniforms}\n\n// codes\n${shaderData.codes}\n\n@fragment\nfn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t/**\n\t * Returns a WGSL compute shader based on the given shader data.\n\t *\n\t * @private\n\t * @param {Object} shaderData - The shader data.\n\t * @param {string} workgroupSize - The workgroup size.\n\t * @return {string} The vertex shader.\n\t */\n\t_getWGSLComputeCode( shaderData, workgroupSize ) {\n\n\t\treturn `${ this.getSignature() }\n// directives\n${shaderData.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${shaderData.scopedArrays}\n\n// structs\n${shaderData.structs}\n\n// uniforms\n${shaderData.uniforms}\n\n// codes\n${shaderData.codes}\n\n@compute @workgroup_size( ${workgroupSize} )\nfn main( ${shaderData.attributes} ) {\n\n\t// system\n\tinstanceIndex = globalId.x + globalId.y * numWorkgroups.x * u32(${workgroupSize}) + globalId.z * numWorkgroups.x * numWorkgroups.y * u32(${workgroupSize});\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t/**\n\t * Returns a WGSL struct based on the given name and variables.\n\t *\n\t * @private\n\t * @param {string} name - The struct name.\n\t * @param {string} vars - The struct variables.\n\t * @return {string} The WGSL snippet representing a struct.\n\t */\n\t_getWGSLStruct( name, vars ) {\n\n\t\treturn `\nstruct ${name} {\n${vars}\n};`;\n\n\t}\n\n\t/**\n\t * Returns a WGSL struct binding.\n\t *\n\t * @private\n\t * @param {string} name - The struct name.\n\t * @param {string} vars - The struct variables.\n\t * @param {string} access - The access.\n\t * @param {number} [binding=0] - The binding index.\n\t * @param {number} [group=0] - The group index.\n\t * @return {string} The WGSL snippet representing a struct binding.\n\t */\n\t_getWGSLStructBinding( name, vars, access, binding = 0, group = 0 ) {\n\n\t\tconst structName = name + 'Struct';\n\t\tconst structSnippet = this._getWGSLStruct( structName, vars );\n\n\t\treturn `${structSnippet}\n@binding( ${ binding } ) @group( ${ group } )\nvar<${access}> ${ name } : ${ structName };`;\n\n\t}\n\n}\n\n/**\n * A WebGPU backend utility module with common helpers.\n *\n * @private\n */\nclass WebGPUUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGPUBackend} backend - The WebGPU backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGPU backend.\n\t\t *\n\t\t * @type {WebGPUBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t}\n\n\t/**\n\t * Returns the depth/stencil GPU format for the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {string} The depth/stencil GPU texture format.\n\t */\n\tgetCurrentDepthStencilFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.depthTexture !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.depthTexture );\n\n\t\t} else if ( renderContext.depth && renderContext.stencil ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24PlusStencil8;\n\n\t\t} else if ( renderContext.depth ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24Plus;\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t/**\n\t * Returns the GPU format for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {string} The GPU texture format.\n\t */\n\tgetTextureFormatGPU( texture ) {\n\n\t\treturn this.backend.get( texture ).format;\n\n\t}\n\n\t/**\n\t * Returns an object that defines the multi-sampling state of the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {Object} The multi-sampling state.\n\t */\n\tgetTextureSampleData( texture ) {\n\n\t\tlet samples;\n\n\t\tif ( texture.isFramebufferTexture ) {\n\n\t\t\tsamples = 1;\n\n\t\t} else if ( texture.isDepthTexture && ! texture.renderTarget ) {\n\n\t\t\tconst renderer = this.backend.renderer;\n\t\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\t\tsamples = renderTarget ? renderTarget.samples : renderer.samples;\n\n\t\t} else if ( texture.renderTarget ) {\n\n\t\t\tsamples = texture.renderTarget.samples;\n\n\t\t}\n\n\t\tsamples = samples || 1;\n\n\t\tconst isMSAA = samples > 1 && texture.renderTarget !== null && ( texture.isDepthTexture !== true && texture.isFramebufferTexture !== true );\n\t\tconst primarySamples = isMSAA ? 1 : samples;\n\n\t\treturn { samples, primarySamples, isMSAA };\n\n\t}\n\n\t/**\n\t * Returns the default color attachment's GPU format of the current render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {string} The GPU texture format of the default color attachment.\n\t */\n\tgetCurrentColorFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.textures[ 0 ] );\n\n\t\t} else {\n\n\t\t\tformat = this.getPreferredCanvasFormat(); // default context format\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t/**\n\t * Returns the output color space of the current render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {string} The output color space.\n\t */\n\tgetCurrentColorSpace( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn renderContext.textures[ 0 ].colorSpace;\n\n\t\t}\n\n\t\treturn this.backend.renderer.outputColorSpace;\n\n\t}\n\n\t/**\n\t * Returns GPU primitive topology for the given object and material.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The material.\n\t * @return {string} The GPU primitive topology.\n\t */\n\tgetPrimitiveTopology( object, material ) {\n\n\t\tif ( object.isPoints ) return GPUPrimitiveTopology.PointList;\n\t\telse if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;\n\t\telse if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;\n\t\telse if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;\n\n\t}\n\n\t/**\n\t * Returns a modified sample count from the given sample count value.\n\t *\n\t * That is required since WebGPU does not support arbitrary sample counts.\n\t *\n\t * @param {number} sampleCount - The input sample count.\n\t * @return {number} The (potentially updated) output sample count.\n\t */\n\tgetSampleCount( sampleCount ) {\n\n\t\tlet count = 1;\n\n\t\tif ( sampleCount > 1 ) {\n\n\t\t\t// WebGPU only supports power-of-two sample counts and 2 is not a valid value\n\t\t\tcount = Math.pow( 2, Math.floor( Math.log2( sampleCount ) ) );\n\n\t\t\tif ( count === 2 ) {\n\n\t\t\t\tcount = 4;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\t/**\n\t * Returns the sample count of the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {number} The sample count.\n\t */\n\tgetSampleCountRenderContext( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn this.getSampleCount( renderContext.sampleCount );\n\n\t\t}\n\n\t\treturn this.getSampleCount( this.backend.renderer.samples );\n\n\t}\n\n\t/**\n\t * Returns the preferred canvas format.\n\t *\n\t * There is a separate method for this so it's possible to\n\t * honor edge cases for specific devices.\n\t *\n\t * @return {string} The GPU texture format of the canvas.\n\t */\n\tgetPreferredCanvasFormat() {\n\n\t\tconst outputType = this.backend.parameters.outputType;\n\n\t\tif ( outputType === undefined ) {\n\n\t\t\treturn navigator.gpu.getPreferredCanvasFormat();\n\n\t\t} else if ( outputType === UnsignedByteType ) {\n\n\t\t\treturn GPUTextureFormat.BGRA8Unorm;\n\n\t\t} else if ( outputType === HalfFloatType ) {\n\n\t\t\treturn GPUTextureFormat.RGBA16Float;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unsupported outputType' );\n\n\t\t}\n\n\t}\n\n}\n\nconst typedArraysToVertexFormatPrefix = new Map( [\n\t[ Int8Array, [ 'sint8', 'snorm8' ]],\n\t[ Uint8Array, [ 'uint8', 'unorm8' ]],\n\t[ Int16Array, [ 'sint16', 'snorm16' ]],\n\t[ Uint16Array, [ 'uint16', 'unorm16' ]],\n\t[ Int32Array, [ 'sint32', 'snorm32' ]],\n\t[ Uint32Array, [ 'uint32', 'unorm32' ]],\n\t[ Float32Array, [ 'float32', ]],\n] );\n\nconst typedAttributeToVertexFormatPrefix = new Map( [\n\t[ Float16BufferAttribute, [ 'float16', ]],\n] );\n\nconst typeArraysToVertexFormatPrefixForItemSize1 = new Map( [\n\t[ Int32Array, 'sint32' ],\n\t[ Int16Array, 'sint32' ], // patch for INT16\n\t[ Uint32Array, 'uint32' ],\n\t[ Uint16Array, 'uint32' ], // patch for UINT16\n\t[ Float32Array, 'float32' ]\n] );\n\n/**\n * A WebGPU backend utility module for managing shader attributes.\n *\n * @private\n */\nclass WebGPUAttributeUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGPUBackend} backend - The WebGPU backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGPU backend.\n\t\t *\n\t\t * @type {WebGPUBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t}\n\n\t/**\n\t * Creates the GPU buffer for the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t * @param {GPUBufferUsage} usage - A flag that indicates how the buffer may be used after its creation.\n\t */\n\tcreateAttribute( attribute, usage ) {\n\n\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\tconst backend = this.backend;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\n\t\tlet buffer = bufferData.buffer;\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tconst device = backend.device;\n\n\t\t\tlet array = bufferAttribute.array;\n\n\t\t\t// patch for INT16 and UINT16\n\t\t\tif ( attribute.normalized === false ) {\n\n\t\t\t\tif ( array.constructor === Int16Array || array.constructor === Int8Array ) {\n\n\t\t\t\t\tarray = new Int32Array( array );\n\n\t\t\t\t} else if ( array.constructor === Uint16Array || array.constructor === Uint8Array ) {\n\n\t\t\t\t\tarray = new Uint32Array( array );\n\n\t\t\t\t\tif ( usage & GPUBufferUsage.INDEX ) {\n\n\t\t\t\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( array[ i ] === 0xffff ) array[ i ] = 0xffffffff; // use correct primitive restart index\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbufferAttribute.array = array;\n\n\t\t\tif ( ( bufferAttribute.isStorageBufferAttribute || bufferAttribute.isStorageInstancedBufferAttribute ) && bufferAttribute.itemSize === 3 ) {\n\n\t\t\t\tarray = new array.constructor( bufferAttribute.count * 4 );\n\n\t\t\t\tfor ( let i = 0; i < bufferAttribute.count; i ++ ) {\n\n\t\t\t\t\tarray.set( bufferAttribute.array.subarray( i * 3, i * 3 + 3 ), i * 4 );\n\n\t\t\t\t}\n\n\t\t\t\t// Update BufferAttribute\n\t\t\t\tbufferAttribute.itemSize = 4;\n\t\t\t\tbufferAttribute.array = array;\n\n\t\t\t\tbufferData._force3to4BytesAlignment = true;\n\n\t\t\t}\n\n\t\t\tconst size = array.byteLength + ( ( 4 - ( array.byteLength % 4 ) ) % 4 ); // ensure 4 byte alignment, see #20441\n\n\t\t\tbuffer = device.createBuffer( {\n\t\t\t\tlabel: bufferAttribute.name,\n\t\t\t\tsize: size,\n\t\t\t\tusage: usage,\n\t\t\t\tmappedAtCreation: true\n\t\t\t} );\n\n\t\t\tnew array.constructor( buffer.getMappedRange() ).set( array );\n\n\t\t\tbuffer.unmap();\n\n\t\t\tbufferData.buffer = buffer;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the GPU buffer of the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tupdateAttribute( attribute ) {\n\n\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst bufferData = backend.get( bufferAttribute );\n\t\tconst buffer = backend.get( bufferAttribute ).buffer;\n\n\t\tlet array = bufferAttribute.array;\n\n\t\t//  if storage buffer ensure 4 byte alignment\n\t\tif ( bufferData._force3to4BytesAlignment === true ) {\n\n\t\t\tarray = new array.constructor( bufferAttribute.count * 4 );\n\n\t\t\tfor ( let i = 0; i < bufferAttribute.count; i ++ ) {\n\n\t\t\t\tarray.set( bufferAttribute.array.subarray( i * 3, i * 3 + 3 ), i * 4 );\n\n\t\t\t}\n\n\t\t\tbufferAttribute.array = array;\n\n\t\t}\n\n\n\t\tconst isTypedArray = this._isTypedArray( array );\n\t\tconst updateRanges = bufferAttribute.updateRanges;\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tdevice.queue.writeBuffer(\n\t\t\t\tbuffer,\n\t\t\t\t0,\n\t\t\t\tarray,\n\t\t\t\t0\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tconst byteOffsetFactor = isTypedArray ? 1 : array.BYTES_PER_ELEMENT;\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\t\t\t\tlet dataOffset, size;\n\n\t\t\t\tif ( bufferData._force3to4BytesAlignment === true ) {\n\n\t\t\t\t\tconst vertexStart = Math.floor( range.start / 3 );\n\t\t\t\t\tconst vertexCount = Math.ceil( range.count / 3 );\n\t\t\t\t\tdataOffset = vertexStart * 4 * byteOffsetFactor;\n\t\t\t\t\tsize = vertexCount * 4 * byteOffsetFactor;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdataOffset = range.start * byteOffsetFactor;\n\t\t\t\t\tsize = range.count * byteOffsetFactor;\n\n\t\t\t\t}\n\n\t\t\t\tconst bufferOffset = dataOffset * ( isTypedArray ? array.BYTES_PER_ELEMENT : 1 ); // bufferOffset is always in bytes\n\n\t\t\t\tdevice.queue.writeBuffer(\n\t\t\t\t\tbuffer,\n\t\t\t\t\tbufferOffset,\n\t\t\t\t\tarray,\n\t\t\t\t\tdataOffset,\n\t\t\t\t\tsize\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tbufferAttribute.clearUpdateRanges();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method creates the vertex buffer layout data which are\n\t * require when creating a render pipeline for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {Array<Object>} An array holding objects which describe the vertex buffer layout.\n\t */\n\tcreateShaderVertexBuffers( renderObject ) {\n\n\t\tconst attributes = renderObject.getAttributes();\n\t\tconst vertexBuffers = new Map();\n\n\t\tfor ( let slot = 0; slot < attributes.length; slot ++ ) {\n\n\t\t\tconst geometryAttribute = attributes[ slot ];\n\t\t\tconst bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;\n\t\t\tconst bufferAttribute = this._getBufferAttribute( geometryAttribute );\n\n\t\t\tlet vertexBufferLayout = vertexBuffers.get( bufferAttribute );\n\n\t\t\tif ( vertexBufferLayout === undefined ) {\n\n\t\t\t\tlet arrayStride, stepMode;\n\n\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute === true ) {\n\n\t\t\t\t\tarrayStride = geometryAttribute.data.stride * bytesPerElement;\n\t\t\t\t\tstepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarrayStride = geometryAttribute.itemSize * bytesPerElement;\n\t\t\t\t\tstepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n\n\t\t\t\t}\n\n\t\t\t\t// patch for INT16 and UINT16\n\t\t\t\tif ( geometryAttribute.normalized === false && ( geometryAttribute.array.constructor === Int16Array || geometryAttribute.array.constructor === Uint16Array ) ) {\n\n\t\t\t\t\tarrayStride = 4;\n\n\t\t\t\t}\n\n\t\t\t\tvertexBufferLayout = {\n\t\t\t\t\tarrayStride,\n\t\t\t\t\tattributes: [],\n\t\t\t\t\tstepMode\n\t\t\t\t};\n\n\t\t\t\tvertexBuffers.set( bufferAttribute, vertexBufferLayout );\n\n\t\t\t}\n\n\t\t\tconst format = this._getVertexFormat( geometryAttribute );\n\t\t\tconst offset = ( geometryAttribute.isInterleavedBufferAttribute === true ) ? geometryAttribute.offset * bytesPerElement : 0;\n\n\t\t\tvertexBufferLayout.attributes.push( {\n\t\t\t\tshaderLocation: slot,\n\t\t\t\toffset,\n\t\t\t\tformat\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Array.from( vertexBuffers.values() );\n\n\t}\n\n\t/**\n\t * Destroys the GPU buffer of the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tdestroyAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst data = backend.get( this._getBufferAttribute( attribute ) );\n\n\t\tdata.buffer.destroy();\n\n\t\tbackend.delete( attribute );\n\n\t}\n\n\t/**\n\t * This method performs a readback operation by moving buffer data from\n\t * a storage buffer attribute from the GPU to the CPU.\n\t *\n\t * @async\n\t * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n\t * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n\t */\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst data = backend.get( this._getBufferAttribute( attribute ) );\n\t\tconst bufferGPU = data.buffer;\n\t\tconst size = bufferGPU.size;\n\n\t\tconst readBufferGPU = device.createBuffer( {\n\t\t\tlabel: `${ attribute.name }_readback`,\n\t\t\tsize,\n\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t} );\n\n\t\tconst cmdEncoder = device.createCommandEncoder( {\n\t\t\tlabel: `readback_encoder_${ attribute.name }`\n\t\t} );\n\n\t\tcmdEncoder.copyBufferToBuffer(\n\t\t\tbufferGPU,\n\t\t\t0,\n\t\t\treadBufferGPU,\n\t\t\t0,\n\t\t\tsize\n\t\t);\n\n\t\tconst gpuCommands = cmdEncoder.finish();\n\t\tdevice.queue.submit( [ gpuCommands ] );\n\n\t\tawait readBufferGPU.mapAsync( GPUMapMode.READ );\n\n\t\tconst arrayBuffer = readBufferGPU.getMappedRange();\n\n\t\tconst dstBuffer = new attribute.array.constructor( arrayBuffer.slice( 0 ) );\n\n\t\treadBufferGPU.unmap();\n\n\t\treturn dstBuffer.buffer;\n\n\t}\n\n\t/**\n\t * Returns the vertex format of the given buffer attribute.\n\t *\n\t * @private\n\t * @param {BufferAttribute} geometryAttribute - The buffer attribute.\n\t * @return {string|undefined} The vertex format (e.g. 'float32x3').\n\t */\n\t_getVertexFormat( geometryAttribute ) {\n\n\t\tconst { itemSize, normalized } = geometryAttribute;\n\t\tconst ArrayType = geometryAttribute.array.constructor;\n\t\tconst AttributeType = geometryAttribute.constructor;\n\n\t\tlet format;\n\n\t\tif ( itemSize === 1 ) {\n\n\t\t\tformat = typeArraysToVertexFormatPrefixForItemSize1.get( ArrayType );\n\n\t\t} else {\n\n\t\t\tconst prefixOptions = typedAttributeToVertexFormatPrefix.get( AttributeType ) || typedArraysToVertexFormatPrefix.get( ArrayType );\n\t\t\tconst prefix = prefixOptions[ normalized ? 1 : 0 ];\n\n\t\t\tif ( prefix ) {\n\n\t\t\t\tconst bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;\n\t\t\t\tconst paddedBytesPerUnit = Math.floor( ( bytesPerUnit + 3 ) / 4 ) * 4;\n\t\t\t\tconst paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;\n\n\t\t\t\tif ( paddedItemSize % 1 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGPUAttributeUtils: Bad vertex format item size.' );\n\n\t\t\t\t}\n\n\t\t\t\tformat = `${prefix}x${paddedItemSize}`;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! format ) {\n\n\t\t\tconsole.error( 'THREE.WebGPUAttributeUtils: Vertex format not supported yet.' );\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given array is a typed array.\n\t *\n\t * @private\n\t * @param {any} array - The array.\n\t * @return {boolean} Whether the given array is a typed array or not.\n\t */\n\t_isTypedArray( array ) {\n\n\t\treturn ArrayBuffer.isView( array ) && ! ( array instanceof DataView );\n\n\t}\n\n\t/**\n\t * Utility method for handling interleaved buffer attributes correctly.\n\t * To process them, their `InterleavedBuffer` is returned.\n\t *\n\t * @private\n\t * @param {BufferAttribute} attribute - The attribute.\n\t * @return {BufferAttribute|InterleavedBuffer}\n\t */\n\t_getBufferAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn attribute;\n\n\t}\n\n}\n\n/**\n * A WebGPU backend utility module for managing bindings.\n *\n * When reading the documentation it's helpful to keep in mind that\n * all class definitions starting with 'GPU*' are modules from the\n * WebGPU API. So for example `BindGroup` is a class from the engine\n * whereas `GPUBindGroup` is a class from WebGPU.\n *\n * @private\n */\nclass WebGPUBindingUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGPUBackend} backend - The WebGPU backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGPU backend.\n\t\t *\n\t\t * @type {WebGPUBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A cache for managing bind group layouts.\n\t\t *\n\t\t * @type {WeakMap<Array<Binding>,GPUBindGroupLayout>}\n\t\t */\n\t\tthis.bindGroupLayoutCache = new WeakMap();\n\n\t}\n\n\t/**\n\t * Creates a GPU bind group layout for the given bind group.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @return {GPUBindGroupLayout} The GPU bind group layout.\n\t */\n\tcreateBindingsLayout( bindGroup ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst entries = [];\n\n\t\tlet index = 0;\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tconst bindingGPU = {\n\t\t\t\tbinding: index ++,\n\t\t\t\tvisibility: binding.visibility\n\t\t\t};\n\n\t\t\tif ( binding.isUniformBuffer || binding.isStorageBuffer ) {\n\n\t\t\t\tconst buffer = {}; // GPUBufferBindingLayout\n\n\t\t\t\tif ( binding.isStorageBuffer ) {\n\n\t\t\t\t\tif ( binding.visibility & 4 ) {\n\n\t\t\t\t\t\t// compute\n\n\t\t\t\t\t\tif ( binding.access === NodeAccess.READ_WRITE || binding.access === NodeAccess.WRITE_ONLY ) {\n\n\t\t\t\t\t\t\tbuffer.type = GPUBufferBindingType.Storage;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbuffer.type = GPUBufferBindingType.ReadOnlyStorage;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbuffer.type = GPUBufferBindingType.ReadOnlyStorage;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.buffer = buffer;\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tconst sampler = {}; // GPUSamplerBindingLayout\n\n\t\t\t\tif ( binding.texture.isDepthTexture ) {\n\n\t\t\t\t\tif ( binding.texture.compareFunction !== null ) {\n\n\t\t\t\t\t\tsampler.type = GPUSamplerBindingType.Comparison;\n\n\t\t\t\t\t} else if ( backend.compatibilityMode ) {\n\n\t\t\t\t\t\tsampler.type = GPUSamplerBindingType.NonFiltering;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.sampler = sampler;\n\n\t\t\t} else if ( binding.isSampledTexture && binding.texture.isVideoTexture ) {\n\n\t\t\t\tbindingGPU.externalTexture = {}; // GPUExternalTextureBindingLayout\n\n\t\t\t} else if ( binding.isSampledTexture && binding.store ) {\n\n\t\t\t\tconst storageTexture = {}; // GPUStorageTextureBindingLayout\n\t\t\t\tstorageTexture.format = this.backend.get( binding.texture ).texture.format;\n\n\t\t\t\tconst access = binding.access;\n\n\t\t\t\tif ( access === NodeAccess.READ_WRITE ) {\n\n\t\t\t\t\tstorageTexture.access = GPUStorageTextureAccess.ReadWrite;\n\n\t\t\t\t} else if ( access === NodeAccess.WRITE_ONLY ) {\n\n\t\t\t\t\tstorageTexture.access = GPUStorageTextureAccess.WriteOnly;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstorageTexture.access = GPUStorageTextureAccess.ReadOnly;\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.storageTexture = storageTexture;\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst texture = {}; // GPUTextureBindingLayout\n\n\t\t\t\tconst { primarySamples } = backend.utils.getTextureSampleData( binding.texture );\n\n\t\t\t\tif ( primarySamples > 1 ) {\n\n\t\t\t\t\ttexture.multisampled = true;\n\n\t\t\t\t\tif ( ! binding.texture.isDepthTexture ) {\n\n\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.UnfilterableFloat;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( binding.texture.isDepthTexture ) {\n\n\t\t\t\t\tif ( backend.compatibilityMode && binding.texture.compareFunction === null ) {\n\n\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.UnfilterableFloat;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.Depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( binding.texture.isDataTexture || binding.texture.isDataArrayTexture || binding.texture.isData3DTexture ) {\n\n\t\t\t\t\tconst type = binding.texture.type;\n\n\t\t\t\t\tif ( type === IntType ) {\n\n\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.SInt;\n\n\t\t\t\t\t} else if ( type === UnsignedIntType ) {\n\n\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.UInt;\n\n\t\t\t\t\t} else if ( type === FloatType ) {\n\n\t\t\t\t\t\tif ( this.backend.hasFeature( 'float32-filterable' ) ) {\n\n\t\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.Float;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.UnfilterableFloat;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( binding.isSampledCubeTexture ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.Cube;\n\n\t\t\t\t} else if ( binding.texture.isDataArrayTexture || binding.texture.isDepthArrayTexture || binding.texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.TwoDArray;\n\n\t\t\t\t} else if ( binding.isSampledTexture3D ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.ThreeD;\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.texture = texture;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( `WebGPUBindingUtils: Unsupported binding \"${ binding }\".` );\n\n\t\t\t}\n\n\t\t\tentries.push( bindingGPU );\n\n\t\t}\n\n\t\treturn device.createBindGroupLayout( { entries } );\n\n\t}\n\n\t/**\n\t * Creates bindings from the given bind group definition.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {Array<BindGroup>} bindings - Array of bind groups.\n\t * @param {number} cacheIndex - The cache index.\n\t * @param {number} version - The version.\n\t */\n\tcreateBindings( bindGroup, bindings, cacheIndex, version = 0 ) {\n\n\t\tconst { backend, bindGroupLayoutCache } = this;\n\t\tconst bindingsData = backend.get( bindGroup );\n\n\t\t// setup (static) binding layout and (dynamic) binding group\n\n\t\tlet bindLayoutGPU = bindGroupLayoutCache.get( bindGroup.bindingsReference );\n\n\t\tif ( bindLayoutGPU === undefined ) {\n\n\t\t\tbindLayoutGPU = this.createBindingsLayout( bindGroup );\n\t\t\tbindGroupLayoutCache.set( bindGroup.bindingsReference, bindLayoutGPU );\n\n\t\t}\n\n\t\tlet bindGroupGPU;\n\n\t\tif ( cacheIndex > 0 ) {\n\n\t\t\tif ( bindingsData.groups === undefined ) {\n\n\t\t\t\tbindingsData.groups = [];\n\t\t\t\tbindingsData.versions = [];\n\n\t\t\t}\n\n\t\t\tif ( bindingsData.versions[ cacheIndex ] === version ) {\n\n\t\t\t\tbindGroupGPU = bindingsData.groups[ cacheIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( bindGroupGPU === undefined ) {\n\n\t\t\tbindGroupGPU = this.createBindGroup( bindGroup, bindLayoutGPU );\n\n\t\t\tif ( cacheIndex > 0 ) {\n\n\t\t\t\tbindingsData.groups[ cacheIndex ] = bindGroupGPU;\n\t\t\t\tbindingsData.versions[ cacheIndex ] = version;\n\n\t\t\t}\n\n\t\t}\n\n\t\tbindingsData.group = bindGroupGPU;\n\t\tbindingsData.layout = bindLayoutGPU;\n\n\t}\n\n\t/**\n\t * Updates a buffer binding.\n\t *\n\t *  @param {Buffer} binding - The buffer binding to update.\n\t */\n\tupdateBinding( binding ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst buffer = binding.buffer;\n\t\tconst bufferGPU = backend.get( binding ).buffer;\n\n\t\tdevice.queue.writeBuffer( bufferGPU, 0, buffer, 0 );\n\n\t}\n\n\t/**\n\t * Creates a GPU bind group for the camera index.\n\t *\n\t * @param {Uint32Array} data - The index data.\n\t * @param {GPUBindGroupLayout} layout - The GPU bind group layout.\n\t * @return {GPUBindGroup} The GPU bind group.\n\t */\n\tcreateBindGroupIndex( data, layout ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n\t\tconst index = data[ 0 ];\n\n\t\tconst buffer = device.createBuffer( {\n\t\t\tlabel: 'bindingCameraIndex_' + index,\n\t\t\tsize: 16, // uint(4) * 4\n\t\t\tusage: usage\n\t\t} );\n\n\t\tdevice.queue.writeBuffer( buffer, 0, data, 0 );\n\n\t\tconst entries = [ { binding: 0, resource: { buffer } } ];\n\n\t\treturn device.createBindGroup( {\n\t\t\tlabel: 'bindGroupCameraIndex_' + index,\n\t\t\tlayout,\n\t\t\tentries\n\t\t} );\n\n\t}\n\n\t/**\n\t * Creates a GPU bind group for the given bind group and GPU layout.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {GPUBindGroupLayout} layoutGPU - The GPU bind group layout.\n\t * @return {GPUBindGroup} The GPU bind group.\n\t */\n\tcreateBindGroup( bindGroup, layoutGPU ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tlet bindingPoint = 0;\n\t\tconst entriesGPU = [];\n\n\t\tfor ( const binding of bindGroup.bindings ) {\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tconst bindingData = backend.get( binding );\n\n\t\t\t\tif ( bindingData.buffer === undefined ) {\n\n\t\t\t\t\tconst byteLength = binding.byteLength;\n\n\t\t\t\t\tconst usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n\n\t\t\t\t\tconst bufferGPU = device.createBuffer( {\n\t\t\t\t\t\tlabel: 'bindingBuffer_' + binding.name,\n\t\t\t\t\t\tsize: byteLength,\n\t\t\t\t\t\tusage: usage\n\t\t\t\t\t} );\n\n\t\t\t\t\tbindingData.buffer = bufferGPU;\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst bindingData = backend.get( binding );\n\n\t\t\t\tif ( bindingData.buffer === undefined ) {\n\n\t\t\t\t\tconst attribute = binding.attribute;\n\t\t\t\t\t//const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | /*GPUBufferUsage.COPY_SRC |*/ GPUBufferUsage.COPY_DST;\n\n\t\t\t\t\t//backend.attributeUtils.createAttribute( attribute, usage ); // @TODO: Move it to universal renderer\n\n\t\t\t\t\tbindingData.buffer = backend.get( attribute ).buffer;\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tconst textureGPU = backend.get( binding.texture );\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: textureGPU.sampler } );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst textureData = backend.get( binding.texture );\n\n\t\t\t\tlet resourceGPU;\n\n\t\t\t\tif ( textureData.externalTexture !== undefined ) {\n\n\t\t\t\t\tresourceGPU = device.importExternalTexture( { source: textureData.externalTexture } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst mipLevelCount = binding.store ? 1 : textureData.texture.mipLevelCount;\n\t\t\t\t\tconst propertyName = `view-${ textureData.texture.width }-${ textureData.texture.height }-${ mipLevelCount }`;\n\n\t\t\t\t\tresourceGPU = textureData[ propertyName ];\n\n\t\t\t\t\tif ( resourceGPU === undefined ) {\n\n\t\t\t\t\t\tconst aspectGPU = GPUTextureAspect.All;\n\n\t\t\t\t\t\tlet dimensionViewGPU;\n\n\t\t\t\t\t\tif ( binding.isSampledCubeTexture ) {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.Cube;\n\n\t\t\t\t\t\t} else if ( binding.isSampledTexture3D ) {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.ThreeD;\n\n\t\t\t\t\t\t} else if ( binding.texture.isDataArrayTexture || binding.texture.isDepthArrayTexture || binding.texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.TwoDArray;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.TwoD;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresourceGPU = textureData[ propertyName ] = textureData.texture.createView( { aspect: aspectGPU, dimension: dimensionViewGPU, mipLevelCount } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: resourceGPU } );\n\n\t\t\t}\n\n\t\t\tbindingPoint ++;\n\n\t\t}\n\n\t\treturn device.createBindGroup( {\n\t\t\tlabel: 'bindGroup_' + bindGroup.name,\n\t\t\tlayout: layoutGPU,\n\t\t\tentries: entriesGPU\n\t\t} );\n\n\t}\n\n}\n\n/**\n * A WebGPU backend utility module for managing pipelines.\n *\n * @private\n */\nclass WebGPUPipelineUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGPUBackend} backend - The WebGPU backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGPU backend.\n\t\t *\n\t\t * @type {WebGPUBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t}\n\n\t/**\n\t * Returns the sample count derived from the given render context.\n\t *\n\t * @private\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {number} The sample count.\n\t */\n\t_getSampleCount( renderContext ) {\n\n\t\treturn this.backend.utils.getSampleCountRenderContext( renderContext );\n\n\t}\n\n\t/**\n\t * Creates a render pipeline for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n\t */\n\tcreateRenderPipeline( renderObject, promises ) {\n\n\t\tconst { object, material, geometry, pipeline } = renderObject;\n\t\tconst { vertexProgram, fragmentProgram } = pipeline;\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\t\tconst utils = backend.utils;\n\n\t\tconst pipelineData = backend.get( pipeline );\n\n\t\t// bind group layouts\n\n\t\tconst bindGroupLayouts = [];\n\n\t\tfor ( const bindGroup of renderObject.getBindings() ) {\n\n\t\t\tconst bindingsData = backend.get( bindGroup );\n\n\t\t\tbindGroupLayouts.push( bindingsData.layout );\n\n\t\t}\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = backend.attributeUtils.createShaderVertexBuffers( renderObject );\n\n\t\t// blending\n\n\t\tlet blending;\n\n\t\tif ( material.blending !== NoBlending && ( material.blending !== NormalBlending || material.transparent !== false ) ) {\n\n\t\t\tblending = this._getBlending( material );\n\n\t\t}\n\n\t\t// stencil\n\n\t\tlet stencilFront = {};\n\n\t\tif ( material.stencilWrite === true ) {\n\n\t\t\tstencilFront = {\n\t\t\t\tcompare: this._getStencilCompare( material ),\n\t\t\t\tfailOp: this._getStencilOperation( material.stencilFail ),\n\t\t\t\tdepthFailOp: this._getStencilOperation( material.stencilZFail ),\n\t\t\t\tpassOp: this._getStencilOperation( material.stencilZPass )\n\t\t\t};\n\n\t\t}\n\n\t\tconst colorWriteMask = this._getColorWriteMask( material );\n\n\t\tconst targets = [];\n\n\t\tif ( renderObject.context.textures !== null ) {\n\n\t\t\tconst textures = renderObject.context.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst colorFormat = utils.getTextureFormatGPU( textures[ i ] );\n\n\t\t\t\ttargets.push( {\n\t\t\t\t\tformat: colorFormat,\n\t\t\t\t\tblend: blending,\n\t\t\t\t\twriteMask: colorWriteMask\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\n\t\t\ttargets.push( {\n\t\t\t\tformat: colorFormat,\n\t\t\t\tblend: blending,\n\t\t\t\twriteMask: colorWriteMask\n\t\t\t} );\n\n\t\t}\n\n\t\tconst vertexModule = backend.get( vertexProgram ).module;\n\t\tconst fragmentModule = backend.get( fragmentProgram ).module;\n\n\t\tconst primitiveState = this._getPrimitiveState( object, geometry, material );\n\t\tconst depthCompare = this._getDepthCompare( material );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\n\t\tconst sampleCount = this._getSampleCount( renderObject.context );\n\n\t\tconst pipelineDescriptor = {\n\t\t\tlabel: `renderPipeline_${ material.name || material.type }_${ material.id }`,\n\t\t\tvertex: Object.assign( {}, vertexModule, { buffers: vertexBuffers } ),\n\t\t\tfragment: Object.assign( {}, fragmentModule, { targets } ),\n\t\t\tprimitive: primitiveState,\n\t\t\tmultisample: {\n\t\t\t\tcount: sampleCount,\n\t\t\t\talphaToCoverageEnabled: material.alphaToCoverage && sampleCount > 1\n\t\t\t},\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts\n\t\t\t} )\n\t\t};\n\n\n\t\tconst depthStencil = {};\n\t\tconst renderDepth = renderObject.context.depth;\n\t\tconst renderStencil = renderObject.context.stencil;\n\n\t\tif ( renderDepth === true || renderStencil === true ) {\n\n\t\t\tif ( renderDepth === true ) {\n\n\t\t\t\tdepthStencil.format = depthStencilFormat;\n\t\t\t\tdepthStencil.depthWriteEnabled = material.depthWrite;\n\t\t\t\tdepthStencil.depthCompare = depthCompare;\n\n\t\t\t}\n\n\t\t\tif ( renderStencil === true ) {\n\n\t\t\t\tdepthStencil.stencilFront = stencilFront;\n\t\t\t\tdepthStencil.stencilBack = {}; // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n\t\t\t\tdepthStencil.stencilReadMask = material.stencilFuncMask;\n\t\t\t\tdepthStencil.stencilWriteMask = material.stencilWriteMask;\n\n\t\t\t}\n\n\t\t\tif ( material.polygonOffset === true ) {\n\n\t\t\t\tdepthStencil.depthBias = material.polygonOffsetUnits;\n\t\t\t\tdepthStencil.depthBiasSlopeScale = material.polygonOffsetFactor;\n\t\t\t\tdepthStencil.depthBiasClamp = 0; // three.js does not provide an API to configure this value\n\n\t\t\t}\n\n\t\t\tpipelineDescriptor.depthStencil = depthStencil;\n\n\t\t}\n\n\n\t\tif ( promises === null ) {\n\n\t\t\tpipelineData.pipeline = device.createRenderPipeline( pipelineDescriptor );\n\n\t\t} else {\n\n\t\t\tconst p = new Promise( ( resolve /*, reject*/ ) => {\n\n\t\t\t\tdevice.createRenderPipelineAsync( pipelineDescriptor ).then( pipeline => {\n\n\t\t\t\t\tpipelineData.pipeline = pipeline;\n\t\t\t\t\tresolve();\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t\tpromises.push( p );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates GPU render bundle encoder for the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {?string} [label='renderBundleEncoder'] - The label.\n\t * @return {GPURenderBundleEncoder} The GPU render bundle encoder.\n\t */\n\tcreateBundleEncoder( renderContext, label = 'renderBundleEncoder' ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { utils, device } = backend;\n\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderContext );\n\t\tconst colorFormat = utils.getCurrentColorFormat( renderContext );\n\t\tconst sampleCount = this._getSampleCount( renderContext );\n\n\t\tconst descriptor = {\n\t\t\tlabel: label,\n\t\t\tcolorFormats: [ colorFormat ],\n\t\t\tdepthStencilFormat,\n\t\t\tsampleCount\n\t\t};\n\n\t\treturn device.createRenderBundleEncoder( descriptor );\n\n\t}\n\n\t/**\n\t * Creates a compute pipeline for the given compute node.\n\t *\n\t * @param {ComputePipeline} pipeline - The compute pipeline.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t */\n\tcreateComputePipeline( pipeline, bindings ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst computeProgram = backend.get( pipeline.computeProgram ).module;\n\n\t\tconst pipelineGPU = backend.get( pipeline );\n\n\t\t// bind group layouts\n\n\t\tconst bindGroupLayouts = [];\n\n\t\tfor ( const bindingsGroup of bindings ) {\n\n\t\t\tconst bindingsData = backend.get( bindingsGroup );\n\n\t\t\tbindGroupLayouts.push( bindingsData.layout );\n\n\t\t}\n\n\t\tpipelineGPU.pipeline = device.createComputePipeline( {\n\t\t\tcompute: computeProgram,\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts\n\t\t\t} )\n\t\t} );\n\n\t}\n\n\t/**\n\t * Returns the blending state as a descriptor object required\n\t * for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {Object} The blending state.\n\t */\n\t_getBlending( material ) {\n\n\t\tlet color, alpha;\n\n\t\tconst blending = material.blending;\n\t\tconst blendSrc = material.blendSrc;\n\t\tconst blendDst = material.blendDst;\n\t\tconst blendEquation = material.blendEquation;\n\n\n\t\tif ( blending === CustomBlending ) {\n\n\t\t\tconst blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : blendSrc;\n\t\t\tconst blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : blendDst;\n\t\t\tconst blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : blendEquation;\n\n\t\t\tcolor = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrc ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDst ),\n\t\t\t\toperation: this._getBlendOperation( blendEquation )\n\t\t\t};\n\n\t\t\talpha = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrcAlpha ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDstAlpha ),\n\t\t\t\toperation: this._getBlendOperation( blendEquationAlpha )\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst premultipliedAlpha = material.premultipliedAlpha;\n\n\t\t\tconst setBlend = ( srcRGB, dstRGB, srcAlpha, dstAlpha ) => {\n\n\t\t\t\tcolor = {\n\t\t\t\t\tsrcFactor: srcRGB,\n\t\t\t\t\tdstFactor: dstRGB,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t\talpha = {\n\t\t\t\t\tsrcFactor: srcAlpha,\n\t\t\t\t\tdstFactor: dstAlpha,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( color !== undefined && alpha !== undefined ) {\n\n\t\t\treturn { color, alpha };\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid blending: ', blending );\n\n\t\t}\n\n\t}\n\t/**\n\t * Returns the GPU blend factor which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {number} blend - The blend factor as a three.js constant.\n\t * @return {string} The GPU blend factor.\n\t */\n\t_getBlendFactor( blend ) {\n\n\t\tlet blendFactor;\n\n\t\tswitch ( blend ) {\n\n\t\t\tcase ZeroFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase OneFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.One;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Src;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrc;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase DstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Dst;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstColor;\n\t\t\t\tbreak;\n\n\t\t\tcase DstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.DstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaSaturateFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlphaSaturated;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Constant;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusBlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusConstant;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );\n\n\t\t}\n\n\t\treturn blendFactor;\n\n\t}\n\n\t/**\n\t * Returns the GPU stencil compare function which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {string} The GPU stencil compare function.\n\t */\n\t_getStencilCompare( material ) {\n\n\t\tlet stencilCompare;\n\n\t\tconst stencilFunc = material.stencilFunc;\n\n\t\tswitch ( stencilFunc ) {\n\n\t\t\tcase NeverStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Never;\n\t\t\t\tbreak;\n\n\t\t\tcase AlwaysStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Always;\n\t\t\t\tbreak;\n\n\t\t\tcase LessStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Less;\n\t\t\t\tbreak;\n\n\t\t\tcase LessEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.LessEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase EqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Equal;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Greater;\n\t\t\t\tbreak;\n\n\t\t\tcase NotEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.NotEqual;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );\n\n\t\t}\n\n\t\treturn stencilCompare;\n\n\t}\n\n\t/**\n\t * Returns the GPU stencil operation which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {number} op - A three.js constant defining the stencil operation.\n\t * @return {string} The GPU stencil operation.\n\t */\n\t_getStencilOperation( op ) {\n\n\t\tlet stencilOperation;\n\n\t\tswitch ( op ) {\n\n\t\t\tcase KeepStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Keep;\n\t\t\t\tbreak;\n\n\t\t\tcase ZeroStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase ReplaceStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Replace;\n\t\t\t\tbreak;\n\n\t\t\tcase InvertStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Invert;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );\n\n\t\t}\n\n\t\treturn stencilOperation;\n\n\t}\n\n\t/**\n\t * Returns the GPU blend operation which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {number} blendEquation - A three.js constant defining the blend equation.\n\t * @return {string} The GPU blend operation.\n\t */\n\t_getBlendOperation( blendEquation ) {\n\n\t\tlet blendOperation;\n\n\t\tswitch ( blendEquation ) {\n\n\t\t\tcase AddEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Subtract;\n\t\t\t\tbreak;\n\n\t\t\tcase ReverseSubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.ReverseSubtract;\n\t\t\t\tbreak;\n\n\t\t\tcase MinEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Min;\n\t\t\t\tbreak;\n\n\t\t\tcase MaxEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Max;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation );\n\n\t\t}\n\n\t\treturn blendOperation;\n\n\t}\n\n\t/**\n\t * Returns the primitive state as a descriptor object required\n\t * for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Object3D} object - The 3D object.\n\t * @param {BufferGeometry} geometry - The geometry.\n\t * @param {Material} material - The material.\n\t * @return {Object} The primitive state.\n\t */\n\t_getPrimitiveState( object, geometry, material ) {\n\n\t\tconst descriptor = {};\n\t\tconst utils = this.backend.utils;\n\n\t\tdescriptor.topology = utils.getPrimitiveTopology( object, material );\n\n\t\tif ( geometry.index !== null && object.isLine === true && object.isLineSegments !== true ) {\n\n\t\t\tdescriptor.stripIndexFormat = ( geometry.index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\t}\n\n\t\tswitch ( material.side ) {\n\n\t\t\tcase FrontSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Back;\n\t\t\t\tbreak;\n\n\t\t\tcase BackSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Front;\n\t\t\t\tbreak;\n\n\t\t\tcase DoubleSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.None;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t/**\n\t * Returns the GPU color write mask which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {string} The GPU color write mask.\n\t */\n\t_getColorWriteMask( material ) {\n\n\t\treturn ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n\n\t}\n\n\t/**\n\t * Returns the GPU depth compare function which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {string} The GPU depth compare function.\n\t */\n\t_getDepthCompare( material ) {\n\n\t\tlet depthCompare;\n\n\t\tif ( material.depthTest === false ) {\n\n\t\t\tdepthCompare = GPUCompareFunction.Always;\n\n\t\t} else {\n\n\t\t\tconst depthFunc = material.depthFunc;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Never;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Always;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Less;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.LessEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Equal;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Greater;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.NotEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn depthCompare;\n\n\t}\n\n}\n\n/**\n * Manages a pool of WebGPU timestamp queries for performance measurement.\n * Extends the base TimestampQueryPool to provide WebGPU-specific implementation.\n *\n * @augments TimestampQueryPool\n */\nclass WebGPUTimestampQueryPool extends TimestampQueryPool {\n\n\t/**\n\t * Creates a new WebGPU timestamp query pool.\n\t *\n\t * @param {GPUDevice} device - The WebGPU device to create queries on.\n\t * @param {string} type - The type identifier for this query pool.\n\t * @param {number} [maxQueries=2048] - Maximum number of queries this pool can hold.\n\t */\n\tconstructor( device, type, maxQueries = 2048 ) {\n\n\t\tsuper( maxQueries );\n\t\tthis.device = device;\n\t\tthis.type = type;\n\n\t\tthis.querySet = this.device.createQuerySet( {\n\t\t\ttype: 'timestamp',\n\t\t\tcount: this.maxQueries,\n\t\t\tlabel: `queryset_global_timestamp_${type}`\n\t\t} );\n\n\t\tconst bufferSize = this.maxQueries * 8;\n\t\tthis.resolveBuffer = this.device.createBuffer( {\n\t\t\tlabel: `buffer_timestamp_resolve_${type}`,\n\t\t\tsize: bufferSize,\n\t\t\tusage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC\n\t\t} );\n\n\t\tthis.resultBuffer = this.device.createBuffer( {\n\t\t\tlabel: `buffer_timestamp_result_${type}`,\n\t\t\tsize: bufferSize,\n\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t} );\n\n\t}\n\n\t/**\n\t * Allocates a pair of queries for a given render context.\n\t *\n\t * @param {Object} renderContext - The render context to allocate queries for.\n\t * @returns {?number} The base offset for the allocated queries, or null if allocation failed.\n\t */\n\tallocateQueriesForContext( renderContext ) {\n\n\t\tif ( ! this.trackTimestamp || this.isDisposed ) return null;\n\n\t\tif ( this.currentQueryIndex + 2 > this.maxQueries ) {\n\n\t\t\twarnOnce( `WebGPUTimestampQueryPool [${ this.type }]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${ this.type.toUpperCase() } ).` );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst baseOffset = this.currentQueryIndex;\n\t\tthis.currentQueryIndex += 2;\n\n\t\tthis.queryOffsets.set( renderContext.id, baseOffset );\n\t\treturn baseOffset;\n\n\t}\n\n\t/**\n\t * Asynchronously resolves all pending queries and returns the total duration.\n\t * If there's already a pending resolve operation, returns that promise instead.\n\t *\n\t * @async\n\t * @returns {Promise<number>} The total duration in milliseconds, or the last valid value if resolution fails.\n\t */\n\tasync resolveQueriesAsync() {\n\n\t\tif ( ! this.trackTimestamp || this.currentQueryIndex === 0 || this.isDisposed ) {\n\n\t\t\treturn this.lastValue;\n\n\t\t}\n\n\t\tif ( this.pendingResolve ) {\n\n\t\t\treturn this.pendingResolve;\n\n\t\t}\n\n\t\tthis.pendingResolve = this._resolveQueries();\n\n\t\ttry {\n\n\t\t\tconst result = await this.pendingResolve;\n\t\t\treturn result;\n\n\t\t} finally {\n\n\t\t\tthis.pendingResolve = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Internal method to resolve queries and calculate total duration.\n\t *\n\t * @async\n\t * @private\n\t * @returns {Promise<number>} The total duration in milliseconds.\n\t */\n\tasync _resolveQueries() {\n\n\t\tif ( this.isDisposed ) {\n\n\t\t\treturn this.lastValue;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tif ( this.resultBuffer.mapState !== 'unmapped' ) {\n\n\t\t\t\treturn this.lastValue;\n\n\t\t\t}\n\n\t\t\tconst currentOffsets = new Map( this.queryOffsets );\n\t\t\tconst queryCount = this.currentQueryIndex;\n\t\t\tconst bytesUsed = queryCount * 8;\n\n\t\t\t// Reset state before GPU work\n\t\t\tthis.currentQueryIndex = 0;\n\t\t\tthis.queryOffsets.clear();\n\n\t\t\tconst commandEncoder = this.device.createCommandEncoder();\n\n\t\t\tcommandEncoder.resolveQuerySet(\n\t\t\t\tthis.querySet,\n\t\t\t\t0,\n\t\t\t\tqueryCount,\n\t\t\t\tthis.resolveBuffer,\n\t\t\t\t0\n\t\t\t);\n\n\t\t\tcommandEncoder.copyBufferToBuffer(\n\t\t\t\tthis.resolveBuffer,\n\t\t\t\t0,\n\t\t\t\tthis.resultBuffer,\n\t\t\t\t0,\n\t\t\t\tbytesUsed\n\t\t\t);\n\n\t\t\tconst commandBuffer = commandEncoder.finish();\n\t\t\tthis.device.queue.submit( [ commandBuffer ] );\n\n\t\t\tif ( this.resultBuffer.mapState !== 'unmapped' ) {\n\n\t\t\t\treturn this.lastValue;\n\n\t\t\t}\n\n\t\t\t// Create and track the mapping operation\n\t\t\tawait this.resultBuffer.mapAsync( GPUMapMode.READ, 0, bytesUsed );\n\n\t\t\tif ( this.isDisposed ) {\n\n\t\t\t\tif ( this.resultBuffer.mapState === 'mapped' ) {\n\n\t\t\t\t\tthis.resultBuffer.unmap();\n\n\t\t\t\t}\n\n\t\t\t\treturn this.lastValue;\n\n\t\t\t}\n\n\t\t\tconst times = new BigUint64Array( this.resultBuffer.getMappedRange( 0, bytesUsed ) );\n\t\t\tlet totalDuration = 0;\n\n\t\t\tfor ( const [ , baseOffset ] of currentOffsets ) {\n\n\t\t\t\tconst startTime = times[ baseOffset ];\n\t\t\t\tconst endTime = times[ baseOffset + 1 ];\n\t\t\t\tconst duration = Number( endTime - startTime ) / 1e6;\n\t\t\t\ttotalDuration += duration;\n\n\t\t\t}\n\n\t\t\tthis.resultBuffer.unmap();\n\t\t\tthis.lastValue = totalDuration;\n\n\t\t\treturn totalDuration;\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'Error resolving queries:', error );\n\t\t\tif ( this.resultBuffer.mapState === 'mapped' ) {\n\n\t\t\t\tthis.resultBuffer.unmap();\n\n\t\t\t}\n\n\t\t\treturn this.lastValue;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Dispose of the query pool.\n\t *\n\t * @async\n\t * @returns {Promise} A Promise that resolves when the dispose has been executed.\n\t */\n\tasync dispose() {\n\n\t\tif ( this.isDisposed ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.isDisposed = true;\n\n\t\t// Wait for pending resolve operation\n\t\tif ( this.pendingResolve ) {\n\n\t\t\ttry {\n\n\t\t\t\tawait this.pendingResolve;\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'Error waiting for pending resolve:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Ensure buffer is unmapped before destroying\n\t\tif ( this.resultBuffer && this.resultBuffer.mapState === 'mapped' ) {\n\n\t\t\ttry {\n\n\t\t\t\tthis.resultBuffer.unmap();\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'Error unmapping buffer:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Destroy resources\n\t\tif ( this.querySet ) {\n\n\t\t\tthis.querySet.destroy();\n\t\t\tthis.querySet = null;\n\n\t\t}\n\n\t\tif ( this.resolveBuffer ) {\n\n\t\t\tthis.resolveBuffer.destroy();\n\t\t\tthis.resolveBuffer = null;\n\n\t\t}\n\n\t\tif ( this.resultBuffer ) {\n\n\t\t\tthis.resultBuffer.destroy();\n\t\t\tthis.resultBuffer = null;\n\n\t\t}\n\n\t\tthis.queryOffsets.clear();\n\t\tthis.pendingResolve = null;\n\n\t}\n\n}\n\n/*// debugger tools\nimport 'https://greggman.github.io/webgpu-avoid-redundant-state-setting/webgpu-check-redundant-state-setting.js';\n//*/\n\n\n/**\n * A backend implementation targeting WebGPU.\n *\n * @private\n * @augments Backend\n */\nclass WebGPUBackend extends Backend {\n\n\t/**\n\t * WebGPUBackend options.\n\t *\n\t * @typedef {Object} WebGPUBackend~Options\n\t * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n\t * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n\t * @property {boolean} [compatibilityMode=false] - Whether the backend should be in compatibility mode or not.\n\t * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.\n\t * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n\t * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n\t * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.\n\t * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.\n\t * @property {boolean} [trackTimestamp=false] - Whether to track timestamps with a Timestamp Query API or not.\n\t * @property {string} [powerPreference=undefined] - The power preference.\n\t * @property {Object} [requiredLimits=undefined] - Specifies the limits that are required by the device request. The request will fail if the adapter cannot provide these limits.\n\t * @property {GPUDevice} [device=undefined] - If there is an existing GPU device on app level, it can be passed to the renderer as a parameter.\n\t * @property {number} [outputType=undefined] - Texture type for output to canvas. By default, device's preferred format is used; other formats may incur overhead.\n\t */\n\n\t/**\n\t * Constructs a new WebGPU backend.\n\t *\n\t * @param {WebGPUBackend~Options} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGPUBackend = true;\n\n\t\t// some parameters require default values other than \"undefined\"\n\t\tthis.parameters.alpha = ( parameters.alpha === undefined ) ? true : parameters.alpha;\n\t\tthis.parameters.compatibilityMode = ( parameters.compatibilityMode === undefined ) ? false : parameters.compatibilityMode;\n\n\t\tthis.parameters.requiredLimits = ( parameters.requiredLimits === undefined ) ? {} : parameters.requiredLimits;\n\n\t\t/**\n\t\t * Indicates whether the backend is in compatibility mode or not.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.compatibilityMode = this.parameters.compatibilityMode;\n\n\t\t/**\n\t\t * A reference to the device.\n\t\t *\n\t\t * @type {?GPUDevice}\n\t\t * @default null\n\t\t */\n\t\tthis.device = null;\n\n\t\t/**\n\t\t * A reference to the context.\n\t\t *\n\t\t * @type {?GPUCanvasContext}\n\t\t * @default null\n\t\t */\n\t\tthis.context = null;\n\n\t\t/**\n\t\t * A reference to the color attachment of the default framebuffer.\n\t\t *\n\t\t * @type {?GPUTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.colorBuffer = null;\n\n\t\t/**\n\t\t * A reference to the default render pass descriptor.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.defaultRenderPassdescriptor = null;\n\n\t\t/**\n\t\t * A reference to a backend module holding common utility functions.\n\t\t *\n\t\t * @type {WebGPUUtils}\n\t\t */\n\t\tthis.utils = new WebGPUUtils( this );\n\n\t\t/**\n\t\t * A reference to a backend module holding shader attribute-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {WebGPUAttributeUtils}\n\t\t */\n\t\tthis.attributeUtils = new WebGPUAttributeUtils( this );\n\n\t\t/**\n\t\t * A reference to a backend module holding shader binding-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {WebGPUBindingUtils}\n\t\t */\n\t\tthis.bindingUtils = new WebGPUBindingUtils( this );\n\n\t\t/**\n\t\t * A reference to a backend module holding shader pipeline-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {WebGPUPipelineUtils}\n\t\t */\n\t\tthis.pipelineUtils = new WebGPUPipelineUtils( this );\n\n\t\t/**\n\t\t * A reference to a backend module holding shader texture-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {WebGPUTextureUtils}\n\t\t */\n\t\tthis.textureUtils = new WebGPUTextureUtils( this );\n\n\t\t/**\n\t\t * A map that manages the resolve buffers for occlusion queries.\n\t\t *\n\t\t * @type {Map<number,GPUBuffer>}\n\t\t */\n\t\tthis.occludedResolveCache = new Map();\n\n\t}\n\n\t/**\n\t * Initializes the backend so it is ready for usage.\n\t *\n\t * @async\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {Promise} A Promise that resolves when the backend has been initialized.\n\t */\n\tasync init( renderer ) {\n\n\t\tawait super.init( renderer );\n\n\t\t//\n\n\t\tconst parameters = this.parameters;\n\n\t\t// create the device if it is not passed with parameters\n\n\t\tlet device;\n\n\t\tif ( parameters.device === undefined ) {\n\n\t\t\tconst adapterOptions = {\n\t\t\t\tpowerPreference: parameters.powerPreference,\n\t\t\t\tfeatureLevel: parameters.compatibilityMode ? 'compatibility' : undefined\n\t\t\t};\n\n\t\t\tconst adapter = ( typeof navigator !== 'undefined' ) ? await navigator.gpu.requestAdapter( adapterOptions ) : null;\n\n\t\t\tif ( adapter === null ) {\n\n\t\t\t\tthrow new Error( 'WebGPUBackend: Unable to create WebGPU adapter.' );\n\n\t\t\t}\n\n\t\t\t// feature support\n\n\t\t\tconst features = Object.values( GPUFeatureName );\n\n\t\t\tconst supportedFeatures = [];\n\n\t\t\tfor ( const name of features ) {\n\n\t\t\t\tif ( adapter.features.has( name ) ) {\n\n\t\t\t\t\tsupportedFeatures.push( name );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst deviceDescriptor = {\n\t\t\t\trequiredFeatures: supportedFeatures,\n\t\t\t\trequiredLimits: parameters.requiredLimits\n\t\t\t};\n\n\t\t\tdevice = await adapter.requestDevice( deviceDescriptor );\n\n\t\t} else {\n\n\t\t\tdevice = parameters.device;\n\n\t\t}\n\n\t\tdevice.lost.then( ( info ) => {\n\n\t\t\tconst deviceLossInfo = {\n\t\t\t\tapi: 'WebGPU',\n\t\t\t\tmessage: info.message || 'Unknown reason',\n\t\t\t\treason: info.reason || null,\n\t\t\t\toriginalEvent: info\n\t\t\t};\n\n\t\t\trenderer.onDeviceLost( deviceLossInfo );\n\n\t\t} );\n\n\t\tconst context = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgpu' );\n\n\t\tthis.device = device;\n\t\tthis.context = context;\n\n\t\tconst alphaMode = parameters.alpha ? 'premultiplied' : 'opaque';\n\n\t\tthis.trackTimestamp = this.trackTimestamp && this.hasFeature( GPUFeatureName.TimestampQuery );\n\n\t\tthis.context.configure( {\n\t\t\tdevice: this.device,\n\t\t\tformat: this.utils.getPreferredCanvasFormat(),\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n\t\t\talphaMode: alphaMode\n\t\t} );\n\n\t\tthis.updateSize();\n\n\t}\n\n\t/**\n\t * The coordinate system of the backend.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget coordinateSystem() {\n\n\t\treturn WebGPUCoordinateSystem;\n\n\t}\n\n\t/**\n\t * This method performs a readback operation by moving buffer data from\n\t * a storage buffer attribute from the GPU to the CPU.\n\t *\n\t * @async\n\t * @param {StorageBufferAttribute} attribute - The storage buffer attribute.\n\t * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.\n\t */\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.attributeUtils.getArrayBufferAsync( attribute );\n\n\t}\n\n\t/**\n\t * Returns the backend's rendering context.\n\t *\n\t * @return {GPUCanvasContext} The rendering context.\n\t */\n\tgetContext() {\n\n\t\treturn this.context;\n\n\t}\n\n\t/**\n\t * Returns the default render pass descriptor.\n\t *\n\t * In WebGPU, the default framebuffer must be configured\n\t * like custom framebuffers so the backend needs a render\n\t * pass descriptor even when rendering directly to screen.\n\t *\n\t * @private\n\t * @return {Object} The render pass descriptor.\n\t */\n\t_getDefaultRenderPassDescriptor() {\n\n\t\tlet descriptor = this.defaultRenderPassdescriptor;\n\n\t\tif ( descriptor === null ) {\n\n\t\t\tconst renderer = this.renderer;\n\n\t\t\tdescriptor = {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: null\n\t\t\t\t} ],\n\t\t\t};\n\n\t\t\tif ( this.renderer.depth === true || this.renderer.stencil === true ) {\n\n\t\t\t\tdescriptor.depthStencilAttachment = {\n\t\t\t\t\tview: this.textureUtils.getDepthBuffer( renderer.depth, renderer.stencil ).createView()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tconst colorAttachment = descriptor.colorAttachments[ 0 ];\n\n\t\t\tif ( this.renderer.samples > 0 ) {\n\n\t\t\t\tcolorAttachment.view = this.colorBuffer.createView();\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.resolveTarget = undefined;\n\n\t\t\t}\n\n\t\t\tthis.defaultRenderPassdescriptor = descriptor;\n\n\t\t}\n\n\t\tconst colorAttachment = descriptor.colorAttachments[ 0 ];\n\n\t\tif ( this.renderer.samples > 0 ) {\n\n\t\t\tcolorAttachment.resolveTarget = this.context.getCurrentTexture().createView();\n\n\t\t} else {\n\n\t\t\tcolorAttachment.view = this.context.getCurrentTexture().createView();\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t/**\n\t * Internal to determine if the current render target is a render target array with depth 2D array texture.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {boolean} Whether the render target is a render target array with depth 2D array texture.\n\t *\n\t * @private\n\t */\n\t_isRenderCameraDepthArray( renderContext ) {\n\n\t\treturn renderContext.depthTexture && renderContext.depthTexture.isDepthArrayTexture && renderContext.camera.isArrayCamera;\n\n\t}\n\n\t/**\n\t * Returns the render pass descriptor for the given render context.\n\t *\n\t * @private\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Object} colorAttachmentsConfig - Configuration object for the color attachments.\n\t * @return {Object} The render pass descriptor.\n\t */\n\t_getRenderPassDescriptor( renderContext, colorAttachmentsConfig = {} ) {\n\n\t\tconst renderTarget = renderContext.renderTarget;\n\t\tconst renderTargetData = this.get( renderTarget );\n\n\t\tlet descriptors = renderTargetData.descriptors;\n\n\t\tif ( descriptors === undefined ||\n\t\t\trenderTargetData.width !== renderTarget.width ||\n\t\t\trenderTargetData.height !== renderTarget.height ||\n\t\t\trenderTargetData.dimensions !== renderTarget.dimensions ||\n\t\t\trenderTargetData.activeMipmapLevel !== renderContext.activeMipmapLevel ||\n\t\t\trenderTargetData.activeCubeFace !== renderContext.activeCubeFace ||\n\t\t\trenderTargetData.samples !== renderTarget.samples\n\t\t) {\n\n\t\t\tdescriptors = {};\n\n\t\t\trenderTargetData.descriptors = descriptors;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onDispose );\n\t\t\t\tthis.delete( renderTarget );\n\n\t\t\t};\n\n\t\t\tif ( renderTarget.hasEventListener( 'dispose', onDispose ) === false ) {\n\n\t\t\t\trenderTarget.addEventListener( 'dispose', onDispose );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst cacheKey = renderContext.getCacheKey();\n\t\tlet descriptorBase = descriptors[ cacheKey ];\n\n\t\tif ( descriptorBase === undefined ) {\n\n\t\t\tconst textures = renderContext.textures;\n\t\t\tconst textureViews = [];\n\n\t\t\tlet sliceIndex;\n\n\t\t\tconst isRenderCameraDepthArray = this._isRenderCameraDepthArray( renderContext );\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst textureData = this.get( textures[ i ] );\n\n\t\t\t\tconst viewDescriptor = {\n\t\t\t\t\tlabel: `colorAttachment_${ i }`,\n\t\t\t\t\tbaseMipLevel: renderContext.activeMipmapLevel,\n\t\t\t\t\tmipLevelCount: 1,\n\t\t\t\t\tbaseArrayLayer: renderContext.activeCubeFace,\n\t\t\t\t\tarrayLayerCount: 1,\n\t\t\t\t\tdimension: GPUTextureViewDimension.TwoD\n\t\t\t\t};\n\n\t\t\t\tif ( renderTarget.isRenderTarget3D ) {\n\n\t\t\t\t\tsliceIndex = renderContext.activeCubeFace;\n\n\t\t\t\t\tviewDescriptor.baseArrayLayer = 0;\n\t\t\t\t\tviewDescriptor.dimension = GPUTextureViewDimension.ThreeD;\n\t\t\t\t\tviewDescriptor.depthOrArrayLayers = textures[ i ].image.depth;\n\n\t\t\t\t} else if ( renderTarget.isRenderTargetArray ) {\n\n\t\t\t\t\tif ( isRenderCameraDepthArray === true ) {\n\n\t\t\t\t\t\tconst cameras = renderContext.camera.cameras;\n\t\t\t\t\t\tfor ( let layer = 0; layer < cameras.length; layer ++ ) {\n\n\t\t\t\t\t\t\tconst layerViewDescriptor = {\n\t\t\t\t\t\t\t\t...viewDescriptor,\n\t\t\t\t\t\t\t\tbaseArrayLayer: layer,\n\t\t\t\t\t\t\t\tarrayLayerCount: 1,\n\t\t\t\t\t\t\t\tdimension: GPUTextureViewDimension.TwoD\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tconst textureView = textureData.texture.createView( layerViewDescriptor );\n\t\t\t\t\t\t\ttextureViews.push( {\n\t\t\t\t\t\t\t\tview: textureView,\n\t\t\t\t\t\t\t\tresolveTarget: undefined,\n\t\t\t\t\t\t\t\tdepthSlice: undefined\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tviewDescriptor.dimension = GPUTextureViewDimension.TwoDArray;\n\t\t\t\t\t\tviewDescriptor.depthOrArrayLayers = textures[ i ].image.depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( isRenderCameraDepthArray !== true ) {\n\n\t\t\t\t\tconst textureView = textureData.texture.createView( viewDescriptor );\n\n\t\t\t\t\tlet view, resolveTarget;\n\n\t\t\t\t\tif ( textureData.msaaTexture !== undefined ) {\n\n\t\t\t\t\t\tview = textureData.msaaTexture.createView();\n\t\t\t\t\t\tresolveTarget = textureView;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tview = textureView;\n\t\t\t\t\t\tresolveTarget = undefined;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureViews.push( {\n\t\t\t\t\t\tview,\n\t\t\t\t\t\tresolveTarget,\n\t\t\t\t\t\tdepthSlice: sliceIndex\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdescriptorBase = { textureViews };\n\n\t\t\tif ( renderContext.depth ) {\n\n\t\t\t\tconst depthTextureData = this.get( renderContext.depthTexture );\n\t\t\t\tconst options = {};\n\t\t\t\tif ( renderContext.depthTexture.isDepthArrayTexture ) {\n\n\t\t\t\t\toptions.dimension = GPUTextureViewDimension.TwoD;\n\t\t\t\t\toptions.arrayLayerCount = 1;\n\t\t\t\t\toptions.baseArrayLayer = renderContext.activeCubeFace;\n\n\t\t\t\t}\n\n\t\t\t\tdescriptorBase.depthStencilView = depthTextureData.texture.createView( options );\n\n\t\t\t}\n\n\t\t\tdescriptors[ cacheKey ] = descriptorBase;\n\n\t\t\trenderTargetData.width = renderTarget.width;\n\t\t\trenderTargetData.height = renderTarget.height;\n\t\t\trenderTargetData.samples = renderTarget.samples;\n\t\t\trenderTargetData.activeMipmapLevel = renderContext.activeMipmapLevel;\n\t\t\trenderTargetData.activeCubeFace = renderContext.activeCubeFace;\n\t\t\trenderTargetData.dimensions = renderTarget.dimensions;\n\n\t\t}\n\n\t\tconst descriptor = {\n\t\t\tcolorAttachments: []\n\t\t};\n\n\t\t// Apply dynamic properties to cached views\n\t\tfor ( let i = 0; i < descriptorBase.textureViews.length; i ++ ) {\n\n\t\t\tconst viewInfo = descriptorBase.textureViews[ i ];\n\n\t\t\tlet clearValue = { r: 0, g: 0, b: 0, a: 1 };\n\t\t\tif ( i === 0 && colorAttachmentsConfig.clearValue ) {\n\n\t\t\t\tclearValue = colorAttachmentsConfig.clearValue;\n\n\t\t\t}\n\n\t\t\tdescriptor.colorAttachments.push( {\n\t\t\t\tview: viewInfo.view,\n\t\t\t\tdepthSlice: viewInfo.depthSlice,\n\t\t\t\tresolveTarget: viewInfo.resolveTarget,\n\t\t\t\tloadOp: colorAttachmentsConfig.loadOp || GPULoadOp.Load,\n\t\t\t\tstoreOp: colorAttachmentsConfig.storeOp || GPUStoreOp.Store,\n\t\t\t\tclearValue: clearValue\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( descriptorBase.depthStencilView ) {\n\n\t\t\tdescriptor.depthStencilAttachment = {\n\t\t\t\tview: descriptorBase.depthStencilView\n\t\t\t};\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t/**\n\t * This method is executed at the beginning of a render call and prepares\n\t * the WebGPU state for upcoming render calls\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tbeginRender( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tconst device = this.device;\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tlet occlusionQuerySet;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tif ( renderContextData.currentOcclusionQuerySet ) renderContextData.currentOcclusionQuerySet.destroy();\n\t\t\tif ( renderContextData.currentOcclusionQueryBuffer ) renderContextData.currentOcclusionQueryBuffer.destroy();\n\n\t\t\t// Get a reference to the array of objects with queries. The renderContextData property\n\t\t\t// can be changed by another render pass before the buffer.mapAsyc() completes.\n\t\t\trenderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;\n\t\t\trenderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;\n\t\t\trenderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n\n\t\t\t//\n\n\t\t\tocclusionQuerySet = device.createQuerySet( { type: 'occlusion', count: occlusionQueryCount, label: `occlusionQuerySet_${ renderContext.id }` } );\n\n\t\t\trenderContextData.occlusionQuerySet = occlusionQuerySet;\n\t\t\trenderContextData.occlusionQueryIndex = 0;\n\t\t\trenderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );\n\n\t\t\trenderContextData.lastOcclusionObject = null;\n\n\t\t}\n\n\t\tlet descriptor;\n\n\t\tif ( renderContext.textures === null ) {\n\n\t\t\tdescriptor = this._getDefaultRenderPassDescriptor();\n\n\t\t} else {\n\n\t\t\tdescriptor = this._getRenderPassDescriptor( renderContext, { loadOp: GPULoadOp.Load } );\n\n\t\t}\n\n\t\tthis.initTimestampQuery( renderContext, descriptor );\n\n\t\tdescriptor.occlusionQuerySet = occlusionQuerySet;\n\n\t\tconst depthStencilAttachment = descriptor.depthStencilAttachment;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst colorAttachments = descriptor.colorAttachments;\n\n\t\t\tfor ( let i = 0; i < colorAttachments.length; i ++ ) {\n\n\t\t\t\tconst colorAttachment = colorAttachments[ i ];\n\n\t\t\t\tif ( renderContext.clearColor ) {\n\n\t\t\t\t\tcolorAttachment.clearValue = i === 0 ? renderContext.clearColorValue : { r: 0, g: 0, b: 0, a: 1 };\n\t\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\n\t\t\t\t}\n\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst colorAttachment = descriptor.colorAttachments[ 0 ];\n\n\t\t\tif ( renderContext.clearColor ) {\n\n\t\t\t\tcolorAttachment.clearValue = renderContext.clearColorValue;\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\n\t\t\t}\n\n\t\t  \tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderContext.depth ) {\n\n\t\t\tif ( renderContext.clearDepth ) {\n\n\t\t\t\tdepthStencilAttachment.depthClearValue = renderContext.clearDepthValue;\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\n\t\t\t}\n\n\t\t  depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t}\n\n\t\tif ( renderContext.stencil ) {\n\n\t\t  if ( renderContext.clearStencil ) {\n\n\t\t\t\tdepthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\n\t\t\t}\n\n\t\t  depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t}\n\n\t\t//\n\n\t\tconst encoder = device.createCommandEncoder( { label: 'renderContext_' + renderContext.id } );\n\n\t\t// shadow arrays - prepare bundle encoders for each camera in an array camera\n\n\t\tif ( this._isRenderCameraDepthArray( renderContext ) === true ) {\n\n\t\t\tconst cameras = renderContext.camera.cameras;\n\n\t\t\tif ( ! renderContextData.layerDescriptors || renderContextData.layerDescriptors.length !== cameras.length ) {\n\n\t\t\t\tthis._createDepthLayerDescriptors( renderContext, renderContextData, descriptor, cameras );\n\n\t\t\t} else {\n\n\t\t\t\tthis._updateDepthLayerDescriptors( renderContext, renderContextData, cameras );\n\n\t\t\t}\n\n\t\t\t// Create bundle encoders for each layer\n\t\t\trenderContextData.bundleEncoders = [];\n\t\t\trenderContextData.bundleSets = [];\n\n\t\t\t// Create separate bundle encoders for each camera in the array\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tconst bundleEncoder = this.pipelineUtils.createBundleEncoder(\n\t\t\t\t\trenderContext,\n\t\t\t\t\t'renderBundleArrayCamera_' + i\n\t\t\t\t);\n\n\t\t\t\t// Initialize state tracking for this bundle\n\t\t\t\tconst bundleSets = {\n\t\t\t\t\tattributes: {},\n\t\t\t\t\tbindingGroups: [],\n\t\t\t\t\tpipeline: null,\n\t\t\t\t\tindex: null\n\t\t\t\t};\n\n\t\t\t\trenderContextData.bundleEncoders.push( bundleEncoder );\n\t\t\t\trenderContextData.bundleSets.push( bundleSets );\n\n\t\t\t}\n\n\t\t\t// We'll complete the bundles in finishRender\n\t\t\trenderContextData.currentPass = null;\n\n\t\t} else {\n\n\t\t\tconst currentPass = encoder.beginRenderPass( descriptor );\n\t\t\trenderContextData.currentPass = currentPass;\n\n\t\t\tif ( renderContext.viewport ) {\n\n\t\t\t\tthis.updateViewport( renderContext );\n\n\t\t\t}\n\n\t\t\tif ( renderContext.scissor ) {\n\n\t\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\t\t\t\tcurrentPass.setScissorRect( x, y, width, height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\trenderContextData.descriptor = descriptor;\n\t\trenderContextData.encoder = encoder;\n\t\trenderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };\n\t\trenderContextData.renderBundles = [];\n\n\t}\n\n\t/**\n\t * This method creates layer descriptors for each camera in an array camera\n\t * to prepare for rendering to a depth array texture.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Object} renderContextData - The render context data.\n\t * @param {Object} descriptor  - The render pass descriptor.\n\t * @param {ArrayCamera} cameras - The array camera.\n\t *\n\t * @private\n\t */\n\t_createDepthLayerDescriptors( renderContext, renderContextData, descriptor, cameras ) {\n\n\t\tconst depthStencilAttachment = descriptor.depthStencilAttachment;\n\t\trenderContextData.layerDescriptors = [];\n\n\t\tconst depthTextureData = this.get( renderContext.depthTexture );\n\t\tif ( ! depthTextureData.viewCache ) {\n\n\t\t\tdepthTextureData.viewCache = [];\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tconst layerDescriptor = {\n\t\t\t\t...descriptor,\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\t...descriptor.colorAttachments[ 0 ],\n\t\t\t\t\tview: descriptor.colorAttachments[ i ].view\n\t\t\t\t} ]\n\t\t\t};\n\n\t\t\tif ( descriptor.depthStencilAttachment ) {\n\n\t\t\t\tconst layerIndex = i;\n\n\t\t\t\tif ( ! depthTextureData.viewCache[ layerIndex ] ) {\n\n\t\t\t\t\tdepthTextureData.viewCache[ layerIndex ] = depthTextureData.texture.createView( {\n\t\t\t\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\t\t\t\tbaseArrayLayer: i,\n\t\t\t\t\t\tarrayLayerCount: 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tlayerDescriptor.depthStencilAttachment = {\n\t\t\t\t\tview: depthTextureData.viewCache[ layerIndex ],\n\t\t\t\t\tdepthLoadOp: depthStencilAttachment.depthLoadOp || GPULoadOp.Clear,\n\t\t\t\t\tdepthStoreOp: depthStencilAttachment.depthStoreOp || GPUStoreOp.Store,\n\t\t\t\t\tdepthClearValue: depthStencilAttachment.depthClearValue || 1.0\n\t\t\t\t};\n\n\t\t\t\tif ( renderContext.stencil ) {\n\n\t\t\t\t\tlayerDescriptor.depthStencilAttachment.stencilLoadOp = depthStencilAttachment.stencilLoadOp;\n\t\t\t\t\tlayerDescriptor.depthStencilAttachment.stencilStoreOp = depthStencilAttachment.stencilStoreOp;\n\t\t\t\t\tlayerDescriptor.depthStencilAttachment.stencilClearValue = depthStencilAttachment.stencilClearValue;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tlayerDescriptor.depthStencilAttachment = { ...depthStencilAttachment };\n\n\t\t\t}\n\n\t\t\trenderContextData.layerDescriptors.push( layerDescriptor );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method updates the layer descriptors for each camera in an array camera\n\t * to prepare for rendering to a depth array texture.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Object} renderContextData - The render context data.\n\t * @param {ArrayCamera} cameras - The array camera.\n\t *\n\t */\n\t_updateDepthLayerDescriptors( renderContext, renderContextData, cameras ) {\n\n\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tconst layerDescriptor = renderContextData.layerDescriptors[ i ];\n\n\t\t\tif ( layerDescriptor.depthStencilAttachment ) {\n\n\t\t\t\tconst depthAttachment = layerDescriptor.depthStencilAttachment;\n\n\t\t\t\tif ( renderContext.depth ) {\n\n\t\t\t\t\tif ( renderContext.clearDepth ) {\n\n\t\t\t\t\t\tdepthAttachment.depthClearValue = renderContext.clearDepthValue;\n\t\t\t\t\t\tdepthAttachment.depthLoadOp = GPULoadOp.Clear;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdepthAttachment.depthLoadOp = GPULoadOp.Load;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderContext.stencil ) {\n\n\t\t\t\t\tif ( renderContext.clearStencil ) {\n\n\t\t\t\t\t\tdepthAttachment.stencilClearValue = renderContext.clearStencilValue;\n\t\t\t\t\t\tdepthAttachment.stencilLoadOp = GPULoadOp.Clear;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdepthAttachment.stencilLoadOp = GPULoadOp.Load;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is executed at the end of a render call and finalizes work\n\t * after draw calls.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tfinishRender( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( renderContextData.renderBundles.length > 0 ) {\n\n\t\t\trenderContextData.currentPass.executeBundles( renderContextData.renderBundles );\n\n\t\t}\n\n\t\tif ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {\n\n\t\t\trenderContextData.currentPass.endOcclusionQuery();\n\n\t\t}\n\n\t\t// shadow arrays - Execute bundles for each layer\n\n\t\tconst encoder = renderContextData.encoder;\n\n\t\tif ( this._isRenderCameraDepthArray( renderContext ) === true ) {\n\n\t\t  const bundles = [];\n\n\t\t  for ( let i = 0; i < renderContextData.bundleEncoders.length; i ++ ) {\n\n\t\t\t\tconst bundleEncoder = renderContextData.bundleEncoders[ i ];\n\t\t\t\tbundles.push( bundleEncoder.finish() );\n\n\t\t\t}\n\n\t\t  for ( let i = 0; i < renderContextData.layerDescriptors.length; i ++ ) {\n\n\t\t\t\tif ( i < bundles.length ) {\n\n\t\t\t\t\tconst layerDescriptor = renderContextData.layerDescriptors[ i ];\n\t\t\t\t\tconst renderPass = encoder.beginRenderPass( layerDescriptor );\n\n\t\t\t\t\tif ( renderContext.viewport ) {\n\n\t\t\t\t\t\tconst { x, y, width, height, minDepth, maxDepth } = renderContext.viewportValue;\n\t\t\t\t\t\trenderPass.setViewport( x, y, width, height, minDepth, maxDepth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( renderContext.scissor ) {\n\n\t\t\t\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\t\t\t\t\t\trenderPass.setScissorRect( x, y, width, height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderPass.executeBundles( [ bundles[ i ] ] );\n\n\t\t\t\t\trenderPass.end();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( renderContextData.currentPass ) {\n\n\t\t  renderContextData.currentPass.end();\n\n\t\t}\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tconst bufferSize = occlusionQueryCount * 8; // 8 byte entries for query results\n\n\t\t\t//\n\n\t\t\tlet queryResolveBuffer = this.occludedResolveCache.get( bufferSize );\n\n\t\t\tif ( queryResolveBuffer === undefined ) {\n\n\t\t\t\tqueryResolveBuffer = this.device.createBuffer(\n\t\t\t\t\t{\n\t\t\t\t\t\tsize: bufferSize,\n\t\t\t\t\t\tusage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tthis.occludedResolveCache.set( bufferSize, queryResolveBuffer );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst readBuffer = this.device.createBuffer(\n\t\t\t\t{\n\t\t\t\t\tsize: bufferSize,\n\t\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// two buffers required here - WebGPU doesn't allow usage of QUERY_RESOLVE & MAP_READ to be combined\n\t\t\trenderContextData.encoder.resolveQuerySet( renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0 );\n\t\t\trenderContextData.encoder.copyBufferToBuffer( queryResolveBuffer, 0, readBuffer, 0, bufferSize );\n\n\t\t\trenderContextData.occlusionQueryBuffer = readBuffer;\n\n\t\t\t//\n\n\t\t\tthis.resolveOccludedAsync( renderContext );\n\n\t\t}\n\n\t\tthis.device.queue.submit( [ renderContextData.encoder.finish() ] );\n\n\n\t\t//\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst textures = renderContext.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tif ( texture.generateMipmaps === true ) {\n\n\t\t\t\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the given 3D object is fully occluded by other\n\t * 3D objects in the scene.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object is fully occluded or not.\n\t */\n\tisOccluded( renderContext, object ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\treturn renderContextData.occluded && renderContextData.occluded.has( object );\n\n\t}\n\n\t/**\n\t * This method processes the result of occlusion queries and writes it\n\t * into render context data.\n\t *\n\t * @async\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {Promise} A Promise that resolves when the occlusion query results have been processed.\n\t */\n\tasync resolveOccludedAsync( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t// handle occlusion query results\n\n\t\tconst { currentOcclusionQueryBuffer, currentOcclusionQueryObjects } = renderContextData;\n\n\t\tif ( currentOcclusionQueryBuffer && currentOcclusionQueryObjects ) {\n\n\t\t\tconst occluded = new WeakSet();\n\n\t\t\trenderContextData.currentOcclusionQueryObjects = null;\n\t\t\trenderContextData.currentOcclusionQueryBuffer = null;\n\n\t\t\tawait currentOcclusionQueryBuffer.mapAsync( GPUMapMode.READ );\n\n\t\t\tconst buffer = currentOcclusionQueryBuffer.getMappedRange();\n\t\t\tconst results = new BigUint64Array( buffer );\n\n\t\t\tfor ( let i = 0; i < currentOcclusionQueryObjects.length; i ++ ) {\n\n\t\t\t\tif ( results[ i ] === BigInt( 0 ) ) {\n\n\t\t\t\t\toccluded.add( currentOcclusionQueryObjects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentOcclusionQueryBuffer.destroy();\n\n\t\t\trenderContextData.occluded = occluded;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the viewport with the values from the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tupdateViewport( renderContext ) {\n\n\t\tconst { currentPass } = this.get( renderContext );\n\t\tconst { x, y, width, height, minDepth, maxDepth } = renderContext.viewportValue;\n\n\t\tcurrentPass.setViewport( x, y, width, height, minDepth, maxDepth );\n\n\t}\n\n\t/**\n\t * Returns the clear color and alpha into a single\n\t * color object.\n\t *\n\t * @return {Color4} The clear color.\n\t */\n\tgetClearColor() {\n\n\t\tconst clearColor = super.getClearColor();\n\n\t\t// only premultiply alpha when alphaMode is \"premultiplied\"\n\n\t\tif ( this.renderer.alpha === true ) {\n\n\t\t\tclearColor.r *= clearColor.a;\n\t\t\tclearColor.g *= clearColor.a;\n\t\t\tclearColor.b *= clearColor.a;\n\n\t\t}\n\n\t\treturn clearColor;\n\n\t}\n\n\t/**\n\t * Performs a clear operation.\n\t *\n\t * @param {boolean} color - Whether the color buffer should be cleared or not.\n\t * @param {boolean} depth - Whether the depth buffer should be cleared or not.\n\t * @param {boolean} stencil - Whether the stencil buffer should be cleared or not.\n\t * @param {?RenderContext} [renderTargetContext=null] - The render context of the current set render target.\n\t */\n\tclear( color, depth, stencil, renderTargetContext = null ) {\n\n\t\tconst device = this.device;\n\t\tconst renderer = this.renderer;\n\n\t\tlet colorAttachments = [];\n\t\tlet depthStencilAttachment;\n\t\tlet clearValue;\n\n\t\tlet supportsDepth;\n\t\tlet supportsStencil;\n\n\t\tif ( color ) {\n\n\t\t\tconst clearColor = this.getClearColor();\n\t\t\tclearValue = { r: clearColor.r, g: clearColor.g, b: clearColor.b, a: clearColor.a };\n\n\t\t}\n\n\t\tif ( renderTargetContext === null ) {\n\n\t\t\tsupportsDepth = renderer.depth;\n\t\t\tsupportsStencil = renderer.stencil;\n\n\t\t\tconst descriptor = this._getDefaultRenderPassDescriptor();\n\n\t\t\tif ( color ) {\n\n\t\t\t\tcolorAttachments = descriptor.colorAttachments;\n\n\t\t\t\tconst colorAttachment = colorAttachments[ 0 ];\n\n\t\t\t\tcolorAttachment.clearValue = clearValue;\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t\tif ( supportsDepth || supportsStencil ) {\n\n\t\t\t\tdepthStencilAttachment = descriptor.depthStencilAttachment;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tsupportsDepth = renderTargetContext.depth;\n\t\t\tsupportsStencil = renderTargetContext.stencil;\n\n\t\t\tconst clearConfig = {\n\t\t\t\tloadOp: color ? GPULoadOp.Clear : GPULoadOp.Load,\n\t\t\t\tclearValue: color ? clearValue : undefined\n\t\t\t};\n\n\t\t\tif ( supportsDepth ) {\n\n\t\t\t\tclearConfig.depthLoadOp = depth ? GPULoadOp.Clear : GPULoadOp.Load;\n\t\t\t\tclearConfig.depthClearValue = depth ? renderer.getClearDepth() : undefined;\n\t\t\t\tclearConfig.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t\tif ( supportsStencil ) {\n\n\t\t\t\tclearConfig.stencilLoadOp = stencil ? GPULoadOp.Clear : GPULoadOp.Load;\n\t\t\t\tclearConfig.stencilClearValue = stencil ? renderer.getClearStencil() : undefined;\n\t\t\t\tclearConfig.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t\tconst descriptor = this._getRenderPassDescriptor( renderTargetContext, clearConfig );\n\n\t\t\tcolorAttachments = descriptor.colorAttachments;\n\t\t\tdepthStencilAttachment = descriptor.depthStencilAttachment;\n\n\t\t}\n\n\t\tif ( supportsDepth && depthStencilAttachment && depthStencilAttachment.depthLoadOp === undefined ) {\n\n\t\t\tif ( depth ) {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.depthClearValue = renderer.getClearDepth();\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( supportsStencil && depthStencilAttachment && depthStencilAttachment.stencilLoadOp === undefined ) {\n\n\t\t\tif ( stencil ) {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.stencilClearValue = renderer.getClearStencil();\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst encoder = device.createCommandEncoder( { label: 'clear' } );\n\t\tconst currentPass = encoder.beginRenderPass( {\n\t\t\tcolorAttachments,\n\t\t\tdepthStencilAttachment\n\t\t} );\n\n\t\tcurrentPass.end();\n\n\t\tdevice.queue.submit( [ encoder.finish() ] );\n\n\t}\n\n\t// compute\n\n\t/**\n\t * This method is executed at the beginning of a compute call and\n\t * prepares the state for upcoming compute tasks.\n\t *\n\t * @param {Node|Array<Node>} computeGroup - The compute node(s).\n\t */\n\tbeginCompute( computeGroup ) {\n\n\t\tconst groupGPU = this.get( computeGroup );\n\n\n\t\tconst descriptor = {\n\t\t\tlabel: 'computeGroup_' + computeGroup.id\n\t\t};\n\n\t\tthis.initTimestampQuery( computeGroup, descriptor );\n\n\t\tgroupGPU.cmdEncoderGPU = this.device.createCommandEncoder( { label: 'computeGroup_' + computeGroup.id } );\n\n\t\tgroupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass( descriptor );\n\n\t}\n\n\t/**\n\t * Executes a compute command for the given compute node.\n\t *\n\t * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.\n\t * @param {Node} computeNode - The compute node.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t * @param {ComputePipeline} pipeline - The compute pipeline.\n\t */\n\tcompute( computeGroup, computeNode, bindings, pipeline ) {\n\n\t\tconst { passEncoderGPU } = this.get( computeGroup );\n\n\t\t// pipeline\n\n\t\tconst pipelineGPU = this.get( pipeline ).pipeline;\n\t\tpassEncoderGPU.setPipeline( pipelineGPU );\n\n\t\t// bind groups\n\n\t\tfor ( let i = 0, l = bindings.length; i < l; i ++ ) {\n\n\t\t\tconst bindGroup = bindings[ i ];\n\t\t\tconst bindingsData = this.get( bindGroup );\n\n\t\t\tpassEncoderGPU.setBindGroup( i, bindingsData.group );\n\n\t\t}\n\n\t\tconst maxComputeWorkgroupsPerDimension = this.device.limits.maxComputeWorkgroupsPerDimension;\n\n\t\tconst computeNodeData = this.get( computeNode );\n\n\t\tif ( computeNodeData.dispatchSize === undefined ) computeNodeData.dispatchSize = { x: 0, y: 1, z: 1 };\n\n\t\tconst { dispatchSize } = computeNodeData;\n\n\t\tif ( computeNode.dispatchCount > maxComputeWorkgroupsPerDimension ) {\n\n\t\t\tdispatchSize.x = Math.min( computeNode.dispatchCount, maxComputeWorkgroupsPerDimension );\n\t\t\tdispatchSize.y = Math.ceil( computeNode.dispatchCount / maxComputeWorkgroupsPerDimension );\n\n\t\t} else {\n\n\t\t\tdispatchSize.x = computeNode.dispatchCount;\n\n\t\t}\n\n\t\tpassEncoderGPU.dispatchWorkgroups(\n\t\t\tdispatchSize.x,\n\t\t\tdispatchSize.y,\n\t\t\tdispatchSize.z\n\t\t);\n\n\t}\n\n\t/**\n\t * This method is executed at the end of a compute call and\n\t * finalizes work after compute tasks.\n\t *\n\t * @param {Node|Array<Node>} computeGroup - The compute node(s).\n\t */\n\tfinishCompute( computeGroup ) {\n\n\t\tconst groupData = this.get( computeGroup );\n\n\t\tgroupData.passEncoderGPU.end();\n\n\t\tthis.device.queue.submit( [ groupData.cmdEncoderGPU.finish() ] );\n\n\t}\n\n\t/**\n\t * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,\n\t * the CPU waits for the GPU to complete its operation (e.g. a compute task).\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when synchronization has been finished.\n\t */\n\tasync waitForGPU() {\n\n\t\tawait this.device.queue.onSubmittedWorkDone();\n\n\t}\n\n\t// render object\n\n\t/**\n\t * Executes a draw command for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object to draw.\n\t * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.\n\t */\n\tdraw( renderObject, info ) {\n\n\t\tconst { object, material, context, pipeline } = renderObject;\n\t\tconst bindings = renderObject.getBindings();\n\t\tconst renderContextData = this.get( context );\n\t\tconst pipelineGPU = this.get( pipeline ).pipeline;\n\n\t\tconst index = renderObject.getIndex();\n\t\tconst hasIndex = ( index !== null );\n\n\n\t\tconst drawParams = renderObject.getDrawParameters();\n\t\tif ( drawParams === null ) return;\n\n\t\t// pipeline\n\n\t\tconst setPipelineAndBindings = ( passEncoderGPU, currentSets ) => {\n\n\t\t\t// pipeline\n\t\t\tpassEncoderGPU.setPipeline( pipelineGPU );\n\t\t\tcurrentSets.pipeline = pipelineGPU;\n\n\t\t\t// bind groups\n\t\t\tconst currentBindingGroups = currentSets.bindingGroups;\n\t\t\tfor ( let i = 0, l = bindings.length; i < l; i ++ ) {\n\n\t\t\t\tconst bindGroup = bindings[ i ];\n\t\t\t\tconst bindingsData = this.get( bindGroup );\n\t\t\t\tif ( currentBindingGroups[ bindGroup.index ] !== bindGroup.id ) {\n\n\t\t\t\t\tpassEncoderGPU.setBindGroup( bindGroup.index, bindingsData.group );\n\t\t\t\t\tcurrentBindingGroups[ bindGroup.index ] = bindGroup.id;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\t// index\n\n\t\t\tif ( hasIndex === true ) {\n\n\t\t\t\tif ( currentSets.index !== index ) {\n\n\t\t\t\t\tconst buffer = this.get( index ).buffer;\n\t\t\t\t\tconst indexFormat = ( index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\t\t\t\tpassEncoderGPU.setIndexBuffer( buffer, indexFormat );\n\n\t\t\t\t\tcurrentSets.index = index;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// vertex buffers\n\n\t\t\tconst vertexBuffers = renderObject.getVertexBuffers();\n\n\t\t\tfor ( let i = 0, l = vertexBuffers.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertexBuffer = vertexBuffers[ i ];\n\n\t\t\t\tif ( currentSets.attributes[ i ] !== vertexBuffer ) {\n\n\t\t\t\t\tconst buffer = this.get( vertexBuffer ).buffer;\n\t\t\t\t\tpassEncoderGPU.setVertexBuffer( i, buffer );\n\n\t\t\t\t\tcurrentSets.attributes[ i ] = vertexBuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// stencil\n\n\t\t\tif ( context.stencil === true && material.stencilWrite === true && renderContextData.currentStencilRef !== material.stencilRef ) {\n\n\t\t\t\tpassEncoderGPU.setStencilReference( material.stencilRef );\n\t\t\t\trenderContextData.currentStencilRef = material.stencilRef;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\t// Define draw function\n\t\tconst draw = ( passEncoderGPU, currentSets ) => {\n\n\t\t\tsetPipelineAndBindings( passEncoderGPU, currentSets );\n\n\t\t\tif ( object.isBatchedMesh === true ) {\n\n\t\t\t\tconst starts = object._multiDrawStarts;\n\t\t\t\tconst counts = object._multiDrawCounts;\n\t\t\t\tconst drawCount = object._multiDrawCount;\n\t\t\t\tconst drawInstances = object._multiDrawInstances;\n\n\t\t\t\tif ( drawInstances !== null ) {\n\n\t\t\t\t\t// @deprecated, r174\n\t\t\t\t\twarnOnce( 'THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.' );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < drawCount; i ++ ) {\n\n\t\t\t\t\tconst count = drawInstances ? drawInstances[ i ] : 1;\n\t\t\t\t\tconst firstInstance = count > 1 ? 0 : i;\n\n\t\t\t\t\tif ( hasIndex === true ) {\n\n\t\t\t\t\t\tpassEncoderGPU.drawIndexed( counts[ i ], count, starts[ i ] / index.array.BYTES_PER_ELEMENT, 0, firstInstance );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpassEncoderGPU.draw( counts[ i ], count, starts[ i ], firstInstance );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinfo.update( object, counts[ i ], count );\n\n\t\t\t\t}\n\n\t\t\t} else if ( hasIndex === true ) {\n\n\t\t\t\tconst { vertexCount: indexCount, instanceCount, firstVertex: firstIndex } = drawParams;\n\n\t\t\t\tconst indirect = renderObject.getIndirect();\n\n\t\t\t\tif ( indirect !== null ) {\n\n\t\t\t\t\tconst buffer = this.get( indirect ).buffer;\n\n\t\t\t\t\tpassEncoderGPU.drawIndexedIndirect( buffer, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpassEncoderGPU.drawIndexed( indexCount, instanceCount, firstIndex, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tinfo.update( object, indexCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\tconst { vertexCount, instanceCount, firstVertex } = drawParams;\n\n\t\t\t\tconst indirect = renderObject.getIndirect();\n\n\t\t\t\tif ( indirect !== null ) {\n\n\t\t\t\t\tconst buffer = this.get( indirect ).buffer;\n\n\t\t\t\t\tpassEncoderGPU.drawIndirect( buffer, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpassEncoderGPU.draw( vertexCount, instanceCount, firstVertex, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tinfo.update( object, vertexCount, instanceCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tif ( renderObject.camera.isArrayCamera && renderObject.camera.cameras.length > 0 ) {\n\n\t\t\tconst cameraData = this.get( renderObject.camera );\n\t\t\tconst cameras = renderObject.camera.cameras;\n\t\t\tconst cameraIndex = renderObject.getBindingGroup( 'cameraIndex' );\n\n\t\t\tif ( cameraData.indexesGPU === undefined || cameraData.indexesGPU.length !== cameras.length ) {\n\n\t\t\t\tconst bindingsData = this.get( cameraIndex );\n\t\t\t\tconst indexesGPU = [];\n\n\t\t\t\tconst data = new Uint32Array( [ 0, 0, 0, 0 ] );\n\n\t\t\t\tfor ( let i = 0, len = cameras.length; i < len; i ++ ) {\n\n\t\t\t\t\tdata[ 0 ] = i;\n\n\t\t\t\t\tconst bindGroupIndex = this.bindingUtils.createBindGroupIndex( data, bindingsData.layout );\n\n\t\t\t\t\tindexesGPU.push( bindGroupIndex );\n\n\t\t\t\t}\n\n\t\t\t\tcameraData.indexesGPU = indexesGPU; // TODO: Create a global library for this\n\n\t\t\t}\n\n\t\t\tconst pixelRatio = this.renderer.getPixelRatio();\n\n\t\t\tfor ( let i = 0, len = cameras.length; i < len; i ++ ) {\n\n\t\t\t\tconst subCamera = cameras[ i ];\n\n\t\t\t\tif ( object.layers.test( subCamera.layers ) ) {\n\n\t\t\t\t\tconst vp = subCamera.viewport;\n\n\n\n\t\t\t\t\tlet pass = renderContextData.currentPass;\n\t\t\t\t\tlet sets = renderContextData.currentSets;\n\t\t\t\t\tif ( renderContextData.bundleEncoders ) {\n\n\t\t\t\t\t\tconst bundleEncoder = renderContextData.bundleEncoders[ i ];\n\t\t\t\t\t\tconst bundleSets = renderContextData.bundleSets[ i ];\n\t\t\t\t\t\tpass = bundleEncoder;\n\t\t\t\t\t\tsets = bundleSets;\n\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\tif ( vp ) {\n\n\t\t\t\t\t\tpass.setViewport(\n\t\t\t\t\t\t\tMath.floor( vp.x * pixelRatio ),\n\t\t\t\t\t\t\tMath.floor( vp.y * pixelRatio ),\n\t\t\t\t\t\t\tMath.floor( vp.width * pixelRatio ),\n\t\t\t\t\t\t\tMath.floor( vp.height * pixelRatio ),\n\t\t\t\t\t\t\tcontext.viewportValue.minDepth,\n\t\t\t\t\t\t\tcontext.viewportValue.maxDepth\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// Set camera index binding for this layer\n\t\t\t\t\tif ( cameraIndex && cameraData.indexesGPU ) {\n\n\t\t\t\t\t\tpass.setBindGroup( cameraIndex.index, cameraData.indexesGPU[ i ] );\n\t\t\t\t\t\tsets.bindingGroups[ cameraIndex.index ] = cameraIndex.id;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdraw( pass, sets );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t  // Regular single camera rendering\n\t\t  if ( renderContextData.currentPass ) {\n\n\t\t\t\t// Handle occlusion queries\n\t\t\t\tif ( renderContextData.occlusionQuerySet !== undefined ) {\n\n\t\t\t\t\tconst lastObject = renderContextData.lastOcclusionObject;\n\t\t\t\t\tif ( lastObject !== object ) {\n\n\t\t\t\t\t\tif ( lastObject !== null && lastObject.occlusionTest === true ) {\n\n\t\t\t\t\t\t\trenderContextData.currentPass.endOcclusionQuery();\n\t\t\t\t\t\t\trenderContextData.occlusionQueryIndex ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( object.occlusionTest === true ) {\n\n\t\t\t\t\t\t\trenderContextData.currentPass.beginOcclusionQuery( renderContextData.occlusionQueryIndex );\n\t\t\t\t\t\t\trenderContextData.occlusionQueryObjects[ renderContextData.occlusionQueryIndex ] = object;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderContextData.lastOcclusionObject = object;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tdraw( renderContextData.currentPass, renderContextData.currentSets );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// cache key\n\n\t/**\n\t * Returns `true` if the render pipeline requires an update.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {boolean} Whether the render pipeline requires an update or not.\n\t */\n\tneedsRenderUpdate( renderObject ) {\n\n\t\tconst data = this.get( renderObject );\n\n\t\tconst { object, material } = renderObject;\n\n\t\tconst utils = this.utils;\n\n\t\tconst sampleCount = utils.getSampleCountRenderContext( renderObject.context );\n\t\tconst colorSpace = utils.getCurrentColorSpace( renderObject.context );\n\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\t\tconst primitiveTopology = utils.getPrimitiveTopology( object, material );\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( data.material !== material || data.materialVersion !== material.version ||\n\t\t\tdata.transparent !== material.transparent || data.blending !== material.blending || data.premultipliedAlpha !== material.premultipliedAlpha ||\n\t\t\tdata.blendSrc !== material.blendSrc || data.blendDst !== material.blendDst || data.blendEquation !== material.blendEquation ||\n\t\t\tdata.blendSrcAlpha !== material.blendSrcAlpha || data.blendDstAlpha !== material.blendDstAlpha || data.blendEquationAlpha !== material.blendEquationAlpha ||\n\t\t\tdata.colorWrite !== material.colorWrite || data.depthWrite !== material.depthWrite || data.depthTest !== material.depthTest || data.depthFunc !== material.depthFunc ||\n\t\t\tdata.stencilWrite !== material.stencilWrite || data.stencilFunc !== material.stencilFunc ||\n\t\t\tdata.stencilFail !== material.stencilFail || data.stencilZFail !== material.stencilZFail || data.stencilZPass !== material.stencilZPass ||\n\t\t\tdata.stencilFuncMask !== material.stencilFuncMask || data.stencilWriteMask !== material.stencilWriteMask ||\n\t\t\tdata.side !== material.side || data.alphaToCoverage !== material.alphaToCoverage ||\n\t\t\tdata.sampleCount !== sampleCount || data.colorSpace !== colorSpace ||\n\t\t\tdata.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat ||\n\t\t\tdata.primitiveTopology !== primitiveTopology ||\n\t\t\tdata.clippingContextCacheKey !== renderObject.clippingContextCacheKey\n\t\t) {\n\n\t\t\tdata.material = material; data.materialVersion = material.version;\n\t\t\tdata.transparent = material.transparent; data.blending = material.blending; data.premultipliedAlpha = material.premultipliedAlpha;\n\t\t\tdata.blendSrc = material.blendSrc; data.blendDst = material.blendDst; data.blendEquation = material.blendEquation;\n\t\t\tdata.blendSrcAlpha = material.blendSrcAlpha; data.blendDstAlpha = material.blendDstAlpha; data.blendEquationAlpha = material.blendEquationAlpha;\n\t\t\tdata.colorWrite = material.colorWrite;\n\t\t\tdata.depthWrite = material.depthWrite; data.depthTest = material.depthTest; data.depthFunc = material.depthFunc;\n\t\t\tdata.stencilWrite = material.stencilWrite; data.stencilFunc = material.stencilFunc;\n\t\t\tdata.stencilFail = material.stencilFail; data.stencilZFail = material.stencilZFail; data.stencilZPass = material.stencilZPass;\n\t\t\tdata.stencilFuncMask = material.stencilFuncMask; data.stencilWriteMask = material.stencilWriteMask;\n\t\t\tdata.side = material.side; data.alphaToCoverage = material.alphaToCoverage;\n\t\t\tdata.sampleCount = sampleCount;\n\t\t\tdata.colorSpace = colorSpace;\n\t\t\tdata.colorFormat = colorFormat;\n\t\t\tdata.depthStencilFormat = depthStencilFormat;\n\t\t\tdata.primitiveTopology = primitiveTopology;\n\t\t\tdata.clippingContextCacheKey = renderObject.clippingContextCacheKey;\n\n\t\t\tneedsUpdate = true;\n\n\t\t}\n\n\t\treturn needsUpdate;\n\n\t}\n\n\t/**\n\t * Returns a cache key that is used to identify render pipelines.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @return {string} The cache key.\n\t */\n\tgetRenderCacheKey( renderObject ) {\n\n\t\tconst { object, material } = renderObject;\n\n\t\tconst utils = this.utils;\n\t\tconst renderContext = renderObject.context;\n\n\t\treturn [\n\t\t\tmaterial.transparent, material.blending, material.premultipliedAlpha,\n\t\t\tmaterial.blendSrc, material.blendDst, material.blendEquation,\n\t\t\tmaterial.blendSrcAlpha, material.blendDstAlpha, material.blendEquationAlpha,\n\t\t\tmaterial.colorWrite,\n\t\t\tmaterial.depthWrite, material.depthTest, material.depthFunc,\n\t\t\tmaterial.stencilWrite, material.stencilFunc,\n\t\t\tmaterial.stencilFail, material.stencilZFail, material.stencilZPass,\n\t\t\tmaterial.stencilFuncMask, material.stencilWriteMask,\n\t\t\tmaterial.side,\n\t\t\tutils.getSampleCountRenderContext( renderContext ),\n\t\t\tutils.getCurrentColorSpace( renderContext ), utils.getCurrentColorFormat( renderContext ), utils.getCurrentDepthStencilFormat( renderContext ),\n\t\t\tutils.getPrimitiveTopology( object, material ),\n\t\t\trenderObject.getGeometryCacheKey(),\n\t\t\trenderObject.clippingContextCacheKey\n\t\t].join();\n\n\t}\n\n\t// textures\n\n\t/**\n\t * Creates a GPU sampler for the given texture.\n\t *\n\t * @param {Texture} texture - The texture to create the sampler for.\n\t */\n\tcreateSampler( texture ) {\n\n\t\tthis.textureUtils.createSampler( texture );\n\n\t}\n\n\t/**\n\t * Destroys the GPU sampler for the given texture.\n\t *\n\t * @param {Texture} texture - The texture to destroy the sampler for.\n\t */\n\tdestroySampler( texture ) {\n\n\t\tthis.textureUtils.destroySampler( texture );\n\n\t}\n\n\t/**\n\t * Creates a default texture for the given texture that can be used\n\t * as a placeholder until the actual texture is ready for usage.\n\t *\n\t * @param {Texture} texture - The texture to create a default texture for.\n\t */\n\tcreateDefaultTexture( texture ) {\n\n\t\tthis.textureUtils.createDefaultTexture( texture );\n\n\t}\n\n\t/**\n\t * Defines a texture on the GPU for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tcreateTexture( texture, options ) {\n\n\t\tthis.textureUtils.createTexture( texture, options );\n\n\t}\n\n\t/**\n\t * Uploads the updated texture data to the GPU.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tupdateTexture( texture, options ) {\n\n\t\tthis.textureUtils.updateTexture( texture, options );\n\n\t}\n\n\t/**\n\t * Generates mipmaps for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tgenerateMipmaps( texture ) {\n\n\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t}\n\n\t/**\n\t * Destroys the GPU data for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tdestroyTexture( texture ) {\n\n\t\tthis.textureUtils.destroyTexture( texture );\n\n\t}\n\n\t/**\n\t * Returns texture data as a typed array.\n\t *\n\t * @async\n\t * @param {Texture} texture - The texture to copy.\n\t * @param {number} x - The x coordinate of the copy origin.\n\t * @param {number} y - The y coordinate of the copy origin.\n\t * @param {number} width - The width of the copy.\n\t * @param {number} height - The height of the copy.\n\t * @param {number} faceIndex - The face index.\n\t * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.\n\t */\n\tasync copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\treturn this.textureUtils.copyTextureToBuffer( texture, x, y, width, height, faceIndex );\n\n\t}\n\n\t/**\n\t * Inits a time stamp query for the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Object} descriptor - The query descriptor.\n\t */\n\tinitTimestampQuery( renderContext, descriptor ) {\n\n\t\tif ( ! this.trackTimestamp ) return;\n\n\t\tconst type = renderContext.isComputeNode ? 'compute' : 'render';\n\n\t\tif ( ! this.timestampQueryPool[ type ] ) {\n\n\t\t\t// TODO: Variable maxQueries?\n\t\t\tthis.timestampQueryPool[ type ] = new WebGPUTimestampQueryPool( this.device, type, 2048 );\n\n\t\t}\n\n\t\tconst timestampQueryPool = this.timestampQueryPool[ type ];\n\n\t\tconst baseOffset = timestampQueryPool.allocateQueriesForContext( renderContext );\n\n\t\tdescriptor.timestampWrites = {\n\t\t\tquerySet: timestampQueryPool.querySet,\n\t\t\tbeginningOfPassWriteIndex: baseOffset,\n\t\t\tendOfPassWriteIndex: baseOffset + 1,\n\t\t  };\n\n\t}\n\n\n\t// node builder\n\n\t/**\n\t * Returns a node builder for the given render object.\n\t *\n\t * @param {RenderObject} object - The render object.\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {WGSLNodeBuilder} The node builder.\n\t */\n\tcreateNodeBuilder( object, renderer ) {\n\n\t\treturn new WGSLNodeBuilder( object, renderer );\n\n\t}\n\n\t// program\n\n\t/**\n\t * Creates a shader program from the given programmable stage.\n\t *\n\t * @param {ProgrammableStage} program - The programmable stage.\n\t */\n\tcreateProgram( program ) {\n\n\t\tconst programGPU = this.get( program );\n\n\t\tprogramGPU.module = {\n\t\t\tmodule: this.device.createShaderModule( { code: program.code, label: program.stage + ( program.name !== '' ? `_${ program.name }` : '' ) } ),\n\t\t\tentryPoint: 'main'\n\t\t};\n\n\t}\n\n\t/**\n\t * Destroys the shader program of the given programmable stage.\n\t *\n\t * @param {ProgrammableStage} program - The programmable stage.\n\t */\n\tdestroyProgram( program ) {\n\n\t\tthis.delete( program );\n\n\t}\n\n\t// pipelines\n\n\t/**\n\t * Creates a render pipeline for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n\t */\n\tcreateRenderPipeline( renderObject, promises ) {\n\n\t\tthis.pipelineUtils.createRenderPipeline( renderObject, promises );\n\n\t}\n\n\t/**\n\t * Creates a compute pipeline for the given compute node.\n\t *\n\t * @param {ComputePipeline} computePipeline - The compute pipeline.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t */\n\tcreateComputePipeline( computePipeline, bindings ) {\n\n\t\tthis.pipelineUtils.createComputePipeline( computePipeline, bindings );\n\n\t}\n\n\t/**\n\t * Prepares the state for encoding render bundles.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t */\n\tbeginBundle( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\trenderContextData._currentPass = renderContextData.currentPass;\n\t\trenderContextData._currentSets = renderContextData.currentSets;\n\n\t\trenderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };\n\t\trenderContextData.currentPass = this.pipelineUtils.createBundleEncoder( renderContext );\n\n\t}\n\n\t/**\n\t * After processing render bundles this method finalizes related work.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {RenderBundle} bundle - The render bundle.\n\t */\n\tfinishBundle( renderContext, bundle ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tconst bundleEncoder = renderContextData.currentPass;\n\t\tconst bundleGPU = bundleEncoder.finish();\n\n\t\tthis.get( bundle ).bundleGPU = bundleGPU;\n\n\t\t// restore render pass state\n\n\t\trenderContextData.currentSets = renderContextData._currentSets;\n\t\trenderContextData.currentPass = renderContextData._currentPass;\n\n\t}\n\n\t/**\n\t * Adds a render bundle to the render context data.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {RenderBundle} bundle - The render bundle to add.\n\t */\n\taddBundle( renderContext, bundle ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\trenderContextData.renderBundles.push( this.get( bundle ).bundleGPU );\n\n\t}\n\n\t// bindings\n\n\t/**\n\t * Creates bindings from the given bind group definition.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {Array<BindGroup>} bindings - Array of bind groups.\n\t * @param {number} cacheIndex - The cache index.\n\t * @param {number} version - The version.\n\t */\n\tcreateBindings( bindGroup, bindings, cacheIndex, version ) {\n\n\t\tthis.bindingUtils.createBindings( bindGroup, bindings, cacheIndex, version );\n\n\t}\n\n\t/**\n\t * Updates the given bind group definition.\n\t *\n\t * @param {BindGroup} bindGroup - The bind group.\n\t * @param {Array<BindGroup>} bindings - Array of bind groups.\n\t * @param {number} cacheIndex - The cache index.\n\t * @param {number} version - The version.\n\t */\n\tupdateBindings( bindGroup, bindings, cacheIndex, version ) {\n\n\t\tthis.bindingUtils.createBindings( bindGroup, bindings, cacheIndex, version );\n\n\t}\n\n\t/**\n\t * Updates a buffer binding.\n\t *\n\t *  @param {Buffer} binding - The buffer binding to update.\n\t */\n\tupdateBinding( binding ) {\n\n\t\tthis.bindingUtils.updateBinding( binding );\n\n\t}\n\n\t// attributes\n\n\t/**\n\t * Creates the buffer of an indexed shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The indexed buffer attribute.\n\t */\n\tcreateIndexAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\t/**\n\t * Creates the GPU buffer of a shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tcreateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\t/**\n\t * Creates the GPU buffer of a storage attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tcreateStorageAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\t/**\n\t * Creates the GPU buffer of an indirect storage attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute.\n\t */\n\tcreateIndirectStorageAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\t/**\n\t * Updates the GPU buffer of a shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute to update.\n\t */\n\tupdateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.updateAttribute( attribute );\n\n\t}\n\n\t/**\n\t * Destroys the GPU buffer of a shader attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute to destroy.\n\t */\n\tdestroyAttribute( attribute ) {\n\n\t\tthis.attributeUtils.destroyAttribute( attribute );\n\n\t}\n\n\t// canvas\n\n\t/**\n\t * Triggers an update of the default render pass descriptor.\n\t */\n\tupdateSize() {\n\n\t\tthis.colorBuffer = this.textureUtils.getColorBuffer();\n\t\tthis.defaultRenderPassdescriptor = null;\n\n\t}\n\n\t// utils public\n\n\t/**\n\t * Returns the maximum anisotropy texture filtering value.\n\t *\n\t * @return {number} The maximum anisotropy texture filtering value.\n\t */\n\tgetMaxAnisotropy() {\n\n\t\treturn 16;\n\n\t}\n\n\t/**\n\t * Checks if the given feature is supported  by the backend.\n\t *\n\t * @param {string} name - The feature's name.\n\t * @return {boolean} Whether the feature is supported or not.\n\t */\n\thasFeature( name ) {\n\n\t\treturn this.device.features.has( name );\n\n\t}\n\n\t/**\n\t * Copies data of the given source texture to the given destination texture.\n\t *\n\t * @param {Texture} srcTexture - The source texture.\n\t * @param {Texture} dstTexture - The destination texture.\n\t * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.\n\t * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.\n\t * @param {number} [srcLevel=0] - The mipmap level to copy.\n\t * @param {number} [dstLevel=0] - The destination mip level to copy to.\n\t */\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0 ) {\n\n\t\tlet dstX = 0;\n\t\tlet dstY = 0;\n\t\tlet dstZ = 0;\n\n\t\tlet srcX = 0;\n\t\tlet srcY = 0;\n\t\tlet srcZ = 0;\n\n\t\tlet srcWidth = srcTexture.image.width;\n\t\tlet srcHeight = srcTexture.image.height;\n\t\tlet srcDepth = 1;\n\n\n\t\tif ( srcRegion !== null ) {\n\n\t\t\tif ( srcRegion.isBox3 === true ) {\n\n\t\t\t\tsrcX = srcRegion.min.x;\n\t\t\t\tsrcY = srcRegion.min.y;\n\t\t\t\tsrcZ = srcRegion.min.z;\n\t\t\t\tsrcWidth = srcRegion.max.x - srcRegion.min.x;\n\t\t\t\tsrcHeight = srcRegion.max.y - srcRegion.min.y;\n\t\t\t\tsrcDepth = srcRegion.max.z - srcRegion.min.z;\n\n\t\t\t} else {\n\n\t\t\t\t// Assume it's a Box2\n\t\t\t\tsrcX = srcRegion.min.x;\n\t\t\t\tsrcY = srcRegion.min.y;\n\t\t\t\tsrcWidth = srcRegion.max.x - srcRegion.min.x;\n\t\t\t\tsrcHeight = srcRegion.max.y - srcRegion.min.y;\n\t\t\t\tsrcDepth = 1;\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tif ( dstPosition !== null ) {\n\n\t\t\tdstX = dstPosition.x;\n\t\t\tdstY = dstPosition.y;\n\t\t\tdstZ = dstPosition.z || 0;\n\n\t\t}\n\n\t\tconst encoder = this.device.createCommandEncoder( { label: 'copyTextureToTexture_' + srcTexture.id + '_' + dstTexture.id } );\n\n\t\tconst sourceGPU = this.get( srcTexture ).texture;\n\t\tconst destinationGPU = this.get( dstTexture ).texture;\n\n\t\tencoder.copyTextureToTexture(\n\t\t\t{\n\t\t\t\ttexture: sourceGPU,\n\t\t\t\tmipLevel: srcLevel,\n\t\t\t\torigin: { x: srcX, y: srcY, z: srcZ }\n\t\t\t},\n\t\t\t{\n\t\t\t\ttexture: destinationGPU,\n\t\t\t\tmipLevel: dstLevel,\n\t\t\t\torigin: { x: dstX, y: dstY, z: dstZ }\n\t\t\t},\n\t\t\t[\n\t\t\t\tsrcWidth,\n\t\t\t\tsrcHeight,\n\t\t\t\tsrcDepth\n\t\t\t]\n\t\t);\n\n\t\tthis.device.queue.submit( [ encoder.finish() ] );\n\n\t\tif ( dstLevel === 0 && dstTexture.generateMipmaps ) {\n\n\t\t\tthis.textureUtils.generateMipmaps( dstTexture );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Copies the current bound framebuffer to the given texture.\n\t *\n\t * @param {Texture} texture - The destination texture.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n\t */\n\tcopyFramebufferToTexture( texture, renderContext, rectangle ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tlet sourceGPU = null;\n\n\t\tif ( renderContext.renderTarget ) {\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\tsourceGPU = this.get( renderContext.depthTexture ).texture;\n\n\t\t\t} else {\n\n\t\t\t\tsourceGPU = this.get( renderContext.textures[ 0 ] ).texture;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\tsourceGPU = this.textureUtils.getDepthBuffer( renderContext.depth, renderContext.stencil );\n\n\t\t\t} else {\n\n\t\t\t\tsourceGPU = this.context.getCurrentTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst destinationGPU = this.get( texture ).texture;\n\n\t\tif ( sourceGPU.format !== destinationGPU.format ) {\n\n\t\t\tconsole.error( 'WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.', sourceGPU.format, destinationGPU.format );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet encoder;\n\n\t\tif ( renderContextData.currentPass ) {\n\n\t\t\trenderContextData.currentPass.end();\n\n\t\t\tencoder = renderContextData.encoder;\n\n\t\t} else {\n\n\t\t\tencoder = this.device.createCommandEncoder( { label: 'copyFramebufferToTexture_' + texture.id } );\n\n\t\t}\n\n\t\tencoder.copyTextureToTexture(\n\t\t\t{\n\t\t\t\ttexture: sourceGPU,\n\t\t\t\torigin: [ rectangle.x, rectangle.y, 0 ],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttexture: destinationGPU\n\t\t\t},\n\t\t\t[\n\t\t\t\trectangle.z,\n\t\t\t\trectangle.w\n\t\t\t]\n\t\t);\n\n\t\tif ( texture.generateMipmaps ) this.textureUtils.generateMipmaps( texture );\n\n\t\tif ( renderContextData.currentPass ) {\n\n\t\t\tconst { descriptor } = renderContextData;\n\n\t\t\tfor ( let i = 0; i < descriptor.colorAttachments.length; i ++ ) {\n\n\t\t\t\tdescriptor.colorAttachments[ i ].loadOp = GPULoadOp.Load;\n\n\t\t\t}\n\n\t\t\tif ( renderContext.depth ) descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\tif ( renderContext.stencil ) descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\n\t\t\trenderContextData.currentPass = encoder.beginRenderPass( descriptor );\n\t\t\trenderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };\n\n\t\t\tif ( renderContext.viewport ) {\n\n\t\t\t\tthis.updateViewport( renderContext );\n\n\t\t\t}\n\n\t\t\tif ( renderContext.scissor ) {\n\n\t\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\n\t\t\t\trenderContextData.currentPass.setScissorRect( x, y, width, height );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.device.queue.submit( [ encoder.finish() ] );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * A IES version of {@link SpotLight}. Can only be used with {@link WebGPURenderer}.\n *\n * @augments SpotLight\n */\nclass IESSpotLight extends SpotLight {\n\n\t/**\n\t * Constructs a new IES spot light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */\n\tconstructor( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tsuper( color, intensity, distance, angle, penumbra, decay );\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.iesMap = null;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.iesMap = source.iesMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This version of a node library represents the standard version\n * used in {@link WebGPURenderer}. It maps lights, tone mapping\n * techniques and materials to node-based implementations.\n *\n * @private\n * @augments NodeLibrary\n */\nclass StandardNodeLibrary extends NodeLibrary {\n\n\t/**\n\t * Constructs a new standard node library.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.addMaterial( MeshPhongNodeMaterial, 'MeshPhongMaterial' );\n\t\tthis.addMaterial( MeshStandardNodeMaterial, 'MeshStandardMaterial' );\n\t\tthis.addMaterial( MeshPhysicalNodeMaterial, 'MeshPhysicalMaterial' );\n\t\tthis.addMaterial( MeshToonNodeMaterial, 'MeshToonMaterial' );\n\t\tthis.addMaterial( MeshBasicNodeMaterial, 'MeshBasicMaterial' );\n\t\tthis.addMaterial( MeshLambertNodeMaterial, 'MeshLambertMaterial' );\n\t\tthis.addMaterial( MeshNormalNodeMaterial, 'MeshNormalMaterial' );\n\t\tthis.addMaterial( MeshMatcapNodeMaterial, 'MeshMatcapMaterial' );\n\t\tthis.addMaterial( LineBasicNodeMaterial, 'LineBasicMaterial' );\n\t\tthis.addMaterial( LineDashedNodeMaterial, 'LineDashedMaterial' );\n\t\tthis.addMaterial( PointsNodeMaterial, 'PointsMaterial' );\n\t\tthis.addMaterial( SpriteNodeMaterial, 'SpriteMaterial' );\n\t\tthis.addMaterial( ShadowNodeMaterial, 'ShadowMaterial' );\n\n\t\tthis.addLight( PointLightNode, PointLight );\n\t\tthis.addLight( DirectionalLightNode, DirectionalLight );\n\t\tthis.addLight( RectAreaLightNode, RectAreaLight );\n\t\tthis.addLight( SpotLightNode, SpotLight );\n\t\tthis.addLight( AmbientLightNode, AmbientLight );\n\t\tthis.addLight( HemisphereLightNode, HemisphereLight );\n\t\tthis.addLight( LightProbeNode, LightProbe );\n\t\tthis.addLight( IESSpotLightNode, IESSpotLight );\n\n\t\tthis.addToneMapping( linearToneMapping, LinearToneMapping );\n\t\tthis.addToneMapping( reinhardToneMapping, ReinhardToneMapping );\n\t\tthis.addToneMapping( cineonToneMapping, CineonToneMapping );\n\t\tthis.addToneMapping( acesFilmicToneMapping, ACESFilmicToneMapping );\n\t\tthis.addToneMapping( agxToneMapping, AgXToneMapping );\n\t\tthis.addToneMapping( neutralToneMapping, NeutralToneMapping );\n\n\t}\n\n}\n\n/*\nconst debugHandler = {\n\n\tget: function ( target, name ) {\n\n\t\t// Add |update\n\t\tif ( /^(create|destroy)/.test( name ) ) console.log( 'WebGPUBackend.' + name );\n\n\t\treturn target[ name ];\n\n\t}\n\n};\n*/\n\n/**\n * This renderer is the new alternative of `WebGLRenderer`. `WebGPURenderer` has the ability\n * to target different backends. By default, the renderer tries to use a WebGPU backend if the\n * browser supports WebGPU. If not, `WebGPURenderer` falls backs to a WebGL 2 backend.\n *\n * @augments Renderer\n */\nclass WebGPURenderer extends Renderer {\n\n\t/**\n\t * WebGPURenderer options.\n\t *\n\t * @typedef {Object} WebGPURenderer~Options\n\t * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.\n\t * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.\n\t * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.\n\t * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.\n\t * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.\n\t * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.\n\t * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.\n\t * @property {boolean} [multiview=false] - If set to `true`, the renderer will use multiview during WebXR rendering if supported.\n\t * @property {number} [outputType=undefined] - Texture type for output to canvas. By default, device's preferred format is used; other formats may incur overhead.\n\t * @property {number} [colorBufferType=HalfFloatType] - Defines the type of color buffers. The default `HalfFloatType` is recommend for best\n\t * quality. To save memory and bandwidth, `UnsignedByteType` might be used. This will reduce rendering quality though.\n\t */\n\n\t/**\n\t * Constructs a new WebGPU renderer.\n\t *\n\t * @param {WebGPURenderer~Options} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\tlet BackendClass;\n\n\t\tif ( parameters.forceWebGL ) {\n\n\t\t\tBackendClass = WebGLBackend;\n\n\t\t} else {\n\n\t\t\tBackendClass = WebGPUBackend;\n\n\t\t\tparameters.getFallback = () => {\n\n\t\t\t\tconsole.warn( 'THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.' );\n\n\t\t\t\treturn new WebGLBackend( parameters );\n\n\t\t\t};\n\n\t\t}\n\n\t\tconst backend = new BackendClass( parameters );\n\n\t\t//super( new Proxy( backend, debugHandler ) );\n\t\tsuper( backend, parameters );\n\n\t\t/**\n\t\t * The generic default value is overwritten with the\n\t\t * standard node library for type mapping.\n\t\t *\n\t\t * @type {StandardNodeLibrary}\n\t\t */\n\t\tthis.library = new StandardNodeLibrary();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGPURenderer = true;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * A specialized group which enables applications access to the\n * Render Bundle API of WebGPU. The group with all its descendant nodes\n * are considered as one render bundle and processed as such by\n * the renderer.\n *\n * This module is only fully supported by `WebGPURenderer` with a WebGPU backend.\n * With a WebGL backend, the group can technically be rendered but without\n * any performance improvements.\n *\n * @augments Group\n */\nclass BundleGroup extends Group {\n\n\t/**\n\t * Constructs a new bundle group.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBundleGroup = true;\n\n\t\t/**\n\t\t * This property is only relevant for detecting types\n\t\t * during serialization/deserialization. It should always\n\t\t * match the class name.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t * @default 'BundleGroup'\n\t\t */\n\t\tthis.type = 'BundleGroup';\n\n\t\t/**\n\t\t * Whether the bundle is static or not. When set to `true`, the structure\n\t\t * is assumed to be static and does not change. E.g. no new objects are\n\t\t * added to the group\n\t\t *\n\t\t * If a change is required, an update can still be forced by setting the\n\t\t * `needsUpdate` flag to `true`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.static = true;\n\n\t\t/**\n\t\t * The bundle group's version.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * Set this property to `true` when the bundle group has changed.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\n/**\n * This module is responsible to manage the post processing setups in apps.\n * You usually create a single instance of this class and use it to define\n * the output of your post processing effect chain.\n * ```js\n * const postProcessing = new PostProcessing( renderer );\n *\n * const scenePass = pass( scene, camera );\n *\n * postProcessing.outputNode = scenePass;\n * ```\n *\n * Note: This module can only be used with `WebGPURenderer`.\n */\nclass PostProcessing {\n\n\t/**\n\t * Constructs a new post processing management module.\n\t *\n\t * @param {Renderer} renderer - A reference to the renderer.\n\t * @param {Node<vec4>} outputNode - An optional output node.\n\t */\n\tconstructor( renderer, outputNode = vec4( 0, 0, 1, 1 ) ) {\n\n\t\t/**\n\t\t * A reference to the renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * A node which defines the final output of the post\n\t\t * processing. This is usually the last node in a chain\n\t\t * of effect nodes.\n\t\t *\n\t\t * @type {Node<vec4>}\n\t\t */\n\t\tthis.outputNode = outputNode;\n\n\t\t/**\n\t\t * Whether the default output tone mapping and color\n\t\t * space transformation should be enabled or not.\n\t\t *\n\t\t * It is enabled by default by it must be disabled when\n\t\t * effects must be executed after tone mapping and color\n\t\t * space conversion. A typical example is FXAA which\n\t\t * requires sRGB input.\n\t\t *\n\t\t * When set to `false`, the app must control the output\n\t\t * transformation with `RenderOutputNode`.\n\t\t *\n\t\t * ```js\n\t\t * const outputPass = renderOutput( scenePass );\n\t\t * ```\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.outputColorTransform = true;\n\n\t\t/**\n\t\t * Must be set to `true` when the output node changes.\n\t\t *\n\t\t * @type {Node<vec4>}\n\t\t */\n\t\tthis.needsUpdate = true;\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.name = 'PostProcessing';\n\n\t\t/**\n\t\t * The full screen quad that is used to render\n\t\t * the effects.\n\t\t *\n\t\t * @private\n\t\t * @type {QuadMesh}\n\t\t */\n\t\tthis._quadMesh = new QuadMesh( material );\n\n\t}\n\n\t/**\n\t * When `PostProcessing` is used to apply post processing effects,\n\t * the application must use this version of `render()` inside\n\t * its animation loop (not the one from the renderer).\n\t */\n\trender() {\n\n\t\tthis._update();\n\n\t\tconst renderer = this.renderer;\n\n\t\tconst toneMapping = renderer.toneMapping;\n\t\tconst outputColorSpace = renderer.outputColorSpace;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputColorSpace = LinearSRGBColorSpace;\n\n\t\t//\n\n\t\tconst currentXR = renderer.xr.enabled;\n\t\trenderer.xr.enabled = false;\n\n\t\tthis._quadMesh.render( renderer );\n\n\t\trenderer.xr.enabled = currentXR;\n\n\t\t//\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputColorSpace = outputColorSpace;\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tthis._quadMesh.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the state of the module.\n\t *\n\t * @private\n\t */\n\t_update() {\n\n\t\tif ( this.needsUpdate === true ) {\n\n\t\t\tconst renderer = this.renderer;\n\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\tconst outputColorSpace = renderer.outputColorSpace;\n\n\t\t\tthis._quadMesh.material.fragmentNode = this.outputColorTransform === true ? renderOutput( this.outputNode, toneMapping, outputColorSpace ) : this.outputNode.context( { toneMapping, outputColorSpace } );\n\t\t\tthis._quadMesh.material.needsUpdate = true;\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * When `PostProcessing` is used to apply post processing effects,\n\t * the application must use this version of `renderAsync()` inside\n\t * its animation loop (not the one from the renderer).\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when the render has been finished.\n\t */\n\tasync renderAsync() {\n\n\t\tthis._update();\n\n\t\tconst renderer = this.renderer;\n\n\t\tconst toneMapping = renderer.toneMapping;\n\t\tconst outputColorSpace = renderer.outputColorSpace;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputColorSpace = LinearSRGBColorSpace;\n\n\t\t//\n\n\t\tconst currentXR = renderer.xr.enabled;\n\t\trenderer.xr.enabled = false;\n\n\t\tawait this._quadMesh.renderAsync( renderer );\n\n\t\trenderer.xr.enabled = currentXR;\n\n\t\t//\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputColorSpace = outputColorSpace;\n\n\t}\n\n}\n\n/**\n * This special type of texture is intended for compute shaders.\n * It can be used to compute the data of a texture with a compute shader.\n *\n * Note: This type of texture can only be used with `WebGPURenderer`\n * and a WebGPU backend.\n *\n * @augments Texture\n */\nclass StorageTexture extends Texture {\n\n\t/**\n\t * Constructs a new storage texture.\n\t *\n\t * @param {number} [width=1] - The storage texture's width.\n\t * @param {number} [height=1] - The storage texture's height.\n\t */\n\tconstructor( width = 1, height = 1 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The image object which just represents the texture's dimension.\n\t\t *\n\t\t * @type {{width: number, height: number}}\n\t\t */\n\t\tthis.image = { width, height };\n\n\t\t/**\n\t\t * The default `magFilter` for storage textures is `THREE.LinearFilter`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.magFilter = LinearFilter;\n\n\t\t/**\n\t\t * The default `minFilter` for storage textures is `THREE.LinearFilter`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.minFilter = LinearFilter;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageTexture = true;\n\n\t}\n\n}\n\n/**\n * This special type of buffer attribute is intended for compute shaders.\n * It can be used to encode draw parameters for indirect draw calls.\n *\n * Note: This type of buffer attribute can only be used with `WebGPURenderer`\n * and a WebGPU backend.\n *\n * @augments StorageBufferAttribute\n */\nclass IndirectStorageBufferAttribute extends StorageBufferAttribute {\n\n\t/**\n\t * Constructs a new storage buffer attribute.\n\t *\n\t * @param {number|Uint32Array} count - The item count. It is also valid to pass a `Uint32Array` as an argument.\n\t * The subsequent parameter is then obsolete.\n\t * @param {number} itemSize - The item size.\n\t */\n\tconstructor( count, itemSize ) {\n\n\t\tsuper( count, itemSize, Uint32Array );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isIndirectStorageBufferAttribute = true;\n\n\t}\n\n}\n\n/**\n * A loader for loading node objects in the three.js JSON Object/Scene format.\n *\n * @augments Loader\n */\nclass NodeLoader extends Loader {\n\n\t/**\n\t * Constructs a new node loader.\n\t *\n\t * @param {LoadingManager} [manager] - A reference to a loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * Represents a dictionary of textures.\n\t\t *\n\t\t * @type {Object<string,Texture>}\n\t\t */\n\t\tthis.textures = {};\n\n\t\t/**\n\t\t * Represents a dictionary of node types.\n\t\t *\n\t\t * @type {Object<string,Node.constructor>}\n\t\t */\n\t\tthis.nodes = {};\n\n\t}\n\n\t/**\n\t * Loads the node definitions from the given URL.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {Function} onLoad - Will be called when load completes.\n\t * @param {Function} onProgress - Will be called while load progresses.\n\t * @param {Function} onError - Will be called when errors are thrown during the loading process.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, ( text ) => {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( this.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parse the node dependencies for the loaded node.\n\t *\n\t * @param {Array<Object>} [json] - The JSON definition\n\t * @return {Object<string,Node>} A dictionary with node dependencies.\n\t */\n\tparseNodes( json ) {\n\n\t\tconst nodes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( const nodeJSON of json ) {\n\n\t\t\t\tconst { uuid, type } = nodeJSON;\n\n\t\t\t\tnodes[ uuid ] = this.createNodeFromType( type );\n\t\t\t\tnodes[ uuid ].uuid = uuid;\n\n\t\t\t}\n\n\t\t\tconst meta = { nodes, textures: this.textures };\n\n\t\t\tfor ( const nodeJSON of json ) {\n\n\t\t\t\tnodeJSON.meta = meta;\n\n\t\t\t\tconst node = nodes[ nodeJSON.uuid ];\n\t\t\t\tnode.deserialize( nodeJSON );\n\n\t\t\t\tdelete nodeJSON.meta;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodes;\n\n\t}\n\n\t/**\n\t * Parses the node from the given JSON.\n\t *\n\t * @param {Object} json - The JSON definition\n\t * @param {string} json.type - The node type.\n\t * @param {string} json.uuid - The node UUID.\n\t * @param {Array<Object>} [json.nodes] - The node dependencies.\n\t * @param {Object} [json.meta] - The meta data.\n\t * @return {Node} The parsed node.\n\t */\n\tparse( json ) {\n\n\t\tconst node = this.createNodeFromType( json.type );\n\t\tnode.uuid = json.uuid;\n\n\t\tconst nodes = this.parseNodes( json.nodes );\n\t\tconst meta = { nodes, textures: this.textures };\n\n\t\tjson.meta = meta;\n\n\t\tnode.deserialize( json );\n\n\t\tdelete json.meta;\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of textures.\n\t *\n\t * @param {Object<string,Texture>} value - The texture library defines as `<uuid,texture>`.\n\t * @return {NodeLoader} A reference to this loader.\n\t */\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of node types.\n\t *\n\t * @param {Object<string,Node.constructor>} value - The node library defined as `<classname,class>`.\n\t * @return {NodeLoader} A reference to this loader.\n\t */\n\tsetNodes( value ) {\n\n\t\tthis.nodes = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a node object from the given type.\n\t *\n\t * @param {string} type - The node type.\n\t * @return {Node} The created node instance.\n\t */\n\tcreateNodeFromType( type ) {\n\n\t\tif ( this.nodes[ type ] === undefined ) {\n\n\t\t\tconsole.error( 'THREE.NodeLoader: Node type not found:', type );\n\t\t\treturn float();\n\n\t\t}\n\n\t\treturn nodeObject( new this.nodes[ type ]() );\n\n\t}\n\n}\n\n/**\n * A special type of material loader for loading node materials.\n *\n * @augments MaterialLoader\n */\nclass NodeMaterialLoader extends MaterialLoader {\n\n\t/**\n\t * Constructs a new node material loader.\n\t *\n\t * @param {LoadingManager} [manager] - A reference to a loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * Represents a dictionary of node types.\n\t\t *\n\t\t * @type {Object<string,Node.constructor>}\n\t\t */\n\t\tthis.nodes = {};\n\n\t\t/**\n\t\t * Represents a dictionary of node material types.\n\t\t *\n\t\t * @type {Object<string,NodeMaterial.constructor>}\n\t\t */\n\t\tthis.nodeMaterials = {};\n\n\t}\n\n\t/**\n\t * Parses the node material from the given JSON.\n\t *\n\t * @param {Object} json - The JSON definition\n\t * @return {NodeMaterial}. The parsed material.\n\t */\n\tparse( json ) {\n\n\t\tconst material = super.parse( json );\n\n\t\tconst nodes = this.nodes;\n\t\tconst inputNodes = json.inputNodes;\n\n\t\tfor ( const property in inputNodes ) {\n\n\t\t\tconst uuid = inputNodes[ property ];\n\n\t\t\tmaterial[ property ] = nodes[ uuid ];\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of node types.\n\t *\n\t * @param {Object<string,Node.constructor>} value - The node library defined as `<classname,class>`.\n\t * @return {NodeLoader} A reference to this loader.\n\t */\n\tsetNodes( value ) {\n\n\t\tthis.nodes = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of node material types.\n\t *\n\t * @param {Object<string,NodeMaterial.constructor>} value - The node material library defined as `<classname,class>`.\n\t * @return {NodeLoader} A reference to this loader.\n\t */\n\tsetNodeMaterials( value ) {\n\n\t\tthis.nodeMaterials = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a node material from the given type.\n\t *\n\t * @param {string} type - The node material type.\n\t * @return {Node} The created node material instance.\n\t */\n\tcreateMaterialFromType( type ) {\n\n\t\tconst materialClass = this.nodeMaterials[ type ];\n\n\t\tif ( materialClass !== undefined ) {\n\n\t\t\treturn new materialClass();\n\n\t\t}\n\n\t\treturn super.createMaterialFromType( type );\n\n\t}\n\n}\n\n/**\n * A special type of object loader for loading 3D objects using\n * node materials.\n *\n * @augments ObjectLoader\n */\nclass NodeObjectLoader extends ObjectLoader {\n\n\t/**\n\t * Constructs a new node object loader.\n\t *\n\t * @param {LoadingManager} [manager] - A reference to a loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * Represents a dictionary of node types.\n\t\t *\n\t\t * @type {Object<string,Node.constructor>}\n\t\t */\n\t\tthis.nodes = {};\n\n\t\t/**\n\t\t * Represents a dictionary of node material types.\n\t\t *\n\t\t * @type {Object<string,NodeMaterial.constructor>}\n\t\t */\n\t\tthis.nodeMaterials = {};\n\n\t\t/**\n\t\t * A reference to hold the `nodes` JSON property.\n\t\t *\n\t\t * @private\n\t\t * @type {?Object[]}\n\t\t */\n\t\tthis._nodesJSON = null;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of node types.\n\t *\n\t * @param {Object<string,Node.constructor>} value - The node library defined as `<classname,class>`.\n\t * @return {NodeObjectLoader} A reference to this loader.\n\t */\n\tsetNodes( value ) {\n\n\t\tthis.nodes = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of node material types.\n\t *\n\t * @param {Object<string,NodeMaterial.constructor>} value - The node material library defined as `<classname,class>`.\n\t * @return {NodeObjectLoader} A reference to this loader.\n\t */\n\tsetNodeMaterials( value ) {\n\n\t\tthis.nodeMaterials = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses the node objects from the given JSON.\n\t *\n\t * @param {Object} json - The JSON definition\n\t * @param {Function} onLoad - The onLoad callback function.\n\t * @return {Object3D}. The parsed 3D object.\n\t */\n\tparse( json, onLoad ) {\n\n\t\tthis._nodesJSON = json.nodes;\n\n\t\tconst data = super.parse( json, onLoad );\n\n\t\tthis._nodesJSON = null; // dispose\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Parses the node objects from the given JSON and textures.\n\t *\n\t * @param {Object[]} json - The JSON definition\n\t * @param {Object<string,Texture>} textures - The texture library.\n\t * @return {Object<string,Node>}. The parsed nodes.\n\t */\n\tparseNodes( json, textures ) {\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new NodeLoader();\n\t\t\tloader.setNodes( this.nodes );\n\t\t\tloader.setTextures( textures );\n\n\t\t\treturn loader.parseNodes( json );\n\n\t\t}\n\n\t\treturn {};\n\n\t}\n\n\t/**\n\t * Parses the node objects from the given JSON and textures.\n\t *\n\t * @param {Object} json - The JSON definition\n\t * @param {Object<string,Texture>} textures - The texture library.\n\t * @return {Object<string,NodeMaterial>}. The parsed materials.\n\t */\n\tparseMaterials( json, textures ) {\n\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst nodes = this.parseNodes( this._nodesJSON, textures );\n\n\t\t\tconst loader = new NodeMaterialLoader();\n\t\t\tloader.setTextures( textures );\n\t\t\tloader.setNodes( nodes );\n\t\t\tloader.setNodeMaterials( this.nodeMaterials );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n}\n\n/**\n * In earlier three.js versions, clipping was defined globally\n * on the renderer or on material level. This special version of\n * `THREE.Group` allows to encode the clipping state into the scene\n * graph. Meaning if you create an instance of this group, all\n * descendant 3D objects will be affected by the respective clipping\n * planes.\n *\n * Note: `ClippingGroup` can only be used with `WebGPURenderer`.\n *\n * @augments Group\n */\nclass ClippingGroup extends Group {\n\n\t/**\n\t * Constructs a new clipping group.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isClippingGroup = true;\n\n\t\t/**\n\t\t * An array with clipping planes.\n\t\t *\n\t\t * @type {Array<Plane>}\n\t\t */\n\t\tthis.clippingPlanes = [];\n\n\t\t/**\n\t\t * Whether clipping should be enabled or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * Whether the intersection of the clipping planes is used to clip objects, rather than their union.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipIntersection = false;\n\n\t\t/**\n\t\t * Whether shadows should be clipped or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipShadows = false;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AONode, AddEquation, AddOperation, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightNode, AnalyticLightNode, ArrayCamera, ArrayElementNode, ArrayNode, AssignNode, AttributeNode, BackSide, BasicEnvironmentNode, BasicShadowMap, BatchNode, BoxGeometry, BufferAttribute, BufferAttributeNode, BufferGeometry, BufferNode, BumpMapNode, BundleGroup, BypassNode, ByteType, CacheNode, Camera, CineonToneMapping, ClampToEdgeWrapping, ClippingGroup, CodeNode, Color, ColorManagement, ColorSpaceNode, ComputeNode, ConstNode, ContextNode, ConvertNode, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureNode, CubeUVReflectionMapping, CullFaceBack, CullFaceFront, CullFaceNone, CustomBlending, CylinderGeometry, DataArrayTexture, DataTexture, DebugNode, DecrementStencilOp, DecrementWrapStencilOp, DepthArrayTexture, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightNode, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicDrawUsage, EnvironmentNode, EqualCompare, EqualDepth, EqualStencilFunc, EquirectUVNode, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExpressionNode, FileLoader, Float16BufferAttribute, Float32BufferAttribute, FloatType, FramebufferTexture, FrontFacingNode, FrontSide, Frustum, FrustumArray, FunctionCallNode, FunctionNode, FunctionOverloadingNode, GLSLNodeParser, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, Group, HalfFloatType, HemisphereLight, HemisphereLightNode, IESSpotLight, IESSpotLightNode, IncrementStencilOp, IncrementWrapStencilOp, IndexNode, IndirectStorageBufferAttribute, InstanceNode, InstancedBufferAttribute, InstancedInterleavedBuffer, InstancedMeshNode, IntType, InterleavedBuffer, InterleavedBufferAttribute, InvertStencilOp, IrradianceNode, JoinNode, KeepStencilOp, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, LightProbe, LightProbeNode, Lighting, LightingContextNode, LightingModel, LightingNode, LightsNode, Line2NodeMaterial, LineBasicMaterial, LineBasicNodeMaterial, LineDashedMaterial, LineDashedNodeMaterial, LinearFilter, LinearMipMapLinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, Loader, LoopNode, MRTNode, MatcapUVNode, Material, MaterialLoader, MaterialNode, MaterialReferenceNode, MathUtils, Matrix2, Matrix3, Matrix4, MaxEquation, MaxMipLevelNode, MemberNode, Mesh, MeshBasicMaterial, MeshBasicNodeMaterial, MeshLambertMaterial, MeshLambertNodeMaterial, MeshMatcapMaterial, MeshMatcapNodeMaterial, MeshNormalMaterial, MeshNormalNodeMaterial, MeshPhongMaterial, MeshPhongNodeMaterial, MeshPhysicalMaterial, MeshPhysicalNodeMaterial, MeshSSSNodeMaterial, MeshStandardMaterial, MeshStandardNodeMaterial, MeshToonMaterial, MeshToonNodeMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, ModelNode, MorphNode, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, Node, NodeAccess, NodeAttribute, NodeBuilder, NodeCache, NodeCode, NodeFrame, NodeFunctionInput, NodeLoader, NodeMaterial, NodeMaterialLoader, NodeMaterialObserver, NodeObjectLoader, NodeShaderStage, NodeType, NodeUniform, NodeUpdateType, NodeUtils, NodeVar, NodeVarying, NormalBlending, NormalMapNode, NotEqualCompare, NotEqualDepth, NotEqualStencilFunc, Object3D, Object3DNode, ObjectLoader, ObjectSpaceNormalMap, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, OutputStructNode, PCFShadowMap, PMREMGenerator, PMREMNode, ParameterNode, PassNode, PerspectiveCamera, PhongLightingModel, PhysicalLightingModel, Plane, PlaneGeometry, PointLight, PointLightNode, PointUVNode, PointsMaterial, PointsNodeMaterial, PostProcessing, PosterizeNode, PropertyNode, QuadMesh, Quaternion, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGBIntegerFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RTTNode, RangeNode, RectAreaLight, RectAreaLightNode, RedFormat, RedIntegerFormat, ReferenceNode, ReflectorNode, ReinhardToneMapping, RemapNode, RenderOutputNode, RenderTarget, RenderTargetArray, RendererReferenceNode, RendererUtils, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RotateNode, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, Scene, SceneNode, ScreenNode, ScriptableNode, ScriptableValueNode, SetNode, ShadowBaseNode, ShadowMaterial, ShadowNode, ShadowNodeMaterial, ShortType, SkinningNode, Sphere, SphereGeometry, SplitNode, SpotLight, SpotLightNode, SpriteMaterial, SpriteNodeMaterial, SpriteSheetUVNode, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StackNode, StaticDrawUsage, StorageArrayElementNode, StorageBufferAttribute, StorageBufferNode, StorageInstancedBufferAttribute, StorageTexture, StorageTextureNode, StructNode, StructTypeNode, SubtractEquation, SubtractiveBlending, TSL, TangentSpaceNormalMap, TempNode, Texture, Texture3DNode, TextureNode, TextureSizeNode, ToneMappingNode, ToonOutlinePassNode, TriplanarTexturesNode, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, UniformArrayNode, UniformGroupNode, UniformNode, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, UserDataNode, VSMShadowMap, VarNode, VaryingNode, Vector2, Vector3, Vector4, VertexColorNode, ViewportDepthNode, ViewportDepthTextureNode, ViewportSharedTextureNode, ViewportTextureNode, VolumeNodeMaterial, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGPUCoordinateSystem, WebGPURenderer, WebXRController, ZeroFactor, ZeroStencilOp, createCanvasElement, defaultBuildStages, defaultShaderStages, shaderStages, vectorComponents };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}