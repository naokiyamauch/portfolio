{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///Users/naokiyamauchi/github/portfolio/components/ui/Globe.tsx"],"sourcesContent":["\"use client\";\nimport countries from \"@/data/globe.json\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, extend, useThree } from \"@react-three/fiber\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Color, Fog, PerspectiveCamera, Scene, Vector3 } from \"three\";\nimport ThreeGlobe from \"three-globe\";\ndeclare module \"@react-three/fiber\" {\n    interface ThreeElements {\n        threeGlobe: ThreeElements[\"mesh\"] & {\n            new(): ThreeGlobe;\n        };\n    }\n}\n\nextend({ ThreeGlobe: ThreeGlobe });\n\nconst RING_PROPAGATION_SPEED = 3;\nconst aspect = 1.2;\nconst cameraZ = 300;\n\ntype Position = {\n    order: number;\n    startLat: number;\n    startLng: number;\n    endLat: number;\n    endLng: number;\n    arcAlt: number;\n    color: string;\n};\n\nexport type GlobeConfig = {\n    pointSize?: number;\n    globeColor?: string;\n    showAtmosphere?: boolean;\n    atmosphereColor?: string;\n    atmosphereAltitude?: number;\n    emissive?: string;\n    emissiveIntensity?: number;\n    shininess?: number;\n    polygonColor?: string;\n    ambientLight?: string;\n    directionalLeftLight?: string;\n    directionalTopLight?: string;\n    pointLight?: string;\n    arcTime?: number;\n    arcLength?: number;\n    rings?: number;\n    maxRings?: number;\n    initialPosition?: {\n        lat: number;\n        lng: number;\n    };\n    autoRotate?: boolean;\n    autoRotateSpeed?: number;\n};\n\ninterface WorldProps {\n    globeConfig: GlobeConfig;\n    data: Position[];\n}\n\nlet numbersOfRings = [0];\n\nexport function Globe({ globeConfig, data }: WorldProps) {\n    const globeRef = useRef<ThreeGlobe | null>(null);\n    const groupRef = useRef();\n    const [isInitialized, setIsInitialized] = useState(false);\n\n    const defaultProps = {\n        pointSize: 1,\n        atmosphereColor: \"#ffffff\",\n        showAtmosphere: true,\n        atmosphereAltitude: 0.1,\n        polygonColor: \"rgba(255,255,255,0.7)\",\n        globeColor: \"#1d072e\",\n        emissive: \"#000000\",\n        emissiveIntensity: 0.1,\n        shininess: 0.9,\n        arcTime: 2000,\n        arcLength: 0.9,\n        rings: 1,\n        maxRings: 3,\n        ...globeConfig,\n    };\n\n    // Initialize globe only once\n    useEffect(() => {\n        if (!globeRef.current && groupRef.current) {\n            globeRef.current = new ThreeGlobe();\n            (groupRef.current as any).add(globeRef.current);\n            setIsInitialized(true);\n        }\n    }, []);\n\n    // Build material when globe is initialized or when relevant props change\n    useEffect(() => {\n        if (!globeRef.current || !isInitialized) return;\n\n        const globeMaterial = globeRef.current.globeMaterial() as unknown as {\n            color: Color;\n            emissive: Color;\n            emissiveIntensity: number;\n            shininess: number;\n        };\n        globeMaterial.color = new Color(globeConfig.globeColor);\n        globeMaterial.emissive = new Color(globeConfig.emissive);\n        globeMaterial.emissiveIntensity = globeConfig.emissiveIntensity || 0.1;\n        globeMaterial.shininess = globeConfig.shininess || 0.9;\n    }, [\n        isInitialized,\n        globeConfig.globeColor,\n        globeConfig.emissive,\n        globeConfig.emissiveIntensity,\n        globeConfig.shininess,\n    ]);\n\n    // Build data when globe is initialized or when data changes\n    useEffect(() => {\n        if (!globeRef.current || !isInitialized || !data) return;\n\n        const arcs = data;\n        let points = [];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const rgb = hexToRgb(arc.color) as { r: number; g: number; b: number };\n            points.push({\n                size: defaultProps.pointSize,\n                order: arc.order,\n                color: arc.color,\n                lat: arc.startLat,\n                lng: arc.startLng,\n            });\n            points.push({\n                size: defaultProps.pointSize,\n                order: arc.order,\n                color: arc.color,\n                lat: arc.endLat,\n                lng: arc.endLng,\n            });\n        }\n\n        // remove duplicates for same lat and lng\n        const filteredPoints = points.filter(\n            (v, i, a) =>\n                a.findIndex((v2) =>\n                    [\"lat\", \"lng\"].every(\n                        (k) => v2[k as \"lat\" | \"lng\"] === v[k as \"lat\" | \"lng\"],\n                    ),\n                ) === i,\n        );\n\n        globeRef.current\n            .hexPolygonsData(countries.features)\n            .hexPolygonResolution(3)\n            .hexPolygonMargin(0.7)\n            .showAtmosphere(defaultProps.showAtmosphere)\n            .atmosphereColor(defaultProps.atmosphereColor)\n            .atmosphereAltitude(defaultProps.atmosphereAltitude)\n            .hexPolygonColor(() => defaultProps.polygonColor);\n\n        globeRef.current\n            .arcsData(data)\n            .arcStartLat((d) => (d as { startLat: number }).startLat * 1)\n            .arcStartLng((d) => (d as { startLng: number }).startLng * 1)\n            .arcEndLat((d) => (d as { endLat: number }).endLat * 1)\n            .arcEndLng((d) => (d as { endLng: number }).endLng * 1)\n            .arcColor((e: any) => (e as { color: string }).color)\n            .arcAltitude((e) => (e as { arcAlt: number }).arcAlt * 1)\n            .arcStroke(() => [0.32, 0.28, 0.3][Math.round(Math.random() * 2)])\n            .arcDashLength(defaultProps.arcLength)\n            .arcDashInitialGap((e) => (e as { order: number }).order * 1)\n            .arcDashGap(15)\n            .arcDashAnimateTime(() => defaultProps.arcTime);\n\n        globeRef.current\n            .pointsData(filteredPoints)\n            .pointColor((e) => (e as { color: string }).color)\n            .pointsMerge(true)\n            .pointAltitude(0.0)\n            .pointRadius(2);\n\n        globeRef.current\n            .ringsData([])\n            .ringColor(() => defaultProps.polygonColor)\n            .ringMaxRadius(defaultProps.maxRings)\n            .ringPropagationSpeed(RING_PROPAGATION_SPEED)\n            .ringRepeatPeriod(\n                (defaultProps.arcTime * defaultProps.arcLength) / defaultProps.rings,\n            );\n    }, [\n        isInitialized,\n        data,\n        defaultProps.pointSize,\n        defaultProps.showAtmosphere,\n        defaultProps.atmosphereColor,\n        defaultProps.atmosphereAltitude,\n        defaultProps.polygonColor,\n        defaultProps.arcLength,\n        defaultProps.arcTime,\n        defaultProps.rings,\n        defaultProps.maxRings,\n    ]);\n\n    // Handle rings animation with cleanup\n    useEffect(() => {\n        if (!globeRef.current || !isInitialized || !data) return;\n\n        const interval = setInterval(() => {\n            if (!globeRef.current) return;\n\n            const newNumbersOfRings = genRandomNumbers(\n                0,\n                data.length,\n                Math.floor((data.length * 4) / 5),\n            );\n\n            const ringsData = data\n                .filter((d, i) => newNumbersOfRings.includes(i))\n                .map((d) => ({\n                    lat: d.startLat,\n                    lng: d.startLng,\n                    color: d.color,\n                }));\n\n            globeRef.current.ringsData(ringsData);\n        }, 2000);\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isInitialized, data]);\n\n    return <group ref={groupRef} />;\n}\n\nexport function WebGLRendererConfig() {\n    const { gl, size } = useThree();\n\n    useEffect(() => {\n        gl.setPixelRatio(window.devicePixelRatio);\n        gl.setSize(size.width, size.height);\n        gl.setClearColor(0xffaaff, 0);\n    }, []);\n\n    return null;\n}\n\nexport function World(props: WorldProps) {\n    const { globeConfig } = props;\n    const scene = new Scene();\n    scene.fog = new Fog(0xffffff, 400, 2000);\n    return (\n        <Canvas scene={scene} camera={new PerspectiveCamera(50, aspect, 180, 1800)}>\n            <WebGLRendererConfig />\n            <ambientLight color={globeConfig.ambientLight} intensity={0.6} />\n            <directionalLight\n                color={globeConfig.directionalLeftLight}\n                position={new Vector3(-400, 100, 400)}\n            />\n            <directionalLight\n                color={globeConfig.directionalTopLight}\n                position={new Vector3(-200, 500, 200)}\n            />\n            <pointLight\n                color={globeConfig.pointLight}\n                position={new Vector3(-200, 500, 200)}\n                intensity={0.8}\n            />\n            <Globe {...props} />\n            <OrbitControls\n                enablePan={false}\n                enableZoom={false}\n                minDistance={cameraZ}\n                maxDistance={cameraZ}\n                autoRotateSpeed={1}\n                autoRotate={true}\n                minPolarAngle={Math.PI / 3.5}\n                maxPolarAngle={Math.PI - Math.PI / 3}\n            />\n        </Canvas>\n    );\n}\n\nexport function hexToRgb(hex: string) {\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\n\nexport function genRandomNumbers(min: number, max: number, count: number) {\n    const arr = [];\n    while (arr.length < count) {\n        const r = Math.floor(Math.random() * (max - min)) + min;\n        if (arr.indexOf(r) === -1) arr.push(r);\n    }\n\n    return arr;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}